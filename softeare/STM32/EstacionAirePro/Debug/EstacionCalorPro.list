
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd34  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001100  0800ce48  0800ce48  0000de48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df48  0800df48  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800df48  0800df48  0000ef48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df50  0800df50  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800df50  0800df50  0000ef50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800df58  0800df58  0000ef58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800df60  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001d8  0800e138  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800e138  0000f588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d4d6  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000880d  00000000  00000000  0003c6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  00044ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e50  00000000  00000000  00047218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f38a  00000000  00000000  00049068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030a6a  00000000  00000000  000683f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5c0  00000000  00000000  00098e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013841c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008904  00000000  00000000  00138460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a73e  00000000  00000000  00140d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0014b4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ce2c 	.word	0x0800ce2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800ce2c 	.word	0x0800ce2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <_ZN15CManejadorBotonC1Ev+0x38>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	0800d004 	.word	0x0800d004

080010b8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <_ZN15CManejadorBotonD1Ev+0x1c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	0800d004 	.word	0x0800d004

080010d8 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe9 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80010e6:	2120      	movs	r1, #32
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f009 f81e 	bl	800a12a <_ZdlPvj>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	80fb      	strh	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	797a      	ldrb	r2, [r7, #5]
 800111e:	729a      	strb	r2, [r3, #10]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	891b      	ldrh	r3, [r3, #8]
 8001144:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f007 fa21 	bl	80085a0 <HAL_GPIO_Init>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	891b      	ldrh	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f007 fae9 	bl	8008750 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0

}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	61da      	str	r2, [r3, #28]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d058      	beq.n	8001266 <_ZN15CManejadorBoton7ProcesaEi+0xc4>
		return;
	if(gpio_pin!=Gpio_Pin)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d154      	bne.n	800126a <_ZN15CManejadorBoton7ProcesaEi+0xc8>
		return;
	int tiempoClick = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
	int estado = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	estado = Leer();
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffcc 	bl	8001166 <_ZN15CManejadorBoton4LeerEv>
 80011ce:	6138      	str	r0, [r7, #16]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80011d0:	f006 ffa6 	bl	8008120 <HAL_GetTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b63      	cmp	r3, #99	@ 0x63
 80011e2:	dd44      	ble.n	800126e <_ZN15CManejadorBoton7ProcesaEi+0xcc>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80011e4:	f006 ff9c 	bl	8008120 <HAL_GetTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11d      	bne.n	800123a <_ZN15CManejadorBoton7ProcesaEi+0x98>
	{
		Manejador->OnBotonSueltoEvent(Identificador);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69d8      	ldr	r0, [r3, #28]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3310      	adds	r3, #16
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	7a92      	ldrb	r2, [r2, #10]
 8001210:	4611      	mov	r1, r2
 8001212:	4798      	blx	r3
		tiempoClick = HAL_GetTick() - TiempoInicioClick;
 8001214:	f006 ff84 	bl	8008120 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
		Manejador->OnBotonClickEvent(Identificador, tiempoClick);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69d8      	ldr	r0, [r3, #28]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3308      	adds	r3, #8
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	7a92      	ldrb	r2, [r2, #10]
 8001234:	4611      	mov	r1, r2
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4798      	blx	r3
	}
	if (Estado == BOTON_PRESIONADO)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
	{
		TiempoInicioClick = HAL_GetTick();
 8001242:	f006 ff6d 	bl	8008120 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
		Manejador->OnBotonPresionadoEvent(Identificador);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69d8      	ldr	r0, [r3, #28]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	330c      	adds	r3, #12
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7a92      	ldrb	r2, [r2, #10]
 8001260:	4611      	mov	r1, r2
 8001262:	4798      	blx	r3
 8001264:	e004      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 8001266:	bf00      	nop
 8001268:	e002      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 800126e:	bf00      	nop
	}
}
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	0800d014 	.word	0x0800d014

08001298 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	0800d014 	.word	0x0800d014

080012b8 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
}
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffe9 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 80012c6:	2104      	movs	r1, #4
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f008 ff2e 	bl	800a12a <_ZdlPvj>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN22CManejadorEventosBoton17OnBotonClickEventEii>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]

}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <_ZN22CManejadorEventosBoton22OnBotonPresionadoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoEvent(int idBoton)
 {
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]

 }
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <_ZN22CManejadorEventosBoton18OnBotonSueltoEventEi>:
 void CManejadorEventosBoton::OnBotonSueltoEvent(int idBoton)
 {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]

 }
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <_ZN22CManejadorEventosBoton27OnBotonPresionadoLargoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoLargoEvent(int idBoton)
 {
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]

 }
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
	...

0800132c <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>

Calefactor::Calefactor()
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	4a05      	ldr	r2, [pc, #20]	@ (800134c <_ZN10CalefactorC1Ev+0x20>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	0800d034 	.word	0x0800d034

08001350 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <_ZN10CalefactorD1Ev+0x1c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	0800d034 	.word	0x0800d034

08001370 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
}
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe9 	bl	8001350 <_ZN10CalefactorD1Ev>
 800137e:	2110      	movs	r1, #16
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f008 fed2 	bl	800a12a <_ZdlPvj>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	811a      	strh	r2, [r3, #8]

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = Gpio_Pin;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 f8da 	bl	80085a0 <HAL_GPIO_Init>
	Apagar();
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f817 	bl	8001420 <_ZN10Calefactor6ApagarEv>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6858      	ldr	r0, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	891b      	ldrh	r3, [r3, #8]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	f007 f9a5 	bl	800875c <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6858      	ldr	r0, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	891b      	ldrh	r3, [r3, #8]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f007 f992 	bl	800875c <HAL_GPIO_WritePin>
	Estado=APAGADO;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	0800d044 	.word	0x0800d044

08001468 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	0800d044 	.word	0x0800d044

08001488 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
}
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe9 	bl	8001468 <_ZN20ControlVelocidadAireD1Ev>
 8001496:	2134      	movs	r1, #52	@ 0x34
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f008 fe46 	bl	800a12a <_ZdlPvj>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
	 ADC_ChannelConfTypeDef sConfig = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <_ZN20ControlVelocidadAire10InicializaEv+0xc8>)
 80014d8:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014f2:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.NbrOfConversion = 1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f006 ff66 	bl	80083dc <HAL_ADC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf14      	ite	ne
 8001516:	2301      	movne	r3, #1
 8001518:	2300      	moveq	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <_ZN20ControlVelocidadAire10InicializaEv+0x7e>
	 {
	 Error_Handler();
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f845 	bl	80015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800152e:	2307      	movs	r3, #7
 8001530:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fe0b 	bl	8008158 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <_ZN20ControlVelocidadAire10InicializaEv+0xb0>
	 {
	 Error_Handler();
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f82c 	bl	80015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f006 feb5 	bl	80082cc <HAL_ADC_Start>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40012400 	.word	0x40012400

08001574 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	4618      	mov	r0, r3
 8001582:	f006 fde5 	bl	8008150 <HAL_ADC_GetValue>
 8001586:	4603      	mov	r3, r0
 8001588:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2264      	movs	r2, #100	@ 0x64
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x38>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	441a      	add	r2, r3
 800159a:	12d2      	asrs	r2, r2, #11
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	3364      	adds	r3, #100	@ 0x64
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	80080081 	.word	0x80080081

080015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe52 	bl	8001278 <_ZN22CManejadorEventosBotonC1Ev>
 80015d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <_ZN8CEncoderC1Ev+0x44>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800d054 	.word	0x0800d054

0800160c <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4a05      	ldr	r2, [pc, #20]	@ (800162c <_ZN8CEncoderD1Ev+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe3b 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800d054 	.word	0x0800d054

08001630 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
}
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_ZN8CEncoderD1Ev>
 800163e:	214c      	movs	r1, #76	@ 0x4c
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f008 fd72 	bl	800a12a <_ZdlPvj>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8c3a      	ldrh	r2, [r7, #32]
 8001676:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001682:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 800168a:	2020      	movs	r0, #32
 800168c:	f008 fd4f 	bl	800a12e <_Znwj>
 8001690:	4603      	mov	r3, r0
 8001692:	461c      	mov	r4, r3
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fcf1 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd6e 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	69d8      	ldr	r0, [r3, #28]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8b1a      	ldrh	r2, [r3, #24]
 80016b8:	2303      	movs	r3, #3
 80016ba:	f7ff fd1d 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f807 	bl	80016d2 <_ZN8CEncoder6LeeClkEv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}

080016d2 <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f007 f833 	bl	8008750 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8a1b      	ldrh	r3, [r3, #16]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f007 f822 	bl	8008750 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <_ZN8CEncoder4InitEv+0x78>)
 8001736:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f107 0208 	add.w	r2, r7, #8
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f006 ff2a 	bl	80085a0 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8a1b      	ldrh	r3, [r3, #16]
 8001750:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f107 0208 	add.w	r2, r7, #8
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f006 ff1b 	bl	80085a0 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8b1b      	ldrh	r3, [r3, #24]
 800176e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f006 ff0c 	bl	80085a0 <HAL_GPIO_Init>
}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	10310000 	.word	0x10310000

08001794 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	621a      	str	r2, [r3, #32]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <_ZN8CEncoder18OnBotonSueltoEventEi>:

void CEncoder::OnBotonSueltoEvent(int idBoton)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <_ZN8CEncoder18OnBotonSueltoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d10c      	bne.n	80017e0 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderSueltoEvent(ID_Encoder);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a18      	ldr	r0, [r3, #32]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	331c      	adds	r3, #28
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017d8:	4611      	mov	r1, r2
 80017da:	4798      	blx	r3
		break;
 80017dc:	e000      	b.n	80017e0 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
		return;
 80017de:	bf00      	nop
	}
}
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZN8CEncoder22OnBotonPresionadoEventEi>:

void CEncoder::OnBotonPresionadoEvent(int idBoton)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d10c      	bne.n	8001818 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderPresionadoEvent(ID_Encoder);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a18      	ldr	r0, [r3, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3314      	adds	r3, #20
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001810:	4611      	mov	r1, r2
 8001812:	4798      	blx	r3
		break;
 8001814:	e000      	b.n	8001818 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
		return;
 8001816:	bf00      	nop
	}
}
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZN8CEncoder17OnBotonClickEventEii>:

void CEncoder::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]

	switch (idBoton)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10b      	bne.n	8001848 <_ZN8CEncoder17OnBotonClickEventEii+0x2a>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder, tiempoClick);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a18      	ldr	r0, [r3, #32]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3310      	adds	r3, #16
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4798      	blx	r3
		break;
 8001846:	bf00      	nop
	}
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc9e 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f804 	bl	8001876 <_ZN8CEncoder10leeEncoderEi>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	461a      	mov	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4293      	cmp	r3, r2
 800188a:	d128      	bne.n	80018de <_ZN8CEncoder10leeEncoderEi+0x68>
		return;
	CLK_status = LeeClk();
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff20 	bl	80016d2 <_ZN8CEncoder6LeeClkEv>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d017      	beq.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d113      	bne.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
	{
		if (LeeDt() != CLK_status)
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff21 	bl	80016f4 <_ZN8CEncoder5LeeDtEv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <_ZN8CEncoder10leeEncoderEi+0x58>
		{
			incrementa();
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f80d 	bl	80018e6 <_ZN8CEncoder10incrementaEv>
 80018cc:	e002      	b.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
		}
		else
		{
			decrementa();
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f81c 	bl	800190c <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
 80018dc:	e000      	b.n	80018e0 <_ZN8CEncoder10leeEncoderEi+0x6a>
		return;
 80018de:	bf00      	nop
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a18      	ldr	r0, [r3, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001900:	4611      	mov	r1, r2
 8001902:	4798      	blx	r3
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a18      	ldr	r0, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	330c      	adds	r3, #12
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001926:	4611      	mov	r1, r2
 8001928:	4798      	blx	r3
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0800d078 	.word	0x0800d078

08001954 <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	0800d078 	.word	0x0800d078

08001974 <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
}
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe9 	bl	8001954 <_ZN24CManejadorEventosEncoderD1Ev>
 8001982:	2104      	movs	r1, #4
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f008 fbd0 	bl	800a12a <_ZdlPvj>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]

}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]

}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEii>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]

}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_ZN24CManejadorEventosEncoder29OnBotonEncoderPresionadoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]

}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_ZN24CManejadorEventosEncoder34OnBotonEncoderPresionadoLargoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]

}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_ZN24CManejadorEventosEncoder25OnBotonEncoderSueltoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]

}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_ZN13CEstacionBaseC1Ev+0x20>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	0800d0a0 	.word	0x0800d0a0

08001a34 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	0800d0a0 	.word	0x0800d0a0

08001a54 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
}
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe9 	bl	8001a34 <_ZN13CEstacionBaseD1Ev>
 8001a62:	2108      	movs	r1, #8
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f008 fb60 	bl	800a12a <_ZdlPvj>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN13CEstacionBase18GetTemperaturaRealEv>:

float CEstacionBase::GetTemperaturaReal() //regresa la tenperatura actual de la estacion
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

}
 8001a7c:	bf00      	nop
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]

}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

}
 8001aa4:	bf00      	nop
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]

}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

}
 8001acc:	bf00      	nop
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

}
 8001ae0:	bf00      	nop
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4798      	blx	r3
 8001b62:	e000      	b.n	8001b66 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8001b64:	bf00      	nop
}
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3308      	adds	r3, #8
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4798      	blx	r3
 8001b92:	e000      	b.n	8001b96 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8001b94:	bf00      	nop

}
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]

}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]

}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	return 0;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]

}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]

}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
	...

08001c3c <_ZN16CestacionBaku601D1Ev>:
#include <Estaciones/CestacionBaku601.hpp>
#include "Calefactor/Calefactor.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.h"

CestacionBaku601::~CestacionBaku601()
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <_ZN16CestacionBaku601D1Ev+0x50>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <_ZN16CestacionBaku601D1Ev+0x54>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	33e0      	adds	r3, #224	@ 0xe0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f005 fa1d 	bl	8007094 <_ZN15SensorMagneticoD1Ev>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	33d0      	adds	r3, #208	@ 0xd0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fb76 	bl	8001350 <_ZN10CalefactorD1Ev>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3384      	adds	r3, #132	@ 0x84
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 f865 	bl	8006d38 <_ZN3PwmD1Ev>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3308      	adds	r3, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 f9c8 	bl	8007008 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff feda 	bl	8001a34 <_ZN13CEstacionBaseD1Ev>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800d100 	.word	0x0800d100
 8001c90:	0800d164 	.word	0x0800d164

08001c94 <_ZThn8_N16CestacionBaku601D1Ev>:
	Calefactor calefactor;
	SensorMagnetico sensorMagnetico;
	int NivelAire=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 8001c94:	f1a0 0008 	sub.w	r0, r0, #8
 8001c98:	f7ff bfd0 	b.w	8001c3c <_ZN16CestacionBaku601D1Ev>

08001c9c <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
}
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffc9 	bl	8001c3c <_ZN16CestacionBaku601D1Ev>
 8001caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f008 fa3b 	bl	800a12a <_ZdlPvj>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_ZThn8_N16CestacionBaku601D0Ev>:
 8001cbe:	f1a0 0008 	sub.w	r0, r0, #8
 8001cc2:	f7ff bfeb 	b.w	8001c9c <_ZN16CestacionBaku601D0Ev>
	...

08001cc8 <_ZN16CestacionBaku601C1Ev>:

CestacionBaku601::CestacionBaku601() :
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fe9c 	bl	8001a10 <_ZN13CEstacionBaseC1Ev>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 f983 	bl	8006fe8 <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8001ce2:	4a57      	ldr	r2, [pc, #348]	@ (8001e40 <_ZN16CestacionBaku601C1Ev+0x178>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4a56      	ldr	r2, [pc, #344]	@ (8001e44 <_ZN16CestacionBaku601C1Ev+0x17c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2264      	movs	r2, #100	@ 0x64
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2205      	movs	r2, #5
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e48 <_ZN16CestacionBaku601C1Ev+0x180>)
 8001d50:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a3d      	ldr	r2, [pc, #244]	@ (8001e4c <_ZN16CestacionBaku601C1Ev+0x184>)
 8001d56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2208      	movs	r2, #8
 8001d68:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	220b      	movs	r2, #11
 8001d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	220c      	movs	r2, #12
 8001d74:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	665a      	str	r2, [r3, #100]	@ 0x64
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3368      	adds	r3, #104	@ 0x68
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 fe8e 	bl	8006aa2 <_ZN7MAX6675C1Ev>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3384      	adds	r3, #132	@ 0x84
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 ffc4 	bl	8006d18 <_ZN3PwmC1Ev>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	33d0      	adds	r3, #208	@ 0xd0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fac9 	bl	800132c <_ZN10CalefactorC1Ev>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	33e0      	adds	r3, #224	@ 0xe0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 f95c 	bl	800705c <_ZN15SensorMagneticoC1Ev>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 8001db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dbc:	f004 ffdc 	bl	8006d78 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3368      	adds	r3, #104	@ 0x68
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4922      	ldr	r1, [pc, #136]	@ (8001e50 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 fe86 	bl	8006ada <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3368      	adds	r3, #104	@ 0x68
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	491e      	ldr	r1, [pc, #120]	@ (8001e50 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fe91 	bl	8006afe <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3368      	adds	r3, #104	@ 0x68
 8001de0:	2201      	movs	r2, #1
 8001de2:	491b      	ldr	r1, [pc, #108]	@ (8001e50 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fe66 	bl	8006ab6 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3368      	adds	r3, #104	@ 0x68
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 ff3a 	bl	8006c68 <_ZN7MAX66754InitEv>


	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	33d0      	adds	r3, #208	@ 0xd0
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4916      	ldr	r1, [pc, #88]	@ (8001e54 <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fac7 	bl	8001390 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	33d0      	adds	r3, #208	@ 0xd0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fad4 	bl	80013b4 <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	33e0      	adds	r3, #224	@ 0xe0
 8001e10:	2220      	movs	r2, #32
 8001e12:	4910      	ldr	r1, [pc, #64]	@ (8001e54 <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f005 f95d 	bl	80070d4 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	33e0      	adds	r3, #224	@ 0xe0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 f96a 	bl	80070f8 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f005 f97f 	bl	8007134 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0800d100 	.word	0x0800d100
 8001e44:	0800d164 	.word	0x0800d164
 8001e48:	40a00000 	.word	0x40a00000
 8001e4c:	44160000 	.word	0x44160000
 8001e50:	40010800 	.word	0x40010800
 8001e54:	40010c00 	.word	0x40010c00

08001e58 <_ZN16CestacionBaku60118GetTemperaturaRealEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaReal()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	return thermocouple.MAX6675_lee(); //* .59;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3368      	adds	r3, #104	@ 0x68
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 fe93 	bl	8006b90 <_ZN7MAX667511MAX6675_leeEv>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	NivelAire=nivel;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	//pwm.SicloTrabajo(nivel);
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <_ZN16CestacionBaku6019GetEstadoEv>:


//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	33e0      	adds	r3, #224	@ 0xe0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 f93e 	bl	800714e <_ZN15SensorMagnetico4LeerEv>
 8001ed2:	4603      	mov	r3, r0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:




void CestacionBaku601::IncrementaTemperatura()
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	da04      	bge.n	8001efa <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	611a      	str	r2, [r3, #16]
	}
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dd04      	ble.n	8001f1e <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
	}
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_ZN16CestacionBaku60117ActivarCalefactorEv>:


void CestacionBaku601::ActivarCalefactor()
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:


void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]

}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8001f6c:	f1a0 0008 	sub.w	r0, r0, #8
 8001f70:	f7ff bff2 	b.w	8001f58 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

08001f74 <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f80d 	bl	8001f9c <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
	ProcesaTemperaturaReal();
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f821 	bl	8001fca <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>
	procesaAire();
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f843 	bl	8002014 <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f862 	bl	8002058 <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3310      	adds	r3, #16
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d002      	beq.n	8001fc2 <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	615a      	str	r2, [r3, #20]
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>:

void CestacionBaku601::ProcesaTemperaturaReal()
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	int temperatura = GetTemperaturaReal();
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f825 	bl	8001030 <__aeabi_f2iz>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60fb      	str	r3, [r7, #12]
	if (temperaturaRealAnterior != temperatura)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d00b      	beq.n	800200c <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv+0x42>
	{
		temperaturaRealAnterior = temperatura;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	619a      	str	r2, [r3, #24]
		TemperaturaRealEvent(temperaturaRealAnterior);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3350      	adds	r3, #80	@ 0x50
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6992      	ldr	r2, [r2, #24]
 8002008:	4611      	mov	r1, r2
 800200a:	4798      	blx	r3
	}
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN16CestacionBaku60111procesaAireEv>:

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3318      	adds	r3, #24
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4610      	mov	r0, r2
 8002028:	4798      	blx	r3
 800202a:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	429a      	cmp	r2, r3
 8002034:	d00b      	beq.n	800204e <_ZN16CestacionBaku60111procesaAireEv+0x3a>
	{
		AireAnterior = aire;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	334c      	adds	r3, #76	@ 0x4c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	69d2      	ldr	r2, [r2, #28]
 800204a:	4611      	mov	r1, r2
 800204c:	4798      	blx	r3
	}
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <_ZN16CestacionBaku60117ProcesaCalefactorEv>:


void CestacionBaku601::ProcesaCalefactor()
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002064:	2b00      	cmp	r3, #0
 8002066:	d108      	bne.n	800207a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor=0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	33d0      	adds	r3, #208	@ 0xd0
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f9d4 	bl	8001420 <_ZN10Calefactor6ApagarEv>
		return;
 8002078:	e094      	b.n	80021a4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	int sensor = sensorMagnetico.Leer();
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	33e0      	adds	r3, #224	@ 0xe0
 800207e:	4618      	mov	r0, r3
 8002080:	f005 f865 	bl	800714e <_ZN15SensorMagnetico4LeerEv>
 8002084:	6178      	str	r0, [r7, #20]
	if (sensor == BOTON_PRESIONADO)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x3c>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88f 	bl	80021b0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 8002092:	e087      	b.n	80021a4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	TiempoEnfriando=0;
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3318      	adds	r3, #24
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
 80020b0:	6138      	str	r0, [r7, #16]
	pwm.SicloTrabajo(aire);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3384      	adds	r3, #132	@ 0x84
 80020b6:	6939      	ldr	r1, [r7, #16]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 ff09 	bl	8006ed0 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual=HAL_GetTick(); //me trae el tiempo en milisegundos
 80020be:	f006 f82f 	bl	8008120 <HAL_GetTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
	if(TiempoActual<TiempoProximoMuestreo )
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	429a      	cmp	r2, r3
 80020d4:	db65      	blt.n	80021a2 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo=TiempoActual+TiempoMuestreoTemperatura;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	441a      	add	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
	float temperatura = GetTemperaturaReal();
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3308      	adds	r3, #8
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	60f8      	str	r0, [r7, #12]
	 PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fd80 	bl	8000bfc <__aeabi_i2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fcc5 	bl	8000a90 <__aeabi_fsub>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	63da      	str	r2, [r3, #60]	@ 0x3c
	 Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800211e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fd6a 	bl	8000bfc <__aeabi_i2f>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	4628      	mov	r0, r5
 800212e:	f7fe fdb9 	bl	8000ca4 <__aeabi_fmul>
 8002132:	4603      	mov	r3, r0
 8002134:	4619      	mov	r1, r3
 8002136:	4620      	mov	r0, r4
 8002138:	f7fe fcac 	bl	8000a94 <__addsf3>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
	 PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT)/10;   //Calculo de la salida del controlador PI
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002156:	f7fe fe59 	bl	8000e0c <__aeabi_fdiv>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fd9d 	bl	8000ca4 <__aeabi_fmul>
 800216a:	4603      	mov	r3, r0
 800216c:	4619      	mov	r1, r3
 800216e:	4628      	mov	r0, r5
 8002170:	f7fe fc90 	bl	8000a94 <__addsf3>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe fd93 	bl	8000ca4 <__aeabi_fmul>
 800217e:	4603      	mov	r3, r0
 8002180:	490a      	ldr	r1, [pc, #40]	@ (80021ac <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x154>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fe42 	bl	8000e0c <__aeabi_fdiv>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44
	 //asigno la potencia del calefactor
	 PotenciaCalefactor=PID_value;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe ff4b 	bl	8001030 <__aeabi_f2iz>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
 80021a0:	e000      	b.n	80021a4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
		return;
 80021a2:	bf00      	nop
}
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bdb0      	pop	{r4, r5, r7, pc}
 80021aa:	bf00      	nop
 80021ac:	41200000 	.word	0x41200000

080021b0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor=0; //bajo toda la potencia
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaReal();
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3308      	adds	r3, #8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	60f8      	str	r0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 80021cc:	492c      	ldr	r1, [pc, #176]	@ (8002280 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd0>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7fe ff10 	bl	8000ff4 <__aeabi_fcmple>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03c      	beq.n	8002254 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xa4>
	{
		if(TiempoEnfriando==0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	f7fe fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x5a>
		{
			TiempoEnfriando=HAL_GetTick();
 80021f2:	f005 ff95 	bl	8008120 <HAL_GetTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f8f3 	bl	80003e4 <__aeabi_ui2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 8002208:	e033      	b.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
		}
		if(HAL_GetTick()-TiempoEnfriando<=10000)
 800220a:	f005 ff89 	bl	8008120 <HAL_GetTick>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f8e7 	bl	80003e4 <__aeabi_ui2d>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800221c:	f7fd ffa4 	bl	8000168 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	2301      	movs	r3, #1
 800222a:	461c      	mov	r4, r3
 800222c:	a312      	add	r3, pc, #72	@ (adr r3, 8002278 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fbcd 	bl	80009d0 <__aeabi_dcmple>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x90>
 800223c:	2300      	movs	r3, #0
 800223e:	461c      	mov	r4, r3
 8002240:	b2e3      	uxtb	r3, r4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc0>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3384      	adds	r3, #132	@ 0x84
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f004 fe3f 	bl	8006ed0 <_ZN3Pwm12SicloTrabajoEi>
		return;
 8002252:	e00e      	b.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
	}
	//pongo al maximo el aire para enfriar la pistola
	if(temperatura>10)
 8002254:	490b      	ldr	r1, [pc, #44]	@ (8002284 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd4>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7fe fee0 	bl	800101c <__aeabi_fcmpgt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
	{
		pwm.SicloTrabajo(100);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3384      	adds	r3, #132	@ 0x84
 8002266:	2164      	movs	r1, #100	@ 0x64
 8002268:	4618      	mov	r0, r3
 800226a:	f004 fe31 	bl	8006ed0 <_ZN3Pwm12SicloTrabajoEi>
 800226e:	e000      	b.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
			return;
 8002270:	bf00      	nop
	}
}
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	00000000 	.word	0x00000000
 800227c:	40c38800 	.word	0x40c38800
 8002280:	41f00000 	.word	0x41f00000
 8002284:	41200000 	.word	0x41200000

08002288 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	if(gpio_pin!=CruceCero_Pin)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d124      	bne.n	80022e2 <_ZN16CestacionBaku60110CruceXCeroEi+0x5a>
		return;
	if(TiempoAntiReboresCruceXCero>0)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229c:	2b00      	cmp	r3, #0
 800229e:	dc22      	bgt.n	80022e6 <_ZN16CestacionBaku60110CruceXCeroEi+0x5e>
	{
		return;
	}
	TiempoAntiReboresCruceXCero=9;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2209      	movs	r2, #9
 80022a4:	651a      	str	r2, [r3, #80]	@ 0x50

	if(ciclos>=100)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022aa:	2b63      	cmp	r3, #99	@ 0x63
 80022ac:	dd02      	ble.n	80022b4 <_ZN16CestacionBaku60110CruceXCeroEi+0x2c>
	{
		ciclos=0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if(ciclos<PotenciaCalefactor)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	429a      	cmp	r2, r3
 80022be:	da05      	bge.n	80022cc <_ZN16CestacionBaku60110CruceXCeroEi+0x44>
	{
		calefactor.Encender();
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	33d0      	adds	r3, #208	@ 0xd0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f898 	bl	80013fa <_ZN10Calefactor8EncenderEv>
 80022ca:	e004      	b.n	80022d6 <_ZN16CestacionBaku60110CruceXCeroEi+0x4e>
	}
	else
	{
		calefactor.Apagar();
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	33d0      	adds	r3, #208	@ 0xd0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f8a5 	bl	8001420 <_ZN10Calefactor6ApagarEv>
	}
	ciclos=ciclos+1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
 80022e0:	e002      	b.n	80022e8 <_ZN16CestacionBaku60110CruceXCeroEi+0x60>
		return;
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <_ZN16CestacionBaku60110CruceXCeroEi+0x60>
		return;
 80022e6:	bf00      	nop
}
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
		if(TiempoAntiReboresCruceXCero>0)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dd04      	ble.n	8002308 <_ZN16CestacionBaku6019TimerTickEv+0x1a>
		{
			TiempoAntiReboresCruceXCero--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	651a      	str	r2, [r3, #80]	@ 0x50
		}
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor=valor;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	CruceXCero(GPIO_Pin);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	333c      	adds	r3, #60	@ 0x3c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <_ZN18CComponenteBaseTftC1Ev+0x2c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	0800d178 	.word	0x0800d178

08002394 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	0800d178 	.word	0x0800d178

080023b4 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
}
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ffe9 	bl	8002394 <_ZN18CComponenteBaseTftD1Ev>
 80023c2:	2118      	movs	r1, #24
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f007 feb0 	bl	800a12a <_ZdlPvj>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	4608      	mov	r0, r1
 8002414:	4611      	mov	r1, r2
 8002416:	461a      	mov	r2, r3
 8002418:	4603      	mov	r3, r0
 800241a:	817b      	strh	r3, [r7, #10]
 800241c:	460b      	mov	r3, r1
 800241e:	813b      	strh	r3, [r7, #8]
 8002420:	4613      	mov	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	4608      	mov	r0, r1
 8002438:	4611      	mov	r1, r2
 800243a:	461a      	mov	r2, r3
 800243c:	4603      	mov	r3, r0
 800243e:	817b      	strh	r3, [r7, #10]
 8002440:	460b      	mov	r3, r1
 8002442:	813b      	strh	r3, [r7, #8]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	4608      	mov	r0, r1
 800245c:	4611      	mov	r1, r2
 800245e:	461a      	mov	r2, r3
 8002460:	4603      	mov	r3, r0
 8002462:	817b      	strh	r3, [r7, #10]
 8002464:	460b      	mov	r3, r1
 8002466:	813b      	strh	r3, [r7, #8]
 8002468:	4613      	mov	r3, r2
 800246a:	80fb      	strh	r3, [r7, #6]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	4608      	mov	r0, r1
 8002480:	4611      	mov	r1, r2
 8002482:	461a      	mov	r2, r3
 8002484:	4603      	mov	r3, r0
 8002486:	817b      	strh	r3, [r7, #10]
 8002488:	460b      	mov	r3, r1
 800248a:	813b      	strh	r3, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	4608      	mov	r0, r1
 80024a4:	4611      	mov	r1, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	817b      	strh	r3, [r7, #10]
 80024ac:	460b      	mov	r3, r1
 80024ae:	813b      	strh	r3, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	4608      	mov	r0, r1
 8002564:	4611      	mov	r1, r2
 8002566:	461a      	mov	r2, r3
 8002568:	4603      	mov	r3, r0
 800256a:	817b      	strh	r3, [r7, #10]
 800256c:	460b      	mov	r3, r1
 800256e:	813b      	strh	r3, [r7, #8]
 8002570:	4613      	mov	r3, r2
 8002572:	80fb      	strh	r3, [r7, #6]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	return 319;
 8002586:	f240 133f 	movw	r3, #319	@ 0x13f
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	return 239;
 800259c:	23ef      	movs	r3, #239	@ 0xef
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 80025c2:	8978      	ldrh	r0, [r7, #10]
 80025c4:	8939      	ldrh	r1, [r7, #8]
 80025c6:	897a      	ldrh	r2, [r7, #10]
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4413      	add	r3, r2
 80025cc:	b29c      	uxth	r4, r3
 80025ce:	893a      	ldrh	r2, [r7, #8]
 80025d0:	8c3b      	ldrh	r3, [r7, #32]
 80025d2:	4413      	add	r3, r2
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	4622      	mov	r2, r4
 80025de:	f002 fefe 	bl	80053de <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}

080025ea <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b087      	sub	sp, #28
 80025ee:	af02      	add	r7, sp, #8
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	4608      	mov	r0, r1
 80025f4:	4611      	mov	r1, r2
 80025f6:	461a      	mov	r2, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	817b      	strh	r3, [r7, #10]
 80025fc:	460b      	mov	r3, r1
 80025fe:	813b      	strh	r3, [r7, #8]
 8002600:	4613      	mov	r3, r2
 8002602:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002604:	8978      	ldrh	r0, [r7, #10]
 8002606:	8939      	ldrh	r1, [r7, #8]
 8002608:	897a      	ldrh	r2, [r7, #10]
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	4413      	add	r3, r2
 800260e:	b29c      	uxth	r4, r3
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	8c3b      	ldrh	r3, [r7, #32]
 8002614:	4413      	add	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	4622      	mov	r2, r4
 8002620:	f002 fe5c 	bl	80052dc <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}

0800262c <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 800263c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002644:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	611a      	str	r2, [r3, #16]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b085      	sub	sp, #20
 8002692:	af02      	add	r7, sp, #8
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	b29c      	uxth	r4, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6952      	ldr	r2, [r2, #20]
 80026b0:	b292      	uxth	r2, r2
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4623      	mov	r3, r4
 80026b8:	4602      	mov	r2, r0
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f002 ff84 	bl	80055c8 <_Z17ILI9341_Draw_TextPKciittt>
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}

080026c8 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <_ZN12CEtiquetaTftD1Ev+0x20>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fb31 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	0800d1c8 	.word	0x0800d1c8

080026ec <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
}
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_ZN12CEtiquetaTftD1Ev>
 80026fa:	21a4      	movs	r1, #164	@ 0xa4
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f007 fd14 	bl	800a12a <_ZdlPvj>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af04      	add	r7, sp, #16
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	f000 fb27 	bl	8002d84 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002736:	4a11      	ldr	r2, [pc, #68]	@ (800277c <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2203      	movs	r2, #3
 8002740:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3330      	adds	r3, #48	@ 0x30
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	4618      	mov	r0, r3
 800275c:	f008 fc1d 	bl	800af9a <strcpy>
	ColorTexto = colorTexto;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002764:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800276c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	0800d1c8 	.word	0x0800d1c8

08002780 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002780:	b40e      	push	{r1, r2, r3}
 8002782:	b580      	push	{r7, lr}
 8002784:	b0bb      	sub	sp, #236	@ 0xec
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 800279c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80027a0:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027aa:	e0f1      	b.n	8002990 <_ZN12CEtiquetaTft8SetTextoEPcz+0x210>
	{

		if (*p != '%')
 80027ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b25      	cmp	r3, #37	@ 0x25
 80027b4:	d00f      	beq.n	80027d6 <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ba:	7819      	ldrb	r1, [r3, #0]
 80027bc:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80027c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027c4:	4413      	add	r3, r2
 80027c6:	460a      	mov	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80027ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027ce:	3301      	adds	r3, #1
 80027d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 80027d4:	e0d7      	b.n	8002986 <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		}
		encontrado = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 80027dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	3b63      	subs	r3, #99	@ 0x63
 80027ee:	2b15      	cmp	r3, #21
 80027f0:	f200 8092 	bhi.w	8002918 <_ZN12CEtiquetaTft8SetTextoEPcz+0x198>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	080028c5 	.word	0x080028c5
 8002800:	08002855 	.word	0x08002855
 8002804:	08002919 	.word	0x08002919
 8002808:	080028e1 	.word	0x080028e1
 800280c:	08002919 	.word	0x08002919
 8002810:	08002919 	.word	0x08002919
 8002814:	08002871 	.word	0x08002871
 8002818:	08002919 	.word	0x08002919
 800281c:	08002919 	.word	0x08002919
 8002820:	08002919 	.word	0x08002919
 8002824:	08002919 	.word	0x08002919
 8002828:	08002919 	.word	0x08002919
 800282c:	08002919 	.word	0x08002919
 8002830:	080028a9 	.word	0x080028a9
 8002834:	08002919 	.word	0x08002919
 8002838:	08002919 	.word	0x08002919
 800283c:	080028fd 	.word	0x080028fd
 8002840:	08002919 	.word	0x08002919
 8002844:	08002919 	.word	0x08002919
 8002848:	08002919 	.word	0x08002919
 800284c:	08002919 	.word	0x08002919
 8002850:	0800288d 	.word	0x0800288d
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1d1a      	adds	r2, r3, #4
 8002858:	60fa      	str	r2, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4959      	ldr	r1, [pc, #356]	@ (80029c8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x248>)
 8002862:	4618      	mov	r0, r3
 8002864:	f008 fa62 	bl	800ad2c <siprintf>
			encontrado = 1;
 8002868:	2301      	movs	r3, #1
 800286a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800286e:	e063      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1d1a      	adds	r2, r3, #4
 8002874:	60fa      	str	r2, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4953      	ldr	r1, [pc, #332]	@ (80029cc <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>)
 800287e:	4618      	mov	r0, r3
 8002880:	f008 fa54 	bl	800ad2c <siprintf>
			encontrado = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800288a:	e055      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	60fa      	str	r2, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	494d      	ldr	r1, [pc, #308]	@ (80029d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 800289a:	4618      	mov	r0, r3
 800289c:	f008 fa46 	bl	800ad2c <siprintf>
			encontrado = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028a6:	e047      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, int));
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	60fa      	str	r2, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4947      	ldr	r1, [pc, #284]	@ (80029d4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f008 fa38 	bl	800ad2c <siprintf>
			encontrado = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028c2:	e039      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1d1a      	adds	r2, r3, #4
 80028c8:	60fa      	str	r2, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4941      	ldr	r1, [pc, #260]	@ (80029d8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f008 fa2a 	bl	800ad2c <siprintf>
			encontrado = 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028de:	e02b      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, int));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1d1a      	adds	r2, r3, #4
 80028e4:	60fa      	str	r2, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	493b      	ldr	r1, [pc, #236]	@ (80029dc <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f008 fa1c 	bl	800ad2c <siprintf>
			encontrado = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028fa:	e01d      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	60fa      	str	r2, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 800290a:	4618      	mov	r0, r3
 800290c:	f008 fa0e 	bl	800ad2c <siprintf>
			encontrado = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002916:	e00f      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		default:
			buffer[posbuffer] = *p;
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291c:	7819      	ldrb	r1, [r3, #0]
 800291e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002926:	4413      	add	r3, r2
 8002928:	460a      	mov	r2, r1
 800292a:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 800292c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 8002936:	bf00      	nop
		}
		if (encontrado == 1)
 8002938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800293c:	2b01      	cmp	r3, #1
 800293e:	d122      	bne.n	8002986 <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		{
			postmp = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002946:	e016      	b.n	8002976 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f6>
			{
				buffer[posbuffer] = tmp[postmp];
 8002948:	f107 0210 	add.w	r2, r7, #16
 800294c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002950:	4413      	add	r3, r2
 8002952:	7819      	ldrb	r1, [r3, #0]
 8002954:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295c:	4413      	add	r3, r2
 800295e:	460a      	mov	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 8002962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002966:	3301      	adds	r3, #1
 8002968:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002976:	f107 0210 	add.w	r2, r7, #16
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e0      	bne.n	8002948 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c8>
	for (p = formato; *p; p++)
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298a:	3301      	adds	r3, #1
 800298c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f47f af08 	bne.w	80027ac <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 800299c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80029a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3330      	adds	r3, #48	@ 0x30
 80029ae:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f008 faf0 	bl	800af9a <strcpy>
}
 80029ba:	bf00      	nop
 80029bc:	37ec      	adds	r7, #236	@ 0xec
 80029be:	46bd      	mov	sp, r7
 80029c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029c4:	b003      	add	sp, #12
 80029c6:	4770      	bx	lr
 80029c8:	0800ce48 	.word	0x0800ce48
 80029cc:	0800ce4c 	.word	0x0800ce4c
 80029d0:	0800ce50 	.word	0x0800ce50
 80029d4:	0800ce54 	.word	0x0800ce54
 80029d8:	0800ce58 	.word	0x0800ce58
 80029dc:	0800ce5c 	.word	0x0800ce5c
 80029e0:	0800ce60 	.word	0x0800ce60

080029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f9d9 	bl	8002de8 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b219      	sxth	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff fde3 	bl	800262c <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7ff fdef 	bl	8002656 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7ff fdf4 	bl	8002672 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3330      	adds	r3, #48	@ 0x30
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f7ff fdfb 	bl	800268e <_ZN18CComponenteBaseTft5printEPc>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	BackColor=color;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	615a      	str	r2, [r3, #20]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
	...

08002abc <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <_ZN13CPantallaBaseD1Ev+0x30>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <_ZN13CPantallaBaseD1Ev+0x34>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3330      	adds	r3, #48	@ 0x30
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fee5 	bl	80068a4 <_ZN26CManejadorEventosControlesD1Ev>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f92f 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	0800d224 	.word	0x0800d224
 8002af0:	0800d298 	.word	0x0800d298

08002af4 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 8002af4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002af8:	f7ff bfe0 	b.w	8002abc <_ZN13CPantallaBaseD1Ev>

08002afc <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
}
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffd9 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 8002b0a:	21ac      	movs	r1, #172	@ 0xac
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f007 fb0c 	bl	800a12a <_ZdlPvj>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZThn48_N13CPantallaBaseD0Ev>:
 8002b1c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002b20:	f7ff bfec 	b.w	8002afc <_ZN13CPantallaBaseD0Ev>

08002b24 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08f      	sub	sp, #60	@ 0x3c
 8002b28:	af08      	add	r7, sp, #32
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	231f      	movs	r3, #31
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	2301      	movs	r3, #1
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2300      	movs	r3, #0
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	f000 f91c 	bl	8002d84 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3330      	adds	r3, #48	@ 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fe97 	bl	8006884 <_ZN26CManejadorEventosControlesC1Ev>
 8002b56:	4a2a      	ldr	r2, [pc, #168]	@ (8002c00 <_ZN13CPantallaBaseC1EiPc+0xdc>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4a29      	ldr	r2, [pc, #164]	@ (8002c04 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3340      	adds	r3, #64	@ 0x40
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f008 fa08 	bl	800af9a <strcpy>
	setRotation(3);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fc9e 	bl	80024d0 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fcf1 	bl	800257e <_ZN18CComponenteBaseTft5widthEv>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	617b      	str	r3, [r7, #20]
	int alto = height();
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fcf6 	bl	8002594 <_ZN18CComponenteBaseTft6heightEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f967 	bl	8002e86 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 8002bb8:	20a4      	movs	r0, #164	@ 0xa4
 8002bba:	f007 fab8 	bl	800a12e <_Znwj>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461c      	mov	r4, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6999      	ldr	r1, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3340      	adds	r3, #64	@ 0x40
 8002bce:	201f      	movs	r0, #31
 8002bd0:	9006      	str	r0, [sp, #24]
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	9005      	str	r0, [sp, #20]
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	9004      	str	r0, [sp, #16]
 8002bda:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bde:	9003      	str	r0, [sp, #12]
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	231f      	movs	r3, #31
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	231e      	movs	r3, #30
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff fd8d 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	0800d224 	.word	0x0800d224
 8002c04:	0800d298 	.word	0x0800d298

08002c08 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
	CRectanguloTft::Show();
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f8e8 	bl	8002de8 <_ZN14CRectanguloTft4ShowEv>
	//dibujo el titulo
	LabelTitulo->Show();
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3348      	adds	r3, #72	@ 0x48
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4610      	mov	r0, r2
 8002c28:	4798      	blx	r3
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3328      	adds	r3, #40	@ 0x28
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3230      	adds	r2, #48	@ 0x30
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3334      	adds	r3, #52	@ 0x34
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4610      	mov	r0, r2
 8002c84:	4798      	blx	r3
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	Estacion->QuitaManejadorControles();
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	332c      	adds	r3, #44	@ 0x2c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4798      	blx	r3
	Visible=false;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	return Visible;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d004      	beq.n	8002cf6 <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002cf4:	e000      	b.n	8002cf8 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8002cf6:	bf00      	nop
}
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3390      	adds	r3, #144	@ 0x90
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	3230      	adds	r2, #48	@ 0x30
 8002d32:	4611      	mov	r1, r2
 8002d34:	4798      	blx	r3
 8002d36:	e000      	b.n	8002d3a <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 8002d38:	bf00      	nop
}
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <_ZN14CRectanguloTftD1Ev+0x20>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fb1f 	bl	8002394 <_ZN18CComponenteBaseTftD1Ev>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	0800d308 	.word	0x0800d308

08002d64 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
}
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffe7 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 8002d72:	2130      	movs	r1, #48	@ 0x30
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f007 f9d8 	bl	800a12a <_ZdlPvj>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fae5 	bl	8002364 <_ZN18CComponenteBaseTftC1Ev>
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	0800d308 	.word	0x0800d308

08002de8 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3338      	adds	r3, #56	@ 0x38
 8002df8:	681c      	ldr	r4, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	b219      	sxth	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	b21d      	sxth	r5, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	b21e      	sxth	r6, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6952      	ldr	r2, [r2, #20]
 8002e16:	b292      	uxth	r2, r2
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4633      	mov	r3, r6
 8002e1e:	462a      	mov	r2, r5
 8002e20:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d118      	bne.n	8002e5c <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3344      	adds	r3, #68	@ 0x44
 8002e32:	681c      	ldr	r4, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	b219      	sxth	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	b21d      	sxth	r5, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	b21e      	sxth	r6, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e50:	b292      	uxth	r2, r2
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4633      	mov	r3, r6
 8002e58:	462a      	mov	r2, r5
 8002e5a:	47a0      	blx	r4
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e64 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  Xi=x;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	619a      	str	r2, [r3, #24]
  Yi=y;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	61da      	str	r2, [r3, #28]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	615a      	str	r2, [r3, #20]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return Xi;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return Yi;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return Alto;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	0fd9      	lsrs	r1, r3, #31
 8002f16:	440b      	add	r3, r1
 8002f18:	105b      	asrs	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
	...

08002f28 <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b08d      	sub	sp, #52	@ 0x34
 8002f2c:	af08      	add	r7, sp, #32
 8002f2e:	6078      	str	r0, [r7, #4]
CPantallaBase(1, "CONF MEMORIA")
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fdf4 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 8002f3c:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002f50:	20a4      	movs	r0, #164	@ 0xa4
 8002f52:	f007 f8ec 	bl	800a12e <_Znwj>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461c      	mov	r4, r3
 8002f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f5e:	9306      	str	r3, [sp, #24]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9305      	str	r3, [sp, #20]
 8002f64:	2303      	movs	r3, #3
 8002f66:	9304      	str	r3, [sp, #16]
 8002f68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f6c:	9303      	str	r3, [sp, #12]
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ec <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2314      	movs	r3, #20
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2332      	movs	r3, #50	@ 0x32
 8002f7c:	2223      	movs	r2, #35	@ 0x23
 8002f7e:	2105      	movs	r1, #5
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff fbc3 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002f8c:	20a4      	movs	r0, #164	@ 0xa4
 8002f8e:	f007 f8ce 	bl	800a12e <_Znwj>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461c      	mov	r4, r3
 8002f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f9a:	9306      	str	r3, [sp, #24]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9305      	str	r3, [sp, #20]
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	9304      	str	r3, [sp, #16]
 8002fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fa8:	9303      	str	r3, [sp, #12]
 8002faa:	4b51      	ldr	r3, [pc, #324]	@ (80030f0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2332      	movs	r3, #50	@ 0x32
 8002fb8:	2241      	movs	r2, #65	@ 0x41
 8002fba:	2105      	movs	r1, #5
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff fba5 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff9a 	bl	8002f04 <_ZN14CRectanguloTft11DameCentroXEv>
 8002fd0:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8002fd2:	20a4      	movs	r0, #164	@ 0xa4
 8002fd4:	f007 f8ab 	bl	800a12e <_Znwj>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461c      	mov	r4, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8002fe2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fe6:	9306      	str	r3, [sp, #24]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	9305      	str	r3, [sp, #20]
 8002fec:	2303      	movs	r3, #3
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80030f4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	231e      	movs	r3, #30
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2396      	movs	r3, #150	@ 0x96
 8003004:	2269      	movs	r2, #105	@ 0x69
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff fb80 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003018:	2205      	movs	r2, #5
 800301a:	2105      	movs	r1, #5
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fce1 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8003022:	20a4      	movs	r0, #164	@ 0xa4
 8003024:	f007 f883 	bl	800a12e <_Znwj>
 8003028:	4603      	mov	r3, r0
 800302a:	461c      	mov	r4, r3
 800302c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003030:	9306      	str	r3, [sp, #24]
 8003032:	2300      	movs	r3, #0
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	2303      	movs	r3, #3
 8003038:	9304      	str	r3, [sp, #16]
 800303a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	231e      	movs	r3, #30
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	23c8      	movs	r3, #200	@ 0xc8
 800304e:	2287      	movs	r2, #135	@ 0x87
 8003050:	2105      	movs	r1, #5
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff fb5a 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800305e:	20a4      	movs	r0, #164	@ 0xa4
 8003060:	f007 f865 	bl	800a12e <_Znwj>
 8003064:	4603      	mov	r3, r0
 8003066:	461c      	mov	r4, r3
 8003068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800306c:	9306      	str	r3, [sp, #24]
 800306e:	2301      	movs	r3, #1
 8003070:	9305      	str	r3, [sp, #20]
 8003072:	2303      	movs	r3, #3
 8003074:	9304      	str	r3, [sp, #16]
 8003076:	2300      	movs	r3, #0
 8003078:	9303      	str	r3, [sp, #12]
 800307a:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	231e      	movs	r3, #30
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2382      	movs	r3, #130	@ 0x82
 800308a:	22c8      	movs	r2, #200	@ 0xc8
 800308c:	210a      	movs	r1, #10
 800308e:	4620      	mov	r0, r4
 8003090:	f7ff fb3c 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800309a:	20a4      	movs	r0, #164	@ 0xa4
 800309c:	f007 f847 	bl	800a12e <_Znwj>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461c      	mov	r4, r3
 80030a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030a8:	9306      	str	r3, [sp, #24]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	2303      	movs	r3, #3
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	231e      	movs	r3, #30
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2391      	movs	r3, #145	@ 0x91
 80030c6:	22c8      	movs	r2, #200	@ 0xc8
 80030c8:	21a0      	movs	r1, #160	@ 0xa0
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fb1e 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	0800ce64 	.word	0x0800ce64
 80030e4:	0800d364 	.word	0x0800d364
 80030e8:	0800d3ec 	.word	0x0800d3ec
 80030ec:	0800ce74 	.word	0x0800ce74
 80030f0:	0800ce80 	.word	0x0800ce80
 80030f4:	0800ce8c 	.word	0x0800ce8c
 80030f8:	0800ce94 	.word	0x0800ce94
 80030fc:	0800cea0 	.word	0x0800cea0
 8003100:	0800cea8 	.word	0x0800cea8

08003104 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4a07      	ldr	r2, [pc, #28]	@ (800312c <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fcce 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	0800d364 	.word	0x0800d364
 8003130:	0800d3ec 	.word	0x0800d3ec

08003134 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:
	void LeeDatosMemoria();
	int DameDireccionMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 8003134:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003138:	f7ff bfe4 	b.w	8003104 <_ZN26CConfigurarPantallaMemoriaD1Ev>

0800313c <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
}
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffdd 	bl	8003104 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 800314a:	21e0      	movs	r1, #224	@ 0xe0
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f006 ffec 	bl	800a12a <_ZdlPvj>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 800315c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003160:	f7ff bfec 	b.w	800313c <_ZN26CConfigurarPantallaMemoriaD0Ev>

08003164 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003172:	4618      	mov	r0, r3
 8003174:	f003 f865 	bl	8006242 <_ZN19CManejadorControles12GetNivelAireEv>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	CPantallaBase::Show();
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fd40 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f881 	bl	8003290 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3348      	adds	r3, #72	@ 0x48
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
	MuestraInformacion();
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8df 	bl	8003368 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto("Memoria: %d", NumeroMemoria);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80031b6:	461a      	mov	r2, r3
 80031b8:	4913      	ldr	r1, [pc, #76]	@ (8003208 <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 80031ba:	f7ff fae1 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3348      	adds	r3, #72	@ 0x48
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4610      	mov	r0, r2
 80031d2:	4798      	blx	r3
	LabelGuardar->Show();
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3348      	adds	r3, #72	@ 0x48
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4610      	mov	r0, r2
 80031e8:	4798      	blx	r3
	LabelCancelar->Show();
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3348      	adds	r3, #72	@ 0x48
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4610      	mov	r0, r2
 80031fe:	4798      	blx	r3
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	0800ceb4 	.word	0x0800ceb4

0800320c <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800321a:	4618      	mov	r0, r3
 800321c:	f003 f811 	bl	8006242 <_ZN19CManejadorControles12GetNivelAireEv>
 8003220:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	429a      	cmp	r2, r3
 800322e:	dc06      	bgt.n	800323e <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b01      	subs	r3, #1
 800323a:	429a      	cmp	r2, r3
 800323c:	da03      	bge.n	8003246 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
	MuestraInformacion();
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f88e 	bl	8003368 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	VelocidadAireAnterior=-1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	NumeroMemoria=numeroMemoria;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	DireccionMemoria=DameDireccionMemoria();
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f852 	bl	8003324 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af04      	add	r7, sp, #16
 8003296:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
 80032a4:	9302      	str	r3, [sp, #8]
 80032a6:	2304      	movs	r3, #4
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2301      	movs	r3, #1
 80032b2:	21a0      	movs	r1, #160	@ 0xa0
 80032b4:	481a      	ldr	r0, [pc, #104]	@ (8003320 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x90>)
 80032b6:	f005 fd9d 	bl	8008df4 <HAL_I2C_Mem_Read>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d026      	beq.n	8003318 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
	  {
			Temperatura=datos_r[0];
 80032ca:	89bb      	ldrh	r3, [r7, #12]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			VelocidadAire=datos_r[1];
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

		 	if(Temperatura<0 || Temperatura>500)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db05      	blt.n	80032f4 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x64>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80032ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032f2:	dd03      	ble.n	80032fc <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2264      	movs	r2, #100	@ 0x64
 80032f8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003302:	2b00      	cmp	r3, #0
 8003304:	db04      	blt.n	8003310 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x80>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800330c:	2b64      	cmp	r3, #100	@ 0x64
 800330e:	dd03      	ble.n	8003318 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2232      	movs	r2, #50	@ 0x32
 8003314:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
	  }

}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000254 	.word	0x20000254

08003324 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>:
int CConfigurarPantallaMemoria::DameDireccionMemoria()
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	int direccion=1;
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003336:	2b03      	cmp	r3, #3
 8003338:	d00c      	beq.n	8003354 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x30>
 800333a:	2b03      	cmp	r3, #3
 800333c:	dc0d      	bgt.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d002      	beq.n	8003348 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x24>
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 8003346:	e008      	b.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=1;
 8003348:	2301      	movs	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
		break;
 800334c:	e005      	b.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=5;
 800334e:	2305      	movs	r3, #5
 8003350:	60fb      	str	r3, [r7, #12]
		break;
 8003352:	e002      	b.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=9;
 8003354:	2309      	movs	r3, #9
 8003356:	60fb      	str	r3, [r7, #12]
		break;
 8003358:	bf00      	nop
	}
	return direccion;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
	...

08003368 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800337c:	429a      	cmp	r2, r3
 800337e:	d01a      	beq.n	80033b6 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto("%d", Temperatura);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800338c:	461a      	mov	r2, r3
 800338e:	491d      	ldr	r1, [pc, #116]	@ (8003404 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003390:	f7ff f9f6 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3348      	adds	r3, #72	@ 0x48
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4610      	mov	r0, r2
 80033a8:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d01a      	beq.n	80033fc <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto("Aire: %d", VelocidadAire);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033d2:	461a      	mov	r2, r3
 80033d4:	490c      	ldr	r1, [pc, #48]	@ (8003408 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 80033d6:	f7ff f9d3 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3348      	adds	r3, #72	@ 0x48
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	0800cec0 	.word	0x0800cec0
 8003408:	0800cec4 	.word	0x0800cec4

0800340c <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800341a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800341e:	da06      	bge.n	800342e <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 8003438:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800343c:	f7ff bfe6 	b.w	800340c <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

08003440 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800344e:	2b00      	cmp	r3, #0
 8003450:	dd06      	ble.n	8003460 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800346a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800346e:	f7ff bfe7 	b.w	8003440 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

08003474 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent(int tiempoClick)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af04      	add	r7, sp, #16
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	//hay que guarar la informacion
 	uint16_t datos_w[2];

 	datos_w[0]=Temperatura;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003484:	b29b      	uxth	r3, r3
 8003486:	81bb      	strh	r3, [r7, #12]
 	datos_w[1]=VelocidadAire;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800348e:	b29b      	uxth	r3, r3
 8003490:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_w,4,HAL_MAX_DELAY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003498:	b29a      	uxth	r2, r3
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	2304      	movs	r3, #4
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2301      	movs	r3, #1
 80034ac:	21a0      	movs	r1, #160	@ 0xa0
 80034ae:	4805      	ldr	r0, [pc, #20]	@ (80034c4 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi+0x50>)
 80034b0:	f005 fc10 	bl	8008cd4 <HAL_I2C_Mem_Write>
	 ManejadorPantallas.MuestraMenuPrincipal();
 80034b4:	4804      	ldr	r0, [pc, #16]	@ (80034c8 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi+0x54>)
 80034b6:	f000 f886 	bl	80035c6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000254 	.word	0x20000254
 80034c8:	200001f8 	.word	0x200001f8

080034cc <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi>:
	virtual void OnBotonUnoClickEvent(int tiempoClick);
 80034cc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80034d0:	f7ff bfd0 	b.w	8003474 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi>

080034d4 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEi>:
void CConfigurarPantallaMemoria::OnBotonDosClickEvent(int tiempoClick)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80034de:	4803      	ldr	r0, [pc, #12]	@ (80034ec <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEi+0x18>)
 80034e0:	f000 f871 	bl	80035c6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200001f8 	.word	0x200001f8

080034f0 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 80034f0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80034f4:	f7ff bfee 	b.w	80034d4 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEi>

080034f8 <_ZN19CManejadorPantallasC1Ev>:
#include "GUI/PantallaManual/CPantallaManual.hpp"
#include <GUI/PantallaMenuPrincipal/CMenuPrincipal.h>
#include <stdio.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>

CManejadorPantallas::CManejadorPantallas()
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	4a0b      	ldr	r2, [pc, #44]	@ (8003530 <_ZN19CManejadorPantallasC1Ev+0x38>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub
}
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	0800d45c 	.word	0x0800d45c

08003534 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	0800d45c 	.word	0x0800d45c

08003554 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
}
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ffe9 	bl	8003534 <_ZN19CManejadorPantallasD1Ev>
 8003562:	2128      	movs	r1, #40	@ 0x28
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f006 fde0 	bl	800a12a <_ZdlPvj>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	605a      	str	r2, [r3, #4]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 800358e:	b590      	push	{r4, r7, lr}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 800359e:	20e8      	movs	r0, #232	@ 0xe8
 80035a0:	f006 fdc5 	bl	800a12e <_Znwj>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461c      	mov	r4, r3
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 fd33 	bl	8004014 <_ZN15CPantallaManualC1Ev>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	611c      	str	r4, [r3, #16]
	AsignaPantallaActual(pantallaManual);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f843 	bl	8003644 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}

080035c6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 80035c6:	b590      	push	{r4, r7, lr}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 80035d6:	20c0      	movs	r0, #192	@ 0xc0
 80035d8:	f006 fda9 	bl	800a12e <_Znwj>
 80035dc:	4603      	mov	r3, r0
 80035de:	461c      	mov	r4, r3
 80035e0:	4620      	mov	r0, r4
 80035e2:	f001 fcd7 	bl	8004f94 <_ZN14CMenuPrincipalC1Ev>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(menuPrincipal);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f827 	bl	8003644 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd90      	pop	{r4, r7, pc}

080035fe <_ZN19CManejadorPantallas16RefrescaPantallaEv>:

void CManejadorPantallas::RefrescaPantalla()
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
	if(CambioPantalla==true)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800360c:	2b01      	cmp	r3, #1
 800360e:	d108      	bne.n	8003622 <_ZN19CManejadorPantallas16RefrescaPantallaEv+0x24>
		PantallaActual->Show();
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3348      	adds	r3, #72	@ 0x48
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4610      	mov	r0, r2
 8003620:	4798      	blx	r3
	PantallaActual->Refresca();
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3354      	adds	r3, #84	@ 0x54
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
	CambioPantalla=false;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
	if(PantallaActual!=NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase+0x24>
		PantallaActual->Ocultar();
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3360      	adds	r3, #96	@ 0x60
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
	PantallaAnterior=PantallaActual;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
	PantallaActual=pantalla;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	609a      	str	r2, [r3, #8]
	PantallaActual->SetEstacion(Estacion);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6898      	ldr	r0, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3358      	adds	r3, #88	@ 0x58
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6852      	ldr	r2, [r2, #4]
 8003688:	4611      	mov	r1, r2
 800368a:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6898      	ldr	r0, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	335c      	adds	r3, #92	@ 0x5c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6992      	ldr	r2, [r2, #24]
 800369e:	4611      	mov	r1, r2
 80036a0:	4798      	blx	r3
	CambioPantalla=true;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:
void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 80036de:	20e0      	movs	r0, #224	@ 0xe0
 80036e0:	f006 fd25 	bl	800a12e <_Znwj>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461c      	mov	r4, r3
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff fc1d 	bl	8002f28 <_ZN26CConfigurarPantallaMemoriaC1Ev>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	61dc      	str	r4, [r3, #28]
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	336c      	adds	r3, #108	@ 0x6c
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	4610      	mov	r0, r2
 8003704:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff99 	bl	8003644 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}

0800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x26>
		PantallaMemoria=new CPantallaMemoria();
 800372c:	20f0      	movs	r0, #240	@ 0xf0
 800372e:	f006 fcfe 	bl	800a12e <_Znwj>
 8003732:	4603      	mov	r3, r0
 8003734:	461c      	mov	r4, r3
 8003736:	4620      	mov	r0, r4
 8003738:	f001 f842 	bl	80047c0 <_ZN16CPantallaMemoriaC1Ev>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	621c      	str	r4, [r3, #32]
	PantallaMemoria->SetMemoria(memoria);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fbda 	bl	8004f00 <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff76 	bl	8003644 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}

08003760 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv>:
void CManejadorPantallas::MuestraPantallaAnterior()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	if(PantallaAnterior==NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d006      	beq.n	800377e <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv+0x1e>
		return;
	AsignaPantallaActual(PantallaAnterior);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff64 	bl	8003644 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
 800377c:	e000      	b.n	8003780 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv+0x20>
		return;
 800377e:	bf00      	nop
}
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	0800d46c 	.word	0x0800d46c

080037a8 <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	0800d46c 	.word	0x0800d46c

080037c8 <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
}
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ffe9 	bl	80037a8 <_ZN20CManejadorEventoMenuD1Ev>
 80037d6:	2104      	movs	r1, #4
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f006 fca6 	bl	800a12a <_ZdlPvj>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]

}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af04      	add	r7, sp, #16
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	9303      	str	r3, [sp, #12]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	f7ff faaf 	bl	8002d84 <_ZN14CRectanguloTftC1Eiiiiiii>
 8003826:	4a0c      	ldr	r2, [pc, #48]	@ (8003858 <_ZN5CMenuC1Eiiiiiii+0x5c>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2219      	movs	r2, #25
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003842:	3305      	adds	r3, #5
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	fb92 f2f3 	sdiv	r2, r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	0800d480 	.word	0x0800d480

0800385c <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	4a05      	ldr	r2, [pc, #20]	@ (800387c <_ZN5CMenuD1Ev+0x20>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fa67 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	0800d480 	.word	0x0800d480

08003880 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
}
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffe7 	bl	800385c <_ZN5CMenuD1Ev>
 800388e:	2180      	movs	r1, #128	@ 0x80
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f006 fc4a 	bl	800a12a <_ZdlPvj>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	int y;
	CRectanguloTft::Show();
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fa9c 	bl	8002de8 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 80038b6:	e01c      	b.n	80038f2 <_ZN5CMenu4ShowEv+0x52>
	{
		y=tmp->DamePosicionY()+tmp->DameAltura();
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fb3c 	bl	8003f36 <_ZN9CMenuItem13DamePosicionYEv>
 80038be:	4604      	mov	r4, r0
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fb46 	bl	8003f52 <_ZN9CMenuItem10DameAlturaEv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4423      	add	r3, r4
 80038ca:	60bb      	str	r3, [r7, #8]
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8c3 	bl	8003a5a <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <_ZN5CMenu4ShowEv+0x5a>
		{
			return;
		}
		tmp->Show();
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa8e 	bl	8003e06 <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fb18 	bl	8003f20 <_ZN9CMenuItem13DameSiguienteEv>
 80038f0:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1df      	bne.n	80038b8 <_ZN5CMenu4ShowEv+0x18>
 80038f8:	e000      	b.n	80038fc <_ZN5CMenu4ShowEv+0x5c>
			return;
 80038fa:	bf00      	nop
	}
}
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}

08003902 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 8003932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003934:	b091      	sub	sp, #68	@ 0x44
 8003936:	af08      	add	r7, sp, #32
 8003938:	6178      	str	r0, [r7, #20]
 800393a:	6139      	str	r1, [r7, #16]
 800393c:	60fa      	str	r2, [r7, #12]
 800393e:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 8003940:	20a4      	movs	r0, #164	@ 0xa4
 8003942:	f006 fbf4 	bl	800a12e <_Znwj>
 8003946:	4603      	mov	r3, r0
 8003948:	461c      	mov	r4, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	699d      	ldr	r5, [r3, #24]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	69de      	ldr	r6, [r3, #28]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003960:	6979      	ldr	r1, [r7, #20]
 8003962:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003968:	9006      	str	r0, [sp, #24]
 800396a:	2000      	movs	r0, #0
 800396c:	9005      	str	r0, [sp, #20]
 800396e:	2003      	movs	r0, #3
 8003970:	9004      	str	r0, [sp, #16]
 8003972:	9103      	str	r1, [sp, #12]
 8003974:	6939      	ldr	r1, [r7, #16]
 8003976:	9102      	str	r1, [sp, #8]
 8003978:	9201      	str	r2, [sp, #4]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4632      	mov	r2, r6
 8003980:	4629      	mov	r1, r5
 8003982:	4620      	mov	r0, r4
 8003984:	f7fe fec2 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003988:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 800398a:	2028      	movs	r0, #40	@ 0x28
 800398c:	f006 fbcf 	bl	800a12e <_Znwj>
 8003990:	4603      	mov	r3, r0
 8003992:	461c      	mov	r4, r3
 8003994:	7afb      	ldrb	r3, [r7, #11]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	4620      	mov	r0, r4
 800399c:	f000 f9d8 	bl	8003d50 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 80039a0:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	69b8      	ldr	r0, [r7, #24]
 80039b8:	f000 fa5c 	bl	8003e74 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 80039bc:	69bb      	ldr	r3, [r7, #24]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c6 <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ffa9 	bl	8003932 <_ZN5CMenu8CreaItemEPcib>
 80039e0:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d111      	bne.n	8003a0e <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fa54 	bl	8003ea4 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8003a0c:	e00e      	b.n	8003a2c <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f9dd 	bl	8003dd4 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f806 	bl	8003a32 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f911 	bl	8003c4e <_ZN5CMenu14CalculaPaginasEv>
}
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:

void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	3305      	adds	r3, #5
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6838      	ldr	r0, [r7, #0]
 8003a4c:	f000 fa39 	bl	8003ec2 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003a50:	e000      	b.n	8003a54 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 8003a52:	bf00      	nop
}
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 8003a5a:	b590      	push	{r4, r7, lr}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f000 fa66 	bl	8003f36 <_ZN9CMenuItem13DamePosicionYEv>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f000 fa70 	bl	8003f52 <_ZN9CMenuItem10DameAlturaEv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4423      	add	r3, r4
 8003a76:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	4413      	add	r3, r2
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	dd01      	ble.n	8003a8c <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 8003a8c:	2301      	movs	r3, #1
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}

08003a96 <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03f      	beq.n	8003b26 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 8003aac:	e037      	b.n	8003b1e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa5d 	bl	8003f6e <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02d      	beq.n	8003b16 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fa30 	bl	8003f20 <_ZN9CMenuItem13DameSiguienteEv>
 8003ac0:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d030      	beq.n	8003b2a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f9ea 	bl	8003ea4 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	68b8      	ldr	r0, [r7, #8]
 8003ad4:	f000 f9e6 	bl	8003ea4 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ffba 	bl	8003a5a <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f98a 	bl	8003e06 <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8003af2:	68b8      	ldr	r0, [r7, #8]
 8003af4:	f000 f987 	bl	8003e06 <_ZN9CMenuItem4ShowEv>
				return;
 8003af8:	e018      	b.n	8003b2c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff98 	bl	8003a32 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3348      	adds	r3, #72	@ 0x48
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
				return;
 8003b14:	e00a      	b.n	8003b2c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa02 	bl	8003f20 <_ZN9CMenuItem13DameSiguienteEv>
 8003b1c:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1c4      	bne.n	8003aae <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 8003b24:	e002      	b.n	8003b2c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 8003b2a:	bf00      	nop
	}

}
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d05c      	beq.n	8003bfc <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 8003b48:	e054      	b.n	8003bf4 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f000 fa0f 	bl	8003f6e <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d04a      	beq.n	8003bec <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f000 fa15 	bl	8003f86 <_ZN9CMenuItem12DameAnteriorEv>
 8003b5c:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d04d      	beq.n	8003c00 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 8003b64:	2100      	movs	r1, #0
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f000 f99c 	bl	8003ea4 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f998 	bl	8003ea4 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f8ba 	bl	8003cf6 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d006      	beq.n	8003ba0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f000 f937 	bl	8003e06 <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f934 	bl	8003e06 <_ZN9CMenuItem4ShowEv>
				return;
 8003b9e:	e030      	b.n	8003c02 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba4:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 8003ba6:	e00b      	b.n	8003bc0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f000 f9ec 	bl	8003f86 <_ZN9CMenuItem12DameAnteriorEv>
 8003bae:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dced      	bgt.n	8003ba8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8003bcc:	e000      	b.n	8003bd0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8003bce:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8003bd0:	6979      	ldr	r1, [r7, #20]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ff2d 	bl	8003a32 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3348      	adds	r3, #72	@ 0x48
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
				return;
 8003bea:	e00a      	b.n	8003c02 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 8003bec:	6978      	ldr	r0, [r7, #20]
 8003bee:	f000 f9ca 	bl	8003f86 <_ZN9CMenuItem12DameAnteriorEv>
 8003bf2:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1a7      	bne.n	8003b4a <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8003bfa:	e002      	b.n	8003c02 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8003c00:	bf00      	nop
	}

}
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 8003c08:	b5b0      	push	{r4, r5, r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d014      	beq.n	8003c42 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d012      	beq.n	8003c46 <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	681c      	ldr	r4, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9b2 	bl	8003f9c <_ZN9CMenuItem17DameIdentificadorEv>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47a0      	blx	r4
 8003c40:	e002      	b.n	8003c48 <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003c46:	bf00      	nop
}
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}

08003c4e <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f833 	bl	8003cc2 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003c7a:	e01a      	b.n	8003cb2 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c86:	fb01 f202 	mul.w	r2, r1, r2
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3314      	adds	r3, #20
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f938 	bl	8003f20 <_ZN9CMenuItem13DameSiguienteEv>
 8003cb0:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e1      	bne.n	8003c7c <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e009      	b.n	8003ce4 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	2200      	movs	r2, #0
 8003cdc:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b09      	cmp	r3, #9
 8003ce8:	ddf2      	ble.n	8003cd0 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e00d      	b.n	8003d22 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3314      	adds	r3, #20
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d101      	bne.n	8003d1c <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e006      	b.n	8003d2a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b09      	cmp	r3, #9
 8003d26:	ddee      	ble.n	8003d06 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8003d28:	2300      	movs	r3, #0

}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
	...

08003d50 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	70fb      	strb	r3, [r7, #3]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d90 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x40>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	0800d4dc 	.word	0x0800d4dc

08003d94 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	@ (8003db0 <_ZN9CMenuItemD1Ev+0x1c>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	0800d4dc 	.word	0x0800d4dc

08003db4 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
}
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ffe9 	bl	8003d94 <_ZN9CMenuItemD1Ev>
 8003dc2:	2128      	movs	r1, #40	@ 0x28
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f006 f9b0 	bl	800a12a <_ZdlPvj>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	60da      	str	r2, [r3, #12]
		return;
 8003df2:	e005      	b.n	8003e00 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ffea 	bl	8003dd4 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f7fe fdf1 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f7fe fe34 	bl	8002aa0 <_ZN12CEtiquetaTft12SetBackColorEi>
 8003e38:	e00f      	b.n	8003e5a <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe fde0 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7fe fe23 	bl	8002aa0 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3348      	adds	r3, #72	@ 0x48
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4798      	blx	r3
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fff6 	bl	8002ec2 <_ZN14CRectanguloTft13DamePosicionXEv>
 8003ed6:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	334c      	adds	r3, #76	@ 0x4c
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	4798      	blx	r3
	if(Siguiente==NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fff7 	bl	8002eee <_ZN14CRectanguloTft8DameAltoEv>
 8003f00:	4602      	mov	r2, r0
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	3305      	adds	r3, #5
 8003f08:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ffd6 	bl	8003ec2 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003f16:	e000      	b.n	8003f1a <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8003f18:	bf00      	nop
}
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe ffc8 	bl	8002ed8 <_ZN14CRectanguloTft13DamePosicionYEv>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe ffc5 	bl	8002eee <_ZN14CRectanguloTft8DameAltoEv>
 8003f64:	4603      	mov	r3, r0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
	return Anterior;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	return Identificador;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <_ZN15CPantallaManualD1Ev>:
#include "Uart/Uart.h"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	4a07      	ldr	r2, [pc, #28]	@ (8003fdc <_ZN15CPantallaManualD1Ev+0x28>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	@ (8003fe0 <_ZN15CPantallaManualD1Ev+0x2c>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fd76 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800d4ec 	.word	0x0800d4ec
 8003fe0:	0800d580 	.word	0x0800d580

08003fe4 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelAire;
	CEtiquetaTft *LabelEstado;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8003fe4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003fe8:	f7ff bfe4 	b.w	8003fb4 <_ZN15CPantallaManualD1Ev>

08003fec <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
}
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ffdd 	bl	8003fb4 <_ZN15CPantallaManualD1Ev>
 8003ffa:	21e8      	movs	r1, #232	@ 0xe8
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f006 f894 	bl	800a12a <_ZdlPvj>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZThn48_N15CPantallaManualD0Ev>:
 800400c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004010:	f7ff bfec 	b.w	8003fec <_ZN15CPantallaManualD0Ev>

08004014 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b08d      	sub	sp, #52	@ 0x34
 8004018:	af08      	add	r7, sp, #32
 800401a:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: Manual")
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a68      	ldr	r2, [pc, #416]	@ (80041c0 <_ZN15CPantallaManualC1Ev+0x1ac>)
 8004020:	2101      	movs	r1, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fd7e 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 8004028:	4a66      	ldr	r2, [pc, #408]	@ (80041c4 <_ZN15CPantallaManualC1Ev+0x1b0>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	4a66      	ldr	r2, [pc, #408]	@ (80041c8 <_ZN15CPantallaManualC1Ev+0x1b4>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004094:	20a4      	movs	r0, #164	@ 0xa4
 8004096:	f006 f84a 	bl	800a12e <_Znwj>
 800409a:	4603      	mov	r3, r0
 800409c:	461c      	mov	r4, r3
 800409e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040a2:	9306      	str	r3, [sp, #24]
 80040a4:	2300      	movs	r3, #0
 80040a6:	9305      	str	r3, [sp, #20]
 80040a8:	2303      	movs	r3, #3
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040b0:	9303      	str	r3, [sp, #12]
 80040b2:	4b46      	ldr	r3, [pc, #280]	@ (80041cc <_ZN15CPantallaManualC1Ev+0x1b8>)
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	2300      	movs	r3, #0
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	2314      	movs	r3, #20
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2332      	movs	r3, #50	@ 0x32
 80040c0:	2223      	movs	r2, #35	@ 0x23
 80040c2:	2105      	movs	r1, #5
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7fe fb21 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	int centroX = DameCentroX();
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe ff16 	bl	8002f04 <_ZN14CRectanguloTft11DameCentroXEv>
 80040d8:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 80040da:	20a4      	movs	r0, #164	@ 0xa4
 80040dc:	f006 f827 	bl	800a12e <_Znwj>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461c      	mov	r4, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 80040ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80040ee:	9306      	str	r3, [sp, #24]
 80040f0:	2301      	movs	r3, #1
 80040f2:	9305      	str	r3, [sp, #20]
 80040f4:	2303      	movs	r3, #3
 80040f6:	9304      	str	r3, [sp, #16]
 80040f8:	2300      	movs	r3, #0
 80040fa:	9303      	str	r3, [sp, #12]
 80040fc:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <_ZN15CPantallaManualC1Ev+0x1bc>)
 80040fe:	9302      	str	r3, [sp, #8]
 8004100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	231e      	movs	r3, #30
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2396      	movs	r3, #150	@ 0x96
 800410c:	2241      	movs	r2, #65	@ 0x41
 800410e:	4620      	mov	r0, r4
 8004110:	f7fe fafc 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelTemperaturas->SetSeparacion(5, 5);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004120:	2205      	movs	r2, #5
 8004122:	2105      	movs	r1, #5
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fc5d 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 800412a:	20a4      	movs	r0, #164	@ 0xa4
 800412c:	f005 ffff 	bl	800a12e <_Znwj>
 8004130:	4603      	mov	r3, r0
 8004132:	461c      	mov	r4, r3
 8004134:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004138:	9306      	str	r3, [sp, #24]
 800413a:	2300      	movs	r3, #0
 800413c:	9305      	str	r3, [sp, #20]
 800413e:	2303      	movs	r3, #3
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <_ZN15CPantallaManualC1Ev+0x1c0>)
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	2300      	movs	r3, #0
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	231e      	movs	r3, #30
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	23c8      	movs	r3, #200	@ 0xc8
 8004156:	2269      	movs	r2, #105	@ 0x69
 8004158:	2105      	movs	r1, #5
 800415a:	4620      	mov	r0, r4
 800415c:	f7fe fad6 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 8004166:	20a4      	movs	r0, #164	@ 0xa4
 8004168:	f005 ffe1 	bl	800a12e <_Znwj>
 800416c:	4603      	mov	r3, r0
 800416e:	461c      	mov	r4, r3
 8004170:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004174:	9306      	str	r3, [sp, #24]
 8004176:	2300      	movs	r3, #0
 8004178:	9305      	str	r3, [sp, #20]
 800417a:	2303      	movs	r3, #3
 800417c:	9304      	str	r3, [sp, #16]
 800417e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <_ZN15CPantallaManualC1Ev+0x1c4>)
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	2300      	movs	r3, #0
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	2323      	movs	r3, #35	@ 0x23
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004194:	2291      	movs	r2, #145	@ 0x91
 8004196:	2105      	movs	r1, #5
 8004198:	4620      	mov	r0, r4
 800419a:	f7fe fab7 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041aa:	2205      	movs	r2, #5
 80041ac:	210f      	movs	r1, #15
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe fc18 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}
 80041be:	bf00      	nop
 80041c0:	0800ced0 	.word	0x0800ced0
 80041c4:	0800d4ec 	.word	0x0800d4ec
 80041c8:	0800d580 	.word	0x0800d580
 80041cc:	0800cee0 	.word	0x0800cee0
 80041d0:	0800ceec 	.word	0x0800ceec
 80041d4:	0800cef4 	.word	0x0800cef4
 80041d8:	0800cf00 	.word	0x0800cf00

080041dc <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d116      	bne.n	800421c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d10e      	bne.n	800421c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3364      	adds	r3, #100	@ 0x64
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d143      	bne.n	80042a4 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	if (EstadoBoquilla == 1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800422e:	2b01      	cmp	r3, #1
 8004230:	d115      	bne.n	800425e <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004238:	211f      	movs	r1, #31
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fe34 	bl	8002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fbde 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004254:	4915      	ldr	r1, [pc, #84]	@ (80042ac <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fa92 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
 800425c:	e016      	b.n	800428c <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004264:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fe1d 	bl	8002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004274:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fbc6 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004284:	490a      	ldr	r1, [pc, #40]	@ (80042b0 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fa7a 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3348      	adds	r3, #72	@ 0x48
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4610      	mov	r0, r2
 80042a0:	4798      	blx	r3
 80042a2:	e000      	b.n	80042a6 <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 80042a4:	bf00      	nop
}
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	0800cf10 	.word	0x0800cf10
 80042b0:	0800cf00 	.word	0x0800cf00

080042b4 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3310      	adds	r3, #16
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4610      	mov	r0, r2
 80042d0:	4798      	blx	r3
 80042d2:	4602      	mov	r2, r0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaReal();
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
 80042f0:	4603      	mov	r3, r0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc fe9c 	bl	8001030 <__aeabi_f2iz>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire = ManejadorControles->GetNivelAire();
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004306:	4618      	mov	r0, r3
 8004308:	f001 ff9b 	bl	8006242 <_ZN19CManejadorControles12GetNivelAireEv>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	EstadoBoquilla=Estacion->GetEstado();
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	331c      	adds	r3, #28
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4610      	mov	r0, r2
 8004328:	4798      	blx	r3
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11e      	bne.n	800438c <_ZN15CPantallaManual19MuestraTemperaturasEb+0x50>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura && EsVisible()==true )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800435a:	429a      	cmp	r2, r3
 800435c:	d113      	bne.n	8004386 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800436a:	429a      	cmp	r2, r3
 800436c:	d10b      	bne.n	8004386 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3364      	adds	r3, #100	@ 0x64
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4c>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d123      	bne.n	80043d4 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x98>
			return;
	}
	TemperaturaAnterior=Temperatura;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	SetTemperaturaAnterior=SetTemperatura;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043b6:	4909      	ldr	r1, [pc, #36]	@ (80043dc <_ZN15CPantallaManual19MuestraTemperaturasEb+0xa0>)
 80043b8:	f7fe f9e2 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3348      	adds	r3, #72	@ 0x48
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4610      	mov	r0, r2
 80043d0:	4798      	blx	r3
 80043d2:	e000      	b.n	80043d6 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x9a>
			return;
 80043d4:	bf00      	nop
}
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	0800cf20 	.word	0x0800cf20

080043e0 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Estacion->SetNivelAire(NivelAire);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3314      	adds	r3, #20
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 800440a:	4611      	mov	r1, r2
 800440c:	4798      	blx	r3
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
private:
	void MuestraEstado(bool forrzar);
	void MuestraNivelAire(bool forrzar);
	void LeeDatosEstacion();
	void MuestraTemperaturas(bool forrzar);
	void OnNivelAireEvent(int aire);
 8004416:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800441a:	f7ff bfe1 	b.w	80043e0 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

08004420 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d116      	bne.n	8004460 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800443e:	429a      	cmp	r2, r3
 8004440:	d10b      	bne.n	800445a <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3364      	adds	r3, #100	@ 0x64
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d129      	bne.n	80044b4 <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Estacion->SetNivelAire(NivelAire);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8004484:	4611      	mov	r1, r2
 8004486:	4798      	blx	r3
	LabelAire->SetTexto("Aire: %d", NivelAire);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004494:	461a      	mov	r2, r3
 8004496:	4909      	ldr	r1, [pc, #36]	@ (80044bc <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8004498:	f7fe f972 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3348      	adds	r3, #72	@ 0x48
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4610      	mov	r0, r2
 80044b0:	4798      	blx	r3
 80044b2:	e000      	b.n	80044b6 <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 80044b4:	bf00      	nop

}
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	0800cf28 	.word	0x0800cf28

080044c0 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 80044dc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80044e0:	f7ff bfee 	b.w	80044c0 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

080044e4 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3320      	adds	r3, #32
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4610      	mov	r0, r2
 8004500:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:
	void MuestraInformacion(bool forzar);

	//eventos del Encoder
	virtual void OnPerillaIncremento();
 8004512:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004516:	f7ff bfe5 	b.w	80044e4 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

0800451a <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3324      	adds	r3, #36	@ 0x24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4610      	mov	r0, r2
 8004536:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004548:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800454c:	f7ff bfe5 	b.w	800451a <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08004550 <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <_ZN15CPantallaManual8RefrescaEv+0x18>
		GuardaTemperatura();
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f83e 	bl	80045e4 <_ZN15CPantallaManual17GuardaTemperaturaEv>
	MuestraInformacion(false);
 8004568:	2100      	movs	r1, #0
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f816 	bl	800459c <_ZN15CPantallaManual18MuestraInformacionEb>
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>:
 void CPantallaManual::OnBotonPerillaClickEvent(int tiempoClick)
 {
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004582:	4803      	ldr	r0, [pc, #12]	@ (8004590 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi+0x18>)
 8004584:	f7ff f81f 	bl	80035c6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200001f8 	.word	0x200001f8

08004594 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8004594:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004598:	f7ff bfee 	b.w	8004578 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>

0800459c <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fe83 	bl	80042b4 <_ZN15CPantallaManual16LeeDatosEstacionEv>
		MuestraTemperaturas(forzar);
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fec2 	bl	800433c <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fe0d 	bl	80041dc <_ZN15CPantallaManual13MuestraEstadoEb>
		MuestraNivelAire(forzar);
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ff2a 	bl	8004420 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3368      	adds	r3, #104	@ 0x68
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2101      	movs	r1, #1
 80045d8:	4610      	mov	r0, r2
 80045da:	4798      	blx	r3

 }
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	@ 0x28
 80045e8:	af04      	add	r7, sp, #16
 80045ea:	6078      	str	r0, [r7, #4]
 	uint8_t temperatura=Estacion->GetTemperatura();
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3310      	adds	r3, #16
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4610      	mov	r0, r2
 8004600:	4798      	blx	r3
 8004602:	4603      	mov	r3, r0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	74fb      	strb	r3, [r7, #19]
 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 8004608:	f003 fd8a 	bl	8008120 <HAL_GetTick>
 800460c:	4603      	mov	r3, r0
 800460e:	617b      	str	r3, [r7, #20]
 	if(t>tiempoescritura)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	dd17      	ble.n	800464c <_ZN15CPantallaManual17GuardaTemperaturaEv+0x68>
 	{

 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY);
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	2301      	movs	r3, #1
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	f107 0313 	add.w	r3, r7, #19
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2301      	movs	r3, #1
 800462e:	2200      	movs	r2, #0
 8004630:	21a0      	movs	r1, #160	@ 0xa0
 8004632:	4808      	ldr	r0, [pc, #32]	@ (8004654 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x70>)
 8004634:	f004 fb4e 	bl	8008cd4 <HAL_I2C_Mem_Write>
 		TemperaturaGuardada=true;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 		tiempoescritura=t+1000;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 	}

 }
 800464c:	bf00      	nop
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000254 	.word	0x20000254

08004658 <_ZN15CPantallaManual4ShowEv>:
 void CPantallaManual::Show()
 {
 8004658:	b580      	push	{r7, lr}
 800465a:	b094      	sub	sp, #80	@ 0x50
 800465c:	af04      	add	r7, sp, #16
 800465e:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fad0 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3348      	adds	r3, #72	@ 0x48
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3

 	uint8_t temperatura;
 	uint8_t datos_w[10];
 	uint8_t datos_r[10];
 	char buf_tx[30];
 	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY)==HAL_OK)
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	2301      	movs	r3, #1
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2301      	movs	r3, #1
 8004690:	2200      	movs	r2, #0
 8004692:	21a0      	movs	r1, #160	@ 0xa0
 8004694:	4813      	ldr	r0, [pc, #76]	@ (80046e4 <_ZN15CPantallaManual4ShowEv+0x8c>)
 8004696:	f004 fbad 	bl	8008df4 <HAL_I2C_Mem_Read>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <_ZN15CPantallaManual4ShowEv+0x74>
 	  {
 		 	if(temperatura>=0 && temperatura<=500)
 		 	{
 		 		Estacion->SetTemperatura(temperatura);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80046c0:	4610      	mov	r0, r2
 80046c2:	4798      	blx	r3
 		 	}
 		 	TemperaturaGuardada=true;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 	  }
 	LeeDatosEstacion();
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fdf1 	bl	80042b4 <_ZN15CPantallaManual16LeeDatosEstacionEv>
 	MuestraInformacion(true);
 80046d2:	2101      	movs	r1, #1
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff61 	bl	800459c <_ZN15CPantallaManual18MuestraInformacionEb>
 }
 80046da:	bf00      	nop
 80046dc:	3740      	adds	r7, #64	@ 0x40
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000254 	.word	0x20000254

080046e8 <_ZN15CPantallaManual21OnBotonTresClickEventEi>:
void CPantallaManual::OnBotonTresClickEvent(int tiempoClick)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 80046f2:	2103      	movs	r1, #3
 80046f4:	4803      	ldr	r0, [pc, #12]	@ (8004704 <_ZN15CPantallaManual21OnBotonTresClickEventEi+0x1c>)
 80046f6:	f7ff f810 	bl	800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200001f8 	.word	0x200001f8

08004708 <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEi>:

	virtual void OnBotonUnoClickEvent(int tiempoClick);
	virtual void OnBotonDosClickEvent(int tiempoClick);
	virtual void OnBotonTresClickEvent(int tiempoClick);
 8004708:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800470c:	f7ff bfec 	b.w	80046e8 <_ZN15CPantallaManual21OnBotonTresClickEventEi>

08004710 <_ZN15CPantallaManual20OnBotonUnoClickEventEi>:
void CPantallaManual::OnBotonUnoClickEvent(int tiempoClick)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 800471a:	2101      	movs	r1, #1
 800471c:	4803      	ldr	r0, [pc, #12]	@ (800472c <_ZN15CPantallaManual20OnBotonUnoClickEventEi+0x1c>)
 800471e:	f7fe fffc 	bl	800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200001f8 	.word	0x200001f8

08004730 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEi>:
	virtual void OnBotonUnoClickEvent(int tiempoClick);
 8004730:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004734:	f7ff bfec 	b.w	8004710 <_ZN15CPantallaManual20OnBotonUnoClickEventEi>

08004738 <_ZN15CPantallaManual20OnBotonDosClickEventEi>:
void CPantallaManual::OnBotonDosClickEvent(int tiempoClick)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8004742:	2102      	movs	r1, #2
 8004744:	4803      	ldr	r0, [pc, #12]	@ (8004754 <_ZN15CPantallaManual20OnBotonDosClickEventEi+0x1c>)
 8004746:	f7fe ffe8 	bl	800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200001f8 	.word	0x200001f8

08004758 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 8004758:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800475c:	f7ff bfec 	b.w	8004738 <_ZN15CPantallaManual20OnBotonDosClickEventEi>

08004760 <_ZN16CPantallaMemoriaD1Ev>:
#include "Uart/Uart.h"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	4a07      	ldr	r2, [pc, #28]	@ (8004788 <_ZN16CPantallaMemoriaD1Ev+0x28>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	4a07      	ldr	r2, [pc, #28]	@ (800478c <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe f9a0 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	0800d5f0 	.word	0x0800d5f0
 800478c:	0800d688 	.word	0x0800d688

08004790 <_ZThn48_N16CPantallaMemoriaD1Ev>:
	virtual void OnBotonCuatroClickEvent(int tiempoClick);
	void GuardaTemperatura();
public:
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 8004790:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004794:	f7ff bfe4 	b.w	8004760 <_ZN16CPantallaMemoriaD1Ev>

08004798 <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
}
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ffdd 	bl	8004760 <_ZN16CPantallaMemoriaD1Ev>
 80047a6:	21f0      	movs	r1, #240	@ 0xf0
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f005 fcbe 	bl	800a12a <_ZdlPvj>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <_ZThn48_N16CPantallaMemoriaD0Ev>:
 80047b8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80047bc:	f7ff bfec 	b.w	8004798 <_ZN16CPantallaMemoriaD0Ev>

080047c0 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b08d      	sub	sp, #52	@ 0x34
 80047c4:	af08      	add	r7, sp, #32
 80047c6:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: MEMORIA")
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a77      	ldr	r2, [pc, #476]	@ (80049a8 <_ZN16CPantallaMemoriaC1Ev+0x1e8>)
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe f9a8 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 80047d4:	4a75      	ldr	r2, [pc, #468]	@ (80049ac <_ZN16CPantallaMemoriaC1Ev+0x1ec>)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	4a75      	ldr	r2, [pc, #468]	@ (80049b0 <_ZN16CPantallaMemoriaC1Ev+0x1f0>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f04f 32ff 	mov.w	r2, #4294967295
 80047ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
 8004812:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004840:	20a4      	movs	r0, #164	@ 0xa4
 8004842:	f005 fc74 	bl	800a12e <_Znwj>
 8004846:	4603      	mov	r3, r0
 8004848:	461c      	mov	r4, r3
 800484a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800484e:	9306      	str	r3, [sp, #24]
 8004850:	2300      	movs	r3, #0
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	2303      	movs	r3, #3
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800485c:	9303      	str	r3, [sp, #12]
 800485e:	4b55      	ldr	r3, [pc, #340]	@ (80049b4 <_ZN16CPantallaMemoriaC1Ev+0x1f4>)
 8004860:	9302      	str	r3, [sp, #8]
 8004862:	2300      	movs	r3, #0
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	2314      	movs	r3, #20
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2332      	movs	r3, #50	@ 0x32
 800486c:	2223      	movs	r2, #35	@ 0x23
 800486e:	2105      	movs	r1, #5
 8004870:	4620      	mov	r0, r4
 8004872:	f7fd ff4b 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8c3 40ec 	str.w	r4, [r3, #236]	@ 0xec
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800487c:	20a4      	movs	r0, #164	@ 0xa4
 800487e:	f005 fc56 	bl	800a12e <_Znwj>
 8004882:	4603      	mov	r3, r0
 8004884:	461c      	mov	r4, r3
 8004886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800488a:	9306      	str	r3, [sp, #24]
 800488c:	2300      	movs	r3, #0
 800488e:	9305      	str	r3, [sp, #20]
 8004890:	2303      	movs	r3, #3
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	4b47      	ldr	r3, [pc, #284]	@ (80049b8 <_ZN16CPantallaMemoriaC1Ev+0x1f8>)
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	2300      	movs	r3, #0
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	2314      	movs	r3, #20
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	2332      	movs	r3, #50	@ 0x32
 80048a8:	2241      	movs	r2, #65	@ 0x41
 80048aa:	2105      	movs	r1, #5
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7fd ff2d 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	int centroX = DameCentroX();
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fb22 	bl	8002f04 <_ZN14CRectanguloTft11DameCentroXEv>
 80048c0:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 95, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 80048c2:	20a4      	movs	r0, #164	@ 0xa4
 80048c4:	f005 fc33 	bl	800a12e <_Znwj>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461c      	mov	r4, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 80048d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80048d6:	9306      	str	r3, [sp, #24]
 80048d8:	2301      	movs	r3, #1
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	2303      	movs	r3, #3
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	2300      	movs	r3, #0
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <_ZN16CPantallaMemoriaC1Ev+0x1fc>)
 80048e6:	9302      	str	r3, [sp, #8]
 80048e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	231e      	movs	r3, #30
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2396      	movs	r3, #150	@ 0x96
 80048f4:	225f      	movs	r2, #95	@ 0x5f
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7fd ff08 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelTemperaturas->SetSeparacion(5, 5);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004908:	2205      	movs	r2, #5
 800490a:	2105      	movs	r1, #5
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe f869 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8004912:	20a4      	movs	r0, #164	@ 0xa4
 8004914:	f005 fc0b 	bl	800a12e <_Znwj>
 8004918:	4603      	mov	r3, r0
 800491a:	461c      	mov	r4, r3
 800491c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004920:	9306      	str	r3, [sp, #24]
 8004922:	2300      	movs	r3, #0
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	2303      	movs	r3, #3
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	4b23      	ldr	r3, [pc, #140]	@ (80049c0 <_ZN16CPantallaMemoriaC1Ev+0x200>)
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	2300      	movs	r3, #0
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	231e      	movs	r3, #30
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	23c8      	movs	r3, #200	@ 0xc8
 800493e:	2287      	movs	r2, #135	@ 0x87
 8004940:	2105      	movs	r1, #5
 8004942:	4620      	mov	r0, r4
 8004944:	f7fd fee2 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 175, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 800494e:	20a4      	movs	r0, #164	@ 0xa4
 8004950:	f005 fbed 	bl	800a12e <_Znwj>
 8004954:	4603      	mov	r3, r0
 8004956:	461c      	mov	r4, r3
 8004958:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800495c:	9306      	str	r3, [sp, #24]
 800495e:	2300      	movs	r3, #0
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	2303      	movs	r3, #3
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <_ZN16CPantallaMemoriaC1Ev+0x204>)
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	2300      	movs	r3, #0
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	2323      	movs	r3, #35	@ 0x23
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800497c:	22af      	movs	r2, #175	@ 0xaf
 800497e:	2105      	movs	r1, #5
 8004980:	4620      	mov	r0, r4
 8004982:	f7fd fec3 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004992:	2205      	movs	r2, #5
 8004994:	210f      	movs	r1, #15
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe f824 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>

}
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}
 80049a6:	bf00      	nop
 80049a8:	0800cf34 	.word	0x0800cf34
 80049ac:	0800d5f0 	.word	0x0800d5f0
 80049b0:	0800d688 	.word	0x0800d688
 80049b4:	0800cf48 	.word	0x0800cf48
 80049b8:	0800cf54 	.word	0x0800cf54
 80049bc:	0800cf60 	.word	0x0800cf60
 80049c0:	0800cf68 	.word	0x0800cf68
 80049c4:	0800cf74 	.word	0x0800cf74

080049c8 <_ZN16CPantallaMemoria13MuestraEstadoEb>:


void CPantallaMemoria::MuestraEstado(bool forzar)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d116      	bne.n	8004a08 <_ZN16CPantallaMemoria13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d10e      	bne.n	8004a08 <_ZN16CPantallaMemoria13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3364      	adds	r3, #100	@ 0x64
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4610      	mov	r0, r2
 80049f6:	4798      	blx	r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d143      	bne.n	8004a90 <_ZN16CPantallaMemoria13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	if (EstadoBoquilla == 1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d115      	bne.n	8004a4a <_ZN16CPantallaMemoria13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a24:	211f      	movs	r1, #31
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fa3e 	bl	8002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd ffe8 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a40:	4915      	ldr	r1, [pc, #84]	@ (8004a98 <_ZN16CPantallaMemoria13MuestraEstadoEb+0xd0>)
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fe9c 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
 8004a48:	e016      	b.n	8004a78 <_ZN16CPantallaMemoria13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a50:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fa27 	bl	8002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd ffd0 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a70:	490a      	ldr	r1, [pc, #40]	@ (8004a9c <_ZN16CPantallaMemoria13MuestraEstadoEb+0xd4>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fe84 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3348      	adds	r3, #72	@ 0x48
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4798      	blx	r3
 8004a8e:	e000      	b.n	8004a92 <_ZN16CPantallaMemoria13MuestraEstadoEb+0xca>
				return;
 8004a90:	bf00      	nop
}
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	0800cf84 	.word	0x0800cf84
 8004a9c:	0800cf74 	.word	0x0800cf74

08004aa0 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>:

void CPantallaMemoria::LeeDatosEstacion()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4610      	mov	r0, r2
 8004abc:	4798      	blx	r3
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaReal();
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4798      	blx	r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc faa6 	bl	8001030 <__aeabi_f2iz>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire = ManejadorControles->GetNivelAire();
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 fba5 	bl	8006242 <_ZN19CManejadorControles12GetNivelAireEv>
 8004af8:	4602      	mov	r2, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	EstadoBoquilla=Estacion->GetEstado();
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	331c      	adds	r3, #28
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4610      	mov	r0, r2
 8004b14:	4798      	blx	r3
 8004b16:	4602      	mov	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <_ZN16CPantallaMemoria19MuestraTemperaturasEb>:


void CPantallaMemoria::MuestraTemperaturas(bool forzar)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11e      	bne.n	8004b78 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x50>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura && EsVisible()==true )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d113      	bne.n	8004b72 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x4a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d10b      	bne.n	8004b72 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x4a>
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3364      	adds	r3, #100	@ 0x64
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x4a>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x4c>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d123      	bne.n	8004bc0 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x98>
			return;
	}
	TemperaturaAnterior=Temperatura;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	SetTemperaturaAnterior=SetTemperatura;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ba2:	4909      	ldr	r1, [pc, #36]	@ (8004bc8 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0xa0>)
 8004ba4:	f7fd fdec 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3348      	adds	r3, #72	@ 0x48
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4798      	blx	r3
 8004bbe:	e000      	b.n	8004bc2 <_ZN16CPantallaMemoria19MuestraTemperaturasEb+0x9a>
			return;
 8004bc0:	bf00      	nop
}
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	0800cf94 	.word	0x0800cf94

08004bcc <_ZN16CPantallaMemoria16OnNivelAireEventEi>:

void CPantallaMemoria::OnNivelAireEvent(int aire)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Estacion->SetNivelAire(NivelAire);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4798      	blx	r3
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <_ZThn48_N16CPantallaMemoria16OnNivelAireEventEi>:
	void OnNivelAireEvent(int aire);
 8004c02:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004c06:	f7ff bfe1 	b.w	8004bcc <_ZN16CPantallaMemoria16OnNivelAireEventEi>
	...

08004c0c <_ZN16CPantallaMemoria16MuestraNivelAireEb>:

void CPantallaMemoria::MuestraNivelAire(bool forzar)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d10b      	bne.n	8004c46 <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x3a>
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3364      	adds	r3, #100	@ 0x64
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4798      	blx	r3
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x3a>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x3c>
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d129      	bne.n	8004ca0 <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Estacion->SetNivelAire(NivelAire);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8004c70:	4611      	mov	r1, r2
 8004c72:	4798      	blx	r3
	LabelAire->SetTexto("Aire: %d", NivelAire);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c80:	461a      	mov	r2, r3
 8004c82:	4909      	ldr	r1, [pc, #36]	@ (8004ca8 <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x9c>)
 8004c84:	f7fd fd7c 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3348      	adds	r3, #72	@ 0x48
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4798      	blx	r3
 8004c9e:	e000      	b.n	8004ca2 <_ZN16CPantallaMemoria16MuestraNivelAireEb+0x96>
			return;
 8004ca0:	bf00      	nop

}
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	0800cf9c 	.word	0x0800cf9c

08004cac <_ZN16CPantallaMemoria22OnTemperaturaRealEventEi>:

void CPantallaMemoria::OnTemperaturaRealEvent(int temperatura)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <_ZThn48_N16CPantallaMemoria22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 8004cc8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004ccc:	f7ff bfee 	b.w	8004cac <_ZN16CPantallaMemoria22OnTemperaturaRealEventEi>

08004cd0 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaMemoria::OnPerillaIncremento()
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3320      	adds	r3, #32
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4610      	mov	r0, r2
 8004cec:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <_ZThn48_N16CPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8004cfe:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004d02:	f7ff bfe5 	b.w	8004cd0 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>

08004d06 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>:

void CPantallaMemoria::OnPerillaDecremento()
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3324      	adds	r3, #36	@ 0x24
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <_ZThn48_N16CPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004d34:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004d38:	f7ff bfe5 	b.w	8004d06 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>

08004d3c <_ZN16CPantallaMemoria8RefrescaEv>:

void CPantallaMemoria::Refresca()
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <_ZN16CPantallaMemoria8RefrescaEv+0x18>
		GuardaTemperatura();
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f83e 	bl	8004dd0 <_ZN16CPantallaMemoria17GuardaTemperaturaEv>
	MuestraInformacion(false);
 8004d54:	2100      	movs	r1, #0
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f816 	bl	8004d88 <_ZN16CPantallaMemoria18MuestraInformacionEb>
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZN16CPantallaMemoria24OnBotonPerillaClickEventEi>:
 void CPantallaMemoria::OnBotonPerillaClickEvent(int tiempoClick)
 {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004d6e:	4803      	ldr	r0, [pc, #12]	@ (8004d7c <_ZN16CPantallaMemoria24OnBotonPerillaClickEventEi+0x18>)
 8004d70:	f7fe fc29 	bl	80035c6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	200001f8 	.word	0x200001f8

08004d80 <_ZThn48_N16CPantallaMemoria24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8004d80:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004d84:	f7ff bfee 	b.w	8004d64 <_ZN16CPantallaMemoria24OnBotonPerillaClickEventEi>

08004d88 <_ZN16CPantallaMemoria18MuestraInformacionEb>:
 void CPantallaMemoria::MuestraInformacion(bool forzar)
 {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fe83 	bl	8004aa0 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>
		MuestraTemperaturas(forzar);
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fec2 	bl	8004b28 <_ZN16CPantallaMemoria19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fe0d 	bl	80049c8 <_ZN16CPantallaMemoria13MuestraEstadoEb>
		MuestraNivelAire(forzar);
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff2a 	bl	8004c0c <_ZN16CPantallaMemoria16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3368      	adds	r3, #104	@ 0x68
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4798      	blx	r3

 }
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_ZN16CPantallaMemoria17GuardaTemperaturaEv>:
 void CPantallaMemoria::GuardaTemperatura()
 {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	@ 0x28
 8004dd4:	af04      	add	r7, sp, #16
 8004dd6:	6078      	str	r0, [r7, #4]
 	uint8_t temperatura=Estacion->GetTemperatura();
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3310      	adds	r3, #16
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4610      	mov	r0, r2
 8004dec:	4798      	blx	r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	74fb      	strb	r3, [r7, #19]
 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 8004df4:	f003 f994 	bl	8008120 <HAL_GetTick>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	617b      	str	r3, [r7, #20]
 	if(t>tiempoescritura)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	dd17      	ble.n	8004e38 <_ZN16CPantallaMemoria17GuardaTemperaturaEv+0x68>
 	{

 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY);
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	f107 0313 	add.w	r3, r7, #19
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	21a0      	movs	r1, #160	@ 0xa0
 8004e1e:	4808      	ldr	r0, [pc, #32]	@ (8004e40 <_ZN16CPantallaMemoria17GuardaTemperaturaEv+0x70>)
 8004e20:	f003 ff58 	bl	8008cd4 <HAL_I2C_Mem_Write>
 		TemperaturaGuardada=true;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 		tiempoescritura=t+1000;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 	}

 }
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000254 	.word	0x20000254

08004e44 <_ZN16CPantallaMemoria4ShowEv>:
 void CPantallaMemoria::Show()
 {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b094      	sub	sp, #80	@ 0x50
 8004e48:	af04      	add	r7, sp, #16
 8004e4a:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd feda 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3348      	adds	r3, #72	@ 0x48
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4610      	mov	r0, r2
 8004e68:	4798      	blx	r3
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto("Memoria: %d", NumeroMemoria);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e76:	461a      	mov	r2, r3
 8004e78:	491f      	ldr	r1, [pc, #124]	@ (8004ef8 <_ZN16CPantallaMemoria4ShowEv+0xb4>)
 8004e7a:	f7fd fc81 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3348      	adds	r3, #72	@ 0x48
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4610      	mov	r0, r2
 8004e92:	4798      	blx	r3

 	uint8_t temperatura;
 	uint8_t datos_w[10];
 	uint8_t datos_r[10];
 	char buf_tx[30];
 	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY)==HAL_OK)
 8004e94:	f04f 33ff 	mov.w	r3, #4294967295
 8004e98:	9302      	str	r3, [sp, #8]
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	21a0      	movs	r1, #160	@ 0xa0
 8004eaa:	4814      	ldr	r0, [pc, #80]	@ (8004efc <_ZN16CPantallaMemoria4ShowEv+0xb8>)
 8004eac:	f003 ffa2 	bl	8008df4 <HAL_I2C_Mem_Read>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <_ZN16CPantallaMemoria4ShowEv+0x9e>
 	  {
 		 	if(temperatura>=0 && temperatura<=500)
 		 	{
 		 		Estacion->SetTemperatura(temperatura);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4798      	blx	r3
 		 	}
 		 	TemperaturaGuardada=true;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 	  }
 	LeeDatosEstacion();
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fddc 	bl	8004aa0 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>
 	MuestraInformacion(true);
 8004ee8:	2101      	movs	r1, #1
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff4c 	bl	8004d88 <_ZN16CPantallaMemoria18MuestraInformacionEb>
 }
 8004ef0:	bf00      	nop
 8004ef2:	3740      	adds	r7, #64	@ 0x40
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	0800cfa8 	.word	0x0800cfa8
 8004efc:	20000254 	.word	0x20000254

08004f00 <_ZN16CPantallaMemoria10SetMemoriaEi>:

void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEi>:
void CPantallaMemoria::OnBotonCuatroClickEvent(int tiempoClick)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaManual();
 8004f26:	4803      	ldr	r0, [pc, #12]	@ (8004f34 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEi+0x18>)
 8004f28:	f7fe fb31 	bl	800358e <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200001f8 	.word	0x200001f8

08004f38 <_ZThn48_N16CPantallaMemoria23OnBotonCuatroClickEventEi>:
	virtual void OnBotonCuatroClickEvent(int tiempoClick);
 8004f38:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004f3c:	f7ff bfee 	b.w	8004f1c <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEi>

08004f40 <_ZN16CPantallaMemoria20OnBotonUnoClickEventEi>:

void CPantallaMemoria::OnBotonUnoClickEvent(int tiempoClick)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]

}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <_ZThn48_N16CPantallaMemoria20OnBotonUnoClickEventEi>:
	virtual void OnBotonUnoClickEvent(int tiempoClick);
 8004f54:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004f58:	f7ff bff2 	b.w	8004f40 <_ZN16CPantallaMemoria20OnBotonUnoClickEventEi>

08004f5c <_ZN16CPantallaMemoria20OnBotonDosClickEventEi>:

void CPantallaMemoria::OnBotonDosClickEvent(int tiempoClick)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]

}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <_ZThn48_N16CPantallaMemoria20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 8004f70:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004f74:	f7ff bff2 	b.w	8004f5c <_ZN16CPantallaMemoria20OnBotonDosClickEventEi>

08004f78 <_ZN16CPantallaMemoria21OnBotonTresClickEventEi>:

void CPantallaMemoria::OnBotonTresClickEvent(int tiempoClick)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]

}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <_ZThn48_N16CPantallaMemoria21OnBotonTresClickEventEi>:
	virtual void OnBotonTresClickEvent(int tiempoClick);
 8004f8c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004f90:	f7ff bff2 	b.w	8004f78 <_ZN16CPantallaMemoria21OnBotonTresClickEventEi>

08004f94 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af04      	add	r7, sp, #16
 8004f9a:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, " Menu Principal")
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a33      	ldr	r2, [pc, #204]	@ (800506c <_ZN14CMenuPrincipalC1Ev+0xd8>)
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fdbe 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	33ac      	adds	r3, #172	@ 0xac
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe fbeb 	bl	8003788 <_ZN20CManejadorEventoMenuC1Ev>
 8004fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8005070 <_ZN14CMenuPrincipalC1Ev+0xdc>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005074 <_ZN14CMenuPrincipalC1Ev+0xe0>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8005078 <_ZN14CMenuPrincipalC1Ev+0xe4>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 8004fc6:	2080      	movs	r0, #128	@ 0x80
 8004fc8:	f005 f8b1 	bl	800a12e <_Znwj>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461c      	mov	r4, r3
 8004fd0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	9302      	str	r3, [sp, #8]
 8004fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	23d2      	movs	r3, #210	@ 0xd2
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004fe8:	221e      	movs	r2, #30
 8004fea:	2104      	movs	r1, #4
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7fe fc05 	bl	80037fc <_ZN5CMenuC1Eiiiiiii>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	33ac      	adds	r3, #172	@ 0xac
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe fe95 	bl	8003d34 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8005010:	2300      	movs	r3, #0
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005018:	f247 726f 	movw	r2, #30575	@ 0x776f
 800501c:	2100      	movs	r1, #0
 800501e:	f7fe fc70 	bl	8003902 <_ZN5CMenu18AsignaColoresItemsEiiii>

	Menu->AgregaItem("Conf Memoria 1", MENU_MEMORIA_1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8005028:	2300      	movs	r3, #0
 800502a:	2201      	movs	r2, #1
 800502c:	4913      	ldr	r1, [pc, #76]	@ (800507c <_ZN14CMenuPrincipalC1Ev+0xe8>)
 800502e:	f7fe fcca 	bl	80039c6 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Conf Memoria 2", MENU_MEMORIA_2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8005038:	2300      	movs	r3, #0
 800503a:	2202      	movs	r2, #2
 800503c:	4910      	ldr	r1, [pc, #64]	@ (8005080 <_ZN14CMenuPrincipalC1Ev+0xec>)
 800503e:	f7fe fcc2 	bl	80039c6 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Conf Memoria 3", MENU_MEMORIA_3);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8005048:	2300      	movs	r3, #0
 800504a:	2203      	movs	r2, #3
 800504c:	490d      	ldr	r1, [pc, #52]	@ (8005084 <_ZN14CMenuPrincipalC1Ev+0xf0>)
 800504e:	f7fe fcba 	bl	80039c6 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Salir", MENU_SALIR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8005058:	2300      	movs	r3, #0
 800505a:	2200      	movs	r2, #0
 800505c:	490a      	ldr	r1, [pc, #40]	@ (8005088 <_ZN14CMenuPrincipalC1Ev+0xf4>)
 800505e:	f7fe fcb2 	bl	80039c6 <_ZN5CMenu10AgregaItemEPcib>
}
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	0800cfb4 	.word	0x0800cfb4
 8005070:	0800d6f8 	.word	0x0800d6f8
 8005074:	0800d78c 	.word	0x0800d78c
 8005078:	0800d7fc 	.word	0x0800d7fc
 800507c:	0800cfc4 	.word	0x0800cfc4
 8005080:	0800cfd4 	.word	0x0800cfd4
 8005084:	0800cfe4 	.word	0x0800cfe4
 8005088:	0800cff4 	.word	0x0800cff4

0800508c <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	4a0b      	ldr	r2, [pc, #44]	@ (80050c4 <_ZN14CMenuPrincipalD1Ev+0x38>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	4a0b      	ldr	r2, [pc, #44]	@ (80050c8 <_ZN14CMenuPrincipalD1Ev+0x3c>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a0:	4a0a      	ldr	r2, [pc, #40]	@ (80050cc <_ZN14CMenuPrincipalD1Ev+0x40>)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	33ac      	adds	r3, #172	@ 0xac
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe fb7b 	bl	80037a8 <_ZN20CManejadorEventoMenuD1Ev>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd fd01 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	0800d6f8 	.word	0x0800d6f8
 80050c8:	0800d78c 	.word	0x0800d78c
 80050cc:	0800d7fc 	.word	0x0800d7fc

080050d0 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 80050d0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80050d4:	f7ff bfda 	b.w	800508c <_ZN14CMenuPrincipalD1Ev>

080050d8 <_ZThn172_N14CMenuPrincipalD1Ev>:
 80050d8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80050dc:	f7ff bfd6 	b.w	800508c <_ZN14CMenuPrincipalD1Ev>

080050e0 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
}
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffcf 	bl	800508c <_ZN14CMenuPrincipalD1Ev>
 80050ee:	21c0      	movs	r1, #192	@ 0xc0
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f005 f81a 	bl	800a12a <_ZdlPvj>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_ZThn172_N14CMenuPrincipalD0Ev>:
 8005100:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005104:	f7ff bfec 	b.w	80050e0 <_ZN14CMenuPrincipalD0Ev>

08005108 <_ZThn48_N14CMenuPrincipalD0Ev>:
 8005108:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800510c:	f7ff bfe8 	b.w	80050e0 <_ZN14CMenuPrincipalD0Ev>

08005110 <_ZN14CMenuPrincipal4ShowEv>:

void CMenuPrincipal::Show()
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fd74 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3348      	adds	r3, #72	@ 0x48
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4610      	mov	r0, r2
 8005134:	4798      	blx	r3
	SetVisible(true);
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3368      	adds	r3, #104	@ 0x68
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2101      	movs	r1, #1
 8005142:	4610      	mov	r0, r2
 8005144:	4798      	blx	r3
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZN14CMenuPrincipal8RefrescaEv>:
void CMenuPrincipal::Refresca()
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3364      	adds	r3, #100	@ 0x64
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <_ZN14CMenuPrincipal8RefrescaEv+0x32>
		Show();
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3348      	adds	r3, #72	@ 0x48
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi>:
void CMenuPrincipal::OnBotonCuatroClickEvent(int tiempoClick)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaManual();
 8005192:	4803      	ldr	r0, [pc, #12]	@ (80051a0 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi+0x18>)
 8005194:	f7fe f9fb 	bl	800358e <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200001f8 	.word	0x200001f8

080051a4 <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEi>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonCuatroClickEvent(int tiempoClick);
 80051a4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80051a8:	f7ff bfee 	b.w	8005188 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi>

080051ac <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>:
void CMenuPrincipal::OnPerillaIncremento()
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fc6b 	bl	8003a96 <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <_ZThn48_N14CMenuPrincipal19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 80051c8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80051cc:	f7ff bfee 	b.w	80051ac <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>

080051d0 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>:
void CMenuPrincipal::OnPerillaDecremento()
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fca7 	bl	8003b32 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <_ZThn48_N14CMenuPrincipal19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80051ec:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80051f0:	f7ff bfee 	b.w	80051d0 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>

080051f4 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEi>:
void CMenuPrincipal::OnBotonPerillaClickEvent(int tiempoClick)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	Menu->OnClickSeleccionado();
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fcff 	bl	8003c08 <_ZN5CMenu19OnClickSeleccionadoEv>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <_ZThn48_N14CMenuPrincipal24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8005212:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005216:	f7ff bfed 	b.w	80051f4 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEi>
	...

0800521c <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <_ZN14CMenuPrincipal11OnMenuEventEi+0x20>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	db0d      	blt.n	800524e <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3b01      	subs	r3, #1
 8005236:	2b02      	cmp	r3, #2
 8005238:	d809      	bhi.n	800524e <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 800523a:	e003      	b.n	8005244 <_ZN14CMenuPrincipal11OnMenuEventEi+0x28>
	{
	case MENU_SALIR:
		ManejadorPantallas.MuestraPantallaAnterior();
 800523c:	4806      	ldr	r0, [pc, #24]	@ (8005258 <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 800523e:	f7fe fa8f 	bl	8003760 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv>
		break;
 8005242:	e004      	b.n	800524e <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
	case MENU_MEMORIA_1:
	case MENU_MEMORIA_2:
	case MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	4804      	ldr	r0, [pc, #16]	@ (8005258 <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 8005248:	f7fe fa40 	bl	80036cc <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 800524c:	bf00      	nop
	}

}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200001f8 	.word	0x200001f8

0800525c <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 800525c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005260:	f7ff bfdc 	b.w	800521c <_ZN14CMenuPrincipal11OnMenuEventEi>

08005264 <_ZN14CMenuPrincipal21OnBotonTresClickEventEi>:

void CMenuPrincipal::OnBotonTresClickEvent(int tiempoClick)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 800526e:	2103      	movs	r1, #3
 8005270:	4803      	ldr	r0, [pc, #12]	@ (8005280 <_ZN14CMenuPrincipal21OnBotonTresClickEventEi+0x1c>)
 8005272:	f7fe fa52 	bl	800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	200001f8 	.word	0x200001f8

08005284 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEi>:

	virtual void OnBotonUnoClickEvent(int tiempoClick);
	virtual void OnBotonDosClickEvent(int tiempoClick);
	virtual void OnBotonTresClickEvent(int tiempoClick);
 8005284:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005288:	f7ff bfec 	b.w	8005264 <_ZN14CMenuPrincipal21OnBotonTresClickEventEi>

0800528c <_ZN14CMenuPrincipal20OnBotonUnoClickEventEi>:
void CMenuPrincipal::OnBotonUnoClickEvent(int tiempoClick)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8005296:	2101      	movs	r1, #1
 8005298:	4803      	ldr	r0, [pc, #12]	@ (80052a8 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEi+0x1c>)
 800529a:	f7fe fa3e 	bl	800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	200001f8 	.word	0x200001f8

080052ac <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEi>:
	virtual void OnBotonUnoClickEvent(int tiempoClick);
 80052ac:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80052b0:	f7ff bfec 	b.w	800528c <_ZN14CMenuPrincipal20OnBotonUnoClickEventEi>

080052b4 <_ZN14CMenuPrincipal20OnBotonDosClickEventEi>:
void CMenuPrincipal::OnBotonDosClickEvent(int tiempoClick)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 80052be:	2102      	movs	r1, #2
 80052c0:	4803      	ldr	r0, [pc, #12]	@ (80052d0 <_ZN14CMenuPrincipal20OnBotonDosClickEventEi+0x1c>)
 80052c2:	f7fe fa2a 	bl	800371a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200001f8 	.word	0x200001f8

080052d4 <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 80052d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80052d8:	f7ff bfec 	b.w	80052b4 <_ZN14CMenuPrincipal20OnBotonDosClickEventEi>

080052dc <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	80fb      	strh	r3, [r7, #6]
 80052ee:	4603      	mov	r3, r0
 80052f0:	80bb      	strh	r3, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	807b      	strh	r3, [r7, #2]
 80052f6:	4613      	mov	r3, r2
 80052f8:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8005310:	887a      	ldrh	r2, [r7, #2]
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb fc70 	bl	8000bfc <__aeabi_i2f>
 800531c:	4603      	mov	r3, r0
 800531e:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7fb fe5b 	bl	8000fe0 <__aeabi_fcmplt>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8005330:	2301      	movs	r3, #1
 8005332:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 800533a:	883a      	ldrh	r2, [r7, #0]
 800533c:	88bb      	ldrh	r3, [r7, #4]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	4618      	mov	r0, r3
 8005342:	f7fb fc5b 	bl	8000bfc <__aeabi_i2f>
 8005346:	4603      	mov	r3, r0
 8005348:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7fb fe46 	bl	8000fe0 <__aeabi_fcmplt>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8005364:	887a      	ldrh	r2, [r7, #2]
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	82fb      	strh	r3, [r7, #22]
 800536c:	e003      	b.n	8005376 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	887b      	ldrh	r3, [r7, #2]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8005376:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005378:	8afa      	ldrh	r2, [r7, #22]
 800537a:	88b9      	ldrh	r1, [r7, #4]
 800537c:	88f8      	ldrh	r0, [r7, #6]
 800537e:	f000 fd73 	bl	8005e68 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8005382:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	8839      	ldrh	r1, [r7, #0]
 8005388:	88f8      	ldrh	r0, [r7, #6]
 800538a:	f000 fd6d 	bl	8005e68 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 800538e:	7cbb      	ldrb	r3, [r7, #18]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8005394:	883a      	ldrh	r2, [r7, #0]
 8005396:	88bb      	ldrh	r3, [r7, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	82bb      	strh	r3, [r7, #20]
 800539c:	e003      	b.n	80053a6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 800539e:	88ba      	ldrh	r2, [r7, #4]
 80053a0:	883b      	ldrh	r3, [r7, #0]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80053a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053a8:	8aba      	ldrh	r2, [r7, #20]
 80053aa:	88b9      	ldrh	r1, [r7, #4]
 80053ac:	88f8      	ldrh	r0, [r7, #6]
 80053ae:	f000 fda9 	bl	8005f04 <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80053b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053b4:	8aba      	ldrh	r2, [r7, #20]
 80053b6:	88b9      	ldrh	r1, [r7, #4]
 80053b8:	8878      	ldrh	r0, [r7, #2]
 80053ba:	f000 fda3 	bl	8005f04 <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 80053be:	8afb      	ldrh	r3, [r7, #22]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 80053c4:	8abb      	ldrh	r3, [r7, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80053ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80053cc:	8839      	ldrh	r1, [r7, #0]
 80053ce:	887b      	ldrh	r3, [r7, #2]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fc13 	bl	8005bfc <_Z18ILI9341_Draw_Pixelttt>
	}

}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}

080053de <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80053de:	b590      	push	{r4, r7, lr}
 80053e0:	b089      	sub	sp, #36	@ 0x24
 80053e2:	af02      	add	r7, sp, #8
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	461a      	mov	r2, r3
 80053ec:	4623      	mov	r3, r4
 80053ee:	80fb      	strh	r3, [r7, #6]
 80053f0:	4603      	mov	r3, r0
 80053f2:	80bb      	strh	r3, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]
 80053f8:	4613      	mov	r3, r2
 80053fa:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da01      	bge.n	800542a <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 800542e:	883a      	ldrh	r2, [r7, #0]
 8005430:	88bb      	ldrh	r3, [r7, #4]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	da01      	bge.n	8005440 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 800543c:	2301      	movs	r3, #1
 800543e:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8005446:	887a      	ldrh	r2, [r7, #2]
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	823b      	strh	r3, [r7, #16]
 8005452:	e005      	b.n	8005460 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8005460:	7cbb      	ldrb	r3, [r7, #18]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8005466:	883a      	ldrh	r2, [r7, #0]
 8005468:	88bb      	ldrh	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 800546e:	88bb      	ldrh	r3, [r7, #4]
 8005470:	81fb      	strh	r3, [r7, #14]
 8005472:	e005      	b.n	8005480 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8005474:	88ba      	ldrh	r2, [r7, #4]
 8005476:	883b      	ldrh	r3, [r7, #0]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 800547c:	883b      	ldrh	r3, [r7, #0]
 800547e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8005480:	8abc      	ldrh	r4, [r7, #20]
 8005482:	8afa      	ldrh	r2, [r7, #22]
 8005484:	89f9      	ldrh	r1, [r7, #14]
 8005486:	8a38      	ldrh	r0, [r7, #16]
 8005488:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4623      	mov	r3, r4
 800548e:	f000 fc81 	bl	8005d94 <_Z22ILI9341_Draw_Rectanglettttt>
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}
	...

0800549c <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b08b      	sub	sp, #44	@ 0x2c
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	461a      	mov	r2, r3
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	4613      	mov	r3, r2
 80054ae:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 80054b4:	7ffb      	ldrb	r3, [r7, #31]
 80054b6:	2b1f      	cmp	r3, #31
 80054b8:	d802      	bhi.n	80054c0 <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	e002      	b.n	80054c6 <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
 80054c2:	3b20      	subs	r3, #32
 80054c4:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	773b      	strb	r3, [r7, #28]
 80054ca:	e012      	b.n	80054f2 <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 80054cc:	7ffa      	ldrb	r2, [r7, #31]
 80054ce:	7f38      	ldrb	r0, [r7, #28]
 80054d0:	7f39      	ldrb	r1, [r7, #28]
 80054d2:	4c3c      	ldr	r4, [pc, #240]	@ (80055c4 <_Z17ILI9341_Draw_Charciittt+0x128>)
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4423      	add	r3, r4
 80054de:	4403      	add	r3, r0
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	f101 0320 	add.w	r3, r1, #32
 80054e6:	443b      	add	r3, r7
 80054e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80054ec:	7f3b      	ldrb	r3, [r7, #28]
 80054ee:	3301      	adds	r3, #1
 80054f0:	773b      	strb	r3, [r7, #28]
 80054f2:	7f3b      	ldrb	r3, [r7, #28]
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d9e9      	bls.n	80054cc <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	b298      	uxth	r0, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	b299      	uxth	r1, r3
 8005500:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005502:	461a      	mov	r2, r3
 8005504:	0052      	lsls	r2, r2, #1
 8005506:	4413      	add	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	b29c      	uxth	r4, r3
 8005512:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	4623      	mov	r3, r4
 8005518:	f000 fc3c 	bl	8005d94 <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 800551c:	2300      	movs	r3, #0
 800551e:	777b      	strb	r3, [r7, #29]
 8005520:	e047      	b.n	80055b2 <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	77bb      	strb	r3, [r7, #30]
 8005526:	e03e      	b.n	80055a6 <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 8005528:	7f7b      	ldrb	r3, [r7, #29]
 800552a:	3320      	adds	r3, #32
 800552c:	443b      	add	r3, r7
 800552e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005532:	461a      	mov	r2, r3
 8005534:	7fbb      	ldrb	r3, [r7, #30]
 8005536:	fa42 f303 	asr.w	r3, r2, r3
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d02e      	beq.n	80055a0 <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 8005542:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d110      	bne.n	800556a <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8005548:	7f7b      	ldrb	r3, [r7, #29]
 800554a:	b29a      	uxth	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	b29b      	uxth	r3, r3
 8005550:	4413      	add	r3, r2
 8005552:	b298      	uxth	r0, r3
 8005554:	7fbb      	ldrb	r3, [r7, #30]
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	b29b      	uxth	r3, r3
 800555c:	4413      	add	r3, r2
 800555e:	b29b      	uxth	r3, r3
 8005560:	89ba      	ldrh	r2, [r7, #12]
 8005562:	4619      	mov	r1, r3
 8005564:	f000 fb4a 	bl	8005bfc <_Z18ILI9341_Draw_Pixelttt>
 8005568:	e01a      	b.n	80055a0 <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 800556a:	7f7b      	ldrb	r3, [r7, #29]
 800556c:	b29b      	uxth	r3, r3
 800556e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	b29a      	uxth	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	b29b      	uxth	r3, r3
 800557a:	4413      	add	r3, r2
 800557c:	b298      	uxth	r0, r3
 800557e:	7fbb      	ldrb	r3, [r7, #30]
 8005580:	b29b      	uxth	r3, r3
 8005582:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005584:	fb02 f303 	mul.w	r3, r2, r3
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	b29b      	uxth	r3, r3
 800558e:	4413      	add	r3, r2
 8005590:	b299      	uxth	r1, r3
 8005592:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8005594:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005596:	89bb      	ldrh	r3, [r7, #12]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4623      	mov	r3, r4
 800559c:	f000 fbfa 	bl	8005d94 <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 80055a0:	7fbb      	ldrb	r3, [r7, #30]
 80055a2:	3301      	adds	r3, #1
 80055a4:	77bb      	strb	r3, [r7, #30]
 80055a6:	7fbb      	ldrb	r3, [r7, #30]
 80055a8:	2b07      	cmp	r3, #7
 80055aa:	d9bd      	bls.n	8005528 <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 80055ac:	7f7b      	ldrb	r3, [r7, #29]
 80055ae:	3301      	adds	r3, #1
 80055b0:	777b      	strb	r3, [r7, #29]
 80055b2:	7f7b      	ldrb	r3, [r7, #29]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d9b4      	bls.n	8005522 <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3724      	adds	r7, #36	@ 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd90      	pop	{r4, r7, pc}
 80055c2:	bf00      	nop
 80055c4:	0800d808 	.word	0x0800d808

080055c8 <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	807b      	strh	r3, [r7, #2]
	while (*Text)
 80055d6:	e016      	b.n	8005606 <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	60fa      	str	r2, [r7, #12]
 80055de:	7818      	ldrb	r0, [r3, #0]
 80055e0:	887a      	ldrh	r2, [r7, #2]
 80055e2:	8bbb      	ldrh	r3, [r7, #28]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	8b3b      	ldrh	r3, [r7, #24]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	f7ff ff54 	bl	800549c <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 80055f4:	8b3a      	ldrh	r2, [r7, #24]
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	461a      	mov	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4413      	add	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]
	while (*Text)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e4      	bne.n	80055d8 <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 800561c:	f002 fb14 	bl	8007c48 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8005620:	f001 ff1c 	bl	800745c <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8005624:	2200      	movs	r2, #0
 8005626:	2101      	movs	r1, #1
 8005628:	4802      	ldr	r0, [pc, #8]	@ (8005634 <_Z16ILI9341_SPI_Initv+0x1c>)
 800562a:	f003 f897 	bl	800875c <HAL_GPIO_WritePin>
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40010c00 	.word	0x40010c00

08005638 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005642:	1df9      	adds	r1, r7, #7
 8005644:	2301      	movs	r3, #1
 8005646:	2201      	movs	r2, #1
 8005648:	4803      	ldr	r0, [pc, #12]	@ (8005658 <_Z16ILI9341_SPI_Sendh+0x20>)
 800564a:	f004 f8c5 	bl	80097d8 <HAL_SPI_Transmit>
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	200003d8 	.word	0x200003d8

0800565c <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005666:	2200      	movs	r2, #0
 8005668:	2101      	movs	r1, #1
 800566a:	480a      	ldr	r0, [pc, #40]	@ (8005694 <_Z21ILI9341_Write_Commandh+0x38>)
 800566c:	f003 f876 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	2102      	movs	r1, #2
 8005674:	4807      	ldr	r0, [pc, #28]	@ (8005694 <_Z21ILI9341_Write_Commandh+0x38>)
 8005676:	f003 f871 	bl	800875c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ffdb 	bl	8005638 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005682:	2201      	movs	r2, #1
 8005684:	2101      	movs	r1, #1
 8005686:	4803      	ldr	r0, [pc, #12]	@ (8005694 <_Z21ILI9341_Write_Commandh+0x38>)
 8005688:	f003 f868 	bl	800875c <HAL_GPIO_WritePin>
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40010c00 	.word	0x40010c00

08005698 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80056a2:	2201      	movs	r2, #1
 80056a4:	2102      	movs	r1, #2
 80056a6:	480a      	ldr	r0, [pc, #40]	@ (80056d0 <_Z18ILI9341_Write_Datah+0x38>)
 80056a8:	f003 f858 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	4807      	ldr	r0, [pc, #28]	@ (80056d0 <_Z18ILI9341_Write_Datah+0x38>)
 80056b2:	f003 f853 	bl	800875c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ffbd 	bl	8005638 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80056be:	2201      	movs	r2, #1
 80056c0:	2101      	movs	r1, #1
 80056c2:	4803      	ldr	r0, [pc, #12]	@ (80056d0 <_Z18ILI9341_Write_Datah+0x38>)
 80056c4:	f003 f84a 	bl	800875c <HAL_GPIO_WritePin>
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40010c00 	.word	0x40010c00

080056d4 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4604      	mov	r4, r0
 80056dc:	4608      	mov	r0, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	461a      	mov	r2, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	80fb      	strh	r3, [r7, #6]
 80056e6:	4603      	mov	r3, r0
 80056e8:	80bb      	strh	r3, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	807b      	strh	r3, [r7, #2]
 80056ee:	4613      	mov	r3, r2
 80056f0:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80056f2:	202a      	movs	r0, #42	@ 0x2a
 80056f4:	f7ff ffb2 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ffc9 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ffc4 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8005710:	887b      	ldrh	r3, [r7, #2]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	b29b      	uxth	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ffbd 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 800571e:	887b      	ldrh	r3, [r7, #2]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff ffb8 	bl	8005698 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8005728:	202b      	movs	r0, #43	@ 0x2b
 800572a:	f7ff ff97 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 800572e:	88bb      	ldrh	r3, [r7, #4]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	b29b      	uxth	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ffae 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 800573c:	88bb      	ldrh	r3, [r7, #4]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff ffa9 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8005746:	883b      	ldrh	r3, [r7, #0]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	b29b      	uxth	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff ffa2 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8005754:	883b      	ldrh	r3, [r7, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff9d 	bl	8005698 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 800575e:	202c      	movs	r0, #44	@ 0x2c
 8005760:	f7ff ff7c 	bl	800565c <_Z21ILI9341_Write_Commandh>
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}

0800576c <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005770:	2201      	movs	r2, #1
 8005772:	2120      	movs	r1, #32
 8005774:	480a      	ldr	r0, [pc, #40]	@ (80057a0 <_Z13ILI9341_Resetv+0x34>)
 8005776:	f002 fff1 	bl	800875c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800577a:	20c8      	movs	r0, #200	@ 0xc8
 800577c:	f002 fcd6 	bl	800812c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005780:	2200      	movs	r2, #0
 8005782:	2101      	movs	r1, #1
 8005784:	4806      	ldr	r0, [pc, #24]	@ (80057a0 <_Z13ILI9341_Resetv+0x34>)
 8005786:	f002 ffe9 	bl	800875c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800578a:	20c8      	movs	r0, #200	@ 0xc8
 800578c:	f002 fcce 	bl	800812c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005790:	2201      	movs	r2, #1
 8005792:	2120      	movs	r1, #32
 8005794:	4802      	ldr	r0, [pc, #8]	@ (80057a0 <_Z13ILI9341_Resetv+0x34>)
 8005796:	f002 ffe1 	bl	800875c <HAL_GPIO_WritePin>
}
 800579a:	bf00      	nop
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40010c00 	.word	0x40010c00

080057a4 <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80057b2:	2036      	movs	r0, #54	@ 0x36
 80057b4:	f7ff ff52 	bl	800565c <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 80057b8:	2001      	movs	r0, #1
 80057ba:	f002 fcb7 	bl	800812c <HAL_Delay>

	switch (screen_rotation)
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d837      	bhi.n	8005834 <_Z20ILI9341_Set_Rotationh+0x90>
 80057c4:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <_Z20ILI9341_Set_Rotationh+0x28>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057f3 	.word	0x080057f3
 80057d4:	08005809 	.word	0x08005809
 80057d8:	0800581f 	.word	0x0800581f
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 80057dc:	2048      	movs	r0, #72	@ 0x48
 80057de:	f7ff ff5b 	bl	8005698 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 80057e2:	4b17      	ldr	r3, [pc, #92]	@ (8005840 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80057e4:	22f0      	movs	r2, #240	@ 0xf0
 80057e6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80057e8:	4b16      	ldr	r3, [pc, #88]	@ (8005844 <_Z20ILI9341_Set_Rotationh+0xa0>)
 80057ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80057ee:	801a      	strh	r2, [r3, #0]
		break;
 80057f0:	e021      	b.n	8005836 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 80057f2:	2028      	movs	r0, #40	@ 0x28
 80057f4:	f7ff ff50 	bl	8005698 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 80057f8:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80057fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80057fe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005800:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005802:	22f0      	movs	r2, #240	@ 0xf0
 8005804:	801a      	strh	r2, [r3, #0]
		break;
 8005806:	e016      	b.n	8005836 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8005808:	2088      	movs	r0, #136	@ 0x88
 800580a:	f7ff ff45 	bl	8005698 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005810:	22f0      	movs	r2, #240	@ 0xf0
 8005812:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005816:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800581a:	801a      	strh	r2, [r3, #0]
		break;
 800581c:	e00b      	b.n	8005836 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 800581e:	20e8      	movs	r0, #232	@ 0xe8
 8005820:	f7ff ff3a 	bl	8005698 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8005824:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005826:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800582a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <_Z20ILI9341_Set_Rotationh+0xa0>)
 800582e:	22f0      	movs	r2, #240	@ 0xf0
 8005830:	801a      	strh	r2, [r3, #0]
		break;
 8005832:	e000      	b.n	8005836 <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8005834:	bf00      	nop
	}
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000002 	.word	0x20000002
 8005844:	20000000 	.word	0x20000000

08005848 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800584c:	2201      	movs	r2, #1
 800584e:	2120      	movs	r1, #32
 8005850:	4802      	ldr	r0, [pc, #8]	@ (800585c <_Z14ILI9341_Enablev+0x14>)
 8005852:	f002 ff83 	bl	800875c <HAL_GPIO_WritePin>
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40010c00 	.word	0x40010c00

08005860 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8005864:	f7ff fff0 	bl	8005848 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8005868:	f7ff fed6 	bl	8005618 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 800586c:	f7ff ff7e 	bl	800576c <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8005870:	2001      	movs	r0, #1
 8005872:	f7ff fef3 	bl	800565c <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8005876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800587a:	f002 fc57 	bl	800812c <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800587e:	20cb      	movs	r0, #203	@ 0xcb
 8005880:	f7ff feec 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8005884:	2039      	movs	r0, #57	@ 0x39
 8005886:	f7ff ff07 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 800588a:	202c      	movs	r0, #44	@ 0x2c
 800588c:	f7ff ff04 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005890:	2000      	movs	r0, #0
 8005892:	f7ff ff01 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8005896:	2034      	movs	r0, #52	@ 0x34
 8005898:	f7ff fefe 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 800589c:	2002      	movs	r0, #2
 800589e:	f7ff fefb 	bl	8005698 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80058a2:	20cf      	movs	r0, #207	@ 0xcf
 80058a4:	f7ff feda 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7ff fef5 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 80058ae:	20c1      	movs	r0, #193	@ 0xc1
 80058b0:	f7ff fef2 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 80058b4:	2030      	movs	r0, #48	@ 0x30
 80058b6:	f7ff feef 	bl	8005698 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80058ba:	20e8      	movs	r0, #232	@ 0xe8
 80058bc:	f7ff fece 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 80058c0:	2085      	movs	r0, #133	@ 0x85
 80058c2:	f7ff fee9 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80058c6:	2000      	movs	r0, #0
 80058c8:	f7ff fee6 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 80058cc:	2078      	movs	r0, #120	@ 0x78
 80058ce:	f7ff fee3 	bl	8005698 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80058d2:	20ea      	movs	r0, #234	@ 0xea
 80058d4:	f7ff fec2 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80058d8:	2000      	movs	r0, #0
 80058da:	f7ff fedd 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80058de:	2000      	movs	r0, #0
 80058e0:	f7ff feda 	bl	8005698 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80058e4:	20ed      	movs	r0, #237	@ 0xed
 80058e6:	f7ff feb9 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 80058ea:	2064      	movs	r0, #100	@ 0x64
 80058ec:	f7ff fed4 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 80058f0:	2003      	movs	r0, #3
 80058f2:	f7ff fed1 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 80058f6:	2012      	movs	r0, #18
 80058f8:	f7ff fece 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 80058fc:	2081      	movs	r0, #129	@ 0x81
 80058fe:	f7ff fecb 	bl	8005698 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8005902:	20f7      	movs	r0, #247	@ 0xf7
 8005904:	f7ff feaa 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8005908:	2020      	movs	r0, #32
 800590a:	f7ff fec5 	bl	8005698 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 800590e:	20c0      	movs	r0, #192	@ 0xc0
 8005910:	f7ff fea4 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8005914:	2023      	movs	r0, #35	@ 0x23
 8005916:	f7ff febf 	bl	8005698 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 800591a:	20c1      	movs	r0, #193	@ 0xc1
 800591c:	f7ff fe9e 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8005920:	2010      	movs	r0, #16
 8005922:	f7ff feb9 	bl	8005698 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8005926:	20c5      	movs	r0, #197	@ 0xc5
 8005928:	f7ff fe98 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 800592c:	203e      	movs	r0, #62	@ 0x3e
 800592e:	f7ff feb3 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8005932:	2028      	movs	r0, #40	@ 0x28
 8005934:	f7ff feb0 	bl	8005698 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8005938:	20c7      	movs	r0, #199	@ 0xc7
 800593a:	f7ff fe8f 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 800593e:	2086      	movs	r0, #134	@ 0x86
 8005940:	f7ff feaa 	bl	8005698 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8005944:	2036      	movs	r0, #54	@ 0x36
 8005946:	f7ff fe89 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 800594a:	2048      	movs	r0, #72	@ 0x48
 800594c:	f7ff fea4 	bl	8005698 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8005950:	203a      	movs	r0, #58	@ 0x3a
 8005952:	f7ff fe83 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8005956:	2055      	movs	r0, #85	@ 0x55
 8005958:	f7ff fe9e 	bl	8005698 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 800595c:	20b1      	movs	r0, #177	@ 0xb1
 800595e:	f7ff fe7d 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005962:	2000      	movs	r0, #0
 8005964:	f7ff fe98 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8005968:	2018      	movs	r0, #24
 800596a:	f7ff fe95 	bl	8005698 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800596e:	20b6      	movs	r0, #182	@ 0xb6
 8005970:	f7ff fe74 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8005974:	2008      	movs	r0, #8
 8005976:	f7ff fe8f 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 800597a:	2082      	movs	r0, #130	@ 0x82
 800597c:	f7ff fe8c 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8005980:	2027      	movs	r0, #39	@ 0x27
 8005982:	f7ff fe89 	bl	8005698 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8005986:	20f2      	movs	r0, #242	@ 0xf2
 8005988:	f7ff fe68 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 800598c:	2000      	movs	r0, #0
 800598e:	f7ff fe83 	bl	8005698 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8005992:	2026      	movs	r0, #38	@ 0x26
 8005994:	f7ff fe62 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8005998:	2001      	movs	r0, #1
 800599a:	f7ff fe7d 	bl	8005698 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800599e:	20e0      	movs	r0, #224	@ 0xe0
 80059a0:	f7ff fe5c 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 80059a4:	200f      	movs	r0, #15
 80059a6:	f7ff fe77 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80059aa:	2031      	movs	r0, #49	@ 0x31
 80059ac:	f7ff fe74 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 80059b0:	202b      	movs	r0, #43	@ 0x2b
 80059b2:	f7ff fe71 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 80059b6:	200c      	movs	r0, #12
 80059b8:	f7ff fe6e 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80059bc:	200e      	movs	r0, #14
 80059be:	f7ff fe6b 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 80059c2:	2008      	movs	r0, #8
 80059c4:	f7ff fe68 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 80059c8:	204e      	movs	r0, #78	@ 0x4e
 80059ca:	f7ff fe65 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 80059ce:	20f1      	movs	r0, #241	@ 0xf1
 80059d0:	f7ff fe62 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 80059d4:	2037      	movs	r0, #55	@ 0x37
 80059d6:	f7ff fe5f 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 80059da:	2007      	movs	r0, #7
 80059dc:	f7ff fe5c 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 80059e0:	2010      	movs	r0, #16
 80059e2:	f7ff fe59 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 80059e6:	2003      	movs	r0, #3
 80059e8:	f7ff fe56 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80059ec:	200e      	movs	r0, #14
 80059ee:	f7ff fe53 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 80059f2:	2009      	movs	r0, #9
 80059f4:	f7ff fe50 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80059f8:	2000      	movs	r0, #0
 80059fa:	f7ff fe4d 	bl	8005698 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80059fe:	20e1      	movs	r0, #225	@ 0xe1
 8005a00:	f7ff fe2c 	bl	800565c <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7ff fe47 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005a0a:	200e      	movs	r0, #14
 8005a0c:	f7ff fe44 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8005a10:	2014      	movs	r0, #20
 8005a12:	f7ff fe41 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005a16:	2003      	movs	r0, #3
 8005a18:	f7ff fe3e 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8005a1c:	2011      	movs	r0, #17
 8005a1e:	f7ff fe3b 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8005a22:	2007      	movs	r0, #7
 8005a24:	f7ff fe38 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005a28:	2031      	movs	r0, #49	@ 0x31
 8005a2a:	f7ff fe35 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005a2e:	20c1      	movs	r0, #193	@ 0xc1
 8005a30:	f7ff fe32 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8005a34:	2048      	movs	r0, #72	@ 0x48
 8005a36:	f7ff fe2f 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8005a3a:	2008      	movs	r0, #8
 8005a3c:	f7ff fe2c 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005a40:	200f      	movs	r0, #15
 8005a42:	f7ff fe29 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8005a46:	200c      	movs	r0, #12
 8005a48:	f7ff fe26 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005a4c:	2031      	movs	r0, #49	@ 0x31
 8005a4e:	f7ff fe23 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 8005a52:	2036      	movs	r0, #54	@ 0x36
 8005a54:	f7ff fe20 	bl	8005698 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005a58:	200f      	movs	r0, #15
 8005a5a:	f7ff fe1d 	bl	8005698 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8005a5e:	2011      	movs	r0, #17
 8005a60:	f7ff fdfc 	bl	800565c <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8005a64:	2078      	movs	r0, #120	@ 0x78
 8005a66:	f002 fb61 	bl	800812c <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8005a6a:	2029      	movs	r0, #41	@ 0x29
 8005a6c:	f7ff fdf6 	bl	800565c <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005a70:	2000      	movs	r0, #0
 8005a72:	f7ff fe97 	bl	80057a4 <_Z20ILI9341_Set_Rotationh>
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a80:	b08d      	sub	sp, #52	@ 0x34
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	6039      	str	r1, [r7, #0]
 8005a88:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8005a8a:	466b      	mov	r3, sp
 8005a8c:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005a9a:	d202      	bcs.n	8005aa2 <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa0:	e002      	b.n	8005aa8 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 8005aa2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	2102      	movs	r1, #2
 8005aac:	483e      	ldr	r0, [pc, #248]	@ (8005ba8 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005aae:	f002 fe55 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	483c      	ldr	r0, [pc, #240]	@ (8005ba8 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005ab8:	f002 fe50 	bl	800875c <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 8005ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ac8:	460b      	mov	r3, r1
 8005aca:	3b01      	subs	r3, #1
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4688      	mov	r8, r1
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	460c      	mov	r4, r1
 8005aec:	461d      	mov	r5, r3
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	00eb      	lsls	r3, r5, #3
 8005af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afc:	00e2      	lsls	r2, r4, #3
 8005afe:	1dcb      	adds	r3, r1, #7
 8005b00:	08db      	lsrs	r3, r3, #3
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	ebad 0d03 	sub.w	sp, sp, r3
 8005b08:	466b      	mov	r3, sp
 8005b0a:	3300      	adds	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b12:	e00e      	b.n	8005b32 <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	4413      	add	r3, r2
 8005b1a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005b1e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	3301      	adds	r3, #1
 8005b24:	88fa      	ldrh	r2, [r7, #6]
 8005b26:	b2d1      	uxtb	r1, r2
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	3302      	adds	r3, #2
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3ec      	bcc.n	8005b14 <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b54:	fb01 f202 	mul.w	r2, r1, r2
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b66:	e009      	b.n	8005b7c <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	230a      	movs	r3, #10
 8005b6e:	69b9      	ldr	r1, [r7, #24]
 8005b70:	480e      	ldr	r0, [pc, #56]	@ (8005bac <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8005b72:	f003 fe31 	bl	80097d8 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	3301      	adds	r3, #1
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d3f1      	bcc.n	8005b68 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	230a      	movs	r3, #10
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	4807      	ldr	r0, [pc, #28]	@ (8005bac <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8005b8e:	f003 fe23 	bl	80097d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005b92:	2201      	movs	r2, #1
 8005b94:	2101      	movs	r1, #1
 8005b96:	4804      	ldr	r0, [pc, #16]	@ (8005ba8 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005b98:	f002 fde0 	bl	800875c <HAL_GPIO_WritePin>
 8005b9c:	46b5      	mov	sp, r6
}
 8005b9e:	bf00      	nop
 8005ba0:	3734      	adds	r7, #52	@ 0x34
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ba8:	40010c00 	.word	0x40010c00
 8005bac:	200003d8 	.word	0x200003d8

08005bb0 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8005bba:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf4 <_Z19ILI9341_Fill_Screent+0x44>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <_Z19ILI9341_Fill_Screent+0x48>)
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f7ff fd83 	bl	80056d4 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <_Z19ILI9341_Fill_Screent+0x44>)
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <_Z19ILI9341_Fill_Screent+0x48>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff ff48 	bl	8005a7c <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000002 	.word	0x20000002
 8005bf8:	20000000 	.word	0x20000000

08005bfc <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	80fb      	strh	r3, [r7, #6]
 8005c06:	460b      	mov	r3, r1
 8005c08:	80bb      	strh	r3, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005d84 <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d205      	bcs.n	8005c26 <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8005c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005d88 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	88ba      	ldrh	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d301      	bcc.n	8005c2a <_Z18ILI9341_Draw_Pixelttt+0x2e>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <_Z18ILI9341_Draw_Pixelttt+0x30>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f040 80a5 	bne.w	8005d7c <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005c32:	2200      	movs	r2, #0
 8005c34:	2102      	movs	r1, #2
 8005c36:	4855      	ldr	r0, [pc, #340]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005c38:	f002 fd90 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4852      	ldr	r0, [pc, #328]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005c42:	f002 fd8b 	bl	800875c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8005c46:	202a      	movs	r0, #42	@ 0x2a
 8005c48:	f7ff fcf6 	bl	8005638 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	2102      	movs	r1, #2
 8005c50:	484e      	ldr	r0, [pc, #312]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005c52:	f002 fd83 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005c56:	2201      	movs	r2, #1
 8005c58:	2101      	movs	r1, #1
 8005c5a:	484c      	ldr	r0, [pc, #304]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005c5c:	f002 fd7e 	bl	800875c <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005c60:	2200      	movs	r2, #0
 8005c62:	2101      	movs	r1, #1
 8005c64:	4849      	ldr	r0, [pc, #292]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005c66:	f002 fd79 	bl	800875c <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	753b      	strb	r3, [r7, #20]
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	757b      	strb	r3, [r7, #21]
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	121b      	asrs	r3, r3, #8
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	75bb      	strb	r3, [r7, #22]
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005c8e:	f107 0114 	add.w	r1, r7, #20
 8005c92:	2301      	movs	r3, #1
 8005c94:	2204      	movs	r2, #4
 8005c96:	483e      	ldr	r0, [pc, #248]	@ (8005d90 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005c98:	f003 fd9e 	bl	80097d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	483a      	ldr	r0, [pc, #232]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005ca2:	f002 fd5b 	bl	800875c <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4838      	ldr	r0, [pc, #224]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005cac:	f002 fd56 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	4835      	ldr	r0, [pc, #212]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005cb6:	f002 fd51 	bl	800875c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8005cba:	202b      	movs	r0, #43	@ 0x2b
 8005cbc:	f7ff fcbc 	bl	8005638 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4831      	ldr	r0, [pc, #196]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005cc6:	f002 fd49 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005cca:	2201      	movs	r2, #1
 8005ccc:	2101      	movs	r1, #1
 8005cce:	482f      	ldr	r0, [pc, #188]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005cd0:	f002 fd44 	bl	800875c <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	482c      	ldr	r0, [pc, #176]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005cda:	f002 fd3f 	bl	800875c <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8005cde:	88bb      	ldrh	r3, [r7, #4]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	743b      	strb	r3, [r7, #16]
 8005ce8:	88bb      	ldrh	r3, [r7, #4]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	747b      	strb	r3, [r7, #17]
 8005cee:	88bb      	ldrh	r3, [r7, #4]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	121b      	asrs	r3, r3, #8
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	74bb      	strb	r3, [r7, #18]
 8005cf8:	88bb      	ldrh	r3, [r7, #4]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005d02:	f107 0110 	add.w	r1, r7, #16
 8005d06:	2301      	movs	r3, #1
 8005d08:	2204      	movs	r2, #4
 8005d0a:	4821      	ldr	r0, [pc, #132]	@ (8005d90 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005d0c:	f003 fd64 	bl	80097d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005d10:	2201      	movs	r2, #1
 8005d12:	2101      	movs	r1, #1
 8005d14:	481d      	ldr	r0, [pc, #116]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d16:	f002 fd21 	bl	800875c <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	481b      	ldr	r0, [pc, #108]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d20:	f002 fd1c 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005d24:	2200      	movs	r2, #0
 8005d26:	2101      	movs	r1, #1
 8005d28:	4818      	ldr	r0, [pc, #96]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d2a:	f002 fd17 	bl	800875c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8005d2e:	202c      	movs	r0, #44	@ 0x2c
 8005d30:	f7ff fc82 	bl	8005638 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005d34:	2201      	movs	r2, #1
 8005d36:	2102      	movs	r1, #2
 8005d38:	4814      	ldr	r0, [pc, #80]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d3a:	f002 fd0f 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2101      	movs	r1, #1
 8005d42:	4812      	ldr	r0, [pc, #72]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d44:	f002 fd0a 	bl	800875c <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	480f      	ldr	r0, [pc, #60]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d4e:	f002 fd05 	bl	800875c <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
	{ Colour >> 8, Colour };
 8005d52:	887b      	ldrh	r3, [r7, #2]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	733b      	strb	r3, [r7, #12]
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8005d62:	f107 010c 	add.w	r1, r7, #12
 8005d66:	2301      	movs	r3, #1
 8005d68:	2202      	movs	r2, #2
 8005d6a:	4809      	ldr	r0, [pc, #36]	@ (8005d90 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005d6c:	f003 fd34 	bl	80097d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005d70:	2201      	movs	r2, #1
 8005d72:	2101      	movs	r1, #1
 8005d74:	4805      	ldr	r0, [pc, #20]	@ (8005d8c <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005d76:	f002 fcf1 	bl	800875c <HAL_GPIO_WritePin>
 8005d7a:	e000      	b.n	8005d7e <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8005d7c:	bf00      	nop

}
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000002 	.word	0x20000002
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	40010c00 	.word	0x40010c00
 8005d90:	200003d8 	.word	0x200003d8

08005d94 <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	461a      	mov	r2, r3
 8005da2:	4623      	mov	r3, r4
 8005da4:	80fb      	strh	r3, [r7, #6]
 8005da6:	4603      	mov	r3, r0
 8005da8:	80bb      	strh	r3, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	807b      	strh	r3, [r7, #2]
 8005dae:	4613      	mov	r3, r2
 8005db0:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005db2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	88fa      	ldrh	r2, [r7, #6]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d205      	bcs.n	8005dca <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 8005dbe:	4b29      	ldr	r3, [pc, #164]	@ (8005e64 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	88ba      	ldrh	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d301      	bcc.n	8005dce <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d141      	bne.n	8005e58 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	887b      	ldrh	r3, [r7, #2]
 8005dd8:	4413      	add	r3, r2
 8005dda:	4a21      	ldr	r2, [pc, #132]	@ (8005e60 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005ddc:	8812      	ldrh	r2, [r2, #0]
 8005dde:	b292      	uxth	r2, r2
 8005de0:	4293      	cmp	r3, r2
 8005de2:	bfcc      	ite	gt
 8005de4:	2301      	movgt	r3, #1
 8005de6:	2300      	movle	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8005dee:	4b1c      	ldr	r3, [pc, #112]	@ (8005e60 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8005dfa:	88ba      	ldrh	r2, [r7, #4]
 8005dfc:	883b      	ldrh	r3, [r7, #0]
 8005dfe:	4413      	add	r3, r2
 8005e00:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8005e02:	8812      	ldrh	r2, [r2, #0]
 8005e04:	b292      	uxth	r2, r2
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bfcc      	ite	gt
 8005e0a:	2301      	movgt	r3, #1
 8005e0c:	2300      	movle	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 8005e14:	4b13      	ldr	r3, [pc, #76]	@ (8005e64 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	88bb      	ldrh	r3, [r7, #4]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	4413      	add	r3, r2
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29c      	uxth	r4, r3
 8005e2c:	88ba      	ldrh	r2, [r7, #4]
 8005e2e:	883b      	ldrh	r3, [r7, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	88b9      	ldrh	r1, [r7, #4]
 8005e3a:	88f8      	ldrh	r0, [r7, #6]
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	f7ff fc49 	bl	80056d4 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8005e42:	883b      	ldrh	r3, [r7, #0]
 8005e44:	887a      	ldrh	r2, [r7, #2]
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	8b3b      	ldrh	r3, [r7, #24]
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff fe13 	bl	8005a7c <_Z25ILI9341_Draw_Colour_Bursttm>
 8005e56:	e000      	b.n	8005e5a <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 8005e58:	bf00      	nop
}
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd90      	pop	{r4, r7, pc}
 8005e60:	20000002 	.word	0x20000002
 8005e64:	20000000 	.word	0x20000000

08005e68 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4623      	mov	r3, r4
 8005e78:	80fb      	strh	r3, [r7, #6]
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	80bb      	strh	r3, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	807b      	strh	r3, [r7, #2]
 8005e82:	4613      	mov	r3, r2
 8005e84:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005e86:	4b1d      	ldr	r3, [pc, #116]	@ (8005efc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d205      	bcs.n	8005e9e <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 8005e92:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	88ba      	ldrh	r2, [r7, #4]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d301      	bcc.n	8005ea2 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d124      	bne.n	8005ef2 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	4413      	add	r3, r2
 8005eae:	4a13      	ldr	r2, [pc, #76]	@ (8005efc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	b292      	uxth	r2, r2
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bfcc      	ite	gt
 8005eb8:	2301      	movgt	r3, #1
 8005eba:	2300      	movle	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	887b      	ldrh	r3, [r7, #2]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	88bb      	ldrh	r3, [r7, #4]
 8005edc:	88b9      	ldrh	r1, [r7, #4]
 8005ede:	88f8      	ldrh	r0, [r7, #6]
 8005ee0:	f7ff fbf8 	bl	80056d4 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8005ee4:	887a      	ldrh	r2, [r7, #2]
 8005ee6:	883b      	ldrh	r3, [r7, #0]
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fdc6 	bl	8005a7c <_Z25ILI9341_Draw_Colour_Bursttm>
 8005ef0:	e000      	b.n	8005ef4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 8005ef2:	bf00      	nop
}
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000002 	.word	0x20000002
 8005f00:	20000000 	.word	0x20000000

08005f04 <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	80fb      	strh	r3, [r7, #6]
 8005f16:	4603      	mov	r3, r0
 8005f18:	80bb      	strh	r3, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	807b      	strh	r3, [r7, #2]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005f22:	4b1d      	ldr	r3, [pc, #116]	@ (8005f98 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	88fa      	ldrh	r2, [r7, #6]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d205      	bcs.n	8005f3a <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f9c <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	88ba      	ldrh	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d301      	bcc.n	8005f3e <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d124      	bne.n	8005f8e <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8005f44:	88ba      	ldrh	r2, [r7, #4]
 8005f46:	887b      	ldrh	r3, [r7, #2]
 8005f48:	4413      	add	r3, r2
 8005f4a:	4a14      	ldr	r2, [pc, #80]	@ (8005f9c <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005f4c:	8812      	ldrh	r2, [r2, #0]
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	4293      	cmp	r3, r2
 8005f52:	bfcc      	ite	gt
 8005f54:	2301      	movgt	r3, #1
 8005f56:	2300      	movle	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f9c <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	88bb      	ldrh	r3, [r7, #4]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8005f6a:	88ba      	ldrh	r2, [r7, #4]
 8005f6c:	887b      	ldrh	r3, [r7, #2]
 8005f6e:	4413      	add	r3, r2
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	88b9      	ldrh	r1, [r7, #4]
 8005f7a:	88f8      	ldrh	r0, [r7, #6]
 8005f7c:	f7ff fbaa 	bl	80056d4 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	883b      	ldrh	r3, [r7, #0]
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fd78 	bl	8005a7c <_Z25ILI9341_Draw_Colour_Bursttm>
 8005f8c:	e000      	b.n	8005f90 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 8005f8e:	bf00      	nop
}
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000002 	.word	0x20000002
 8005f9c:	20000000 	.word	0x20000000

08005fa0 <_ZN19CManejadorControlesC1Ev>:
 */

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"

CManejadorControles::CManejadorControles()
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fb f964 	bl	8001278 <_ZN22CManejadorEventosBotonC1Ev>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fb fcbd 	bl	8001934 <_ZN24CManejadorEventosEncoderC1Ev>
 8005fba:	4a52      	ldr	r2, [pc, #328]	@ (8006104 <_ZN19CManejadorControlesC1Ev+0x164>)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	4a51      	ldr	r2, [pc, #324]	@ (8006108 <_ZN19CManejadorControlesC1Ev+0x168>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fb f853 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	332c      	adds	r3, #44	@ 0x2c
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fb f84e 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	334c      	adds	r3, #76	@ 0x4c
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fb f849 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	336c      	adds	r3, #108	@ 0x6c
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fb f844 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	338c      	adds	r3, #140	@ 0x8c
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fb fae3 	bl	80015c4 <_ZN8CEncoderC1Ev>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	33d8      	adds	r3, #216	@ 0xd8
 8006002:	4618      	mov	r0, r3
 8006004:	f7fb fa20 	bl	8001448 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOA, GPIO_PIN_4, 1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f103 000c 	add.w	r0, r3, #12
 800600e:	2301      	movs	r3, #1
 8006010:	2210      	movs	r2, #16
 8006012:	493e      	ldr	r1, [pc, #248]	@ (800610c <_ZN19CManejadorControlesC1Ev+0x16c>)
 8006014:	f7fb f870 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	330c      	adds	r3, #12
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f7fb f8b1 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	330c      	adds	r3, #12
 800602a:	4618      	mov	r0, r3
 800602c:	f7fb f87d 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8006036:	2302      	movs	r3, #2
 8006038:	2240      	movs	r2, #64	@ 0x40
 800603a:	4934      	ldr	r1, [pc, #208]	@ (800610c <_ZN19CManejadorControlesC1Ev+0x16c>)
 800603c:	f7fb f85c 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	332c      	adds	r3, #44	@ 0x2c
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f7fb f89d 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	332c      	adds	r3, #44	@ 0x2c
 8006052:	4618      	mov	r0, r3
 8006054:	f7fb f869 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800605e:	2303      	movs	r3, #3
 8006060:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006064:	492a      	ldr	r1, [pc, #168]	@ (8006110 <_ZN19CManejadorControlesC1Ev+0x170>)
 8006066:	f7fb f847 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	334c      	adds	r3, #76	@ 0x4c
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7fb f888 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	334c      	adds	r3, #76	@ 0x4c
 800607c:	4618      	mov	r0, r3
 800607e:	f7fb f854 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8006088:	2304      	movs	r3, #4
 800608a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800608e:	4920      	ldr	r1, [pc, #128]	@ (8006110 <_ZN19CManejadorControlesC1Ev+0x170>)
 8006090:	f7fb f832 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	336c      	adds	r3, #108	@ 0x6c
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4611      	mov	r1, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f7fb f873 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	336c      	adds	r3, #108	@ 0x6c
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fb f83f 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 80060b2:	2301      	movs	r3, #1
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060ba:	9302      	str	r3, [sp, #8]
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <_ZN19CManejadorControlesC1Ev+0x170>)
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	4b12      	ldr	r3, [pc, #72]	@ (8006110 <_ZN19CManejadorControlesC1Ev+0x170>)
 80060c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060cc:	4910      	ldr	r1, [pc, #64]	@ (8006110 <_ZN19CManejadorControlesC1Ev+0x170>)
 80060ce:	f7fb fabf 	bl	8001650 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fb fb58 	bl	8001794 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	338c      	adds	r3, #140	@ 0x8c
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fb fb15 	bl	8001718 <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	33d8      	adds	r3, #216	@ 0xd8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb f9d8 	bl	80014a8 <_ZN20ControlVelocidadAire10InicializaEv>

}
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	0800da50 	.word	0x0800da50
 8006108:	0800daec 	.word	0x0800daec
 800610c:	40010800 	.word	0x40010800
 8006110:	40010c00 	.word	0x40010c00

08006114 <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	4a18      	ldr	r2, [pc, #96]	@ (8006180 <_ZN19CManejadorControlesD1Ev+0x6c>)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	4a18      	ldr	r2, [pc, #96]	@ (8006184 <_ZN19CManejadorControlesD1Ev+0x70>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	33d8      	adds	r3, #216	@ 0xd8
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb f99b 	bl	8001468 <_ZN20ControlVelocidadAireD1Ev>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	338c      	adds	r3, #140	@ 0x8c
 8006136:	4618      	mov	r0, r3
 8006138:	f7fb fa68 	bl	800160c <_ZN8CEncoderD1Ev>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	336c      	adds	r3, #108	@ 0x6c
 8006140:	4618      	mov	r0, r3
 8006142:	f7fa ffb9 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	334c      	adds	r3, #76	@ 0x4c
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa ffb4 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	332c      	adds	r3, #44	@ 0x2c
 8006154:	4618      	mov	r0, r3
 8006156:	f7fa ffaf 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	330c      	adds	r3, #12
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa ffaa 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f7fb fbf3 	bl	8001954 <_ZN24CManejadorEventosEncoderD1Ev>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fb f891 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	0800da50 	.word	0x0800da50
 8006184:	0800daec 	.word	0x0800daec

08006188 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 8006188:	f1a0 0004 	sub.w	r0, r0, #4
 800618c:	f7ff bfc2 	b.w	8006114 <_ZN19CManejadorControlesD1Ev>

08006190 <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
}
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff ffbb 	bl	8006114 <_ZN19CManejadorControlesD1Ev>
 800619e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f003 ffc1 	bl	800a12a <_ZdlPvj>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_ZThn4_N19CManejadorControlesD0Ev>:
 80061b2:	f1a0 0004 	sub.w	r0, r0, #4
 80061b6:	f7ff bfeb 	b.w	8006190 <_ZN19CManejadorControlesD0Ev>

080061ba <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f80b 	bl	80061e2 <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	338c      	adds	r3, #140	@ 0x8c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	330c      	adds	r3, #12
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fa ffd5 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	332c      	adds	r3, #44	@ 0x2c
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa ffcf 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	334c      	adds	r3, #76	@ 0x4c
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa ffc9 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonManual.Procesa(gpio_pin);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	336c      	adds	r3, #108	@ 0x6c
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fa ffc3 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	338c      	adds	r3, #140	@ 0x8c
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f7fb fb0b 	bl	8001850 <_ZN8CEncoder7ProcesaEi>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	33d8      	adds	r3, #216	@ 0xd8
 800624e:	4618      	mov	r0, r3
 8006250:	f7fb f990 	bl	8001574 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 8006254:	4603      	mov	r3, r0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <_ZN19CManejadorControles18BotonUnoClickEventEi>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent(int tiempoClick)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <_ZN19CManejadorControles18BotonUnoClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonUnoClickEvent(tiempoClick);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3310      	adds	r3, #16
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	4610      	mov	r0, r2
 8006282:	4798      	blx	r3
 8006284:	e000      	b.n	8006288 <_ZN19CManejadorControles18BotonUnoClickEventEi+0x2a>
		return;
 8006286:	bf00      	nop

}
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <_ZN19CManejadorControles23BotonUnoPresionadoEventEv>:
void CManejadorControles::BotonUnoPresionadoEvent()
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <_ZN19CManejadorControles23BotonUnoPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoEvent();
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	e000      	b.n	80062b4 <_ZN19CManejadorControles23BotonUnoPresionadoEventEv+0x26>
		return;
 80062b2:	bf00      	nop

}
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_ZN19CManejadorControles28BotonUnoPresionadoLargoEventEv>:
void CManejadorControles::BotonUnoPresionadoLargoEvent()
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <_ZN19CManejadorControles28BotonUnoPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoLargoEvent();
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3318      	adds	r3, #24
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	e000      	b.n	80062e0 <_ZN19CManejadorControles28BotonUnoPresionadoLargoEventEv+0x26>
		return;
 80062de:	bf00      	nop

}
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <_ZN19CManejadorControles19BotonUnoSueltoEventEv>:
void CManejadorControles::BotonUnoSueltoEvent()
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <_ZN19CManejadorControles19BotonUnoSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoSueltoEvent();
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	331c      	adds	r3, #28
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	e000      	b.n	800630c <_ZN19CManejadorControles19BotonUnoSueltoEventEv+0x26>
		return;
 800630a:	bf00      	nop

}
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <_ZN19CManejadorControles18BotonDosClickEventEi>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent(int tiempoClick)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <_ZN19CManejadorControles18BotonDosClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonDosClickEvent(tiempoClick);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3320      	adds	r3, #32
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	e000      	b.n	800633c <_ZN19CManejadorControles18BotonDosClickEventEi+0x2a>
		return;
 800633a:	bf00      	nop

}
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <_ZN19CManejadorControles23BotonDosPresionadoEventEv>:
void CManejadorControles::BotonDosPresionadoEvent()
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <_ZN19CManejadorControles23BotonDosPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoEvent();
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3324      	adds	r3, #36	@ 0x24
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	e000      	b.n	8006368 <_ZN19CManejadorControles23BotonDosPresionadoEventEv+0x26>
		return;
 8006366:	bf00      	nop

}
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <_ZN19CManejadorControles28BotonDosPresionaLargodoEventEv>:
void CManejadorControles::BotonDosPresionaLargodoEvent()
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <_ZN19CManejadorControles28BotonDosPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoLargoEvent();
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3328      	adds	r3, #40	@ 0x28
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
 8006390:	e000      	b.n	8006394 <_ZN19CManejadorControles28BotonDosPresionaLargodoEventEv+0x26>
		return;
 8006392:	bf00      	nop

}
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZN19CManejadorControles19BotonDosSueltoEventEv>:
void CManejadorControles::BotonDosSueltoEvent()
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <_ZN19CManejadorControles19BotonDosSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosSueltoEvent();
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	332c      	adds	r3, #44	@ 0x2c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
 80063bc:	e000      	b.n	80063c0 <_ZN19CManejadorControles19BotonDosSueltoEventEv+0x26>
		return;
 80063be:	bf00      	nop

}
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <_ZN19CManejadorControles19BotonTresClickEventEi>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent(int tiempoClick)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <_ZN19CManejadorControles19BotonTresClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonTresClickEvent(tiempoClick);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3330      	adds	r3, #48	@ 0x30
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	4610      	mov	r0, r2
 80063ea:	4798      	blx	r3
 80063ec:	e000      	b.n	80063f0 <_ZN19CManejadorControles19BotonTresClickEventEi+0x2a>
		return;
 80063ee:	bf00      	nop

}
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <_ZN19CManejadorControles24BotonTresPresionadoEventEv>:
void CManejadorControles::BotonTresPresionadoEvent()
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <_ZN19CManejadorControles24BotonTresPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoEvent();
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3334      	adds	r3, #52	@ 0x34
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	e000      	b.n	800641c <_ZN19CManejadorControles24BotonTresPresionadoEventEv+0x26>
		return;
 800641a:	bf00      	nop

}
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <_ZN19CManejadorControles29BotonTresPresionaLargodoEventEv>:
void CManejadorControles::BotonTresPresionaLargodoEvent()
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <_ZN19CManejadorControles29BotonTresPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoLargoEvent();
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3338      	adds	r3, #56	@ 0x38
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	e000      	b.n	8006448 <_ZN19CManejadorControles29BotonTresPresionaLargodoEventEv+0x26>
		return;
 8006446:	bf00      	nop

}
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <_ZN19CManejadorControles20BotonTresSueltoEventEv>:
void CManejadorControles::BotonTresSueltoEvent()
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <_ZN19CManejadorControles20BotonTresSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresSueltoEvent();
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	333c      	adds	r3, #60	@ 0x3c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4610      	mov	r0, r2
 800646e:	4798      	blx	r3
 8006470:	e000      	b.n	8006474 <_ZN19CManejadorControles20BotonTresSueltoEventEv+0x26>
		return;
 8006472:	bf00      	nop

}
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <_ZN19CManejadorControles21BotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent(int tiempoClick)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <_ZN19CManejadorControles21BotonCuatroClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonCuatroClickEvent(tiempoClick);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3340      	adds	r3, #64	@ 0x40
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
 80064a0:	e000      	b.n	80064a4 <_ZN19CManejadorControles21BotonCuatroClickEventEi+0x2a>
		return;
 80064a2:	bf00      	nop

}
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <_ZN19CManejadorControles26BotonCuatroPresionadoEventEv>:
void CManejadorControles::BotonCuatroPresionadoEvent()
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <_ZN19CManejadorControles26BotonCuatroPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoEvent();
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3344      	adds	r3, #68	@ 0x44
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
 80064cc:	e000      	b.n	80064d0 <_ZN19CManejadorControles26BotonCuatroPresionadoEventEv+0x26>
		return;
 80064ce:	bf00      	nop

}
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZN19CManejadorControles31BotonCuatroPresionaLargodoEventEv>:
void CManejadorControles::BotonCuatroPresionaLargodoEvent()
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <_ZN19CManejadorControles31BotonCuatroPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoLargoEvent();
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3348      	adds	r3, #72	@ 0x48
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	e000      	b.n	80064fc <_ZN19CManejadorControles31BotonCuatroPresionaLargodoEventEv+0x26>
		return;
 80064fa:	bf00      	nop
}
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <_ZN19CManejadorControles22BotonCuatroSueltoEventEv>:
void CManejadorControles::BotonCuatroSueltoEvent()
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <_ZN19CManejadorControles22BotonCuatroSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroSueltoEvent();
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	334c      	adds	r3, #76	@ 0x4c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
 8006524:	e000      	b.n	8006528 <_ZN19CManejadorControles22BotonCuatroSueltoEventEv+0x26>
		return;
 8006526:	bf00      	nop

}
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <_ZN19CManejadorControles22BotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent(int tiempoClick)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <_ZN19CManejadorControles22BotonPerillaClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonPerillaClickEvent(tiempoClick);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3350      	adds	r3, #80	@ 0x50
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	e000      	b.n	8006558 <_ZN19CManejadorControles22BotonPerillaClickEventEi+0x2a>
		return;
 8006556:	bf00      	nop

}
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZN19CManejadorControles27BotonPerillaPresionadoEventEv>:
void CManejadorControles::BotonPerillaPresionadoEvent()
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <_ZN19CManejadorControles27BotonPerillaPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoEvent();
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3354      	adds	r3, #84	@ 0x54
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
 8006580:	e000      	b.n	8006584 <_ZN19CManejadorControles27BotonPerillaPresionadoEventEv+0x26>
		return;
 8006582:	bf00      	nop

}
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <_ZN19CManejadorControles32BotonPerillaPresionadoLargoEventEv>:
void CManejadorControles::BotonPerillaPresionadoLargoEvent()
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <_ZN19CManejadorControles32BotonPerillaPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoLargoEvent();
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3358      	adds	r3, #88	@ 0x58
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	e000      	b.n	80065b0 <_ZN19CManejadorControles32BotonPerillaPresionadoLargoEventEv+0x26>
		return;
 80065ae:	bf00      	nop

}
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <_ZN19CManejadorControles23BotonPerillaSueltoEventEv>:
void CManejadorControles::BotonPerillaSueltoEvent()
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <_ZN19CManejadorControles23BotonPerillaSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaSueltoEvent();
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	335c      	adds	r3, #92	@ 0x5c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	e000      	b.n	80065dc <_ZN19CManejadorControles23BotonPerillaSueltoEventEv+0x26>
		return;
 80065da:	bf00      	nop
}
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3360      	adds	r3, #96	@ 0x60
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	e000      	b.n	8006608 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 8006606:	bf00      	nop

}
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3364      	adds	r3, #100	@ 0x64
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	e000      	b.n	8006634 <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 8006632:	bf00      	nop

}
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <_ZN19CManejadorControles17OnBotonClickEventEii>:

void CManejadorControles::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
	switch (idBoton)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3b01      	subs	r3, #1
 800664c:	2b03      	cmp	r3, #3
 800664e:	d82b      	bhi.n	80066a8 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
 8006650:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <_ZN19CManejadorControles17OnBotonClickEventEii+0x1c>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006669 	.word	0x08006669
 800665c:	08006679 	.word	0x08006679
 8006660:	08006689 	.word	0x08006689
 8006664:	08006699 	.word	0x08006699
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent(tiempoClick);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3330      	adds	r3, #48	@ 0x30
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	4798      	blx	r3
		break;
 8006676:	e017      	b.n	80066a8 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
	case BOTON_MEMORIA2:
		BotonDosClickEvent(tiempoClick);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3340      	adds	r3, #64	@ 0x40
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	4798      	blx	r3
		break;
 8006686:	e00f      	b.n	80066a8 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
	case BOTON_MEMORIA3:
		BotonTresClickEvent(tiempoClick);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3350      	adds	r3, #80	@ 0x50
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	4798      	blx	r3
		break;
 8006696:	e007      	b.n	80066a8 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
	case BOTON_MANUAL:
		BotonCuatroClickEvent(tiempoClick);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3360      	adds	r3, #96	@ 0x60
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	4798      	blx	r3
		break;
 80066a6:	bf00      	nop
	}
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <_ZN19CManejadorControles22OnBotonPresionadoEventEi>:

void CManejadorControles::OnBotonPresionadoEvent(int idBoton)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	3b01      	subs	r3, #1
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d826      	bhi.n	8006710 <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
 80066c2:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x18>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	080066e7 	.word	0x080066e7
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006703 	.word	0x08006703
	{
	case BOTON_MEMORIA1:
		BotonUnoPresionadoEvent();
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3334      	adds	r3, #52	@ 0x34
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
		break;
 80066e4:	e014      	b.n	8006710 <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosPresionadoEvent();
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3344      	adds	r3, #68	@ 0x44
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
		break;
 80066f2:	e00d      	b.n	8006710 <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresPresionadoEvent();
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3354      	adds	r3, #84	@ 0x54
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
		break;
 8006700:	e006      	b.n	8006710 <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroPresionadoEvent();
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3364      	adds	r3, #100	@ 0x64
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
		break;
 800670e:	bf00      	nop
	}

}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <_ZN19CManejadorControles18OnBotonSueltoEventEi>:

void CManejadorControles::OnBotonSueltoEvent(int idBoton)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	3b01      	subs	r3, #1
 8006726:	2b03      	cmp	r3, #3
 8006728:	d826      	bhi.n	8006778 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x18>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006741 	.word	0x08006741
 8006734:	0800674f 	.word	0x0800674f
 8006738:	0800675d 	.word	0x0800675d
 800673c:	0800676b 	.word	0x0800676b
	{
	case BOTON_MEMORIA1:
		BotonUnoSueltoEvent();
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	333c      	adds	r3, #60	@ 0x3c
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
		break;
 800674c:	e014      	b.n	8006778 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosSueltoEvent();
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	334c      	adds	r3, #76	@ 0x4c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
		break;
 800675a:	e00d      	b.n	8006778 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresSueltoEvent();
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	335c      	adds	r3, #92	@ 0x5c
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
		break;
 8006768:	e006      	b.n	8006778 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroSueltoEvent();
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	336c      	adds	r3, #108	@ 0x6c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
		break;
 8006776:	bf00      	nop
	}
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <_ZN19CManejadorControles19OnIncrementoEncoderEi>:

//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3380      	adds	r3, #128	@ 0x80
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 800679e:	f1a0 0004 	sub.w	r0, r0, #4
 80067a2:	f7ff bfed 	b.w	8006780 <_ZN19CManejadorControles19OnIncrementoEncoderEi>

080067a6 <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3384      	adds	r3, #132	@ 0x84
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 80067c4:	f1a0 0004 	sub.w	r0, r0, #4
 80067c8:	f7ff bfed 	b.w	80067a6 <_ZN19CManejadorControles19OnDecrementoEncoderEi>

080067cc <_ZN19CManejadorControles24OnBotonEncoderClickEventEii>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	BotonPerillaClickEvent(tiempoClick);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3370      	adds	r3, #112	@ 0x70
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	4798      	blx	r3
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEii>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick);
 80067ee:	f1a0 0004 	sub.w	r0, r0, #4
 80067f2:	f7ff bfeb 	b.w	80067cc <_ZN19CManejadorControles24OnBotonEncoderClickEventEii>

080067f6 <_ZN19CManejadorControles29OnBotonEncoderPresionadoEventEi>:

void CManejadorControles::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoEvent();
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3374      	adds	r3, #116	@ 0x74
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <_ZThn4_N19CManejadorControles29OnBotonEncoderPresionadoEventEi>:
	virtual void OnBotonEncoderPresionadoEvent(int id_Encoder);
 8006814:	f1a0 0004 	sub.w	r0, r0, #4
 8006818:	f7ff bfed 	b.w	80067f6 <_ZN19CManejadorControles29OnBotonEncoderPresionadoEventEi>

0800681c <_ZN19CManejadorControles34OnBotonEncoderPresionadoLargoEventEi>:

void CManejadorControles::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoLargoEvent();
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3378      	adds	r3, #120	@ 0x78
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <_ZThn4_N19CManejadorControles34OnBotonEncoderPresionadoLargoEventEi>:
	virtual void OnBotonEncoderPresionadoLargoEvent(int id_Encoder);
 800683a:	f1a0 0004 	sub.w	r0, r0, #4
 800683e:	f7ff bfed 	b.w	800681c <_ZN19CManejadorControles34OnBotonEncoderPresionadoLargoEventEi>

08006842 <_ZN19CManejadorControles25OnBotonEncoderSueltoEventEi>:

void CManejadorControles::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
	BotonPerillaSueltoEvent();
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	337c      	adds	r3, #124	@ 0x7c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <_ZThn4_N19CManejadorControles25OnBotonEncoderSueltoEventEi>:
	virtual void OnBotonEncoderSueltoEvent(int id_Encoder);
 8006860:	f1a0 0004 	sub.w	r0, r0, #4
 8006864:	f7ff bfed 	b.w	8006842 <_ZN19CManejadorControles25OnBotonEncoderSueltoEventEi>

08006868 <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:


void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
	...

08006884 <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	4a04      	ldr	r2, [pc, #16]	@ (80068a0 <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	0800db14 	.word	0x0800db14

080068a4 <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	4a04      	ldr	r2, [pc, #16]	@ (80068c0 <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	0800db14 	.word	0x0800db14

080068c4 <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
}
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ffe9 	bl	80068a4 <_ZN26CManejadorEventosControlesD1Ev>
 80068d2:	2104      	movs	r1, #4
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f003 fc28 	bl	800a12a <_ZdlPvj>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]

}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]

}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEi>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent(int tiempoClick)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]

}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <_ZN26CManejadorEventosControles25OnBotonUnoPresionadoEventEv>:
void CManejadorEventosControles::OnBotonUnoPresionadoEvent()
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <_ZN26CManejadorEventosControles30OnBotonUnoPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonUnoPresionadoLargoEvent()
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]

}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <_ZN26CManejadorEventosControles21OnBotonUnoSueltoEventEv>:
void CManejadorEventosControles::OnBotonUnoSueltoEvent()
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <_ZN26CManejadorEventosControles20OnBotonDosClickEventEi>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent(int tiempoClick)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]

}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <_ZN26CManejadorEventosControles25OnBotonDosPresionadoEventEv>:
void CManejadorEventosControles::OnBotonDosPresionadoEvent()
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]

}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <_ZN26CManejadorEventosControles30OnBotonDosPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonDosPresionadoLargoEvent()
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]

}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr

0800698e <_ZN26CManejadorEventosControles21OnBotonDosSueltoEventEv>:
void CManejadorEventosControles::OnBotonDosSueltoEvent()
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]

}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <_ZN26CManejadorEventosControles21OnBotonTresClickEventEi>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent(int tiempoClick)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]

}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <_ZN26CManejadorEventosControles26OnBotonTresPresionadoEventEv>:
void CManejadorEventosControles::OnBotonTresPresionadoEvent()
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]

}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <_ZN26CManejadorEventosControles31OnBotonTresPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonTresPresionadoLargoEvent()
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]

}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <_ZN26CManejadorEventosControles22OnBotonTresSueltoEventEv>:
void CManejadorEventosControles::OnBotonTresSueltoEvent()
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent(int tiempoClick)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]

}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <_ZN26CManejadorEventosControles28OnBotonCuatroPresionadoEventEv>:
void CManejadorEventosControles::OnBotonCuatroPresionadoEvent()
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]

}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <_ZN26CManejadorEventosControles33OnBotonCuatroPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonCuatroPresionadoLargoEvent()
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <_ZN26CManejadorEventosControles24OnBotonCuatroSueltoEventEv>:
void CManejadorEventosControles::OnBotonCuatroSueltoEvent()
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]

}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent(int tiempoClick)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]

}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <_ZN26CManejadorEventosControles29OnBotonPerillaPresionadoEventEv>:
void CManejadorEventosControles::OnBotonPerillaPresionadoEvent()
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <_ZN26CManejadorEventosControles34OnBotonPerillaPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonPerillaPresionadoLargoEvent()
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]

}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <_ZN26CManejadorEventosControles25OnBotonPerillaSueltoEventEv>:
void CManejadorEventosControles::OnBotonPerillaSueltoEvent()
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]

}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]

}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.h"
MAX6675::MAX6675()
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
{

}
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	88fa      	ldrh	r2, [r7, #6]
 8006ace:	819a      	strh	r2, [r3, #12]

}
 8006ad0:	bf00      	nop
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	81da      	strh	r2, [r3, #14]

}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	821a      	strh	r2, [r3, #16]

}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6858      	ldr	r0, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	89db      	ldrh	r3, [r3, #14]
 8006b32:	2201      	movs	r2, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	f001 fe11 	bl	800875c <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e002      	b.n	8006b46 <_ZN7MAX667513MAX6675_pulsoEv+0x24>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	3301      	adds	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b4c:	dbf8      	blt.n	8006b40 <_ZN7MAX667513MAX6675_pulsoEv+0x1e>
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	899b      	ldrh	r3, [r3, #12]
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f001 fdf9 	bl	8008750 <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6858      	ldr	r0, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	89db      	ldrh	r3, [r3, #14]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f001 fdf5 	bl	800875c <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	e002      	b.n	8006b7e <_ZN7MAX667513MAX6675_pulsoEv+0x5c>
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b84:	dbf8      	blt.n	8006b78 <_ZN7MAX667513MAX6675_pulsoEv+0x56>
	return lei;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <_ZN7MAX667511MAX6675_leeEv>:
float MAX6675::MAX6675_lee()
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	int tiempoClick = HAL_GetTick() - TiempoTranscurrido;
 8006b98:	f001 fac2 	bl	8008120 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	613b      	str	r3, [r7, #16]
	if (tiempoClick < 275)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8006bac:	dc02      	bgt.n	8006bb4 <_ZN7MAX667511MAX6675_leeEv+0x24>
	{
		return UltimaTemperatura;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	e052      	b.n	8006c5a <_ZN7MAX667511MAX6675_leeEv+0xca>
	}
	TiempoTranscurrido = HAL_GetTick();
 8006bb4:	f001 fab4 	bl	8008120 <HAL_GetTick>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	615a      	str	r2, [r3, #20]

	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6898      	ldr	r0, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8a1b      	ldrh	r3, [r3, #16]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f001 fdc4 	bl	800875c <HAL_GPIO_WritePin>
	for (cont = 15; cont >= 0; cont--)
 8006bd4:	230f      	movs	r3, #15
 8006bd6:	757b      	strb	r3, [r7, #21]
 8006bd8:	e01b      	b.n	8006c12 <_ZN7MAX667511MAX6675_leeEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff ffa1 	bl	8006b22 <_ZN7MAX667513MAX6675_pulsoEv>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	bf0c      	ite	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	2300      	movne	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <_ZN7MAX667511MAX6675_leeEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 8006bf0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	b21a      	sxth	r2, r3
 8006bfc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b21b      	sxth	r3, r3
 8006c04:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 8006c06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	757b      	strb	r3, [r7, #21]
 8006c12:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dadf      	bge.n	8006bda <_ZN7MAX667511MAX6675_leeEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6898      	ldr	r0, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	8a1b      	ldrh	r3, [r3, #16]
 8006c22:	2201      	movs	r2, #1
 8006c24:	4619      	mov	r1, r3
 8006c26:	f001 fd99 	bl	800875c <HAL_GPIO_WritePin>
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura=(((float) sensor_dato * 0.25)); //0.25
 8006c30:	89fb      	ldrh	r3, [r7, #14]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7f9 ffde 	bl	8000bf4 <__aeabi_ui2f>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fa f830 	bl	8000ca4 <__aeabi_fmul>
 8006c44:	4603      	mov	r3, r0
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	619a      	str	r2, [r3, #24]
	return UltimaTemperatura+26;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	4904      	ldr	r1, [pc, #16]	@ (8006c64 <_ZN7MAX667511MAX6675_leeEv+0xd4>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 ff1e 	bl	8000a94 <__addsf3>
 8006c58:	4603      	mov	r3, r0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	41d00000 	.word	0x41d00000

08006c68 <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8006c70:	f107 0308 	add.w	r3, r7, #8
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	609a      	str	r2, [r3, #8]
 8006c7c:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	89da      	ldrh	r2, [r3, #14]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8a1b      	ldrh	r3, [r3, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4821      	ldr	r0, [pc, #132]	@ (8006d14 <_ZN7MAX66754InitEv+0xac>)
 8006c90:	f001 fd64 	bl	800875c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	899b      	ldrh	r3, [r3, #12]
 8006c98:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f107 0208 	add.w	r2, r7, #8
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 fc77 	bl	80085a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	89da      	ldrh	r2, [r3, #14]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8a1b      	ldrh	r3, [r3, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4810      	ldr	r0, [pc, #64]	@ (8006d14 <_ZN7MAX66754InitEv+0xac>)
 8006cd4:	f001 fc64 	bl	80085a0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6858      	ldr	r0, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	89db      	ldrh	r3, [r3, #14]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f001 fd3a 	bl	800875c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6898      	ldr	r0, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8a1b      	ldrh	r3, [r3, #16]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f001 fd32 	bl	800875c <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8006cf8:	2064      	movs	r0, #100	@ 0x64
 8006cfa:	f001 fa17 	bl	800812c <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 8006cfe:	f001 fa0f 	bl	8008120 <HAL_GetTick>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	615a      	str	r2, [r3, #20]
}
 8006d0a:	bf00      	nop
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40010800 	.word	0x40010800

08006d18 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f1xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	4a04      	ldr	r2, [pc, #16]	@ (8006d34 <_ZN3PwmC1Ev+0x1c>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	0800db84 	.word	0x0800db84

08006d38 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	4a04      	ldr	r2, [pc, #16]	@ (8006d54 <_ZN3PwmD1Ev+0x1c>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	0800db84 	.word	0x0800db84

08006d58 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
}
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ffe9 	bl	8006d38 <_ZN3PwmD1Ev>
 8006d66:	214c      	movs	r1, #76	@ 0x4c
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f003 f9de 	bl	800a12a <_ZdlPvj>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b092      	sub	sp, #72	@ 0x48
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	609a      	str	r2, [r3, #8]
 8006d92:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	609a      	str	r2, [r3, #8]
 8006daa:	60da      	str	r2, [r3, #12]
 8006dac:	611a      	str	r2, [r3, #16]
 8006dae:	615a      	str	r2, [r3, #20]
 8006db0:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2280      	movs	r2, #128	@ 0x80
 8006dd4:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f002 ff2e 	bl	8009c3c <HAL_TIM_Base_Init>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bf14      	ite	ne
 8006de6:	2301      	movne	r3, #1
 8006de8:	2300      	moveq	r3, #0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f887 	bl	8006f04 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f002 fffe 	bl	8009e08 <HAL_TIM_ConfigClockSource>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf14      	ite	ne
 8006e12:	2301      	movne	r3, #1
 8006e14:	2300      	moveq	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f871 	bl	8006f04 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f002 ff34 	bl	8009c94 <HAL_TIM_PWM_Init>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bf14      	ite	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	2300      	moveq	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f861 	bl	8006f04 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e42:	2300      	movs	r3, #0
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f003 f8cf 	bl	8009ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bf14      	ite	ne
 8006e60:	2301      	movne	r3, #1
 8006e62:	2300      	moveq	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f84a 	bl	8006f04 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e70:	2360      	movs	r3, #96	@ 0x60
 8006e72:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3304      	adds	r3, #4
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	f107 0114 	add.w	r1, r7, #20
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f002 ff5a 	bl	8009d44 <HAL_TIM_PWM_ConfigChannel>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bf14      	ite	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	2300      	moveq	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f82f 	bl	8006f04 <_ZN3Pwm13Error_HandlerEv>
	  }
	  HAL_TIM_MspPostInit(&Htim);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f833 	bl	8006f18 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(&Htim,chanel);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f003 f89a 	bl	8009ff4 <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f804 	bl	8006ed0 <_ZN3Pwm12SicloTrabajoEi>
}
 8006ec8:	bf00      	nop
 8006eca:	3748      	adds	r7, #72	@ 0x48
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	4a06      	ldr	r2, [pc, #24]	@ (8006f00 <_ZN3Pwm12SicloTrabajoEi+0x30>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr
 8006f00:	51eb851f 	.word	0x51eb851f

08006f04 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr
	...

08006f18 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>:
void Pwm::HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	@ 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	605a      	str	r2, [r3, #4]
 8006f2c:	609a      	str	r2, [r3, #8]
 8006f2e:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a28      	ldr	r2, [pc, #160]	@ (8006fd8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d119      	bne.n	8006f6e <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0x56>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f3a:	4b28      	ldr	r3, [pc, #160]	@ (8006fdc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	4a27      	ldr	r2, [pc, #156]	@ (8006fdc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006f40:	f043 0304 	orr.w	r3, r3, #4
 8006f44:	6193      	str	r3, [r2, #24]
 8006f46:	4b25      	ldr	r3, [pc, #148]	@ (8006fdc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f60:	f107 0314 	add.w	r3, r7, #20
 8006f64:	4619      	mov	r1, r3
 8006f66:	481e      	ldr	r0, [pc, #120]	@ (8006fe0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8006f68:	f001 fb1a 	bl	80085a0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
  }

}
 8006f6c:	e02f      	b.n	8006fce <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
  else if(htim->Instance==TIM2)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f76:	d12a      	bne.n	8006fce <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f78:	4b18      	ldr	r3, [pc, #96]	@ (8006fdc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	4a17      	ldr	r2, [pc, #92]	@ (8006fdc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006f7e:	f043 0304 	orr.w	r3, r3, #4
 8006f82:	6193      	str	r3, [r2, #24]
 8006f84:	4b15      	ldr	r3, [pc, #84]	@ (8006fdc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f96:	2302      	movs	r3, #2
 8006f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	480e      	ldr	r0, [pc, #56]	@ (8006fe0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8006fa6:	f001 fafb 	bl	80085a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8006faa:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc8:	4a06      	ldr	r2, [pc, #24]	@ (8006fe4 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	6053      	str	r3, [r2, #4]
}
 8006fce:	bf00      	nop
 8006fd0:	3728      	adds	r7, #40	@ 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40010800 	.word	0x40010800
 8006fe4:	40010000 	.word	0x40010000

08006fe8 <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	4a04      	ldr	r2, [pc, #16]	@ (8007004 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	0800db94 	.word	0x0800db94

08007008 <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	4a04      	ldr	r2, [pc, #16]	@ (8007024 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	0800db94 	.word	0x0800db94

08007028 <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
}
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff ffe9 	bl	8007008 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8007036:	2104      	movs	r1, #4
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f003 f876 	bl	800a12a <_ZdlPvj>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr

0800705c <_ZN15SensorMagneticoC1Ev>:

#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f1xx.h"
#include "Constantes.hpp"

SensorMagnetico::SensorMagnetico()
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	4a0a      	ldr	r2, [pc, #40]	@ (8007090 <_ZN15SensorMagneticoC1Ev+0x34>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	60da      	str	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	611a      	str	r2, [r3, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	615a      	str	r2, [r3, #20]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	0800dba8 	.word	0x0800dba8

08007094 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	4a04      	ldr	r2, [pc, #16]	@ (80070b0 <_ZN15SensorMagneticoD1Ev+0x1c>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	0800dba8 	.word	0x0800dba8

080070b4 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
}
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ffe9 	bl	8007094 <_ZN15SensorMagneticoD1Ev>
 80070c2:	211c      	movs	r1, #28
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f003 f830 	bl	800a12a <_ZdlPvj>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	811a      	strh	r2, [r3, #8]

}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	891b      	ldrh	r3, [r3, #8]
 8007112:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007118:	2301      	movs	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f107 0208 	add.w	r2, r7, #8
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f001 fa3a 	bl	80085a0 <HAL_GPIO_Init>
}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	60da      	str	r2, [r3, #12]

}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr

0800714e <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	891b      	ldrh	r3, [r3, #8]
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f001 faf5 	bl	8008750 <HAL_GPIO_ReadPin>
 8007166:	4603      	mov	r3, r0

}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08c      	sub	sp, #48	@ 0x30
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 8007184:	4b3b      	ldr	r3, [pc, #236]	@ (8007274 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	4a3a      	ldr	r2, [pc, #232]	@ (8007274 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 800718a:	f043 0302 	orr.w	r3, r3, #2
 800718e:	61d3      	str	r3, [r2, #28]
 8007190:	4b38      	ldr	r3, [pc, #224]	@ (8007274 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f640 5215 	movw	r2, #3349	@ 0xd15
 80071b4:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 fd34 	bl	8009c3c <HAL_TIM_Base_Init>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bf14      	ite	ne
 80071da:	2301      	movne	r3, #1
 80071dc:	2300      	moveq	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x78>
	{
		return false;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e041      	b.n	800726c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_ClockConfigTypeDef TimClock =
 80071e8:	f107 0320 	add.w	r3, r7, #32
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	609a      	str	r2, [r3, #8]
 80071f4:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071fa:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f107 0220 	add.w	r2, r7, #32
 8007202:	4611      	mov	r1, r2
 8007204:	4618      	mov	r0, r3
 8007206:	f002 fdff 	bl	8009e08 <HAL_TIM_ConfigClockSource>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xae>
	{
		return false;
 800721a:	2300      	movs	r3, #0
 800721c:	e026      	b.n	800726c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_MasterConfigTypeDef TimMaster =
 800721e:	f107 0318 	add.w	r3, r7, #24
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f107 0218 	add.w	r2, r7, #24
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f002 fedd 	bl	8009ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe2>
	{
		return false;
 800724e:	2300      	movs	r3, #0
 8007250:	e00c      	b.n	800726c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 8007252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007256:	2200      	movs	r2, #0
 8007258:	2105      	movs	r1, #5
 800725a:	4618      	mov	r0, r3
 800725c:	f001 f94e 	bl	80084fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 8007260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007264:	4618      	mov	r0, r3
 8007266:	f001 f979 	bl	800855c <HAL_NVIC_EnableIRQ>
	return true;
 800726a:	2301      	movs	r3, #1
}
 800726c:	4618      	mov	r0, r3
 800726e:	3730      	adds	r7, #48	@ 0x30
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40021000 	.word	0x40021000

08007278 <_ZN6CTimer5StartEv>:
void CTimer::Start()
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&HTim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	f002 fbd0 	bl	8009a28 <HAL_TIM_Base_Start_IT>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
	...

080072ac <_Z16IncializaSistemav>:
//TIM_HandleTypeDef htim2;
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;

void IncializaSistema()
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b095      	sub	sp, #84	@ 0x54
 80072b0:	af00      	add	r7, sp, #0
	CTimer timer;
 80072b2:	463b      	mov	r3, r7
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ffeb 	bl	8007290 <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	2028      	movs	r0, #40	@ 0x28
 80072c0:	f001 f91c 	bl	80084fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072c4:	2028      	movs	r0, #40	@ 0x28
 80072c6:	f001 f949 	bl	800855c <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 80072ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80072ce:	f002 ff2e 	bl	800a12e <_Znwj>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461c      	mov	r4, r3
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7fa fcf6 	bl	8001cc8 <_ZN16CestacionBaku601C1Ev>
 80072dc:	4b11      	ldr	r3, [pc, #68]	@ (8007324 <_Z16IncializaSistemav+0x78>)
 80072de:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 80072e0:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 80072e4:	f002 ff23 	bl	800a12e <_Znwj>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461c      	mov	r4, r3
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7fe fe57 	bl	8005fa0 <_ZN19CManejadorControlesC1Ev>
 80072f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <_Z16IncializaSistemav+0x7c>)
 80072f4:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 80072f6:	f7fe fab3 	bl	8005860 <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80072fa:	2003      	movs	r0, #3
 80072fc:	f7fe fa52 	bl	80057a4 <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(WHITE);
 8007300:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007304:	f7fe fc54 	bl	8005bb0 <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 8007308:	4638      	mov	r0, r7
 800730a:	231d      	movs	r3, #29
 800730c:	2201      	movs	r2, #1
 800730e:	4907      	ldr	r1, [pc, #28]	@ (800732c <_Z16IncializaSistemav+0x80>)
 8007310:	f7ff ff2e 	bl	8007170 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>
	timer.Start();
 8007314:	463b      	mov	r3, r7
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff ffae 	bl	8007278 <_ZN6CTimer5StartEv>

}
 800731c:	bf00      	nop
 800731e:	3754      	adds	r7, #84	@ 0x54
 8007320:	46bd      	mov	sp, r7
 8007322:	bd90      	pop	{r4, r7, pc}
 8007324:	200001f4 	.word	0x200001f4
 8007328:	20000220 	.word	0x20000220
 800732c:	40000400 	.word	0x40000400

08007330 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
	ManejadorPantallas.SetEstacion(estacion);
 8007334:	4b0f      	ldr	r3, [pc, #60]	@ (8007374 <_Z14EjecutaSistemav+0x44>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4619      	mov	r1, r3
 800733a:	480f      	ldr	r0, [pc, #60]	@ (8007378 <_Z14EjecutaSistemav+0x48>)
 800733c:	f7fc f91a 	bl	8003574 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 8007340:	4b0e      	ldr	r3, [pc, #56]	@ (800737c <_Z14EjecutaSistemav+0x4c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4619      	mov	r1, r3
 8007346:	480c      	ldr	r0, [pc, #48]	@ (8007378 <_Z14EjecutaSistemav+0x48>)
 8007348:	f7fc f9b3 	bl	80036b2 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	ManejadorPantallas.MuestraPantallaManual();
 800734c:	480a      	ldr	r0, [pc, #40]	@ (8007378 <_Z14EjecutaSistemav+0x48>)
 800734e:	f7fc f91e 	bl	800358e <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (1)
	{
		estacion->Procesa();
 8007352:	4b08      	ldr	r3, [pc, #32]	@ (8007374 <_Z14EjecutaSistemav+0x44>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <_Z14EjecutaSistemav+0x44>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3330      	adds	r3, #48	@ 0x30
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 8007364:	4804      	ldr	r0, [pc, #16]	@ (8007378 <_Z14EjecutaSistemav+0x48>)
 8007366:	f7fc f94a 	bl	80035fe <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 800736a:	2001      	movs	r0, #1
 800736c:	f000 fede 	bl	800812c <HAL_Delay>
		estacion->Procesa();
 8007370:	bf00      	nop
 8007372:	e7ee      	b.n	8007352 <_Z14EjecutaSistemav+0x22>
 8007374:	200001f4 	.word	0x200001f4
 8007378:	200001f8 	.word	0x200001f8
 800737c:	20000220 	.word	0x20000220

08007380 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	80fb      	strh	r3, [r7, #6]
	estacion->GPIO_INTERRUPCION(GPIO_Pin);
 800738a:	4b0c      	ldr	r3, [pc, #48]	@ (80073bc <HAL_GPIO_EXTI_Callback+0x3c>)
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <HAL_GPIO_EXTI_Callback+0x3c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3354      	adds	r3, #84	@ 0x54
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	88f9      	ldrh	r1, [r7, #6]
 800739a:	4610      	mov	r0, r2
 800739c:	4798      	blx	r3
	ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 800739e:	4b08      	ldr	r3, [pc, #32]	@ (80073c0 <HAL_GPIO_EXTI_Callback+0x40>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <HAL_GPIO_EXTI_Callback+0x40>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3388      	adds	r3, #136	@ 0x88
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	88f9      	ldrh	r1, [r7, #6]
 80073ae:	4610      	mov	r0, r2
 80073b0:	4798      	blx	r3
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200001f4 	.word	0x200001f4
 80073c0:	20000220 	.word	0x20000220

080073c4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a07      	ldr	r2, [pc, #28]	@ (80073f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d108      	bne.n	80073e8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		estacion->TimerTick();
 80073d6:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3340      	adds	r3, #64	@ 0x40
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
	}
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40000400 	.word	0x40000400
 80073f4:	200001f4 	.word	0x200001f4

080073f8 <_Z41__static_initialization_and_destruction_0ii>:
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d107      	bne.n	8007418 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800740e:	4293      	cmp	r3, r2
 8007410:	d102      	bne.n	8007418 <_Z41__static_initialization_and_destruction_0ii+0x20>
CManejadorPantallas ManejadorPantallas;
 8007412:	4809      	ldr	r0, [pc, #36]	@ (8007438 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007414:	f7fc f870 	bl	80034f8 <_ZN19CManejadorPantallasC1Ev>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007424:	4293      	cmp	r3, r2
 8007426:	d102      	bne.n	800742e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007428:	4803      	ldr	r0, [pc, #12]	@ (8007438 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800742a:	f7fc f883 	bl	8003534 <_ZN19CManejadorPantallasD1Ev>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200001f8 	.word	0x200001f8

0800743c <_GLOBAL__sub_I_estacion>:
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
 8007440:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007444:	2001      	movs	r0, #1
 8007446:	f7ff ffd7 	bl	80073f8 <_Z41__static_initialization_and_destruction_0ii>
 800744a:	bd80      	pop	{r7, pc}

0800744c <_GLOBAL__sub_D_estacion>:
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
 8007450:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007454:	2000      	movs	r0, #0
 8007456:	f7ff ffcf 	bl	80073f8 <_Z41__static_initialization_and_destruction_0ii>
 800745a:	bd80      	pop	{r7, pc}

0800745c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800745c:	4b52      	ldr	r3, [pc, #328]	@ (80075a8 <MX_GPIO_Init+0x14c>)
{
 800745e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007462:	699a      	ldr	r2, [r3, #24]
{
 8007464:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007466:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800746a:	619a      	str	r2, [r3, #24]
 800746c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800746e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007470:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007474:	9201      	str	r2, [sp, #4]
 8007476:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007478:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800747a:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 80075ac <MX_GPIO_Init+0x150>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800747e:	f042 0210 	orr.w	r2, r2, #16
 8007482:	619a      	str	r2, [r3, #24]
 8007484:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8007486:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007488:	f002 0210 	and.w	r2, r2, #16
 800748c:	9202      	str	r2, [sp, #8]
 800748e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007490:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8007492:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007494:	f042 0204 	orr.w	r2, r2, #4
 8007498:	619a      	str	r2, [r3, #24]
 800749a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749c:	2503      	movs	r5, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800749e:	f002 0204 	and.w	r2, r2, #4
 80074a2:	9203      	str	r2, [sp, #12]
 80074a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074a6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074a8:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ac:	f042 0208 	orr.w	r2, r2, #8
 80074b0:	619a      	str	r2, [r3, #24]
 80074b2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80074b4:	f44f 5a00 	mov.w	sl, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074b8:	f002 0208 	and.w	r2, r2, #8
 80074bc:	9204      	str	r2, [sp, #16]
 80074be:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074c0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80074c2:	4f3b      	ldr	r7, [pc, #236]	@ (80075b0 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074c4:	f042 0220 	orr.w	r2, r2, #32
 80074c8:	619a      	str	r2, [r3, #24]
 80074ca:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074cc:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	9305      	str	r3, [sp, #20]
 80074d4:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074d6:	2304      	movs	r3, #4
 80074d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80074dc:	f001 f860 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e0:	2368      	movs	r3, #104	@ 0x68
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074e2:	4640      	mov	r0, r8
 80074e4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e6:	e9cd 3906 	strd	r3, r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ea:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074ec:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074ee:	f001 f857 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80074f2:	2210      	movs	r2, #16
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80074f4:	4640      	mov	r0, r8
 80074f6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074fc:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8007500:	f001 f84e 	bl	80085a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8007504:	4638      	mov	r0, r7
 8007506:	a906      	add	r1, sp, #24

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007508:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800750a:	e9cd a406 	strd	sl, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8007510:	f001 f846 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007514:	2232      	movs	r2, #50	@ 0x32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8007516:	f44f 4b84 	mov.w	fp, #16896	@ 0x4200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800751a:	4638      	mov	r0, r7
 800751c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751e:	e9cd 2606 	strd	r2, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007522:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007526:	f001 f83b 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752a:	e9cd a606 	strd	sl, r6, [sp, #24]
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800752e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80075b4 <MX_GPIO_Init+0x158>
 8007532:	a906      	add	r1, sp, #24
 8007534:	4650      	mov	r0, sl
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007536:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800753a:	f001 f831 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800753e:	4650      	mov	r0, sl
 8007540:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007542:	e9cd b906 	strd	fp, r9, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007546:	e9cd 4608 	strd	r4, r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800754a:	f001 f829 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800754e:	2323      	movs	r3, #35	@ 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007550:	4638      	mov	r0, r7
 8007552:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007554:	e9cd 3906 	strd	r3, r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007558:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800755a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800755c:	f001 f820 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007560:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007564:	a906      	add	r1, sp, #24
 8007566:	4814      	ldr	r0, [pc, #80]	@ (80075b8 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007568:	e9cd 2606 	strd	r2, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800756c:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007570:	f001 f816 	bl	80085a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8007574:	2368      	movs	r3, #104	@ 0x68
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007576:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800757a:	4619      	mov	r1, r3
 800757c:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800757e:	e9cd 2606 	strd	r2, r6, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8007582:	4622      	mov	r2, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007584:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8007588:	f001 f8e8 	bl	800875c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800758c:	4622      	mov	r2, r4
 800758e:	4659      	mov	r1, fp
 8007590:	4650      	mov	r0, sl
 8007592:	f001 f8e3 	bl	800875c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8007596:	4622      	mov	r2, r4
 8007598:	2123      	movs	r1, #35	@ 0x23
 800759a:	4638      	mov	r0, r7
 800759c:	f001 f8de 	bl	800875c <HAL_GPIO_WritePin>

}
 80075a0:	b00b      	add	sp, #44	@ 0x2c
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000
 80075ac:	40011800 	.word	0x40011800
 80075b0:	40011000 	.word	0x40011000
 80075b4:	40010c00 	.word	0x40010c00
 80075b8:	40010800 	.word	0x40010800

080075bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075c0:	f000 fd90 	bl	80080e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075c4:	f000 f814 	bl	80075f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075c8:	f000 fa48 	bl	8007a5c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80075cc:	f000 f8f2 	bl	80077b4 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80075d0:	f000 fa16 	bl	8007a00 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80075d4:	f000 f872 	bl	80076bc <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 80075d8:	f000 f928 	bl	800782c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80075dc:	f000 f9b4 	bl	8007948 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 80075e0:	f000 f8b4 	bl	800774c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
	IncializaSistema();
 80075e4:	f7ff fe62 	bl	80072ac <_Z16IncializaSistemav>
	EjecutaSistema();
 80075e8:	f7ff fea2 	bl	8007330 <_Z14EjecutaSistemav>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <main+0x30>

080075f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b094      	sub	sp, #80	@ 0x50
 80075f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80075fa:	2228      	movs	r2, #40	@ 0x28
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f003 fbf7 	bl	800adf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007614:	1d3b      	adds	r3, r7, #4
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	605a      	str	r2, [r3, #4]
 800761c:	609a      	str	r2, [r3, #8]
 800761e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007620:	2302      	movs	r3, #2
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007624:	2301      	movs	r3, #1
 8007626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007628:	2310      	movs	r3, #16
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800762c:	2302      	movs	r3, #2
 800762e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8007630:	2300      	movs	r3, #0
 8007632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8007634:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8007638:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800763a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800763e:	4618      	mov	r0, r3
 8007640:	f001 fd14 	bl	800906c <HAL_RCC_OscConfig>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8007654:	f000 faf2 	bl	8007c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007658:	230f      	movs	r3, #15
 800765a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800765c:	2302      	movs	r3, #2
 800765e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007660:	2300      	movs	r3, #0
 8007662:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007668:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800766e:	f107 0314 	add.w	r3, r7, #20
 8007672:	2101      	movs	r1, #1
 8007674:	4618      	mov	r0, r3
 8007676:	f001 febb 	bl	80093f0 <HAL_RCC_ClockConfig>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf14      	ite	ne
 8007680:	2301      	movne	r3, #1
 8007682:	2300      	moveq	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800768a:	f000 fad7 	bl	8007c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800768e:	2302      	movs	r3, #2
 8007690:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007696:	1d3b      	adds	r3, r7, #4
 8007698:	4618      	mov	r0, r3
 800769a:	f001 ff65 	bl	8009568 <HAL_RCCEx_PeriphCLKConfig>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80076ae:	f000 fac5 	bl	8007c3c <Error_Handler>
  }
}
 80076b2:	bf00      	nop
 80076b4:	3750      	adds	r7, #80	@ 0x50
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076c2:	1d3b      	adds	r3, r7, #4
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80076cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007748 <_ZL12MX_ADC1_Initv+0x8c>)
 80076d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80076d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80076d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076da:	2200      	movs	r2, #0
 80076dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80076de:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80076e4:	4b17      	ldr	r3, [pc, #92]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80076ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80076f2:	4b14      	ldr	r3, [pc, #80]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80076f8:	4812      	ldr	r0, [pc, #72]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 80076fa:	f000 fe6f 	bl	80083dc <HAL_ADC_Init>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 800770e:	f000 fa95 	bl	8007c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007712:	2303      	movs	r3, #3
 8007714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007716:	2301      	movs	r3, #1
 8007718:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4808      	ldr	r0, [pc, #32]	@ (8007744 <_ZL12MX_ADC1_Initv+0x88>)
 8007724:	f000 fd18 	bl	8008158 <HAL_ADC_ConfigChannel>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	bf14      	ite	ne
 800772e:	2301      	movne	r3, #1
 8007730:	2300      	moveq	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8007738:	f000 fa80 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800773c:	bf00      	nop
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000224 	.word	0x20000224
 8007748:	40012400 	.word	0x40012400

0800774c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007750:	4b15      	ldr	r3, [pc, #84]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007752:	4a16      	ldr	r2, [pc, #88]	@ (80077ac <_ZL12MX_I2C1_Initv+0x60>)
 8007754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007756:	4b14      	ldr	r3, [pc, #80]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007758:	4a15      	ldr	r2, [pc, #84]	@ (80077b0 <_ZL12MX_I2C1_Initv+0x64>)
 800775a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800775c:	4b12      	ldr	r3, [pc, #72]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800775e:	2200      	movs	r2, #0
 8007760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007762:	4b11      	ldr	r3, [pc, #68]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007764:	2200      	movs	r2, #0
 8007766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007768:	4b0f      	ldr	r3, [pc, #60]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800776a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800776e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007770:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007772:	2200      	movs	r2, #0
 8007774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007776:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007778:	2200      	movs	r2, #0
 800777a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800777e:	2200      	movs	r2, #0
 8007780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007782:	4b09      	ldr	r3, [pc, #36]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007784:	2200      	movs	r2, #0
 8007786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007788:	4807      	ldr	r0, [pc, #28]	@ (80077a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800778a:	f001 f9fb 	bl	8008b84 <HAL_I2C_Init>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	bf14      	ite	ne
 8007794:	2301      	movne	r3, #1
 8007796:	2300      	moveq	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800779e:	f000 fa4d 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000254 	.word	0x20000254
 80077ac:	40005400 	.word	0x40005400
 80077b0:	000186a0 	.word	0x000186a0

080077b4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80077b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007828 <_ZL12MX_SPI1_Initv+0x74>)
 80077bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80077be:	4b19      	ldr	r3, [pc, #100]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80077c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80077cc:	4b15      	ldr	r3, [pc, #84]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077d2:	4b14      	ldr	r3, [pc, #80]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077d8:	4b12      	ldr	r3, [pc, #72]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077da:	2200      	movs	r2, #0
 80077dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80077f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80077fe:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 8007800:	220a      	movs	r2, #10
 8007802:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007804:	4807      	ldr	r0, [pc, #28]	@ (8007824 <_ZL12MX_SPI1_Initv+0x70>)
 8007806:	f001 ff8f 	bl	8009728 <HAL_SPI_Init>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	bf14      	ite	ne
 8007810:	2301      	movne	r3, #1
 8007812:	2300      	moveq	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800781a:	f000 fa0f 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200002a8 	.word	0x200002a8
 8007828:	40013000 	.word	0x40013000

0800782c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08e      	sub	sp, #56	@ 0x38
 8007830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007840:	f107 0320 	add.w	r3, r7, #32
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800784a:	1d3b      	adds	r3, r7, #4
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	611a      	str	r2, [r3, #16]
 8007858:	615a      	str	r2, [r3, #20]
 800785a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800785c:	4b39      	ldr	r3, [pc, #228]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 800785e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007864:	4b37      	ldr	r3, [pc, #220]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 8007866:	2200      	movs	r2, #0
 8007868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800786a:	4b36      	ldr	r3, [pc, #216]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 800786c:	2200      	movs	r2, #0
 800786e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007870:	4b34      	ldr	r3, [pc, #208]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 8007872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007878:	4b32      	ldr	r3, [pc, #200]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 800787a:	2200      	movs	r2, #0
 800787c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800787e:	4b31      	ldr	r3, [pc, #196]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 8007880:	2280      	movs	r2, #128	@ 0x80
 8007882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007884:	482f      	ldr	r0, [pc, #188]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 8007886:	f002 f9d9 	bl	8009c3c <HAL_TIM_Base_Init>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	bf14      	ite	ne
 8007890:	2301      	movne	r3, #1
 8007892:	2300      	moveq	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800789a:	f000 f9cf 	bl	8007c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800789e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80078a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80078a8:	4619      	mov	r1, r3
 80078aa:	4826      	ldr	r0, [pc, #152]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 80078ac:	f002 faac 	bl	8009e08 <HAL_TIM_ConfigClockSource>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bf14      	ite	ne
 80078b6:	2301      	movne	r3, #1
 80078b8:	2300      	moveq	r3, #0
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80078c0:	f000 f9bc 	bl	8007c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80078c4:	481f      	ldr	r0, [pc, #124]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 80078c6:	f002 f9e5 	bl	8009c94 <HAL_TIM_PWM_Init>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf14      	ite	ne
 80078d0:	2301      	movne	r3, #1
 80078d2:	2300      	moveq	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80078da:	f000 f9af 	bl	8007c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078de:	2300      	movs	r3, #0
 80078e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078e6:	f107 0320 	add.w	r3, r7, #32
 80078ea:	4619      	mov	r1, r3
 80078ec:	4815      	ldr	r0, [pc, #84]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 80078ee:	f002 fb83 	bl	8009ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8007902:	f000 f99b 	bl	8007c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007906:	2360      	movs	r3, #96	@ 0x60
 8007908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	2200      	movs	r2, #0
 800791a:	4619      	mov	r1, r3
 800791c:	4809      	ldr	r0, [pc, #36]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 800791e:	f002 fa11 	bl	8009d44 <HAL_TIM_PWM_ConfigChannel>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf14      	ite	ne
 8007928:	2301      	movne	r3, #1
 800792a:	2300      	moveq	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8007932:	f000 f983 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007936:	4803      	ldr	r0, [pc, #12]	@ (8007944 <_ZL12MX_TIM2_Initv+0x118>)
 8007938:	f000 fa90 	bl	8007e5c <HAL_TIM_MspPostInit>

}
 800793c:	bf00      	nop
 800793e:	3738      	adds	r7, #56	@ 0x38
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000300 	.word	0x20000300

08007948 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800794e:	f107 0308 	add.w	r3, r7, #8
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	609a      	str	r2, [r3, #8]
 800795a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800795c:	463b      	mov	r3, r7
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007964:	4b24      	ldr	r3, [pc, #144]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 8007966:	4a25      	ldr	r2, [pc, #148]	@ (80079fc <_ZL12MX_TIM3_Initv+0xb4>)
 8007968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800796a:	4b23      	ldr	r3, [pc, #140]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 800796c:	2200      	movs	r2, #0
 800796e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007970:	4b21      	ldr	r3, [pc, #132]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8007976:	4b20      	ldr	r3, [pc, #128]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 8007978:	2264      	movs	r2, #100	@ 0x64
 800797a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800797c:	4b1e      	ldr	r3, [pc, #120]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 800797e:	2200      	movs	r2, #0
 8007980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007982:	4b1d      	ldr	r3, [pc, #116]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 8007984:	2200      	movs	r2, #0
 8007986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007988:	481b      	ldr	r0, [pc, #108]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 800798a:	f002 f957 	bl	8009c3c <HAL_TIM_Base_Init>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <_ZL12MX_TIM3_Initv+0x5a>
  {
    Error_Handler();
 800799e:	f000 f94d 	bl	8007c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80079a8:	f107 0308 	add.w	r3, r7, #8
 80079ac:	4619      	mov	r1, r3
 80079ae:	4812      	ldr	r0, [pc, #72]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 80079b0:	f002 fa2a 	bl	8009e08 <HAL_TIM_ConfigClockSource>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bf14      	ite	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	2300      	moveq	r3, #0
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <_ZL12MX_TIM3_Initv+0x80>
  {
    Error_Handler();
 80079c4:	f000 f93a 	bl	8007c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079c8:	2300      	movs	r3, #0
 80079ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80079d0:	463b      	mov	r3, r7
 80079d2:	4619      	mov	r1, r3
 80079d4:	4808      	ldr	r0, [pc, #32]	@ (80079f8 <_ZL12MX_TIM3_Initv+0xb0>)
 80079d6:	f002 fb0f 	bl	8009ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf14      	ite	ne
 80079e0:	2301      	movne	r3, #1
 80079e2:	2300      	moveq	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <_ZL12MX_TIM3_Initv+0xa6>
  {
    Error_Handler();
 80079ea:	f000 f927 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80079ee:	bf00      	nop
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000348 	.word	0x20000348
 80079fc:	40000400 	.word	0x40000400

08007a00 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007a04:	4b13      	ldr	r3, [pc, #76]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a06:	4a14      	ldr	r2, [pc, #80]	@ (8007a58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8007a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007a0a:	4b12      	ldr	r3, [pc, #72]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a12:	4b10      	ldr	r3, [pc, #64]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a26:	220c      	movs	r2, #12
 8007a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a30:	4b08      	ldr	r3, [pc, #32]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007a36:	4807      	ldr	r0, [pc, #28]	@ (8007a54 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007a38:	f002 fb48 	bl	800a0cc <HAL_UART_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bf14      	ite	ne
 8007a42:	2301      	movne	r3, #1
 8007a44:	2300      	moveq	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8007a4c:	f000 f8f6 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007a50:	bf00      	nop
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000390 	.word	0x20000390
 8007a58:	40013800 	.word	0x40013800

08007a5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a62:	f107 0310 	add.w	r3, r7, #16
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	605a      	str	r2, [r3, #4]
 8007a6c:	609a      	str	r2, [r3, #8]
 8007a6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a70:	4b6c      	ldr	r3, [pc, #432]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	4a6b      	ldr	r2, [pc, #428]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007a76:	f043 0310 	orr.w	r3, r3, #16
 8007a7a:	6193      	str	r3, [r2, #24]
 8007a7c:	4b69      	ldr	r3, [pc, #420]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a88:	4b66      	ldr	r3, [pc, #408]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	4a65      	ldr	r2, [pc, #404]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007a8e:	f043 0320 	orr.w	r3, r3, #32
 8007a92:	6193      	str	r3, [r2, #24]
 8007a94:	4b63      	ldr	r3, [pc, #396]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f003 0320 	and.w	r3, r3, #32
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aa0:	4b60      	ldr	r3, [pc, #384]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	4a5f      	ldr	r2, [pc, #380]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007aa6:	f043 0304 	orr.w	r3, r3, #4
 8007aaa:	6193      	str	r3, [r2, #24]
 8007aac:	4b5d      	ldr	r3, [pc, #372]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	4a59      	ldr	r2, [pc, #356]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007abe:	f043 0308 	orr.w	r3, r3, #8
 8007ac2:	6193      	str	r3, [r2, #24]
 8007ac4:	4b57      	ldr	r3, [pc, #348]	@ (8007c24 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	603b      	str	r3, [r7, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007ad6:	4854      	ldr	r0, [pc, #336]	@ (8007c28 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007ad8:	f000 fe40 	bl	800875c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8007adc:	2200      	movs	r2, #0
 8007ade:	2106      	movs	r1, #6
 8007ae0:	4852      	ldr	r0, [pc, #328]	@ (8007c2c <_ZL12MX_GPIO_Initv+0x1d0>)
 8007ae2:	f000 fe3b 	bl	800875c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2123      	movs	r1, #35	@ 0x23
 8007aea:	4851      	ldr	r0, [pc, #324]	@ (8007c30 <_ZL12MX_GPIO_Initv+0x1d4>)
 8007aec:	f000 fe36 	bl	800875c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8007af0:	2201      	movs	r2, #1
 8007af2:	2108      	movs	r1, #8
 8007af4:	484e      	ldr	r0, [pc, #312]	@ (8007c30 <_ZL12MX_GPIO_Initv+0x1d4>)
 8007af6:	f000 fe31 	bl	800875c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b00:	2301      	movs	r3, #1
 8007b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b0c:	f107 0310 	add.w	r3, r7, #16
 8007b10:	4619      	mov	r1, r3
 8007b12:	4845      	ldr	r0, [pc, #276]	@ (8007c28 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007b14:	f000 fd44 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8007b18:	f240 1301 	movw	r3, #257	@ 0x101
 8007b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b26:	f107 0310 	add.w	r3, r7, #16
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	483f      	ldr	r0, [pc, #252]	@ (8007c2c <_ZL12MX_GPIO_Initv+0x1d0>)
 8007b2e:	f000 fd37 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8007b32:	2306      	movs	r3, #6
 8007b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b36:	2301      	movs	r3, #1
 8007b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b42:	f107 0310 	add.w	r3, r7, #16
 8007b46:	4619      	mov	r1, r3
 8007b48:	4838      	ldr	r0, [pc, #224]	@ (8007c2c <_ZL12MX_GPIO_Initv+0x1d0>)
 8007b4a:	f000 fd29 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007b4e:	2310      	movs	r3, #16
 8007b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007b52:	4b38      	ldr	r3, [pc, #224]	@ (8007c34 <_ZL12MX_GPIO_Initv+0x1d8>)
 8007b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b5a:	f107 0310 	add.w	r3, r7, #16
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4832      	ldr	r0, [pc, #200]	@ (8007c2c <_ZL12MX_GPIO_Initv+0x1d0>)
 8007b62:	f000 fd1d 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007b66:	2340      	movs	r3, #64	@ 0x40
 8007b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007b6a:	4b33      	ldr	r3, [pc, #204]	@ (8007c38 <_ZL12MX_GPIO_Initv+0x1dc>)
 8007b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b72:	f107 0310 	add.w	r3, r7, #16
 8007b76:	4619      	mov	r1, r3
 8007b78:	482c      	ldr	r0, [pc, #176]	@ (8007c2c <_ZL12MX_GPIO_Initv+0x1d0>)
 8007b7a:	f000 fd11 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5;
 8007b7e:	2323      	movs	r3, #35	@ 0x23
 8007b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b82:	2301      	movs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b86:	2301      	movs	r3, #1
 8007b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b8e:	f107 0310 	add.w	r3, r7, #16
 8007b92:	4619      	mov	r1, r3
 8007b94:	4826      	ldr	r0, [pc, #152]	@ (8007c30 <_ZL12MX_GPIO_Initv+0x1d4>)
 8007b96:	f000 fd03 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_8;
 8007b9a:	f44f 430d 	mov.w	r3, #36096	@ 0x8d00
 8007b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007ba0:	4b25      	ldr	r3, [pc, #148]	@ (8007c38 <_ZL12MX_GPIO_Initv+0x1dc>)
 8007ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ba8:	f107 0310 	add.w	r3, r7, #16
 8007bac:	4619      	mov	r1, r3
 8007bae:	4820      	ldr	r0, [pc, #128]	@ (8007c30 <_ZL12MX_GPIO_Initv+0x1d4>)
 8007bb0:	f000 fcf6 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bc2:	f107 0310 	add.w	r3, r7, #16
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4819      	ldr	r0, [pc, #100]	@ (8007c30 <_ZL12MX_GPIO_Initv+0x1d4>)
 8007bca:	f000 fce9 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007bce:	2308      	movs	r3, #8
 8007bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bde:	f107 0310 	add.w	r3, r7, #16
 8007be2:	4619      	mov	r1, r3
 8007be4:	4812      	ldr	r0, [pc, #72]	@ (8007c30 <_ZL12MX_GPIO_Initv+0x1d4>)
 8007be6:	f000 fcdb 	bl	80085a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	200a      	movs	r0, #10
 8007bf0:	f000 fc84 	bl	80084fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007bf4:	200a      	movs	r0, #10
 8007bf6:	f000 fcb1 	bl	800855c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	2017      	movs	r0, #23
 8007c00:	f000 fc7c 	bl	80084fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007c04:	2017      	movs	r0, #23
 8007c06:	f000 fca9 	bl	800855c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	2028      	movs	r0, #40	@ 0x28
 8007c10:	f000 fc74 	bl	80084fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007c14:	2028      	movs	r0, #40	@ 0x28
 8007c16:	f000 fca1 	bl	800855c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007c1a:	bf00      	nop
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40021000 	.word	0x40021000
 8007c28:	40011000 	.word	0x40011000
 8007c2c:	40010800 	.word	0x40010800
 8007c30:	40010c00 	.word	0x40010c00
 8007c34:	10110000 	.word	0x10110000
 8007c38:	10310000 	.word	0x10310000

08007c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007c40:	b672      	cpsid	i
}
 8007c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <Error_Handler+0x8>

08007c48 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 8007c48:	b508      	push	{r3, lr}
	Hspi.Instance = SPI1;
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8007c4a:	f44f 7382 	mov.w	r3, #260	@ 0x104
	Hspi.Instance = SPI1;
 8007c4e:	480d      	ldr	r0, [pc, #52]	@ (8007c84 <SPI1_Init+0x3c>)
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8007c50:	4a0d      	ldr	r2, [pc, #52]	@ (8007c88 <SPI1_Init+0x40>)
 8007c52:	e9c0 2300 	strd	r2, r3, [r0]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8007c56:	2300      	movs	r3, #0
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
	Hspi.Init.NSS = SPI_NSS_SOFT;
 8007c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c60:	e9c0 3304 	strd	r3, r3, [r0, #16]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c64:	e9c0 2306 	strd	r2, r3, [r0, #24]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c68:	e9c0 3308 	strd	r3, r3, [r0, #32]
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c6c:	6283      	str	r3, [r0, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 8007c6e:	2307      	movs	r3, #7
 8007c70:	62c3      	str	r3, [r0, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 8007c72:	f001 fd59 	bl	8009728 <HAL_SPI_Init>
 8007c76:	b118      	cbz	r0, 8007c80 <SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8007c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007c7c:	f7ff bfde 	b.w	8007c3c <Error_Handler>
}
 8007c80:	bd08      	pop	{r3, pc}
 8007c82:	bf00      	nop
 8007c84:	200003d8 	.word	0x200003d8
 8007c88:	40013000 	.word	0x40013000

08007c8c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc8 <HAL_MspInit+0x3c>)
{
 8007c8e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	619a      	str	r2, [r3, #24]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	f002 0201 	and.w	r2, r2, #1
 8007c9e:	9200      	str	r2, [sp, #0]
 8007ca0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007ca8:	61da      	str	r2, [r3, #28]
 8007caa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007cac:	4a07      	ldr	r2, [pc, #28]	@ (8007ccc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007cb6:	6853      	ldr	r3, [r2, #4]
 8007cb8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007cc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cc2:	b002      	add	sp, #8
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	40010000 	.word	0x40010000

08007cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	2100      	movs	r1, #0
 8007cda:	a802      	add	r0, sp, #8
 8007cdc:	f003 f889 	bl	800adf2 <memset>
  if(hadc->Instance==ADC1)
 8007ce0:	6822      	ldr	r2, [r4, #0]
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <HAL_ADC_MspInit+0x54>)
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d11b      	bne.n	8007d20 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007ce8:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8007cec:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cee:	480e      	ldr	r0, [pc, #56]	@ (8007d28 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cf4:	619a      	str	r2, [r3, #24]
 8007cf6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cf8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007cfa:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	f042 0204 	orr.w	r2, r2, #4
 8007d08:	619a      	str	r2, [r3, #24]
 8007d0a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d0c:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d1c:	f000 fc40 	bl	80085a0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007d20:	b006      	add	sp, #24
 8007d22:	bd10      	pop	{r4, pc}
 8007d24:	40012400 	.word	0x40012400
 8007d28:	40010800 	.word	0x40010800

08007d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	4604      	mov	r4, r0
 8007d30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d32:	2210      	movs	r2, #16
 8007d34:	2100      	movs	r1, #0
 8007d36:	a802      	add	r0, sp, #8
 8007d38:	f003 f85b 	bl	800adf2 <memset>
  if(hi2c->Instance==I2C1)
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	4b11      	ldr	r3, [pc, #68]	@ (8007d84 <HAL_I2C_MspInit+0x58>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d11c      	bne.n	8007d7e <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d44:	4c10      	ldr	r4, [pc, #64]	@ (8007d88 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d46:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d48:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d4a:	4810      	ldr	r0, [pc, #64]	@ (8007d8c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
 8007d50:	61a3      	str	r3, [r4, #24]
 8007d52:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d54:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d5e:	2312      	movs	r3, #18
 8007d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d64:	2303      	movs	r3, #3
 8007d66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d68:	f000 fc1a 	bl	80085a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d6c:	69e3      	ldr	r3, [r4, #28]
 8007d6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d72:	61e3      	str	r3, [r4, #28]
 8007d74:	69e3      	ldr	r3, [r4, #28]
 8007d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007d7e:	b006      	add	sp, #24
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	bf00      	nop
 8007d84:	40005400 	.word	0x40005400
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	40010c00 	.word	0x40010c00

08007d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d96:	2210      	movs	r2, #16
 8007d98:	2100      	movs	r1, #0
 8007d9a:	a802      	add	r0, sp, #8
 8007d9c:	f003 f829 	bl	800adf2 <memset>
  if(hspi->Instance==SPI1)
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	4b11      	ldr	r3, [pc, #68]	@ (8007de8 <HAL_SPI_MspInit+0x58>)
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d11d      	bne.n	8007de4 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007da8:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8007dac:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dae:	480f      	ldr	r0, [pc, #60]	@ (8007dec <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007db0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007db4:	619a      	str	r2, [r3, #24]
 8007db6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007dba:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007dbe:	9200      	str	r2, [sp, #0]
 8007dc0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	f042 0204 	orr.w	r2, r2, #4
 8007dc8:	619a      	str	r2, [r3, #24]
 8007dca:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dcc:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de0:	f000 fbde 	bl	80085a0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007de4:	b006      	add	sp, #24
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	40013000 	.word	0x40013000
 8007dec:	40010800 	.word	0x40010800

08007df0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8007df0:	6803      	ldr	r3, [r0, #0]
{
 8007df2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df8:	d115      	bne.n	8007e26 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007dfa:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8007dfe:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e00:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e08:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e0a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e0c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e16:	f000 fb71 	bl	80084fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007e1a:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007e1c:	b003      	add	sp, #12
 8007e1e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007e22:	f000 bb9b 	b.w	800855c <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 8007e26:	4a0b      	ldr	r2, [pc, #44]	@ (8007e54 <HAL_TIM_Base_MspInit+0x64>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d110      	bne.n	8007e4e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007e2e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e30:	69da      	ldr	r2, [r3, #28]
 8007e32:	f042 0202 	orr.w	r2, r2, #2
 8007e36:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007e38:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e3a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007e3c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007e46:	f000 fb59 	bl	80084fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007e4a:	201d      	movs	r0, #29
 8007e4c:	e7e6      	b.n	8007e1c <HAL_TIM_Base_MspInit+0x2c>
}
 8007e4e:	b003      	add	sp, #12
 8007e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40021000 	.word	0x40021000

08007e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	4604      	mov	r4, r0
 8007e60:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e62:	2210      	movs	r2, #16
 8007e64:	2100      	movs	r1, #0
 8007e66:	a802      	add	r0, sp, #8
 8007e68:	f002 ffc3 	bl	800adf2 <memset>
  if(htim->Instance==TIM2)
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e72:	d11d      	bne.n	8007eb0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e74:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8007e78:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e7a:	480e      	ldr	r0, [pc, #56]	@ (8007eb4 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e7c:	f042 0204 	orr.w	r2, r2, #4
 8007e80:	619a      	str	r2, [r3, #24]
 8007e82:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e90:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e92:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e98:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e9a:	f000 fb81 	bl	80085a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8007e9e:	4a06      	ldr	r2, [pc, #24]	@ (8007eb8 <HAL_TIM_MspPostInit+0x5c>)
 8007ea0:	6853      	ldr	r3, [r2, #4]
 8007ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8007eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007eb0:	b006      	add	sp, #24
 8007eb2:	bd10      	pop	{r4, pc}
 8007eb4:	40010800 	.word	0x40010800
 8007eb8:	40010000 	.word	0x40010000

08007ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec2:	2210      	movs	r2, #16
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	a802      	add	r0, sp, #8
 8007ec8:	f002 ff93 	bl	800adf2 <memset>
  if(huart->Instance==USART1)
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	4b17      	ldr	r3, [pc, #92]	@ (8007f2c <HAL_UART_MspInit+0x70>)
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d128      	bne.n	8007f26 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ed4:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8007ed8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eda:	4815      	ldr	r0, [pc, #84]	@ (8007f30 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8007edc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ee0:	619a      	str	r2, [r3, #24]
 8007ee2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ee6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007eea:	9200      	str	r2, [sp, #0]
 8007eec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	f042 0204 	orr.w	r2, r2, #4
 8007ef4:	619a      	str	r2, [r3, #24]
 8007ef6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f04:	2302      	movs	r3, #2
 8007f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0e:	f000 fb47 	bl	80085a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f16:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f18:	4805      	ldr	r0, [pc, #20]	@ (8007f30 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f1a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f1e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f20:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f22:	f000 fb3d 	bl	80085a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007f26:	b006      	add	sp, #24
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40013800 	.word	0x40013800
 8007f30:	40010800 	.word	0x40010800

08007f34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007f34:	e7fe      	b.n	8007f34 <NMI_Handler>

08007f36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f36:	e7fe      	b.n	8007f36 <HardFault_Handler>

08007f38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f38:	e7fe      	b.n	8007f38 <MemManage_Handler>

08007f3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f3a:	e7fe      	b.n	8007f3a <BusFault_Handler>

08007f3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f3c:	e7fe      	b.n	8007f3c <UsageFault_Handler>

08007f3e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f3e:	4770      	bx	lr

08007f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8007f40:	4770      	bx	lr

08007f42 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8007f42:	4770      	bx	lr

08007f44 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f44:	f000 b8e0 	b.w	8008108 <HAL_IncTick>

08007f48 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007f48:	2010      	movs	r0, #16
 8007f4a:	f000 bc0d 	b.w	8008768 <HAL_GPIO_EXTI_IRQHandler>

08007f4e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007f4e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007f50:	2040      	movs	r0, #64	@ 0x40
 8007f52:	f000 fc09 	bl	8008768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007f5a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007f5e:	f000 bc03 	b.w	8008768 <HAL_GPIO_EXTI_IRQHandler>
	...

08007f64 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007f64:	4801      	ldr	r0, [pc, #4]	@ (8007f6c <TIM2_IRQHandler+0x8>)
 8007f66:	f001 bd8e 	b.w	8009a86 <HAL_TIM_IRQHandler>
 8007f6a:	bf00      	nop
 8007f6c:	20000300 	.word	0x20000300

08007f70 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007f70:	4801      	ldr	r0, [pc, #4]	@ (8007f78 <TIM3_IRQHandler+0x8>)
 8007f72:	f001 bd88 	b.w	8009a86 <HAL_TIM_IRQHandler>
 8007f76:	bf00      	nop
 8007f78:	20000348 	.word	0x20000348

08007f7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007f7e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007f82:	f000 fbf1 	bl	8008768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007f86:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007f8a:	f000 fbed 	bl	8008768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007f92:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007f96:	f000 bbe7 	b.w	8008768 <HAL_GPIO_EXTI_IRQHandler>

08007f9a <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	4770      	bx	lr

08007f9e <_kill>:

int _kill(int pid, int sig)
{
 8007f9e:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007fa0:	f002 ffce 	bl	800af40 <__errno>
 8007fa4:	2316      	movs	r3, #22
 8007fa6:	6003      	str	r3, [r0, #0]
  return -1;
}
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	bd08      	pop	{r3, pc}

08007fae <_exit>:

void _exit (int status)
{
 8007fae:	b508      	push	{r3, lr}
  errno = EINVAL;
 8007fb0:	f002 ffc6 	bl	800af40 <__errno>
 8007fb4:	2316      	movs	r3, #22
 8007fb6:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8007fb8:	e7fe      	b.n	8007fb8 <_exit+0xa>

08007fba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007fba:	b570      	push	{r4, r5, r6, lr}
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	1b73      	subs	r3, r6, r5
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	dc01      	bgt.n	8007fcc <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8007fc8:	4620      	mov	r0, r4
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8007fcc:	f3af 8000 	nop.w
 8007fd0:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fd4:	e7f5      	b.n	8007fc2 <_read+0x8>

08007fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007fd6:	b570      	push	{r4, r5, r6, lr}
 8007fd8:	460d      	mov	r5, r1
 8007fda:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fdc:	460e      	mov	r6, r1
 8007fde:	1b73      	subs	r3, r6, r5
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	dc01      	bgt.n	8007fe8 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8007fe8:	f816 0b01 	ldrb.w	r0, [r6], #1
 8007fec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ff0:	e7f5      	b.n	8007fde <_write+0x8>

08007ff2 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8007ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff6:	4770      	bx	lr

08007ff8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8007ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8007ffc:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8007ffe:	604b      	str	r3, [r1, #4]
}
 8008000:	4770      	bx	lr

08008002 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8008002:	2001      	movs	r0, #1
 8008004:	4770      	bx	lr

08008006 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8008006:	2000      	movs	r0, #0
 8008008:	4770      	bx	lr
	...

0800800c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800800c:	4a0b      	ldr	r2, [pc, #44]	@ (800803c <_sbrk+0x30>)
{
 800800e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8008010:	6811      	ldr	r1, [r2, #0]
{
 8008012:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8008014:	b909      	cbnz	r1, 800801a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8008016:	490a      	ldr	r1, [pc, #40]	@ (8008040 <_sbrk+0x34>)
 8008018:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800801a:	6810      	ldr	r0, [r2, #0]
 800801c:	4909      	ldr	r1, [pc, #36]	@ (8008044 <_sbrk+0x38>)
 800801e:	4c0a      	ldr	r4, [pc, #40]	@ (8008048 <_sbrk+0x3c>)
 8008020:	4403      	add	r3, r0
 8008022:	1b09      	subs	r1, r1, r4
 8008024:	428b      	cmp	r3, r1
 8008026:	d906      	bls.n	8008036 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8008028:	f002 ff8a 	bl	800af40 <__errno>
 800802c:	230c      	movs	r3, #12
 800802e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008030:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8008034:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8008036:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8008038:	e7fc      	b.n	8008034 <_sbrk+0x28>
 800803a:	bf00      	nop
 800803c:	20000430 	.word	0x20000430
 8008040:	20000588 	.word	0x20000588
 8008044:	20005000 	.word	0x20005000
 8008048:	00000400 	.word	0x00000400

0800804c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800804c:	4770      	bx	lr
	...

08008050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008050:	f7ff fffc 	bl	800804c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008054:	480b      	ldr	r0, [pc, #44]	@ (8008084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008056:	490c      	ldr	r1, [pc, #48]	@ (8008088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008058:	4a0c      	ldr	r2, [pc, #48]	@ (800808c <LoopFillZerobss+0x16>)
  movs r3, #0
 800805a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800805c:	e002      	b.n	8008064 <LoopCopyDataInit>

0800805e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800805e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008062:	3304      	adds	r3, #4

08008064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008068:	d3f9      	bcc.n	800805e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800806a:	4a09      	ldr	r2, [pc, #36]	@ (8008090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800806c:	4c09      	ldr	r4, [pc, #36]	@ (8008094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800806e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008070:	e001      	b.n	8008076 <LoopFillZerobss>

08008072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008074:	3204      	adds	r2, #4

08008076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008078:	d3fb      	bcc.n	8008072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800807a:	f002 ff67 	bl	800af4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800807e:	f7ff fa9d 	bl	80075bc <main>
  bx lr
 8008082:	4770      	bx	lr
  ldr r0, =_sdata
 8008084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008088:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800808c:	0800df60 	.word	0x0800df60
  ldr r2, =_sbss
 8008090:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8008094:	20000588 	.word	0x20000588

08008098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008098:	e7fe      	b.n	8008098 <ADC1_2_IRQHandler>
	...

0800809c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800809c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800809e:	4b0e      	ldr	r3, [pc, #56]	@ (80080d8 <HAL_InitTick+0x3c>)
{
 80080a0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80080a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ac:	4a0b      	ldr	r2, [pc, #44]	@ (80080dc <HAL_InitTick+0x40>)
 80080ae:	6810      	ldr	r0, [r2, #0]
 80080b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80080b4:	f000 fa60 	bl	8008578 <HAL_SYSTICK_Config>
 80080b8:	4604      	mov	r4, r0
 80080ba:	b958      	cbnz	r0, 80080d4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080bc:	2d0f      	cmp	r5, #15
 80080be:	d809      	bhi.n	80080d4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080c0:	4602      	mov	r2, r0
 80080c2:	4629      	mov	r1, r5
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	f000 fa18 	bl	80084fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80080cc:	4620      	mov	r0, r4
 80080ce:	4b04      	ldr	r3, [pc, #16]	@ (80080e0 <HAL_InitTick+0x44>)
 80080d0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80080d4:	2001      	movs	r0, #1
 80080d6:	e7fc      	b.n	80080d2 <HAL_InitTick+0x36>
 80080d8:	20000008 	.word	0x20000008
 80080dc:	20000004 	.word	0x20000004
 80080e0:	2000000c 	.word	0x2000000c

080080e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080e4:	4a07      	ldr	r2, [pc, #28]	@ (8008104 <HAL_Init+0x20>)
{
 80080e6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080e8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080ec:	f043 0310 	orr.w	r3, r3, #16
 80080f0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080f2:	f000 f9f1 	bl	80084d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80080f6:	200f      	movs	r0, #15
 80080f8:	f7ff ffd0 	bl	800809c <HAL_InitTick>
  HAL_MspInit();
 80080fc:	f7ff fdc6 	bl	8007c8c <HAL_MspInit>
}
 8008100:	2000      	movs	r0, #0
 8008102:	bd08      	pop	{r3, pc}
 8008104:	40022000 	.word	0x40022000

08008108 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008108:	4a03      	ldr	r2, [pc, #12]	@ (8008118 <HAL_IncTick+0x10>)
 800810a:	4b04      	ldr	r3, [pc, #16]	@ (800811c <HAL_IncTick+0x14>)
 800810c:	6811      	ldr	r1, [r2, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	440b      	add	r3, r1
 8008112:	6013      	str	r3, [r2, #0]
}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20000434 	.word	0x20000434
 800811c:	20000008 	.word	0x20000008

08008120 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008120:	4b01      	ldr	r3, [pc, #4]	@ (8008128 <HAL_GetTick+0x8>)
 8008122:	6818      	ldr	r0, [r3, #0]
}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000434 	.word	0x20000434

0800812c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008130:	f7ff fff6 	bl	8008120 <HAL_GetTick>
 8008134:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008136:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008138:	bf1e      	ittt	ne
 800813a:	4b04      	ldrne	r3, [pc, #16]	@ (800814c <HAL_Delay+0x20>)
 800813c:	781b      	ldrbne	r3, [r3, #0]
 800813e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008140:	f7ff ffee 	bl	8008120 <HAL_GetTick>
 8008144:	1b43      	subs	r3, r0, r5
 8008146:	42a3      	cmp	r3, r4
 8008148:	d3fa      	bcc.n	8008140 <HAL_Delay+0x14>
  {
  }
}
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20000008 	.word	0x20000008

08008150 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008150:	6803      	ldr	r3, [r0, #0]
 8008152:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8008154:	4770      	bx	lr
	...

08008158 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8008158:	2300      	movs	r3, #0
{ 
 800815a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800815c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800815e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8008162:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008164:	2b01      	cmp	r3, #1
 8008166:	d06c      	beq.n	8008242 <HAL_ADC_ConfigChannel+0xea>
 8008168:	2301      	movs	r3, #1
 800816a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800816e:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008170:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8008172:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008174:	6808      	ldr	r0, [r1, #0]
 8008176:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800817a:	d822      	bhi.n	80081c2 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800817c:	261f      	movs	r6, #31
 800817e:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8008180:	3b05      	subs	r3, #5
 8008182:	409e      	lsls	r6, r3
 8008184:	ea25 0506 	bic.w	r5, r5, r6
 8008188:	fa00 f303 	lsl.w	r3, r0, r3
 800818c:	432b      	orrs	r3, r5
 800818e:	6353      	str	r3, [r2, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008190:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008192:	688b      	ldr	r3, [r1, #8]
 8008194:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8008198:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800819c:	d929      	bls.n	80081f2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800819e:	68d6      	ldr	r6, [r2, #12]
 80081a0:	3d1e      	subs	r5, #30
 80081a2:	40a9      	lsls	r1, r5
 80081a4:	ea26 0101 	bic.w	r1, r6, r1
 80081a8:	40ab      	lsls	r3, r5
 80081aa:	430b      	orrs	r3, r1
 80081ac:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80081ae:	f1a0 0310 	sub.w	r3, r0, #16
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d925      	bls.n	8008202 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081b6:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081b8:	2300      	movs	r3, #0
 80081ba:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80081be:	b002      	add	sp, #8
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80081c2:	2d0c      	cmp	r5, #12
 80081c4:	f04f 051f 	mov.w	r5, #31
 80081c8:	d809      	bhi.n	80081de <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80081ca:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80081cc:	3b23      	subs	r3, #35	@ 0x23
 80081ce:	409d      	lsls	r5, r3
 80081d0:	ea26 0505 	bic.w	r5, r6, r5
 80081d4:	fa00 f303 	lsl.w	r3, r0, r3
 80081d8:	432b      	orrs	r3, r5
 80081da:	6313      	str	r3, [r2, #48]	@ 0x30
 80081dc:	e7d8      	b.n	8008190 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80081de:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 80081e0:	3b41      	subs	r3, #65	@ 0x41
 80081e2:	409d      	lsls	r5, r3
 80081e4:	ea26 0505 	bic.w	r5, r6, r5
 80081e8:	fa00 f303 	lsl.w	r3, r0, r3
 80081ec:	432b      	orrs	r3, r5
 80081ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081f0:	e7ce      	b.n	8008190 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80081f2:	6910      	ldr	r0, [r2, #16]
 80081f4:	40a9      	lsls	r1, r5
 80081f6:	ea20 0101 	bic.w	r1, r0, r1
 80081fa:	40ab      	lsls	r3, r5
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008200:	e7d9      	b.n	80081b6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8008202:	4b11      	ldr	r3, [pc, #68]	@ (8008248 <HAL_ADC_ConfigChannel+0xf0>)
 8008204:	429a      	cmp	r2, r3
 8008206:	d116      	bne.n	8008236 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008208:	6893      	ldr	r3, [r2, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	d4d3      	bmi.n	80081b6 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800820e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008210:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008212:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008216:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008218:	d1cd      	bne.n	80081b6 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800821a:	4b0c      	ldr	r3, [pc, #48]	@ (800824c <HAL_ADC_ConfigChannel+0xf4>)
 800821c:	4a0c      	ldr	r2, [pc, #48]	@ (8008250 <HAL_ADC_ConfigChannel+0xf8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	fbb3 f3f2 	udiv	r3, r3, r2
 8008224:	220a      	movs	r2, #10
 8008226:	4353      	muls	r3, r2
            wait_loop_index--;
 8008228:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0c2      	beq.n	80081b6 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	3b01      	subs	r3, #1
 8008234:	e7f8      	b.n	8008228 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008236:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8008238:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800823a:	f043 0320 	orr.w	r3, r3, #32
 800823e:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8008240:	e7ba      	b.n	80081b8 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8008242:	2002      	movs	r0, #2
 8008244:	e7bb      	b.n	80081be <HAL_ADC_ConfigChannel+0x66>
 8008246:	bf00      	nop
 8008248:	40012400 	.word	0x40012400
 800824c:	20000004 	.word	0x20000004
 8008250:	000f4240 	.word	0x000f4240

08008254 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8008254:	2300      	movs	r3, #0
{
 8008256:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8008258:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800825a:	6803      	ldr	r3, [r0, #0]
{
 800825c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	07d2      	lsls	r2, r2, #31
 8008262:	d502      	bpl.n	800826a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008264:	2000      	movs	r0, #0
}
 8008266:	b003      	add	sp, #12
 8008268:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008272:	4b14      	ldr	r3, [pc, #80]	@ (80082c4 <ADC_Enable+0x70>)
 8008274:	4a14      	ldr	r2, [pc, #80]	@ (80082c8 <ADC_Enable+0x74>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800827c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	b9e3      	cbnz	r3, 80082bc <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8008282:	f7ff ff4d 	bl	8008120 <HAL_GetTick>
 8008286:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	07db      	lsls	r3, r3, #31
 800828e:	d4e9      	bmi.n	8008264 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008290:	f7ff ff46 	bl	8008120 <HAL_GetTick>
 8008294:	1b40      	subs	r0, r0, r5
 8008296:	2802      	cmp	r0, #2
 8008298:	d9f6      	bls.n	8008288 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f013 0301 	ands.w	r3, r3, #1
 80082a2:	d1f1      	bne.n	8008288 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80082a6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082a8:	f042 0210 	orr.w	r2, r2, #16
 80082ac:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 80082b0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082b4:	f042 0201 	orr.w	r2, r2, #1
 80082b8:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80082ba:	e7d4      	b.n	8008266 <ADC_Enable+0x12>
      wait_loop_index--;
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	3b01      	subs	r3, #1
 80082c0:	e7dc      	b.n	800827c <ADC_Enable+0x28>
 80082c2:	bf00      	nop
 80082c4:	20000004 	.word	0x20000004
 80082c8:	000f4240 	.word	0x000f4240

080082cc <HAL_ADC_Start>:
{
 80082cc:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80082ce:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80082d2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d054      	beq.n	8008382 <HAL_ADC_Start+0xb6>
 80082d8:	2301      	movs	r3, #1
 80082da:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80082de:	f7ff ffb9 	bl	8008254 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d149      	bne.n	800837a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80082e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80082e8:	4a27      	ldr	r2, [pc, #156]	@ (8008388 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80082ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ee:	f023 0301 	bic.w	r3, r3, #1
 80082f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082f6:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d104      	bne.n	8008308 <HAL_ADC_Start+0x3c>
 80082fe:	4923      	ldr	r1, [pc, #140]	@ (800838c <HAL_ADC_Start+0xc0>)
 8008300:	684a      	ldr	r2, [r1, #4]
 8008302:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8008306:	d12e      	bne.n	8008366 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008308:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800830a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800830e:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008310:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008312:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008314:	bf41      	itttt	mi
 8008316:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 8008318:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 800831c:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 8008320:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008322:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008328:	bf1c      	itt	ne
 800832a:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 800832c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8008330:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8008332:	2200      	movs	r2, #0
 8008334:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008338:	f06f 0202 	mvn.w	r2, #2
 800833c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8008344:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8008348:	d113      	bne.n	8008372 <HAL_ADC_Start+0xa6>
 800834a:	4a0f      	ldr	r2, [pc, #60]	@ (8008388 <HAL_ADC_Start+0xbc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d105      	bne.n	800835c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008350:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008354:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008356:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800835a:	d10a      	bne.n	8008372 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008362:	609a      	str	r2, [r3, #8]
}
 8008364:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008366:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008368:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800836c:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800836e:	684a      	ldr	r2, [r1, #4]
 8008370:	e7cf      	b.n	8008312 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008378:	e7f3      	b.n	8008362 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800837a:	2300      	movs	r3, #0
 800837c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8008380:	e7f0      	b.n	8008364 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8008382:	2002      	movs	r0, #2
 8008384:	e7ee      	b.n	8008364 <HAL_ADC_Start+0x98>
 8008386:	bf00      	nop
 8008388:	40012800 	.word	0x40012800
 800838c:	40012400 	.word	0x40012400

08008390 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008390:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008392:	6803      	ldr	r3, [r0, #0]
{
 8008394:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	07d1      	lsls	r1, r2, #31
 800839a:	d401      	bmi.n	80083a0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800839c:	2000      	movs	r0, #0
}
 800839e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	f022 0201 	bic.w	r2, r2, #1
 80083a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80083a8:	f7ff feba 	bl	8008120 <HAL_GetTick>
 80083ac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	07db      	lsls	r3, r3, #31
 80083b4:	d5f2      	bpl.n	800839c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80083b6:	f7ff feb3 	bl	8008120 <HAL_GetTick>
 80083ba:	1b40      	subs	r0, r0, r5
 80083bc:	2802      	cmp	r0, #2
 80083be:	d9f6      	bls.n	80083ae <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	07da      	lsls	r2, r3, #31
 80083c6:	d5f2      	bpl.n	80083ae <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80083ca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083cc:	f043 0310 	orr.w	r3, r3, #16
 80083d0:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80083da:	e7e0      	b.n	800839e <ADC_ConversionStop_Disable+0xe>

080083dc <HAL_ADC_Init>:
{
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80083de:	4604      	mov	r4, r0
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d06d      	beq.n	80084c0 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80083e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80083e6:	b923      	cbnz	r3, 80083f2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80083e8:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80083ea:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80083ee:	f7ff fc6f 	bl	8007cd0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff ffcc 	bl	8008390 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80083f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80083fa:	f013 0310 	ands.w	r3, r3, #16
 80083fe:	d161      	bne.n	80084c4 <HAL_ADC_Init+0xe8>
 8008400:	2800      	cmp	r0, #0
 8008402:	d15f      	bne.n	80084c4 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8008404:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008406:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8008408:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800840c:	f022 0202 	bic.w	r2, r2, #2
 8008410:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008414:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008416:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8008418:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800841a:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800841c:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800841e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008422:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008426:	d036      	beq.n	8008496 <HAL_ADC_Init+0xba>
 8008428:	1e77      	subs	r7, r6, #1
 800842a:	427d      	negs	r5, r7
 800842c:	417d      	adcs	r5, r7
 800842e:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008430:	7d27      	ldrb	r7, [r4, #20]
 8008432:	2f01      	cmp	r7, #1
 8008434:	d106      	bne.n	8008444 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008436:	bb82      	cbnz	r2, 800849a <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008438:	69a2      	ldr	r2, [r4, #24]
 800843a:	3a01      	subs	r2, #1
 800843c:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8008440:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8008444:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008446:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800844a:	6857      	ldr	r7, [r2, #4]
 800844c:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 8008450:	ea45 0507 	orr.w	r5, r5, r7
 8008454:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8008456:	6897      	ldr	r7, [r2, #8]
 8008458:	4d1d      	ldr	r5, [pc, #116]	@ (80084d0 <HAL_ADC_Init+0xf4>)
 800845a:	ea05 0507 	and.w	r5, r5, r7
 800845e:	ea45 0501 	orr.w	r5, r5, r1
 8008462:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008464:	d001      	beq.n	800846a <HAL_ADC_Init+0x8e>
 8008466:	2e01      	cmp	r6, #1
 8008468:	d102      	bne.n	8008470 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	3b01      	subs	r3, #1
 800846e:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8008470:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008472:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8008476:	432b      	orrs	r3, r5
 8008478:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800847a:	6892      	ldr	r2, [r2, #8]
 800847c:	4b15      	ldr	r3, [pc, #84]	@ (80084d4 <HAL_ADC_Init+0xf8>)
 800847e:	4013      	ands	r3, r2
 8008480:	4299      	cmp	r1, r3
 8008482:	d113      	bne.n	80084ac <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8008484:	2300      	movs	r3, #0
 8008486:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8008488:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800848a:	f023 0303 	bic.w	r3, r3, #3
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8008494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008496:	4635      	mov	r5, r6
 8008498:	e7ca      	b.n	8008430 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800849a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800849c:	f042 0220 	orr.w	r2, r2, #32
 80084a0:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80084a4:	f042 0201 	orr.w	r2, r2, #1
 80084a8:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80084aa:	e7cb      	b.n	8008444 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80084ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80084ae:	f023 0312 	bic.w	r3, r3, #18
 80084b2:	f043 0310 	orr.w	r3, r3, #16
 80084b6:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 80084c0:	2001      	movs	r0, #1
 80084c2:	e7e7      	b.n	8008494 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80084c6:	f043 0310 	orr.w	r3, r3, #16
 80084ca:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80084cc:	e7f8      	b.n	80084c0 <HAL_ADC_Init+0xe4>
 80084ce:	bf00      	nop
 80084d0:	ffe1f7fd 	.word	0xffe1f7fd
 80084d4:	ff1f0efe 	.word	0xff1f0efe

080084d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084d8:	4907      	ldr	r1, [pc, #28]	@ (80084f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80084da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80084de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80084e6:	0412      	lsls	r2, r2, #16
 80084e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80084ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80084f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80084f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80084f6:	4770      	bx	lr
 80084f8:	e000ed00 	.word	0xe000ed00

080084fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084fc:	4b15      	ldr	r3, [pc, #84]	@ (8008554 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084fe:	b530      	push	{r4, r5, lr}
 8008500:	68dc      	ldr	r4, [r3, #12]
 8008502:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008506:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800850a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800850c:	2b04      	cmp	r3, #4
 800850e:	bf28      	it	cs
 8008510:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008512:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008514:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008518:	bf94      	ite	ls
 800851a:	2400      	movls	r4, #0
 800851c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800851e:	fa05 f303 	lsl.w	r3, r5, r3
 8008522:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008526:	40a5      	lsls	r5, r4
 8008528:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800852c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800852e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008530:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008534:	bfac      	ite	ge
 8008536:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800853a:	4a07      	ldrlt	r2, [pc, #28]	@ (8008558 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800853c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008540:	b2db      	uxtb	r3, r3
 8008542:	bfab      	itete	ge
 8008544:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008548:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800854c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008550:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008552:	bd30      	pop	{r4, r5, pc}
 8008554:	e000ed00 	.word	0xe000ed00
 8008558:	e000ed14 	.word	0xe000ed14

0800855c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800855c:	2800      	cmp	r0, #0
 800855e:	db07      	blt.n	8008570 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008560:	2301      	movs	r3, #1
 8008562:	0941      	lsrs	r1, r0, #5
 8008564:	4a03      	ldr	r2, [pc, #12]	@ (8008574 <HAL_NVIC_EnableIRQ+0x18>)
 8008566:	f000 001f 	and.w	r0, r0, #31
 800856a:	4083      	lsls	r3, r0
 800856c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	e000e100 	.word	0xe000e100

08008578 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008578:	3801      	subs	r0, #1
 800857a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800857e:	d20b      	bcs.n	8008598 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008580:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008584:	21f0      	movs	r1, #240	@ 0xf0
 8008586:	4a05      	ldr	r2, [pc, #20]	@ (800859c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008588:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800858a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800858e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008590:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008592:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008594:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008596:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008598:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800859a:	4770      	bx	lr
 800859c:	e000ed00 	.word	0xe000ed00

080085a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80085a4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80085a6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80085a8:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8008734 <HAL_GPIO_Init+0x194>
 80085ac:	4b62      	ldr	r3, [pc, #392]	@ (8008738 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80085ae:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 800873c <HAL_GPIO_Init+0x19c>
 80085b2:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8008740 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085b6:	680a      	ldr	r2, [r1, #0]
 80085b8:	fa32 f506 	lsrs.w	r5, r2, r6
 80085bc:	d102      	bne.n	80085c4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80085be:	b003      	add	sp, #12
 80085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80085c4:	2701      	movs	r7, #1
 80085c6:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085c8:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80085cc:	ea37 0202 	bics.w	r2, r7, r2
 80085d0:	d17a      	bne.n	80086c8 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 80085d2:	684a      	ldr	r2, [r1, #4]
 80085d4:	2a03      	cmp	r2, #3
 80085d6:	d807      	bhi.n	80085e8 <HAL_GPIO_Init+0x48>
 80085d8:	3a01      	subs	r2, #1
 80085da:	2a02      	cmp	r2, #2
 80085dc:	f200 8083 	bhi.w	80086e6 <HAL_GPIO_Init+0x146>
 80085e0:	e8df f002 	tbb	[pc, r2]
 80085e4:	9792      	.short	0x9792
 80085e6:	9d          	.byte	0x9d
 80085e7:	00          	.byte	0x00
 80085e8:	2a12      	cmp	r2, #18
 80085ea:	f000 8095 	beq.w	8008718 <HAL_GPIO_Init+0x178>
 80085ee:	d86d      	bhi.n	80086cc <HAL_GPIO_Init+0x12c>
 80085f0:	2a11      	cmp	r2, #17
 80085f2:	f000 808b 	beq.w	800870c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80085f6:	2dff      	cmp	r5, #255	@ 0xff
 80085f8:	bf98      	it	ls
 80085fa:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80085fc:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008600:	bf88      	it	hi
 8008602:	f100 0904 	addhi.w	r9, r0, #4
 8008606:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800860a:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800860e:	bf88      	it	hi
 8008610:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008612:	fa0b fa02 	lsl.w	sl, fp, r2
 8008616:	ea27 070a 	bic.w	r7, r7, sl
 800861a:	fa04 f202 	lsl.w	r2, r4, r2
 800861e:	4317      	orrs	r7, r2
 8008620:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008624:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008628:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800862c:	d04c      	beq.n	80086c8 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800862e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008632:	f026 0703 	bic.w	r7, r6, #3
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	f8cc 2018 	str.w	r2, [ip, #24]
 800863e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008642:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8008646:	f002 0201 	and.w	r2, r2, #1
 800864a:	9201      	str	r2, [sp, #4]
 800864c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008650:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008654:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008656:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800865a:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800865c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008660:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008664:	4a37      	ldr	r2, [pc, #220]	@ (8008744 <HAL_GPIO_Init+0x1a4>)
 8008666:	4290      	cmp	r0, r2
 8008668:	d05d      	beq.n	8008726 <HAL_GPIO_Init+0x186>
 800866a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800866e:	4290      	cmp	r0, r2
 8008670:	d05b      	beq.n	800872a <HAL_GPIO_Init+0x18a>
 8008672:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008676:	4290      	cmp	r0, r2
 8008678:	d059      	beq.n	800872e <HAL_GPIO_Init+0x18e>
 800867a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800867e:	4290      	cmp	r0, r2
 8008680:	bf14      	ite	ne
 8008682:	2204      	movne	r2, #4
 8008684:	2203      	moveq	r2, #3
 8008686:	fa02 f20a 	lsl.w	r2, r2, sl
 800868a:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800868e:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8008690:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008692:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8008696:	bf14      	ite	ne
 8008698:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800869a:	43aa      	biceq	r2, r5
 800869c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800869e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086a0:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80086a4:	bf14      	ite	ne
 80086a6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80086a8:	43aa      	biceq	r2, r5
 80086aa:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80086ac:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80086ae:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80086b2:	bf14      	ite	ne
 80086b4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80086b6:	43aa      	biceq	r2, r5
 80086b8:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80086ba:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086bc:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80086c0:	bf14      	ite	ne
 80086c2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80086c4:	43aa      	biceq	r2, r5
 80086c6:	601a      	str	r2, [r3, #0]
	position++;
 80086c8:	3601      	adds	r6, #1
 80086ca:	e774      	b.n	80085b6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80086cc:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8008748 <HAL_GPIO_Init+0x1a8>
 80086d0:	454a      	cmp	r2, r9
 80086d2:	d008      	beq.n	80086e6 <HAL_GPIO_Init+0x146>
 80086d4:	d810      	bhi.n	80086f8 <HAL_GPIO_Init+0x158>
 80086d6:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80086da:	454a      	cmp	r2, r9
 80086dc:	d003      	beq.n	80086e6 <HAL_GPIO_Init+0x146>
 80086de:	4572      	cmp	r2, lr
 80086e0:	d001      	beq.n	80086e6 <HAL_GPIO_Init+0x146>
 80086e2:	4542      	cmp	r2, r8
 80086e4:	d187      	bne.n	80085f6 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80086e6:	688a      	ldr	r2, [r1, #8]
 80086e8:	b1da      	cbz	r2, 8008722 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80086ea:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086ec:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80086f0:	bf0c      	ite	eq
 80086f2:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80086f4:	6147      	strne	r7, [r0, #20]
 80086f6:	e77e      	b.n	80085f6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80086f8:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 800874c <HAL_GPIO_Init+0x1ac>
 80086fc:	454a      	cmp	r2, r9
 80086fe:	d0f2      	beq.n	80086e6 <HAL_GPIO_Init+0x146>
 8008700:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8008704:	454a      	cmp	r2, r9
 8008706:	e7ed      	b.n	80086e4 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008708:	68cc      	ldr	r4, [r1, #12]
          break;
 800870a:	e774      	b.n	80085f6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800870c:	68cc      	ldr	r4, [r1, #12]
 800870e:	3404      	adds	r4, #4
          break;
 8008710:	e771      	b.n	80085f6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008712:	68cc      	ldr	r4, [r1, #12]
 8008714:	3408      	adds	r4, #8
          break;
 8008716:	e76e      	b.n	80085f6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008718:	68cc      	ldr	r4, [r1, #12]
 800871a:	340c      	adds	r4, #12
          break;
 800871c:	e76b      	b.n	80085f6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800871e:	2400      	movs	r4, #0
 8008720:	e769      	b.n	80085f6 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008722:	2404      	movs	r4, #4
 8008724:	e767      	b.n	80085f6 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008726:	2200      	movs	r2, #0
 8008728:	e7ad      	b.n	8008686 <HAL_GPIO_Init+0xe6>
 800872a:	2201      	movs	r2, #1
 800872c:	e7ab      	b.n	8008686 <HAL_GPIO_Init+0xe6>
 800872e:	2202      	movs	r2, #2
 8008730:	e7a9      	b.n	8008686 <HAL_GPIO_Init+0xe6>
 8008732:	bf00      	nop
 8008734:	40021000 	.word	0x40021000
 8008738:	40010400 	.word	0x40010400
 800873c:	10210000 	.word	0x10210000
 8008740:	10110000 	.word	0x10110000
 8008744:	40010800 	.word	0x40010800
 8008748:	10220000 	.word	0x10220000
 800874c:	10310000 	.word	0x10310000

08008750 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008750:	6883      	ldr	r3, [r0, #8]
 8008752:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008754:	bf14      	ite	ne
 8008756:	2001      	movne	r0, #1
 8008758:	2000      	moveq	r0, #0
 800875a:	4770      	bx	lr

0800875c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800875c:	b10a      	cbz	r2, 8008762 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800875e:	6101      	str	r1, [r0, #16]
  }
}
 8008760:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008762:	0409      	lsls	r1, r1, #16
 8008764:	e7fb      	b.n	800875e <HAL_GPIO_WritePin+0x2>
	...

08008768 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008768:	4a04      	ldr	r2, [pc, #16]	@ (800877c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800876a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800876c:	6951      	ldr	r1, [r2, #20]
 800876e:	4201      	tst	r1, r0
 8008770:	d002      	beq.n	8008778 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008772:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008774:	f7fe fe04 	bl	8007380 <HAL_GPIO_EXTI_Callback>
  }
}
 8008778:	bd08      	pop	{r3, pc}
 800877a:	bf00      	nop
 800877c:	40010400 	.word	0x40010400

08008780 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008780:	6801      	ldr	r1, [r0, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	694b      	ldr	r3, [r1, #20]
 8008786:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 800878a:	d010      	beq.n	80087ae <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800878c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8008790:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8008792:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008794:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008796:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800879a:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800879e:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087a4:	f043 0304 	orr.w	r3, r3, #4
 80087a8:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80087aa:	2001      	movs	r0, #1
 80087ac:	4770      	bx	lr
  }
  return HAL_OK;
 80087ae:	4618      	mov	r0, r3
}
 80087b0:	4770      	bx	lr

080087b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80087b2:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80087b6:	4606      	mov	r6, r0
 80087b8:	460f      	mov	r7, r1
 80087ba:	4691      	mov	r9, r2
 80087bc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087c2:	6833      	ldr	r3, [r6, #0]
 80087c4:	f1ba 0f01 	cmp.w	sl, #1
 80087c8:	bf0c      	ite	eq
 80087ca:	695c      	ldreq	r4, [r3, #20]
 80087cc:	699c      	ldrne	r4, [r3, #24]
 80087ce:	ea27 0404 	bic.w	r4, r7, r4
 80087d2:	b2a4      	uxth	r4, r4
 80087d4:	fab4 f484 	clz	r4, r4
 80087d8:	0964      	lsrs	r4, r4, #5
 80087da:	45a1      	cmp	r9, r4
 80087dc:	d001      	beq.n	80087e2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80087de:	2000      	movs	r0, #0
 80087e0:	e025      	b.n	800882e <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	1c6a      	adds	r2, r5, #1
 80087e4:	d0ee      	beq.n	80087c4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e6:	f7ff fc9b 	bl	8008120 <HAL_GetTick>
 80087ea:	9b08      	ldr	r3, [sp, #32]
 80087ec:	1ac0      	subs	r0, r0, r3
 80087ee:	42a8      	cmp	r0, r5
 80087f0:	d801      	bhi.n	80087f6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	d1e5      	bne.n	80087c2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087f6:	6833      	ldr	r3, [r6, #0]
 80087f8:	f1ba 0f01 	cmp.w	sl, #1
 80087fc:	bf0c      	ite	eq
 80087fe:	695b      	ldreq	r3, [r3, #20]
 8008800:	699b      	ldrne	r3, [r3, #24]
 8008802:	ea27 0303 	bic.w	r3, r7, r3
 8008806:	b29b      	uxth	r3, r3
 8008808:	fab3 f383 	clz	r3, r3
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	4599      	cmp	r9, r3
 8008810:	d1d7      	bne.n	80087c2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008812:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8008814:	2220      	movs	r2, #32
          return HAL_ERROR;
 8008816:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008818:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800881a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800881e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008822:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8008824:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008828:	f042 0220 	orr.w	r2, r2, #32
 800882c:	6432      	str	r2, [r6, #64]	@ 0x40
}
 800882e:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08008832 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8008832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008836:	4604      	mov	r4, r0
 8008838:	460f      	mov	r7, r1
 800883a:	4616      	mov	r6, r2
 800883c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800883e:	6825      	ldr	r5, [r4, #0]
 8008840:	6968      	ldr	r0, [r5, #20]
 8008842:	ea27 0000 	bic.w	r0, r7, r0
 8008846:	b280      	uxth	r0, r0
 8008848:	b1c0      	cbz	r0, 800887c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800884a:	696b      	ldr	r3, [r5, #20]
 800884c:	055a      	lsls	r2, r3, #21
 800884e:	d517      	bpl.n	8008880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008850:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8008852:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008858:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800885a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800885e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008860:	2300      	movs	r3, #0
 8008862:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008864:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008868:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800886c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800886e:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008872:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8008874:	2300      	movs	r3, #0
      return HAL_ERROR;
 8008876:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8008878:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008880:	1c73      	adds	r3, r6, #1
 8008882:	d0dd      	beq.n	8008840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008884:	f7ff fc4c 	bl	8008120 <HAL_GetTick>
 8008888:	eba0 0008 	sub.w	r0, r0, r8
 800888c:	42b0      	cmp	r0, r6
 800888e:	d801      	bhi.n	8008894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8008890:	2e00      	cmp	r6, #0
 8008892:	d1d4      	bne.n	800883e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	695a      	ldr	r2, [r3, #20]
 8008898:	ea27 0202 	bic.w	r2, r7, r2
 800889c:	b292      	uxth	r2, r2
 800889e:	2a00      	cmp	r2, #0
 80088a0:	d0cd      	beq.n	800883e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088a2:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 80088a4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088a6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088a8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088ac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088b2:	4313      	orrs	r3, r2
 80088b4:	e7dd      	b.n	8008872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080088b6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	460d      	mov	r5, r1
 80088bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	061b      	lsls	r3, r3, #24
 80088c4:	d501      	bpl.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80088c6:	2000      	movs	r0, #0
 80088c8:	e01e      	b.n	8008908 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff ff58 	bl	8008780 <I2C_IsAcknowledgeFailed>
 80088d0:	b9c8      	cbnz	r0, 8008906 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80088d2:	1c6a      	adds	r2, r5, #1
 80088d4:	d0f3      	beq.n	80088be <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d6:	f7ff fc23 	bl	8008120 <HAL_GetTick>
 80088da:	1b80      	subs	r0, r0, r6
 80088dc:	42a8      	cmp	r0, r5
 80088de:	d801      	bhi.n	80088e4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d1ec      	bne.n	80088be <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80088ec:	d1e7      	bne.n	80088be <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80088ee:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088f0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088f2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088fa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80088fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008900:	f042 0220 	orr.w	r2, r2, #32
 8008904:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008906:	2001      	movs	r0, #1
}
 8008908:	bd70      	pop	{r4, r5, r6, pc}
	...

0800890c <I2C_RequestMemoryWrite>:
{
 800890c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008910:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008912:	6802      	ldr	r2, [r0, #0]
{
 8008914:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008916:	6813      	ldr	r3, [r2, #0]
{
 8008918:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800891a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800891e:	6013      	str	r3, [r2, #0]
{
 8008920:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8008924:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008926:	463b      	mov	r3, r7
 8008928:	2200      	movs	r2, #0
 800892a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800892e:	f8cd 8000 	str.w	r8, [sp]
{
 8008932:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008934:	f7ff ff3d 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	b138      	cbz	r0, 800894c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	05db      	lsls	r3, r3, #23
 8008940:	d502      	bpl.n	8008948 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008942:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008946:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8008948:	2603      	movs	r6, #3
 800894a:	e020      	b.n	800898e <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800894c:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8008950:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008952:	463a      	mov	r2, r7
 8008954:	4643      	mov	r3, r8
 8008956:	4620      	mov	r0, r4
 8008958:	4918      	ldr	r1, [pc, #96]	@ (80089bc <I2C_RequestMemoryWrite+0xb0>)
 800895a:	f7ff ff6a 	bl	8008832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800895e:	b9a8      	cbnz	r0, 800898c <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	9003      	str	r0, [sp, #12]
 8008964:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008966:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008968:	9203      	str	r2, [sp, #12]
 800896a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800896c:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800896e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008970:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008972:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008974:	f7ff ff9f 	bl	80088b6 <I2C_WaitOnTXEFlagUntilTimeout>
 8008978:	4606      	mov	r6, r0
 800897a:	b160      	cbz	r0, 8008996 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800897c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800897e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008980:	bf01      	itttt	eq
 8008982:	6822      	ldreq	r2, [r4, #0]
 8008984:	6813      	ldreq	r3, [r2, #0]
 8008986:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800898a:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 800898c:	2601      	movs	r6, #1
}
 800898e:	4630      	mov	r0, r6
 8008990:	b005      	add	sp, #20
 8008992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008996:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800899a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800899c:	d102      	bne.n	80089a4 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800899e:	b2ed      	uxtb	r5, r5
 80089a0:	611d      	str	r5, [r3, #16]
 80089a2:	e7f4      	b.n	800898e <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80089a4:	0a2a      	lsrs	r2, r5, #8
 80089a6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a8:	4639      	mov	r1, r7
 80089aa:	4642      	mov	r2, r8
 80089ac:	4620      	mov	r0, r4
 80089ae:	f7ff ff82 	bl	80088b6 <I2C_WaitOnTXEFlagUntilTimeout>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d1e2      	bne.n	800897c <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	e7f1      	b.n	800899e <I2C_RequestMemoryWrite+0x92>
 80089ba:	bf00      	nop
 80089bc:	00010002 	.word	0x00010002

080089c0 <I2C_RequestMemoryRead>:
{
 80089c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	469a      	mov	sl, r3
 80089c6:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ca:	6803      	ldr	r3, [r0, #0]
{
 80089cc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ce:	681a      	ldr	r2, [r3, #0]
{
 80089d0:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80089d6:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089d8:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089e2:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089e4:	463b      	mov	r3, r7
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8cd 8000 	str.w	r8, [sp]
{
 80089ec:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089ee:	f7ff fee0 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	b148      	cbz	r0, 8008a0a <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089f6:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089f8:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089fa:	bf48      	it	mi
 80089fc:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 8008a00:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a04:	bf48      	it	mi
 8008a06:	6423      	strmi	r3, [r4, #64]	@ 0x40
 8008a08:	e021      	b.n	8008a4e <I2C_RequestMemoryRead+0x8e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a0a:	fa5f f986 	uxtb.w	r9, r6
 8008a0e:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8008a12:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a14:	463a      	mov	r2, r7
 8008a16:	4643      	mov	r3, r8
 8008a18:	4620      	mov	r0, r4
 8008a1a:	492a      	ldr	r1, [pc, #168]	@ (8008ac4 <I2C_RequestMemoryRead+0x104>)
 8008a1c:	f7ff ff09 	bl	8008832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a20:	b9a0      	cbnz	r0, 8008a4c <I2C_RequestMemoryRead+0x8c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	9003      	str	r0, [sp, #12]
 8008a26:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a28:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a2a:	9203      	str	r2, [sp, #12]
 8008a2c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a2e:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a30:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a32:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a34:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a36:	f7ff ff3e 	bl	80088b6 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a3a:	b158      	cbz	r0, 8008a54 <I2C_RequestMemoryRead+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a3e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a40:	bf01      	itttt	eq
 8008a42:	6822      	ldreq	r2, [r4, #0]
 8008a44:	6813      	ldreq	r3, [r2, #0]
 8008a46:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8008a4a:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8008a4c:	2001      	movs	r0, #1
}
 8008a4e:	b004      	add	sp, #16
 8008a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a54:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a58:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a5a:	d11a      	bne.n	8008a92 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a5c:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a5e:	4642      	mov	r2, r8
 8008a60:	4639      	mov	r1, r7
 8008a62:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a64:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a66:	f7ff ff26 	bl	80088b6 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1e5      	bne.n	8008a3c <I2C_RequestMemoryRead+0x7c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a70:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a72:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a74:	680b      	ldr	r3, [r1, #0]
 8008a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a7a:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a82:	f8cd 8000 	str.w	r8, [sp]
 8008a86:	f7ff fe94 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	b160      	cbz	r0, 8008aa8 <I2C_RequestMemoryRead+0xe8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	e7b2      	b.n	80089f8 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a92:	0a2a      	lsrs	r2, r5, #8
 8008a94:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a96:	4639      	mov	r1, r7
 8008a98:	4642      	mov	r2, r8
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f7ff ff0b 	bl	80088b6 <I2C_WaitOnTXEFlagUntilTimeout>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d1cb      	bne.n	8008a3c <I2C_RequestMemoryRead+0x7c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	e7d9      	b.n	8008a5c <I2C_RequestMemoryRead+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008aa8:	f049 0301 	orr.w	r3, r9, #1
 8008aac:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4643      	mov	r3, r8
 8008ab2:	463a      	mov	r2, r7
 8008ab4:	4903      	ldr	r1, [pc, #12]	@ (8008ac4 <I2C_RequestMemoryRead+0x104>)
 8008ab6:	f7ff febc 	bl	8008832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aba:	3800      	subs	r0, #0
 8008abc:	bf18      	it	ne
 8008abe:	2001      	movne	r0, #1
 8008ac0:	e7c5      	b.n	8008a4e <I2C_RequestMemoryRead+0x8e>
 8008ac2:	bf00      	nop
 8008ac4:	00010002 	.word	0x00010002

08008ac8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	075b      	lsls	r3, r3, #29
 8008ad6:	d501      	bpl.n	8008adc <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e01e      	b.n	8008b1a <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7ff fe4f 	bl	8008780 <I2C_IsAcknowledgeFailed>
 8008ae2:	b9c8      	cbnz	r0, 8008b18 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8008ae4:	1c6a      	adds	r2, r5, #1
 8008ae6:	d0f3      	beq.n	8008ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae8:	f7ff fb1a 	bl	8008120 <HAL_GetTick>
 8008aec:	1b80      	subs	r0, r0, r6
 8008aee:	42a8      	cmp	r0, r5
 8008af0:	d801      	bhi.n	8008af6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	d1ec      	bne.n	8008ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f013 0304 	ands.w	r3, r3, #4
 8008afe:	d1e7      	bne.n	8008ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8008b00:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008b02:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008b04:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b08:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b0c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8008b0e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b12:	f042 0220 	orr.w	r2, r2, #32
 8008b16:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008b18:	2001      	movs	r0, #1
}
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}

08008b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	460d      	mov	r5, r1
 8008b22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b24:	6821      	ldr	r1, [r4, #0]
 8008b26:	694b      	ldr	r3, [r1, #20]
 8008b28:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8008b2c:	d001      	beq.n	8008b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e011      	b.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b32:	694a      	ldr	r2, [r1, #20]
 8008b34:	06d2      	lsls	r2, r2, #27
 8008b36:	d50f      	bpl.n	8008b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b38:	f06f 0210 	mvn.w	r2, #16
 8008b3c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b3e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b40:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b42:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b4c:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8008b4e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8008b50:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8008b52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b58:	f7ff fae2 	bl	8008120 <HAL_GetTick>
 8008b5c:	1b80      	subs	r0, r0, r6
 8008b5e:	42a8      	cmp	r0, r5
 8008b60:	d801      	bhi.n	8008b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008b62:	2d00      	cmp	r5, #0
 8008b64:	d1de      	bne.n	8008b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8008b6e:	d1d9      	bne.n	8008b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b70:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b72:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b74:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b78:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	e7e4      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08008b84 <HAL_I2C_Init>:
{
 8008b84:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8008b86:	4604      	mov	r4, r0
 8008b88:	b908      	cbnz	r0, 8008b8e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8008b8a:	2001      	movs	r0, #1
}
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b8e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008b92:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008b96:	b91b      	cbnz	r3, 8008ba0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8008b98:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8008b9c:	f7ff f8c6 	bl	8007d2c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ba0:	2324      	movs	r3, #36	@ 0x24
 8008ba2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	f022 0201 	bic.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bbe:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008bc0:	f000 fcb2 	bl	8009528 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc4 <HAL_I2C_Init+0x140>)
 8008bc6:	6865      	ldr	r5, [r4, #4]
 8008bc8:	429d      	cmp	r5, r3
 8008bca:	bf94      	ite	ls
 8008bcc:	4b3e      	ldrls	r3, [pc, #248]	@ (8008cc8 <HAL_I2C_Init+0x144>)
 8008bce:	4b3f      	ldrhi	r3, [pc, #252]	@ (8008ccc <HAL_I2C_Init+0x148>)
 8008bd0:	4298      	cmp	r0, r3
 8008bd2:	bf8c      	ite	hi
 8008bd4:	2300      	movhi	r3, #0
 8008bd6:	2301      	movls	r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1d6      	bne.n	8008b8a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008bdc:	4e39      	ldr	r6, [pc, #228]	@ (8008cc4 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8008bde:	4b3c      	ldr	r3, [pc, #240]	@ (8008cd0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008be0:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8008be2:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008be6:	bf88      	it	hi
 8008be8:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	6851      	ldr	r1, [r2, #4]
 8008bf0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8008bf4:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008bf8:	bf82      	ittt	hi
 8008bfa:	4373      	mulhi	r3, r6
 8008bfc:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8008c00:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c04:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c06:	6a11      	ldr	r1, [r2, #32]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c12:	69d1      	ldr	r1, [r2, #28]
 8008c14:	1e43      	subs	r3, r0, #1
 8008c16:	482b      	ldr	r0, [pc, #172]	@ (8008cc4 <HAL_I2C_Init+0x140>)
 8008c18:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8008c1c:	4285      	cmp	r5, r0
 8008c1e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8008c22:	d832      	bhi.n	8008c8a <HAL_I2C_Init+0x106>
 8008c24:	006d      	lsls	r5, r5, #1
 8008c26:	fbb3 f3f5 	udiv	r3, r3, r5
 8008c2a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8008c2e:	3301      	adds	r3, #1
 8008c30:	4203      	tst	r3, r0
 8008c32:	d042      	beq.n	8008cba <HAL_I2C_Init+0x136>
 8008c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c38:	4319      	orrs	r1, r3
 8008c3a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008c42:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8008c46:	4303      	orrs	r3, r0
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c4c:	6891      	ldr	r1, [r2, #8]
 8008c4e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008c52:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8008c56:	4303      	orrs	r3, r0
 8008c58:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c60:	68d1      	ldr	r1, [r2, #12]
 8008c62:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8008c66:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8008c6a:	4303      	orrs	r3, r0
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008c70:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c72:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8008c74:	f043 0301 	orr.w	r3, r3, #1
 8008c78:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008c7a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c7c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008c7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c82:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c84:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8008c88:	e780      	b.n	8008b8c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c8a:	68a0      	ldr	r0, [r4, #8]
 8008c8c:	b950      	cbnz	r0, 8008ca4 <HAL_I2C_Init+0x120>
 8008c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c92:	fbb3 f3f5 	udiv	r3, r3, r5
 8008c96:	3301      	adds	r3, #1
 8008c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9c:	b17b      	cbz	r3, 8008cbe <HAL_I2C_Init+0x13a>
 8008c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ca2:	e7c9      	b.n	8008c38 <HAL_I2C_Init+0xb4>
 8008ca4:	2019      	movs	r0, #25
 8008ca6:	4368      	muls	r0, r5
 8008ca8:	fbb3 f3f0 	udiv	r3, r3, r0
 8008cac:	3301      	adds	r3, #1
 8008cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cb2:	b123      	cbz	r3, 8008cbe <HAL_I2C_Init+0x13a>
 8008cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cb8:	e7be      	b.n	8008c38 <HAL_I2C_Init+0xb4>
 8008cba:	2304      	movs	r3, #4
 8008cbc:	e7bc      	b.n	8008c38 <HAL_I2C_Init+0xb4>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e7ba      	b.n	8008c38 <HAL_I2C_Init+0xb4>
 8008cc2:	bf00      	nop
 8008cc4:	000186a0 	.word	0x000186a0
 8008cc8:	001e847f 	.word	0x001e847f
 8008ccc:	003d08ff 	.word	0x003d08ff
 8008cd0:	000f4240 	.word	0x000f4240

08008cd4 <HAL_I2C_Mem_Write>:
{
 8008cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4699      	mov	r9, r3
 8008cdc:	460f      	mov	r7, r1
 8008cde:	4690      	mov	r8, r2
 8008ce0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8008ce2:	f7ff fa1d 	bl	8008120 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ce6:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008cea:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d003      	beq.n	8008cf8 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8008cf0:	2002      	movs	r0, #2
}
 8008cf2:	b003      	add	sp, #12
 8008cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cf8:	9000      	str	r0, [sp, #0]
 8008cfa:	2319      	movs	r3, #25
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	493a      	ldr	r1, [pc, #232]	@ (8008dec <HAL_I2C_Mem_Write+0x118>)
 8008d02:	f7ff fd56 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d1f2      	bne.n	8008cf0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8008d0a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d0ee      	beq.n	8008cf0 <HAL_I2C_Mem_Write+0x1c>
 8008d12:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d14:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8008d16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d1a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d1c:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d1e:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008d20:	bf58      	it	pl
 8008d22:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d24:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8008d26:	bf5c      	itt	pl
 8008d28:	f043 0301 	orrpl.w	r3, r3, #1
 8008d2c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d2e:	6803      	ldr	r3, [r0, #0]
 8008d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d34:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d36:	2321      	movs	r3, #33	@ 0x21
 8008d38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d3c:	2340      	movs	r3, #64	@ 0x40
 8008d3e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8008d46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d48:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8008d4a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008d4c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8008d50:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d52:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008d54:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d56:	4b26      	ldr	r3, [pc, #152]	@ (8008df0 <HAL_I2C_Mem_Write+0x11c>)
 8008d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	e9cd 6500 	strd	r6, r5, [sp]
 8008d60:	f7ff fdd4 	bl	800890c <I2C_RequestMemoryWrite>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d02a      	beq.n	8008dbe <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8008d68:	2001      	movs	r0, #1
 8008d6a:	e7c2      	b.n	8008cf2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d6c:	f7ff fda3 	bl	80088b6 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d70:	b140      	cbz	r0, 8008d84 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d74:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d76:	bf01      	itttt	eq
 8008d78:	6822      	ldreq	r2, [r4, #0]
 8008d7a:	6813      	ldreq	r3, [r2, #0]
 8008d7c:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8008d80:	6013      	streq	r3, [r2, #0]
 8008d82:	e7f1      	b.n	8008d68 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d86:	6827      	ldr	r7, [r4, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d8e:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8008d90:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008d92:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d94:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008d96:	3a01      	subs	r2, #1
 8008d98:	b292      	uxth	r2, r2
 8008d9a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d9c:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8008d9e:	1e48      	subs	r0, r1, #1
 8008da0:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008da2:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8008da4:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008da6:	d50a      	bpl.n	8008dbe <HAL_I2C_Mem_Write+0xea>
 8008da8:	b148      	cbz	r0, 8008dbe <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008daa:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8008dac:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dae:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8008db0:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8008db2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8008db4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008dba:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8008dbc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008dbe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1d0      	bne.n	8008d6c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dca:	f7ff fe7d 	bl	8008ac8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1cf      	bne.n	8008d72 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dda:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ddc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8008dde:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008de2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de6:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8008dea:	e782      	b.n	8008cf2 <HAL_I2C_Mem_Write+0x1e>
 8008dec:	00100002 	.word	0x00100002
 8008df0:	ffff0000 	.word	0xffff0000

08008df4 <HAL_I2C_Mem_Read>:
{
 8008df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8008dfa:	2300      	movs	r3, #0
{
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 8008e00:	9303      	str	r3, [sp, #12]
{
 8008e02:	460d      	mov	r5, r1
 8008e04:	4690      	mov	r8, r2
 8008e06:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 8008e08:	f7ff f98a 	bl	8008120 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e0c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008e10:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d004      	beq.n	8008e20 <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 8008e16:	2502      	movs	r5, #2
}
 8008e18:	4628      	mov	r0, r5
 8008e1a:	b009      	add	sp, #36	@ 0x24
 8008e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e20:	9000      	str	r0, [sp, #0]
 8008e22:	2319      	movs	r3, #25
 8008e24:	2201      	movs	r2, #1
 8008e26:	4620      	mov	r0, r4
 8008e28:	498c      	ldr	r1, [pc, #560]	@ (800905c <HAL_I2C_Mem_Read+0x268>)
 8008e2a:	f7ff fcc2 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d1f1      	bne.n	8008e16 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8008e32:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d0ed      	beq.n	8008e16 <HAL_I2C_Mem_Read+0x22>
 8008e3a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e3c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8008e3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e42:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e44:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e46:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008e48:	bf58      	it	pl
 8008e4a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e4c:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8008e4e:	bf5c      	itt	pl
 8008e50:	f043 0301 	orrpl.w	r3, r3, #1
 8008e54:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e56:	6803      	ldr	r3, [r0, #0]
 8008e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e5c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e5e:	2322      	movs	r3, #34	@ 0x22
 8008e60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8008e6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e70:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8008e72:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008e74:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008e78:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008e7c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e7e:	4b78      	ldr	r3, [pc, #480]	@ (8009060 <HAL_I2C_Mem_Read+0x26c>)
 8008e80:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e82:	464b      	mov	r3, r9
 8008e84:	e9cd 7600 	strd	r7, r6, [sp]
 8008e88:	f7ff fd9a 	bl	80089c0 <I2C_RequestMemoryRead>
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f040 80ba 	bne.w	8009008 <HAL_I2C_Mem_Read+0x214>
    if (hi2c->XferSize == 0U)
 8008e94:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e96:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8008e98:	b9c2      	cbnz	r2, 8008ecc <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e9a:	9004      	str	r0, [sp, #16]
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	9204      	str	r2, [sp, #16]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	9204      	str	r2, [sp, #16]
 8008ea4:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eac:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008eae:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009064 <HAL_I2C_Mem_Read+0x270>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008eb2:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8009068 <HAL_I2C_Mem_Read+0x274>
    while (hi2c->XferSize > 0U)
 8008eb6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d137      	bne.n	8008f2c <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ebc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8008ebe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008ec2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ec6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8008eca:	e7a5      	b.n	8008e18 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8008ecc:	2a01      	cmp	r2, #1
 8008ece:	d111      	bne.n	8008ef4 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ed6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ed8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	9005      	str	r0, [sp, #20]
 8008ede:	695a      	ldr	r2, [r3, #20]
 8008ee0:	9205      	str	r2, [sp, #20]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	9205      	str	r2, [sp, #20]
 8008ee6:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008ef0:	b662      	cpsie	i
}
 8008ef2:	e7dc      	b.n	8008eae <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8008ef4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ef6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8008ef8:	d10e      	bne.n	8008f18 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f00:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	9006      	str	r0, [sp, #24]
 8008f06:	695a      	ldr	r2, [r3, #20]
 8008f08:	9206      	str	r2, [sp, #24]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	9206      	str	r2, [sp, #24]
 8008f0e:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f16:	e7ea      	b.n	8008eee <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f1c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f1e:	9007      	str	r0, [sp, #28]
 8008f20:	695a      	ldr	r2, [r3, #20]
 8008f22:	9207      	str	r2, [sp, #28]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	9b07      	ldr	r3, [sp, #28]
 8008f2a:	e7c0      	b.n	8008eae <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d878      	bhi.n	8009022 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d115      	bne.n	8008f60 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f34:	4632      	mov	r2, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7ff fdef 	bl	8008b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d162      	bne.n	8009008 <HAL_I2C_Mem_Read+0x214>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	691a      	ldr	r2, [r3, #16]
 8008f46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f48:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008f4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8008f50:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008f52:	3b01      	subs	r3, #1
 8008f54:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8008f56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8008f5e:	e7aa      	b.n	8008eb6 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8008f60:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	463b      	mov	r3, r7
 8008f68:	4641      	mov	r1, r8
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8008f6e:	d118      	bne.n	8008fa2 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f70:	f7ff fc1f 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d147      	bne.n	8009008 <HAL_I2C_Mem_Read+0x214>
 8008f78:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f82:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f88:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008f8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8008f90:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008f92:	3b01      	subs	r3, #1
 8008f94:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8008f96:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008f9e:	b662      	cpsie	i
 8008fa0:	e7cf      	b.n	8008f42 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fa2:	f7ff fc06 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d12e      	bne.n	8009008 <HAL_I2C_Mem_Read+0x214>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008faa:	6822      	ldr	r2, [r4, #0]
 8008fac:	6813      	ldr	r3, [r2, #0]
 8008fae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fb2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fb4:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fb6:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fc0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008fc2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008fc4:	1c53      	adds	r3, r2, #1
 8008fc6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8008fc8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8008fce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fd6:	f8d9 3000 	ldr.w	r3, [r9]
 8008fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fde:	2123      	movs	r1, #35	@ 0x23
 8008fe0:	434b      	muls	r3, r1
 8008fe2:	9303      	str	r3, [sp, #12]
            count--;
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	b973      	cbnz	r3, 800900c <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8008fee:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008ff0:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008ff2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ff6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ffa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008ffc:	f042 0220 	orr.w	r2, r2, #32
 8009000:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009002:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8009004:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8009008:	2501      	movs	r5, #1
 800900a:	e705      	b.n	8008e18 <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	6959      	ldr	r1, [r3, #20]
 8009010:	0748      	lsls	r0, r1, #29
 8009012:	d5e7      	bpl.n	8008fe4 <HAL_I2C_Mem_Read+0x1f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009014:	6819      	ldr	r1, [r3, #0]
 8009016:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800901a:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	7053      	strb	r3, [r2, #1]
 8009020:	e7b3      	b.n	8008f8a <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009022:	4632      	mov	r2, r6
 8009024:	4639      	mov	r1, r7
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff fd78 	bl	8008b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800902c:	2800      	cmp	r0, #0
 800902e:	d1eb      	bne.n	8009008 <HAL_I2C_Mem_Read+0x214>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009036:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009038:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800903a:	1c53      	adds	r3, r2, #1
 800903c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800903e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009040:	3b01      	subs	r3, #1
 8009042:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8009044:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009046:	3b01      	subs	r3, #1
 8009048:	b29b      	uxth	r3, r3
 800904a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	6959      	ldr	r1, [r3, #20]
 8009050:	0749      	lsls	r1, r1, #29
 8009052:	f57f af30 	bpl.w	8008eb6 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	7053      	strb	r3, [r2, #1]
 800905a:	e776      	b.n	8008f4a <HAL_I2C_Mem_Read+0x156>
 800905c:	00100002 	.word	0x00100002
 8009060:	ffff0000 	.word	0xffff0000
 8009064:	00010004 	.word	0x00010004
 8009068:	20000004 	.word	0x20000004

0800906c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800906c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009070:	4605      	mov	r5, r0
 8009072:	b338      	cbz	r0, 80090c4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009074:	6803      	ldr	r3, [r0, #0]
 8009076:	07db      	lsls	r3, r3, #31
 8009078:	d410      	bmi.n	800909c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	079f      	lsls	r7, r3, #30
 800907e:	d45e      	bmi.n	800913e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	0719      	lsls	r1, r3, #28
 8009084:	f100 8095 	bmi.w	80091b2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	075a      	lsls	r2, r3, #29
 800908c:	f100 80c1 	bmi.w	8009212 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009090:	69eb      	ldr	r3, [r5, #28]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f040 812c 	bne.w	80092f0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8009098:	2000      	movs	r0, #0
 800909a:	e029      	b.n	80090f0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800909c:	4c90      	ldr	r4, [pc, #576]	@ (80092e0 <HAL_RCC_OscConfig+0x274>)
 800909e:	6863      	ldr	r3, [r4, #4]
 80090a0:	f003 030c 	and.w	r3, r3, #12
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d007      	beq.n	80090b8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80090a8:	6863      	ldr	r3, [r4, #4]
 80090aa:	f003 030c 	and.w	r3, r3, #12
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d10a      	bne.n	80090c8 <HAL_RCC_OscConfig+0x5c>
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	03de      	lsls	r6, r3, #15
 80090b6:	d507      	bpl.n	80090c8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	039c      	lsls	r4, r3, #14
 80090bc:	d5dd      	bpl.n	800907a <HAL_RCC_OscConfig+0xe>
 80090be:	686b      	ldr	r3, [r5, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1da      	bne.n	800907a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80090c4:	2001      	movs	r0, #1
 80090c6:	e013      	b.n	80090f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090c8:	686b      	ldr	r3, [r5, #4]
 80090ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ce:	d112      	bne.n	80090f6 <HAL_RCC_OscConfig+0x8a>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80090d8:	f7ff f822 	bl	8008120 <HAL_GetTick>
 80090dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	0398      	lsls	r0, r3, #14
 80090e2:	d4ca      	bmi.n	800907a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090e4:	f7ff f81c 	bl	8008120 <HAL_GetTick>
 80090e8:	1b80      	subs	r0, r0, r6
 80090ea:	2864      	cmp	r0, #100	@ 0x64
 80090ec:	d9f7      	bls.n	80090de <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80090ee:	2003      	movs	r0, #3
}
 80090f0:	b002      	add	sp, #8
 80090f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090f6:	b99b      	cbnz	r3, 8009120 <HAL_RCC_OscConfig+0xb4>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009106:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009108:	f7ff f80a 	bl	8008120 <HAL_GetTick>
 800910c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	0399      	lsls	r1, r3, #14
 8009112:	d5b2      	bpl.n	800907a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009114:	f7ff f804 	bl	8008120 <HAL_GetTick>
 8009118:	1b80      	subs	r0, r0, r6
 800911a:	2864      	cmp	r0, #100	@ 0x64
 800911c:	d9f7      	bls.n	800910e <HAL_RCC_OscConfig+0xa2>
 800911e:	e7e6      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	d103      	bne.n	8009130 <HAL_RCC_OscConfig+0xc4>
 8009128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	e7cf      	b.n	80090d0 <HAL_RCC_OscConfig+0x64>
 8009130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800913c:	e7cb      	b.n	80090d6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800913e:	4c68      	ldr	r4, [pc, #416]	@ (80092e0 <HAL_RCC_OscConfig+0x274>)
 8009140:	6863      	ldr	r3, [r4, #4]
 8009142:	f013 0f0c 	tst.w	r3, #12
 8009146:	d007      	beq.n	8009158 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009148:	6863      	ldr	r3, [r4, #4]
 800914a:	f003 030c 	and.w	r3, r3, #12
 800914e:	2b08      	cmp	r3, #8
 8009150:	d110      	bne.n	8009174 <HAL_RCC_OscConfig+0x108>
 8009152:	6863      	ldr	r3, [r4, #4]
 8009154:	03da      	lsls	r2, r3, #15
 8009156:	d40d      	bmi.n	8009174 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	079b      	lsls	r3, r3, #30
 800915c:	d502      	bpl.n	8009164 <HAL_RCC_OscConfig+0xf8>
 800915e:	692b      	ldr	r3, [r5, #16]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d1af      	bne.n	80090c4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	696a      	ldr	r2, [r5, #20]
 8009168:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800916c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	e785      	b.n	8009080 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009174:	692a      	ldr	r2, [r5, #16]
 8009176:	4b5b      	ldr	r3, [pc, #364]	@ (80092e4 <HAL_RCC_OscConfig+0x278>)
 8009178:	b16a      	cbz	r2, 8009196 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800917e:	f7fe ffcf 	bl	8008120 <HAL_GetTick>
 8009182:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	079f      	lsls	r7, r3, #30
 8009188:	d4ec      	bmi.n	8009164 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800918a:	f7fe ffc9 	bl	8008120 <HAL_GetTick>
 800918e:	1b80      	subs	r0, r0, r6
 8009190:	2802      	cmp	r0, #2
 8009192:	d9f7      	bls.n	8009184 <HAL_RCC_OscConfig+0x118>
 8009194:	e7ab      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8009196:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009198:	f7fe ffc2 	bl	8008120 <HAL_GetTick>
 800919c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	0798      	lsls	r0, r3, #30
 80091a2:	f57f af6d 	bpl.w	8009080 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091a6:	f7fe ffbb 	bl	8008120 <HAL_GetTick>
 80091aa:	1b80      	subs	r0, r0, r6
 80091ac:	2802      	cmp	r0, #2
 80091ae:	d9f6      	bls.n	800919e <HAL_RCC_OscConfig+0x132>
 80091b0:	e79d      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091b2:	69aa      	ldr	r2, [r5, #24]
 80091b4:	4e4a      	ldr	r6, [pc, #296]	@ (80092e0 <HAL_RCC_OscConfig+0x274>)
 80091b6:	4b4b      	ldr	r3, [pc, #300]	@ (80092e4 <HAL_RCC_OscConfig+0x278>)
 80091b8:	b1e2      	cbz	r2, 80091f4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80091ba:	2201      	movs	r2, #1
 80091bc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80091c0:	f7fe ffae 	bl	8008120 <HAL_GetTick>
 80091c4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091c6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80091c8:	079b      	lsls	r3, r3, #30
 80091ca:	d50d      	bpl.n	80091e8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80091cc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80091d0:	4b45      	ldr	r3, [pc, #276]	@ (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80091da:	bf00      	nop
  }
  while (Delay --);
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	1e5a      	subs	r2, r3, #1
 80091e0:	9201      	str	r2, [sp, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f9      	bne.n	80091da <HAL_RCC_OscConfig+0x16e>
 80091e6:	e74f      	b.n	8009088 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091e8:	f7fe ff9a 	bl	8008120 <HAL_GetTick>
 80091ec:	1b00      	subs	r0, r0, r4
 80091ee:	2802      	cmp	r0, #2
 80091f0:	d9e9      	bls.n	80091c6 <HAL_RCC_OscConfig+0x15a>
 80091f2:	e77c      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80091f4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80091f8:	f7fe ff92 	bl	8008120 <HAL_GetTick>
 80091fc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091fe:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8009200:	079f      	lsls	r7, r3, #30
 8009202:	f57f af41 	bpl.w	8009088 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009206:	f7fe ff8b 	bl	8008120 <HAL_GetTick>
 800920a:	1b00      	subs	r0, r0, r4
 800920c:	2802      	cmp	r0, #2
 800920e:	d9f6      	bls.n	80091fe <HAL_RCC_OscConfig+0x192>
 8009210:	e76d      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009212:	4c33      	ldr	r4, [pc, #204]	@ (80092e0 <HAL_RCC_OscConfig+0x274>)
 8009214:	69e3      	ldr	r3, [r4, #28]
 8009216:	00d8      	lsls	r0, r3, #3
 8009218:	d424      	bmi.n	8009264 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800921a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800921c:	69e3      	ldr	r3, [r4, #28]
 800921e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009222:	61e3      	str	r3, [r4, #28]
 8009224:	69e3      	ldr	r3, [r4, #28]
 8009226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800922e:	4e2f      	ldr	r6, [pc, #188]	@ (80092ec <HAL_RCC_OscConfig+0x280>)
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	05d9      	lsls	r1, r3, #23
 8009234:	d518      	bpl.n	8009268 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009236:	68eb      	ldr	r3, [r5, #12]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d126      	bne.n	800928a <HAL_RCC_OscConfig+0x21e>
 800923c:	6a23      	ldr	r3, [r4, #32]
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8009244:	f7fe ff6c 	bl	8008120 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009248:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800924c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800924e:	6a23      	ldr	r3, [r4, #32]
 8009250:	079b      	lsls	r3, r3, #30
 8009252:	d53f      	bpl.n	80092d4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8009254:	2f00      	cmp	r7, #0
 8009256:	f43f af1b 	beq.w	8009090 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800925a:	69e3      	ldr	r3, [r4, #28]
 800925c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009260:	61e3      	str	r3, [r4, #28]
 8009262:	e715      	b.n	8009090 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8009264:	2700      	movs	r7, #0
 8009266:	e7e2      	b.n	800922e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009268:	6833      	ldr	r3, [r6, #0]
 800926a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800926e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009270:	f7fe ff56 	bl	8008120 <HAL_GetTick>
 8009274:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009276:	6833      	ldr	r3, [r6, #0]
 8009278:	05da      	lsls	r2, r3, #23
 800927a:	d4dc      	bmi.n	8009236 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800927c:	f7fe ff50 	bl	8008120 <HAL_GetTick>
 8009280:	eba0 0008 	sub.w	r0, r0, r8
 8009284:	2864      	cmp	r0, #100	@ 0x64
 8009286:	d9f6      	bls.n	8009276 <HAL_RCC_OscConfig+0x20a>
 8009288:	e731      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800928a:	b9ab      	cbnz	r3, 80092b8 <HAL_RCC_OscConfig+0x24c>
 800928c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800928e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	6223      	str	r3, [r4, #32]
 8009298:	6a23      	ldr	r3, [r4, #32]
 800929a:	f023 0304 	bic.w	r3, r3, #4
 800929e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80092a0:	f7fe ff3e 	bl	8008120 <HAL_GetTick>
 80092a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092a6:	6a23      	ldr	r3, [r4, #32]
 80092a8:	0798      	lsls	r0, r3, #30
 80092aa:	d5d3      	bpl.n	8009254 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ac:	f7fe ff38 	bl	8008120 <HAL_GetTick>
 80092b0:	1b80      	subs	r0, r0, r6
 80092b2:	4540      	cmp	r0, r8
 80092b4:	d9f7      	bls.n	80092a6 <HAL_RCC_OscConfig+0x23a>
 80092b6:	e71a      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	6a23      	ldr	r3, [r4, #32]
 80092bc:	d103      	bne.n	80092c6 <HAL_RCC_OscConfig+0x25a>
 80092be:	f043 0304 	orr.w	r3, r3, #4
 80092c2:	6223      	str	r3, [r4, #32]
 80092c4:	e7ba      	b.n	800923c <HAL_RCC_OscConfig+0x1d0>
 80092c6:	f023 0301 	bic.w	r3, r3, #1
 80092ca:	6223      	str	r3, [r4, #32]
 80092cc:	6a23      	ldr	r3, [r4, #32]
 80092ce:	f023 0304 	bic.w	r3, r3, #4
 80092d2:	e7b6      	b.n	8009242 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d4:	f7fe ff24 	bl	8008120 <HAL_GetTick>
 80092d8:	1b80      	subs	r0, r0, r6
 80092da:	4540      	cmp	r0, r8
 80092dc:	d9b7      	bls.n	800924e <HAL_RCC_OscConfig+0x1e2>
 80092de:	e706      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
 80092e0:	40021000 	.word	0x40021000
 80092e4:	42420000 	.word	0x42420000
 80092e8:	20000004 	.word	0x20000004
 80092ec:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092f0:	4c2a      	ldr	r4, [pc, #168]	@ (800939c <HAL_RCC_OscConfig+0x330>)
 80092f2:	6862      	ldr	r2, [r4, #4]
 80092f4:	f002 020c 	and.w	r2, r2, #12
 80092f8:	2a08      	cmp	r2, #8
 80092fa:	d03e      	beq.n	800937a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092fc:	2200      	movs	r2, #0
 80092fe:	2b02      	cmp	r3, #2
 8009300:	4b27      	ldr	r3, [pc, #156]	@ (80093a0 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8009302:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009304:	d12c      	bne.n	8009360 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8009306:	f7fe ff0b 	bl	8008120 <HAL_GetTick>
 800930a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	0199      	lsls	r1, r3, #6
 8009310:	d420      	bmi.n	8009354 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009312:	6a2b      	ldr	r3, [r5, #32]
 8009314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009318:	d105      	bne.n	8009326 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800931a:	6862      	ldr	r2, [r4, #4]
 800931c:	68a9      	ldr	r1, [r5, #8]
 800931e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009322:	430a      	orrs	r2, r1
 8009324:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009326:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8009328:	6862      	ldr	r2, [r4, #4]
 800932a:	430b      	orrs	r3, r1
 800932c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8009330:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8009332:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009334:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8009336:	4b1a      	ldr	r3, [pc, #104]	@ (80093a0 <HAL_RCC_OscConfig+0x334>)
 8009338:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800933a:	f7fe fef1 	bl	8008120 <HAL_GetTick>
 800933e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	019a      	lsls	r2, r3, #6
 8009344:	f53f aea8 	bmi.w	8009098 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009348:	f7fe feea 	bl	8008120 <HAL_GetTick>
 800934c:	1b40      	subs	r0, r0, r5
 800934e:	2802      	cmp	r0, #2
 8009350:	d9f6      	bls.n	8009340 <HAL_RCC_OscConfig+0x2d4>
 8009352:	e6cc      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009354:	f7fe fee4 	bl	8008120 <HAL_GetTick>
 8009358:	1b80      	subs	r0, r0, r6
 800935a:	2802      	cmp	r0, #2
 800935c:	d9d6      	bls.n	800930c <HAL_RCC_OscConfig+0x2a0>
 800935e:	e6c6      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8009360:	f7fe fede 	bl	8008120 <HAL_GetTick>
 8009364:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	019b      	lsls	r3, r3, #6
 800936a:	f57f ae95 	bpl.w	8009098 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800936e:	f7fe fed7 	bl	8008120 <HAL_GetTick>
 8009372:	1b40      	subs	r0, r0, r5
 8009374:	2802      	cmp	r0, #2
 8009376:	d9f6      	bls.n	8009366 <HAL_RCC_OscConfig+0x2fa>
 8009378:	e6b9      	b.n	80090ee <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800937a:	2b01      	cmp	r3, #1
 800937c:	f43f aea2 	beq.w	80090c4 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8009380:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009382:	6a2b      	ldr	r3, [r5, #32]
 8009384:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8009388:	429a      	cmp	r2, r3
 800938a:	f47f ae9b 	bne.w	80090c4 <HAL_RCC_OscConfig+0x58>
 800938e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009390:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009394:	1ac0      	subs	r0, r0, r3
 8009396:	bf18      	it	ne
 8009398:	2001      	movne	r0, #1
 800939a:	e6a9      	b.n	80090f0 <HAL_RCC_OscConfig+0x84>
 800939c:	40021000 	.word	0x40021000
 80093a0:	42420000 	.word	0x42420000

080093a4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80093a4:	4a0d      	ldr	r2, [pc, #52]	@ (80093dc <HAL_RCC_GetSysClockFreq+0x38>)
 80093a6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80093a8:	f003 010c 	and.w	r1, r3, #12
 80093ac:	2908      	cmp	r1, #8
 80093ae:	d112      	bne.n	80093d6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80093b0:	480b      	ldr	r0, [pc, #44]	@ (80093e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80093b2:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80093b6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80093b8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80093ba:	d509      	bpl.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80093bc:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093be:	4a09      	ldr	r2, [pc, #36]	@ (80093e4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80093c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80093c6:	4a08      	ldr	r2, [pc, #32]	@ (80093e8 <HAL_RCC_GetSysClockFreq+0x44>)
 80093c8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80093ce:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093d0:	4b06      	ldr	r3, [pc, #24]	@ (80093ec <HAL_RCC_GetSysClockFreq+0x48>)
 80093d2:	4358      	muls	r0, r3
 80093d4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80093d6:	4803      	ldr	r0, [pc, #12]	@ (80093e4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40021000 	.word	0x40021000
 80093e0:	0800dbca 	.word	0x0800dbca
 80093e4:	007a1200 	.word	0x007a1200
 80093e8:	0800dbc8 	.word	0x0800dbc8
 80093ec:	003d0900 	.word	0x003d0900

080093f0 <HAL_RCC_ClockConfig>:
{
 80093f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80093f6:	4604      	mov	r4, r0
 80093f8:	b910      	cbnz	r0, 8009400 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80093fa:	2001      	movs	r0, #1
}
 80093fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009400:	4a44      	ldr	r2, [pc, #272]	@ (8009514 <HAL_RCC_ClockConfig+0x124>)
 8009402:	6813      	ldr	r3, [r2, #0]
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	428b      	cmp	r3, r1
 800940a:	d328      	bcc.n	800945e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800940c:	6821      	ldr	r1, [r4, #0]
 800940e:	078e      	lsls	r6, r1, #30
 8009410:	d430      	bmi.n	8009474 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009412:	07ca      	lsls	r2, r1, #31
 8009414:	d443      	bmi.n	800949e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009416:	4a3f      	ldr	r2, [pc, #252]	@ (8009514 <HAL_RCC_ClockConfig+0x124>)
 8009418:	6813      	ldr	r3, [r2, #0]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	42ab      	cmp	r3, r5
 8009420:	d865      	bhi.n	80094ee <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	4d3c      	ldr	r5, [pc, #240]	@ (8009518 <HAL_RCC_ClockConfig+0x128>)
 8009426:	f012 0f04 	tst.w	r2, #4
 800942a:	d16c      	bne.n	8009506 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800942c:	0713      	lsls	r3, r2, #28
 800942e:	d506      	bpl.n	800943e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009430:	686b      	ldr	r3, [r5, #4]
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8009438:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800943c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800943e:	f7ff ffb1 	bl	80093a4 <HAL_RCC_GetSysClockFreq>
 8009442:	686b      	ldr	r3, [r5, #4]
 8009444:	4a35      	ldr	r2, [pc, #212]	@ (800951c <HAL_RCC_ClockConfig+0x12c>)
 8009446:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800944a:	5cd3      	ldrb	r3, [r2, r3]
 800944c:	40d8      	lsrs	r0, r3
 800944e:	4b34      	ldr	r3, [pc, #208]	@ (8009520 <HAL_RCC_ClockConfig+0x130>)
 8009450:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009452:	4b34      	ldr	r3, [pc, #208]	@ (8009524 <HAL_RCC_ClockConfig+0x134>)
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f7fe fe21 	bl	800809c <HAL_InitTick>
  return HAL_OK;
 800945a:	2000      	movs	r0, #0
 800945c:	e7ce      	b.n	80093fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800945e:	6813      	ldr	r3, [r2, #0]
 8009460:	f023 0307 	bic.w	r3, r3, #7
 8009464:	430b      	orrs	r3, r1
 8009466:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009468:	6813      	ldr	r3, [r2, #0]
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	428b      	cmp	r3, r1
 8009470:	d1c3      	bne.n	80093fa <HAL_RCC_ClockConfig+0xa>
 8009472:	e7cb      	b.n	800940c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009474:	4b28      	ldr	r3, [pc, #160]	@ (8009518 <HAL_RCC_ClockConfig+0x128>)
 8009476:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800947a:	bf1e      	ittt	ne
 800947c:	685a      	ldrne	r2, [r3, #4]
 800947e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8009482:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009484:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009486:	bf42      	ittt	mi
 8009488:	685a      	ldrmi	r2, [r3, #4]
 800948a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800948e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	68a0      	ldr	r0, [r4, #8]
 8009494:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009498:	4302      	orrs	r2, r0
 800949a:	605a      	str	r2, [r3, #4]
 800949c:	e7b9      	b.n	8009412 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800949e:	6862      	ldr	r2, [r4, #4]
 80094a0:	4e1d      	ldr	r6, [pc, #116]	@ (8009518 <HAL_RCC_ClockConfig+0x128>)
 80094a2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094a4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094a6:	d11a      	bne.n	80094de <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094a8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094ac:	d0a5      	beq.n	80093fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ae:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094b0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	4313      	orrs	r3, r2
 80094ba:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80094bc:	f7fe fe30 	bl	8008120 <HAL_GetTick>
 80094c0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094c2:	6873      	ldr	r3, [r6, #4]
 80094c4:	6862      	ldr	r2, [r4, #4]
 80094c6:	f003 030c 	and.w	r3, r3, #12
 80094ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80094ce:	d0a2      	beq.n	8009416 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094d0:	f7fe fe26 	bl	8008120 <HAL_GetTick>
 80094d4:	1bc0      	subs	r0, r0, r7
 80094d6:	4540      	cmp	r0, r8
 80094d8:	d9f3      	bls.n	80094c2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80094da:	2003      	movs	r0, #3
 80094dc:	e78e      	b.n	80093fc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094de:	2a02      	cmp	r2, #2
 80094e0:	d102      	bne.n	80094e8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094e2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80094e6:	e7e1      	b.n	80094ac <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e8:	f013 0f02 	tst.w	r3, #2
 80094ec:	e7de      	b.n	80094ac <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	f023 0307 	bic.w	r3, r3, #7
 80094f4:	432b      	orrs	r3, r5
 80094f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094f8:	6813      	ldr	r3, [r2, #0]
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	42ab      	cmp	r3, r5
 8009500:	f47f af7b 	bne.w	80093fa <HAL_RCC_ClockConfig+0xa>
 8009504:	e78d      	b.n	8009422 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009506:	686b      	ldr	r3, [r5, #4]
 8009508:	68e1      	ldr	r1, [r4, #12]
 800950a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800950e:	430b      	orrs	r3, r1
 8009510:	606b      	str	r3, [r5, #4]
 8009512:	e78b      	b.n	800942c <HAL_RCC_ClockConfig+0x3c>
 8009514:	40022000 	.word	0x40022000
 8009518:	40021000 	.word	0x40021000
 800951c:	0800dbb8 	.word	0x0800dbb8
 8009520:	20000004 	.word	0x20000004
 8009524:	2000000c 	.word	0x2000000c

08009528 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009528:	4b04      	ldr	r3, [pc, #16]	@ (800953c <HAL_RCC_GetPCLK1Freq+0x14>)
 800952a:	4a05      	ldr	r2, [pc, #20]	@ (8009540 <HAL_RCC_GetPCLK1Freq+0x18>)
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009532:	5cd3      	ldrb	r3, [r2, r3]
 8009534:	4a03      	ldr	r2, [pc, #12]	@ (8009544 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009536:	6810      	ldr	r0, [r2, #0]
}
 8009538:	40d8      	lsrs	r0, r3
 800953a:	4770      	bx	lr
 800953c:	40021000 	.word	0x40021000
 8009540:	0800dbb0 	.word	0x0800dbb0
 8009544:	20000004 	.word	0x20000004

08009548 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009548:	4b04      	ldr	r3, [pc, #16]	@ (800955c <HAL_RCC_GetPCLK2Freq+0x14>)
 800954a:	4a05      	ldr	r2, [pc, #20]	@ (8009560 <HAL_RCC_GetPCLK2Freq+0x18>)
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009552:	5cd3      	ldrb	r3, [r2, r3]
 8009554:	4a03      	ldr	r2, [pc, #12]	@ (8009564 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009556:	6810      	ldr	r0, [r2, #0]
}
 8009558:	40d8      	lsrs	r0, r3
 800955a:	4770      	bx	lr
 800955c:	40021000 	.word	0x40021000
 8009560:	0800dbb0 	.word	0x0800dbb0
 8009564:	20000004 	.word	0x20000004

08009568 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009568:	6803      	ldr	r3, [r0, #0]
{
 800956a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800956e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009570:	07d8      	lsls	r0, r3, #31
 8009572:	d521      	bpl.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009574:	4c36      	ldr	r4, [pc, #216]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009576:	69e3      	ldr	r3, [r4, #28]
 8009578:	00d9      	lsls	r1, r3, #3
 800957a:	d42b      	bmi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800957c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800957e:	69e3      	ldr	r3, [r4, #28]
 8009580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009584:	61e3      	str	r3, [r4, #28]
 8009586:	69e3      	ldr	r3, [r4, #28]
 8009588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009590:	4f30      	ldr	r7, [pc, #192]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	05da      	lsls	r2, r3, #23
 8009596:	d51f      	bpl.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009598:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800959a:	686a      	ldr	r2, [r5, #4]
 800959c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80095a0:	d12e      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a2:	6a23      	ldr	r3, [r4, #32]
 80095a4:	686a      	ldr	r2, [r5, #4]
 80095a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095aa:	4313      	orrs	r3, r2
 80095ac:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80095ae:	b11e      	cbz	r6, 80095b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095b0:	69e3      	ldr	r3, [r4, #28]
 80095b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095b6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095b8:	682a      	ldr	r2, [r5, #0]
 80095ba:	0791      	lsls	r1, r2, #30
 80095bc:	d506      	bpl.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095be:	4924      	ldr	r1, [pc, #144]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80095c0:	68a8      	ldr	r0, [r5, #8]
 80095c2:	684b      	ldr	r3, [r1, #4]
 80095c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80095c8:	4303      	orrs	r3, r0
 80095ca:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095cc:	06d3      	lsls	r3, r2, #27
 80095ce:	d436      	bmi.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80095d0:	2000      	movs	r0, #0
 80095d2:	e012      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 80095d4:	2600      	movs	r6, #0
 80095d6:	e7db      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095de:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80095e0:	f7fe fd9e 	bl	8008120 <HAL_GetTick>
 80095e4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	05db      	lsls	r3, r3, #23
 80095ea:	d4d5      	bmi.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095ec:	f7fe fd98 	bl	8008120 <HAL_GetTick>
 80095f0:	eba0 0008 	sub.w	r0, r0, r8
 80095f4:	2864      	cmp	r0, #100	@ 0x64
 80095f6:	d9f6      	bls.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80095f8:	2003      	movs	r0, #3
}
 80095fa:	b002      	add	sp, #8
 80095fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009600:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8009604:	429a      	cmp	r2, r3
 8009606:	d0cc      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8009608:	2001      	movs	r0, #1
 800960a:	4a13      	ldr	r2, [pc, #76]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800960c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800960e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009612:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009614:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009618:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800961a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 800961e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009620:	d5bf      	bpl.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8009622:	f7fe fd7d 	bl	8008120 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009626:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800962a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800962c:	6a23      	ldr	r3, [r4, #32]
 800962e:	0798      	lsls	r0, r3, #30
 8009630:	d4b7      	bmi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009632:	f7fe fd75 	bl	8008120 <HAL_GetTick>
 8009636:	1bc0      	subs	r0, r0, r7
 8009638:	4540      	cmp	r0, r8
 800963a:	d9f7      	bls.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800963c:	e7dc      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800963e:	4a04      	ldr	r2, [pc, #16]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009640:	68e9      	ldr	r1, [r5, #12]
 8009642:	6853      	ldr	r3, [r2, #4]
 8009644:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8009648:	430b      	orrs	r3, r1
 800964a:	6053      	str	r3, [r2, #4]
 800964c:	e7c0      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800964e:	bf00      	nop
 8009650:	40021000 	.word	0x40021000
 8009654:	40007000 	.word	0x40007000
 8009658:	42420000 	.word	0x42420000

0800965c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800965c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009660:	461c      	mov	r4, r3
 8009662:	4616      	mov	r6, r2
 8009664:	460f      	mov	r7, r1
 8009666:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009668:	f7fe fd5a 	bl	8008120 <HAL_GetTick>
 800966c:	4434      	add	r4, r6
 800966e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8009670:	f7fe fd56 	bl	8008120 <HAL_GetTick>
 8009674:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009676:	4b24      	ldr	r3, [pc, #144]	@ (8009708 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800967e:	4363      	muls	r3, r4
 8009680:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009682:	682a      	ldr	r2, [r5, #0]
 8009684:	6893      	ldr	r3, [r2, #8]
 8009686:	ea37 0303 	bics.w	r3, r7, r3
 800968a:	d001      	beq.n	8009690 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 800968c:	2000      	movs	r0, #0
 800968e:	e02e      	b.n	80096ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8009690:	1c73      	adds	r3, r6, #1
 8009692:	d0f7      	beq.n	8009684 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009694:	f7fe fd44 	bl	8008120 <HAL_GetTick>
 8009698:	eba0 0008 	sub.w	r0, r0, r8
 800969c:	42a0      	cmp	r0, r4
 800969e:	d329      	bcc.n	80096f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096a8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096aa:	686a      	ldr	r2, [r5, #4]
 80096ac:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80096b0:	d10a      	bne.n	80096c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80096b2:	68aa      	ldr	r2, [r5, #8]
 80096b4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80096b8:	d002      	beq.n	80096c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096ba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80096be:	d103      	bne.n	80096c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096c6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096c8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80096ca:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80096ce:	d107      	bne.n	80096e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096de:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80096e0:	2301      	movs	r3, #1
 80096e2:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80096e6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80096e8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80096ea:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
}
 80096ee:	b002      	add	sp, #8
 80096f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 80096f4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80096f6:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80096f8:	2a00      	cmp	r2, #0
      count--;
 80096fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80096fe:	bf08      	it	eq
 8009700:	4614      	moveq	r4, r2
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	e7bd      	b.n	8009682 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8009706:	bf00      	nop
 8009708:	20000004 	.word	0x20000004

0800970c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800970c:	b510      	push	{r4, lr}
 800970e:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009710:	460a      	mov	r2, r1
 8009712:	2180      	movs	r1, #128	@ 0x80
{
 8009714:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009716:	f7ff ffa1 	bl	800965c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800971a:	b120      	cbz	r0, 8009726 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800971c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800971e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009720:	f043 0320 	orr.w	r3, r3, #32
 8009724:	6563      	str	r3, [r4, #84]	@ 0x54
  }
  return HAL_OK;
}
 8009726:	bd10      	pop	{r4, pc}

08009728 <HAL_SPI_Init>:
{
 8009728:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800972a:	4604      	mov	r4, r0
 800972c:	2800      	cmp	r0, #0
 800972e:	d051      	beq.n	80097d4 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009730:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d14a      	bne.n	80097cc <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009736:	6842      	ldr	r2, [r0, #4]
 8009738:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800973c:	d000      	beq.n	8009740 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800973e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009740:	2300      	movs	r3, #0
 8009742:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009744:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8009748:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800974c:	b923      	cbnz	r3, 8009758 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800974e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8009750:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8009754:	f7fe fb1c 	bl	8007d90 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009758:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800975a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800975c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8009760:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009762:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8009764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009768:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800976a:	6863      	ldr	r3, [r4, #4]
 800976c:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8009770:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8009774:	4303      	orrs	r3, r0
 8009776:	68e0      	ldr	r0, [r4, #12]
 8009778:	69a1      	ldr	r1, [r4, #24]
 800977a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800977e:	4303      	orrs	r3, r0
 8009780:	6920      	ldr	r0, [r4, #16]
 8009782:	f000 0002 	and.w	r0, r0, #2
 8009786:	4303      	orrs	r3, r0
 8009788:	6960      	ldr	r0, [r4, #20]
 800978a:	f000 0001 	and.w	r0, r0, #1
 800978e:	4303      	orrs	r3, r0
 8009790:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8009794:	4303      	orrs	r3, r0
 8009796:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009798:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800979a:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800979e:	4303      	orrs	r3, r0
 80097a0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80097a2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097a6:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80097aa:	4303      	orrs	r3, r0
 80097ac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80097ae:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80097b2:	4303      	orrs	r3, r0
 80097b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80097b6:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097b8:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097ba:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097c0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80097c2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097c4:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097c6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80097ca:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097cc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097d2:	e7b5      	b.n	8009740 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80097d4:	2001      	movs	r0, #1
 80097d6:	e7f8      	b.n	80097ca <HAL_SPI_Init+0xa2>

080097d8 <HAL_SPI_Transmit>:
{
 80097d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80097de:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80097e2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80097e4:	2b01      	cmp	r3, #1
{
 80097e6:	460d      	mov	r5, r1
 80097e8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80097ea:	f000 80a6 	beq.w	800993a <HAL_SPI_Transmit+0x162>
 80097ee:	2301      	movs	r3, #1
 80097f0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80097f4:	f7fe fc94 	bl	8008120 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80097f8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80097fc:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80097fe:	2b01      	cmp	r3, #1
 8009800:	fa5f f983 	uxtb.w	r9, r3
 8009804:	f040 8096 	bne.w	8009934 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8009808:	2d00      	cmp	r5, #0
 800980a:	d067      	beq.n	80098dc <HAL_SPI_Transmit+0x104>
 800980c:	f1b8 0f00 	cmp.w	r8, #0
 8009810:	d064      	beq.n	80098dc <HAL_SPI_Transmit+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009812:	2303      	movs	r3, #3
 8009814:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009818:	2300      	movs	r3, #0
 800981a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800981c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8009820:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009824:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009826:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009828:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800982a:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800982c:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800982e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009832:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009834:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009838:	d107      	bne.n	800984a <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 800983a:	6833      	ldr	r3, [r6, #0]
 800983c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009840:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8009842:	6833      	ldr	r3, [r6, #0]
 8009844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009848:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800984a:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800984c:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800984e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8009850:	bf5e      	ittt	pl
 8009852:	6833      	ldrpl	r3, [r6, #0]
 8009854:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8009858:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009860:	d143      	bne.n	80098ea <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009862:	b112      	cbz	r2, 800986a <HAL_SPI_Transmit+0x92>
 8009864:	f1b8 0f01 	cmp.w	r8, #1
 8009868:	d107      	bne.n	800987a <HAL_SPI_Transmit+0xa2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800986a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800986e:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009870:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8009872:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009874:	3b01      	subs	r3, #1
 8009876:	b29b      	uxth	r3, r3
 8009878:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800987a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800987c:	b29b      	uxth	r3, r3
 800987e:	b9b3      	cbnz	r3, 80098ae <HAL_SPI_Transmit+0xd6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009880:	4652      	mov	r2, sl
 8009882:	4639      	mov	r1, r7
 8009884:	4620      	mov	r0, r4
 8009886:	f7ff ff41 	bl	800970c <SPI_EndRxTxTransaction>
 800988a:	2800      	cmp	r0, #0
 800988c:	d14f      	bne.n	800992e <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	b933      	cbnz	r3, 80098a0 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	68da      	ldr	r2, [r3, #12]
 8009898:	9201      	str	r2, [sp, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80098a2:	b9db      	cbnz	r3, 80098dc <HAL_SPI_Transmit+0x104>
    hspi->State = HAL_SPI_STATE_READY;
 80098a4:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098a6:	4699      	mov	r9, r3
    hspi->State = HAL_SPI_STATE_READY;
 80098a8:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 80098ac:	e016      	b.n	80098dc <HAL_SPI_Transmit+0x104>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	6893      	ldr	r3, [r2, #8]
 80098b2:	0798      	lsls	r0, r3, #30
 80098b4:	d505      	bpl.n	80098c2 <HAL_SPI_Transmit+0xea>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098b8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80098bc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098be:	6323      	str	r3, [r4, #48]	@ 0x30
 80098c0:	e7d7      	b.n	8009872 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098c2:	f7fe fc2d 	bl	8008120 <HAL_GetTick>
 80098c6:	eba0 000a 	sub.w	r0, r0, sl
 80098ca:	42b8      	cmp	r0, r7
 80098cc:	d3d5      	bcc.n	800987a <HAL_SPI_Transmit+0xa2>
 80098ce:	1c79      	adds	r1, r7, #1
 80098d0:	d0d3      	beq.n	800987a <HAL_SPI_Transmit+0xa2>
          hspi->State = HAL_SPI_STATE_READY;
 80098d2:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 80098d4:	f04f 0903 	mov.w	r9, #3
          hspi->State = HAL_SPI_STATE_READY;
 80098d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80098dc:	2300      	movs	r3, #0
 80098de:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80098e2:	4648      	mov	r0, r9
 80098e4:	b002      	add	sp, #8
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098ea:	b112      	cbz	r2, 80098f2 <HAL_SPI_Transmit+0x11a>
 80098ec:	f1b8 0f01 	cmp.w	r8, #1
 80098f0:	d108      	bne.n	8009904 <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098f2:	782b      	ldrb	r3, [r5, #0]
 80098f4:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80098f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098f8:	3301      	adds	r3, #1
 80098fa:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80098fc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80098fe:	3b01      	subs	r3, #1
 8009900:	b29b      	uxth	r3, r3
 8009902:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8009904:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d0b9      	beq.n	8009880 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	0792      	lsls	r2, r2, #30
 8009912:	d503      	bpl.n	800991c <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009914:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009916:	7812      	ldrb	r2, [r2, #0]
 8009918:	731a      	strb	r2, [r3, #12]
 800991a:	e7ec      	b.n	80098f6 <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800991c:	f7fe fc00 	bl	8008120 <HAL_GetTick>
 8009920:	eba0 000a 	sub.w	r0, r0, sl
 8009924:	42b8      	cmp	r0, r7
 8009926:	d3ed      	bcc.n	8009904 <HAL_SPI_Transmit+0x12c>
 8009928:	1c7b      	adds	r3, r7, #1
 800992a:	d0eb      	beq.n	8009904 <HAL_SPI_Transmit+0x12c>
 800992c:	e7d1      	b.n	80098d2 <HAL_SPI_Transmit+0xfa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800992e:	2320      	movs	r3, #32
 8009930:	6563      	str	r3, [r4, #84]	@ 0x54
 8009932:	e7ac      	b.n	800988e <HAL_SPI_Transmit+0xb6>
    errorcode = HAL_BUSY;
 8009934:	f04f 0902 	mov.w	r9, #2
 8009938:	e7d0      	b.n	80098dc <HAL_SPI_Transmit+0x104>
  __HAL_LOCK(hspi);
 800993a:	f04f 0902 	mov.w	r9, #2
 800993e:	e7d0      	b.n	80098e2 <HAL_SPI_Transmit+0x10a>

08009940 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009940:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009942:	6a02      	ldr	r2, [r0, #32]
{
 8009944:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009946:	f022 0201 	bic.w	r2, r2, #1
 800994a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800994c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800994e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009950:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009952:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009956:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009958:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800995a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800995e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009960:	4d0a      	ldr	r5, [pc, #40]	@ (800998c <TIM_OC1_SetConfig+0x4c>)
 8009962:	42a8      	cmp	r0, r5
 8009964:	d10b      	bne.n	800997e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009966:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009968:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800996c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800996e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009972:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8009976:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8009978:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800997c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800997e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009980:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009982:	684a      	ldr	r2, [r1, #4]
 8009984:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009986:	6203      	str	r3, [r0, #32]
}
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	bf00      	nop
 800998c:	40012c00 	.word	0x40012c00

08009990 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009990:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009992:	6a02      	ldr	r2, [r0, #32]
{
 8009994:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800999a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800999c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800999e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099a2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80099a6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099a8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80099aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099b2:	4d0b      	ldr	r5, [pc, #44]	@ (80099e0 <TIM_OC3_SetConfig+0x50>)
 80099b4:	42a8      	cmp	r0, r5
 80099b6:	d10d      	bne.n	80099d4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099b8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099c2:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099c6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80099ca:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80099cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099d0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099d6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099d8:	684a      	ldr	r2, [r1, #4]
 80099da:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099dc:	6203      	str	r3, [r0, #32]
}
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	40012c00 	.word	0x40012c00

080099e4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e6:	6a02      	ldr	r2, [r0, #32]
{
 80099e8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099ee:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099f2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099f6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8009a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a08:	4d06      	ldr	r5, [pc, #24]	@ (8009a24 <TIM_OC4_SetConfig+0x40>)
 8009a0a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a0c:	bf02      	ittt	eq
 8009a0e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a10:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a14:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a1a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a1c:	684a      	ldr	r2, [r1, #4]
 8009a1e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a20:	6203      	str	r3, [r0, #32]
}
 8009a22:	bd30      	pop	{r4, r5, pc}
 8009a24:	40012c00 	.word	0x40012c00

08009a28 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009a28:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d120      	bne.n	8009a72 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009a30:	2302      	movs	r3, #2
 8009a32:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a36:	6803      	ldr	r3, [r0, #0]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a40:	4a0d      	ldr	r2, [pc, #52]	@ (8009a78 <HAL_TIM_Base_Start_IT+0x50>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00a      	beq.n	8009a5c <HAL_TIM_Base_Start_IT+0x34>
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d007      	beq.n	8009a5c <HAL_TIM_Base_Start_IT+0x34>
 8009a4c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <HAL_TIM_Base_Start_IT+0x34>
 8009a54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d104      	bne.n	8009a66 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a5c:	689a      	ldr	r2, [r3, #8]
 8009a5e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a62:	2a06      	cmp	r2, #6
 8009a64:	d003      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009a6e:	2000      	movs	r0, #0
 8009a70:	4770      	bx	lr
    return HAL_ERROR;
 8009a72:	2001      	movs	r0, #1
}
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40012c00 	.word	0x40012c00

08009a7c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8009a7c:	4770      	bx	lr

08009a7e <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8009a7e:	4770      	bx	lr

08009a80 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8009a80:	4770      	bx	lr

08009a82 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8009a82:	4770      	bx	lr

08009a84 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8009a84:	4770      	bx	lr

08009a86 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a86:	6803      	ldr	r3, [r0, #0]
{
 8009a88:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a8a:	691a      	ldr	r2, [r3, #16]
{
 8009a8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a8e:	0791      	lsls	r1, r2, #30
 8009a90:	d50e      	bpl.n	8009ab0 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	0792      	lsls	r2, r2, #30
 8009a96:	d50b      	bpl.n	8009ab0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a98:	f06f 0202 	mvn.w	r2, #2
 8009a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	079b      	lsls	r3, r3, #30
 8009aa6:	d077      	beq.n	8009b98 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8009aa8:	f7ff ffea 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aac:	2300      	movs	r3, #0
 8009aae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	0750      	lsls	r0, r2, #29
 8009ab6:	d510      	bpl.n	8009ada <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	0751      	lsls	r1, r2, #29
 8009abc:	d50d      	bpl.n	8009ada <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009abe:	f06f 0204 	mvn.w	r2, #4
 8009ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ac8:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009acc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009ad0:	d068      	beq.n	8009ba4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad2:	f7ff ffd5 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	0712      	lsls	r2, r2, #28
 8009ae0:	d50f      	bpl.n	8009b02 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	0710      	lsls	r0, r2, #28
 8009ae6:	d50c      	bpl.n	8009b02 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ae8:	f06f 0208 	mvn.w	r2, #8
 8009aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aee:	2204      	movs	r2, #4
 8009af0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009af2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009af4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009af6:	0799      	lsls	r1, r3, #30
 8009af8:	d05a      	beq.n	8009bb0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009afa:	f7ff ffc1 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009afe:	2300      	movs	r3, #0
 8009b00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	06d2      	lsls	r2, r2, #27
 8009b08:	d510      	bpl.n	8009b2c <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	06d0      	lsls	r0, r2, #27
 8009b0e:	d50d      	bpl.n	8009b2c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b10:	f06f 0210 	mvn.w	r2, #16
 8009b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b16:	2208      	movs	r2, #8
 8009b18:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b1a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009b1c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b1e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009b22:	d04b      	beq.n	8009bbc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b24:	f7ff ffac 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	07d1      	lsls	r1, r2, #31
 8009b32:	d508      	bpl.n	8009b46 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	07d2      	lsls	r2, r2, #31
 8009b38:	d505      	bpl.n	8009b46 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b3a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b40:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b42:	f7fd fc3f 	bl	80073c4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	0610      	lsls	r0, r2, #24
 8009b4c:	d508      	bpl.n	8009b60 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	0611      	lsls	r1, r2, #24
 8009b52:	d505      	bpl.n	8009b60 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009b58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009b5c:	f000 fa7b 	bl	800a056 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	0652      	lsls	r2, r2, #25
 8009b66:	d508      	bpl.n	8009b7a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	0650      	lsls	r0, r2, #25
 8009b6c:	d505      	bpl.n	8009b7a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8009b72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009b76:	f7ff ff85 	bl	8009a84 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	691a      	ldr	r2, [r3, #16]
 8009b7e:	0691      	lsls	r1, r2, #26
 8009b80:	d522      	bpl.n	8009bc8 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	0692      	lsls	r2, r2, #26
 8009b86:	d51f      	bpl.n	8009bc8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b88:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009b8c:	4620      	mov	r0, r4
}
 8009b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009b94:	f000 ba5e 	b.w	800a054 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b98:	f7ff ff71 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f7ff ff70 	bl	8009a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ba2:	e783      	b.n	8009aac <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba4:	f7ff ff6b 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f7ff ff6a 	bl	8009a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bae:	e792      	b.n	8009ad6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb0:	f7ff ff65 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f7ff ff64 	bl	8009a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bba:	e7a0      	b.n	8009afe <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bbc:	f7ff ff5f 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff ff5e 	bl	8009a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bc6:	e7af      	b.n	8009b28 <HAL_TIM_IRQHandler+0xa2>
}
 8009bc8:	bd10      	pop	{r4, pc}
	...

08009bcc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8009c38 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8009bce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bd0:	4290      	cmp	r0, r2
 8009bd2:	d00a      	beq.n	8009bea <TIM_Base_SetConfig+0x1e>
 8009bd4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009bd8:	d007      	beq.n	8009bea <TIM_Base_SetConfig+0x1e>
 8009bda:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009bde:	4290      	cmp	r0, r2
 8009be0:	d003      	beq.n	8009bea <TIM_Base_SetConfig+0x1e>
 8009be2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009be6:	4290      	cmp	r0, r2
 8009be8:	d115      	bne.n	8009c16 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8009bea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8009bf0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bf2:	4a11      	ldr	r2, [pc, #68]	@ (8009c38 <TIM_Base_SetConfig+0x6c>)
 8009bf4:	4290      	cmp	r0, r2
 8009bf6:	d00a      	beq.n	8009c0e <TIM_Base_SetConfig+0x42>
 8009bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009bfc:	d007      	beq.n	8009c0e <TIM_Base_SetConfig+0x42>
 8009bfe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009c02:	4290      	cmp	r0, r2
 8009c04:	d003      	beq.n	8009c0e <TIM_Base_SetConfig+0x42>
 8009c06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009c0a:	4290      	cmp	r0, r2
 8009c0c:	d103      	bne.n	8009c16 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c0e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c16:	694a      	ldr	r2, [r1, #20]
 8009c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009c1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c20:	688b      	ldr	r3, [r1, #8]
 8009c22:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009c24:	680b      	ldr	r3, [r1, #0]
 8009c26:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c28:	4b03      	ldr	r3, [pc, #12]	@ (8009c38 <TIM_Base_SetConfig+0x6c>)
 8009c2a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8009c2c:	bf04      	itt	eq
 8009c2e:	690b      	ldreq	r3, [r1, #16]
 8009c30:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009c32:	2301      	movs	r3, #1
 8009c34:	6143      	str	r3, [r0, #20]
}
 8009c36:	4770      	bx	lr
 8009c38:	40012c00 	.word	0x40012c00

08009c3c <HAL_TIM_Base_Init>:
{
 8009c3c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009c3e:	4604      	mov	r4, r0
 8009c40:	b330      	cbz	r0, 8009c90 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009c42:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009c46:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009c4a:	b91b      	cbnz	r3, 8009c54 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009c4c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009c50:	f7fe f8ce 	bl	8007df0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009c54:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c56:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c5c:	1d21      	adds	r1, r4, #4
 8009c5e:	f7ff ffb5 	bl	8009bcc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c62:	2301      	movs	r3, #1
  return HAL_OK;
 8009c64:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c66:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c6a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8009c6e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8009c72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8009c76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c82:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009c86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009c8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8009c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009c90:	2001      	movs	r0, #1
 8009c92:	e7fc      	b.n	8009c8e <HAL_TIM_Base_Init+0x52>

08009c94 <HAL_TIM_PWM_Init>:
{
 8009c94:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009c96:	4604      	mov	r4, r0
 8009c98:	b330      	cbz	r0, 8009ce8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009c9a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009c9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009ca2:	b91b      	cbnz	r3, 8009cac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009ca4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009ca8:	f7ff fee8 	bl	8009a7c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cae:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb4:	1d21      	adds	r1, r4, #4
 8009cb6:	f7ff ff89 	bl	8009bcc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cba:	2301      	movs	r3, #1
  return HAL_OK;
 8009cbc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cbe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8009cc6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8009cca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8009cce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cda:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009cde:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009ce2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8009ce6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009ce8:	2001      	movs	r0, #1
 8009cea:	e7fc      	b.n	8009ce6 <HAL_TIM_PWM_Init+0x52>

08009cec <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8009cec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cee:	6a02      	ldr	r2, [r0, #32]
{
 8009cf0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cf2:	f022 0210 	bic.w	r2, r2, #16
 8009cf6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009cf8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009cfa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cfc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cfe:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8009d08:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d10:	4d0b      	ldr	r5, [pc, #44]	@ (8009d40 <TIM_OC2_SetConfig+0x54>)
 8009d12:	42a8      	cmp	r0, r5
 8009d14:	d10d      	bne.n	8009d32 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d16:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d20:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d24:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8009d28:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d2e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8009d32:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009d34:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009d36:	684a      	ldr	r2, [r1, #4]
 8009d38:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8009d3a:	6203      	str	r3, [r0, #32]
}
 8009d3c:	bd70      	pop	{r4, r5, r6, pc}
 8009d3e:	bf00      	nop
 8009d40:	40012c00 	.word	0x40012c00

08009d44 <HAL_TIM_PWM_ConfigChannel>:
{
 8009d44:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009d46:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009d4a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d04f      	beq.n	8009df0 <HAL_TIM_PWM_ConfigChannel+0xac>
 8009d50:	2001      	movs	r0, #1
  switch (Channel)
 8009d52:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8009d54:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8009d58:	d03a      	beq.n	8009dd0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8009d5a:	d806      	bhi.n	8009d6a <HAL_TIM_PWM_ConfigChannel+0x26>
 8009d5c:	b1ba      	cbz	r2, 8009d8e <HAL_TIM_PWM_ConfigChannel+0x4a>
 8009d5e:	2a04      	cmp	r2, #4
 8009d60:	d026      	beq.n	8009db0 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 8009d62:	2300      	movs	r3, #0
 8009d64:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8009d68:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8009d6a:	2a0c      	cmp	r2, #12
 8009d6c:	d1f9      	bne.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d6e:	6820      	ldr	r0, [r4, #0]
 8009d70:	f7ff fe38 	bl	80099e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d74:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d76:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009d7c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d7e:	69c3      	ldr	r3, [r0, #28]
 8009d80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d84:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d86:	69c3      	ldr	r3, [r0, #28]
 8009d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d8c:	e02e      	b.n	8009dec <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	f7ff fdd6 	bl	8009940 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d94:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d96:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d98:	f043 0308 	orr.w	r3, r3, #8
 8009d9c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d9e:	6983      	ldr	r3, [r0, #24]
 8009da0:	f023 0304 	bic.w	r3, r3, #4
 8009da4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009da6:	6983      	ldr	r3, [r0, #24]
 8009da8:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009daa:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7d8      	b.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009db0:	6820      	ldr	r0, [r4, #0]
 8009db2:	f7ff ff9b 	bl	8009cec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009db8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009dbe:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc0:	6983      	ldr	r3, [r0, #24]
 8009dc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009dc6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dc8:	6983      	ldr	r3, [r0, #24]
 8009dca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009dce:	e7ec      	b.n	8009daa <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dd0:	6820      	ldr	r0, [r4, #0]
 8009dd2:	f7ff fddd 	bl	8009990 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dd6:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dd8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dda:	f043 0308 	orr.w	r3, r3, #8
 8009dde:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009de0:	69c3      	ldr	r3, [r0, #28]
 8009de2:	f023 0304 	bic.w	r3, r3, #4
 8009de6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009de8:	69c3      	ldr	r3, [r0, #28]
 8009dea:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dec:	61c3      	str	r3, [r0, #28]
      break;
 8009dee:	e7dd      	b.n	8009dac <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 8009df0:	2002      	movs	r0, #2
 8009df2:	e7b9      	b.n	8009d68 <HAL_TIM_PWM_ConfigChannel+0x24>

08009df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009df4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009df6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009df8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dfa:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dfe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009e02:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e04:	6082      	str	r2, [r0, #8]
}
 8009e06:	bd10      	pop	{r4, pc}

08009e08 <HAL_TIM_ConfigClockSource>:
{
 8009e08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009e0a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009e0e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	f04f 0002 	mov.w	r0, #2
 8009e16:	f000 808e 	beq.w	8009f36 <HAL_TIM_ConfigClockSource+0x12e>
 8009e1a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009e20:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8009e22:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8009e26:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e2c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8009e30:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009e32:	680b      	ldr	r3, [r1, #0]
 8009e34:	2b60      	cmp	r3, #96	@ 0x60
 8009e36:	d04f      	beq.n	8009ed8 <HAL_TIM_ConfigClockSource+0xd0>
 8009e38:	d832      	bhi.n	8009ea0 <HAL_TIM_ConfigClockSource+0x98>
 8009e3a:	2b40      	cmp	r3, #64	@ 0x40
 8009e3c:	d064      	beq.n	8009f08 <HAL_TIM_ConfigClockSource+0x100>
 8009e3e:	d816      	bhi.n	8009e6e <HAL_TIM_ConfigClockSource+0x66>
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d00d      	beq.n	8009e60 <HAL_TIM_ConfigClockSource+0x58>
 8009e44:	d80a      	bhi.n	8009e5c <HAL_TIM_ConfigClockSource+0x54>
 8009e46:	f033 0110 	bics.w	r1, r3, #16
 8009e4a:	d009      	beq.n	8009e60 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009e52:	2300      	movs	r3, #0
 8009e54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8009e58:	4610      	mov	r0, r2
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8009e5c:	2b30      	cmp	r3, #48	@ 0x30
 8009e5e:	d1f5      	bne.n	8009e4c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8009e60:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e66:	4313      	orrs	r3, r2
 8009e68:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8009e6c:	e028      	b.n	8009ec0 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8009e6e:	2b50      	cmp	r3, #80	@ 0x50
 8009e70:	d1ec      	bne.n	8009e4c <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8009e72:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009e74:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009e76:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e78:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e7a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e84:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8009e86:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009e90:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8009e92:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009e94:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e9a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8009e9e:	e00f      	b.n	8009ec0 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8009ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ea4:	d00d      	beq.n	8009ec2 <HAL_TIM_ConfigClockSource+0xba>
 8009ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eaa:	d00c      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0xbe>
 8009eac:	2b70      	cmp	r3, #112	@ 0x70
 8009eae:	d1cd      	bne.n	8009e4c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8009eb0:	68cb      	ldr	r3, [r1, #12]
 8009eb2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8009eb6:	f7ff ff9d 	bl	8009df4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009eba:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009ec0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	e7c2      	b.n	8009e4c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8009ec6:	68cb      	ldr	r3, [r1, #12]
 8009ec8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8009ecc:	f7ff ff92 	bl	8009df4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ed0:	6883      	ldr	r3, [r0, #8]
 8009ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ed6:	e7f3      	b.n	8009ec0 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8009ed8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eda:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8009edc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ede:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8009ee2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ee4:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ee6:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ee8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eec:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ef0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ef4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8009ef8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009efa:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009efc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f02:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8009f06:	e7db      	b.n	8009ec0 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8009f08:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009f0a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009f0c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f10:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f14:	f023 0301 	bic.w	r3, r3, #1
 8009f18:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8009f1c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f22:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009f26:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8009f28:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009f2a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f30:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8009f34:	e7c4      	b.n	8009ec0 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8009f36:	4602      	mov	r2, r0
 8009f38:	e78e      	b.n	8009e58 <HAL_TIM_ConfigClockSource+0x50>

08009f3a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f3a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f3c:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f3e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f40:	f001 011f 	and.w	r1, r1, #31
 8009f44:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8009f46:	ea23 0304 	bic.w	r3, r3, r4
 8009f4a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f4c:	6a03      	ldr	r3, [r0, #32]
 8009f4e:	408a      	lsls	r2, r1
 8009f50:	431a      	orrs	r2, r3
 8009f52:	6202      	str	r2, [r0, #32]
}
 8009f54:	bd10      	pop	{r4, pc}
	...

08009f58 <HAL_TIM_OC_Start>:
{
 8009f58:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f5a:	b929      	cbnz	r1, 8009f68 <HAL_TIM_OC_Start+0x10>
 8009f5c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d01d      	beq.n	8009fa0 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 8009f64:	2001      	movs	r0, #1
 8009f66:	e02e      	b.n	8009fc6 <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f68:	2904      	cmp	r1, #4
 8009f6a:	d107      	bne.n	8009f7c <HAL_TIM_OC_Start+0x24>
 8009f6c:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d1f7      	bne.n	8009f64 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f74:	2302      	movs	r3, #2
 8009f76:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8009f7a:	e014      	b.n	8009fa6 <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f7c:	2908      	cmp	r1, #8
 8009f7e:	d107      	bne.n	8009f90 <HAL_TIM_OC_Start+0x38>
 8009f80:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d1ed      	bne.n	8009f64 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f88:	2302      	movs	r3, #2
 8009f8a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8009f8e:	e00a      	b.n	8009fa6 <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f90:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d1e5      	bne.n	8009f64 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f98:	2302      	movs	r3, #2
 8009f9a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8009f9e:	e002      	b.n	8009fa6 <HAL_TIM_OC_Start+0x4e>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fa6:	6800      	ldr	r0, [r0, #0]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f7ff ffc6 	bl	8009f3a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fae:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <HAL_TIM_OC_Start+0x94>)
 8009fb0:	4298      	cmp	r0, r3
 8009fb2:	d009      	beq.n	8009fc8 <HAL_TIM_OC_Start+0x70>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009fb8:	d10b      	bne.n	8009fd2 <HAL_TIM_OC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fba:	6883      	ldr	r3, [r0, #8]
 8009fbc:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc0:	2b06      	cmp	r3, #6
 8009fc2:	d10d      	bne.n	8009fe0 <HAL_TIM_OC_Start+0x88>
  return HAL_OK;
 8009fc4:	2000      	movs	r0, #0
}
 8009fc6:	bd08      	pop	{r3, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8009fc8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8009fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fce:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd0:	e7f3      	b.n	8009fba <HAL_TIM_OC_Start+0x62>
 8009fd2:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <HAL_TIM_OC_Start+0x98>)
 8009fd4:	4298      	cmp	r0, r3
 8009fd6:	d0f0      	beq.n	8009fba <HAL_TIM_OC_Start+0x62>
 8009fd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009fdc:	4298      	cmp	r0, r3
 8009fde:	d0ec      	beq.n	8009fba <HAL_TIM_OC_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8009fe0:	6803      	ldr	r3, [r0, #0]
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	6003      	str	r3, [r0, #0]
 8009fe8:	e7ec      	b.n	8009fc4 <HAL_TIM_OC_Start+0x6c>
 8009fea:	bf00      	nop
 8009fec:	40012c00 	.word	0x40012c00
 8009ff0:	40000400 	.word	0x40000400

08009ff4 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8009ff4:	f7ff bfb0 	b.w	8009f58 <HAL_TIM_OC_Start>

08009ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ff8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ffa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009ffe:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800a000:	2b01      	cmp	r3, #1
 800a002:	f04f 0002 	mov.w	r0, #2
 800a006:	d022      	beq.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a008:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a00a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800a00e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a010:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a012:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a016:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800a018:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a01a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a01c:	4c0c      	ldr	r4, [pc, #48]	@ (800a050 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800a01e:	42a3      	cmp	r3, r4
 800a020:	d00a      	beq.n	800a038 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800a022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a026:	d007      	beq.n	800a038 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800a028:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	d003      	beq.n	800a038 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800a030:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800a034:	42a3      	cmp	r3, r4
 800a036:	d104      	bne.n	800a042 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a038:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a03a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a03e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a040:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a042:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800a044:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a046:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800a04a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800a04e:	bd30      	pop	{r4, r5, pc}
 800a050:	40012c00 	.word	0x40012c00

0800a054 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800a054:	4770      	bx	lr

0800a056 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800a056:	4770      	bx	lr

0800a058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a058:	b510      	push	{r4, lr}
 800a05a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a05c:	6803      	ldr	r3, [r0, #0]
 800a05e:	68c1      	ldr	r1, [r0, #12]
 800a060:	691a      	ldr	r2, [r3, #16]
 800a062:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800a066:	430a      	orrs	r2, r1
 800a068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a06a:	6882      	ldr	r2, [r0, #8]
 800a06c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800a06e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a070:	4302      	orrs	r2, r0
 800a072:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800a074:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800a078:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a07c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800a07e:	430a      	orrs	r2, r1
 800a080:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a082:	695a      	ldr	r2, [r3, #20]
 800a084:	69a1      	ldr	r1, [r4, #24]
 800a086:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a08a:	430a      	orrs	r2, r1
 800a08c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a08e:	4a0e      	ldr	r2, [pc, #56]	@ (800a0c8 <UART_SetConfig+0x70>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d115      	bne.n	800a0c0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a094:	f7ff fa58 	bl	8009548 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a098:	2319      	movs	r3, #25
 800a09a:	4343      	muls	r3, r0
 800a09c:	6862      	ldr	r2, [r4, #4]
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	0092      	lsls	r2, r2, #2
 800a0a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0a6:	2264      	movs	r2, #100	@ 0x64
 800a0a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0ac:	fb02 3311 	mls	r3, r2, r1, r3
 800a0b0:	011b      	lsls	r3, r3, #4
 800a0b2:	3332      	adds	r3, #50	@ 0x32
 800a0b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800a0bc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800a0be:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800a0c0:	f7ff fa32 	bl	8009528 <HAL_RCC_GetPCLK1Freq>
 800a0c4:	e7e8      	b.n	800a098 <UART_SetConfig+0x40>
 800a0c6:	bf00      	nop
 800a0c8:	40013800 	.word	0x40013800

0800a0cc <HAL_UART_Init>:
{
 800a0cc:	b510      	push	{r4, lr}
  if (huart == NULL)
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	b348      	cbz	r0, 800a126 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a0d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a0d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a0da:	b91b      	cbnz	r3, 800a0e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800a0dc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800a0e0:	f7fd feec 	bl	8007ebc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800a0e4:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800a0e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a0e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800a0ec:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800a0ee:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800a0f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800a0f6:	f7ff ffaf 	bl	800a058 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0fa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a10c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a114:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a116:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a118:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a11a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a11e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a122:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800a124:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a126:	2001      	movs	r0, #1
 800a128:	e7fc      	b.n	800a124 <HAL_UART_Init+0x58>

0800a12a <_ZdlPvj>:
 800a12a:	f000 b811 	b.w	800a150 <_ZdlPv>

0800a12e <_Znwj>:
 800a12e:	2801      	cmp	r0, #1
 800a130:	bf38      	it	cc
 800a132:	2001      	movcc	r0, #1
 800a134:	b510      	push	{r4, lr}
 800a136:	4604      	mov	r4, r0
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 f81b 	bl	800a174 <malloc>
 800a13e:	b100      	cbz	r0, 800a142 <_Znwj+0x14>
 800a140:	bd10      	pop	{r4, pc}
 800a142:	f000 f807 	bl	800a154 <_ZSt15get_new_handlerv>
 800a146:	b908      	cbnz	r0, 800a14c <_Znwj+0x1e>
 800a148:	f000 f80c 	bl	800a164 <abort>
 800a14c:	4780      	blx	r0
 800a14e:	e7f3      	b.n	800a138 <_Znwj+0xa>

0800a150 <_ZdlPv>:
 800a150:	f000 b818 	b.w	800a184 <free>

0800a154 <_ZSt15get_new_handlerv>:
 800a154:	4b02      	ldr	r3, [pc, #8]	@ (800a160 <_ZSt15get_new_handlerv+0xc>)
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	f3bf 8f5b 	dmb	ish
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	20000438 	.word	0x20000438

0800a164 <abort>:
 800a164:	2006      	movs	r0, #6
 800a166:	b508      	push	{r3, lr}
 800a168:	f000 fe74 	bl	800ae54 <raise>
 800a16c:	2001      	movs	r0, #1
 800a16e:	f7fd ff1e 	bl	8007fae <_exit>
	...

0800a174 <malloc>:
 800a174:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <malloc+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f000 b82d 	b.w	800a1d8 <_malloc_r>
 800a17e:	bf00      	nop
 800a180:	2000001c 	.word	0x2000001c

0800a184 <free>:
 800a184:	4b02      	ldr	r3, [pc, #8]	@ (800a190 <free+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f001 bd6d 	b.w	800bc68 <_free_r>
 800a18e:	bf00      	nop
 800a190:	2000001c 	.word	0x2000001c

0800a194 <sbrk_aligned>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4e0f      	ldr	r6, [pc, #60]	@ (800a1d4 <sbrk_aligned+0x40>)
 800a198:	460c      	mov	r4, r1
 800a19a:	6831      	ldr	r1, [r6, #0]
 800a19c:	4605      	mov	r5, r0
 800a19e:	b911      	cbnz	r1, 800a1a6 <sbrk_aligned+0x12>
 800a1a0:	f000 feac 	bl	800aefc <_sbrk_r>
 800a1a4:	6030      	str	r0, [r6, #0]
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 fea7 	bl	800aefc <_sbrk_r>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d103      	bne.n	800a1ba <sbrk_aligned+0x26>
 800a1b2:	f04f 34ff 	mov.w	r4, #4294967295
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	1cc4      	adds	r4, r0, #3
 800a1bc:	f024 0403 	bic.w	r4, r4, #3
 800a1c0:	42a0      	cmp	r0, r4
 800a1c2:	d0f8      	beq.n	800a1b6 <sbrk_aligned+0x22>
 800a1c4:	1a21      	subs	r1, r4, r0
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 fe98 	bl	800aefc <_sbrk_r>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d1f2      	bne.n	800a1b6 <sbrk_aligned+0x22>
 800a1d0:	e7ef      	b.n	800a1b2 <sbrk_aligned+0x1e>
 800a1d2:	bf00      	nop
 800a1d4:	2000043c 	.word	0x2000043c

0800a1d8 <_malloc_r>:
 800a1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1dc:	1ccd      	adds	r5, r1, #3
 800a1de:	f025 0503 	bic.w	r5, r5, #3
 800a1e2:	3508      	adds	r5, #8
 800a1e4:	2d0c      	cmp	r5, #12
 800a1e6:	bf38      	it	cc
 800a1e8:	250c      	movcc	r5, #12
 800a1ea:	2d00      	cmp	r5, #0
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	db01      	blt.n	800a1f4 <_malloc_r+0x1c>
 800a1f0:	42a9      	cmp	r1, r5
 800a1f2:	d904      	bls.n	800a1fe <_malloc_r+0x26>
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	6033      	str	r3, [r6, #0]
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2d4 <_malloc_r+0xfc>
 800a202:	f000 f869 	bl	800a2d8 <__malloc_lock>
 800a206:	f8d8 3000 	ldr.w	r3, [r8]
 800a20a:	461c      	mov	r4, r3
 800a20c:	bb44      	cbnz	r4, 800a260 <_malloc_r+0x88>
 800a20e:	4629      	mov	r1, r5
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff ffbf 	bl	800a194 <sbrk_aligned>
 800a216:	1c43      	adds	r3, r0, #1
 800a218:	4604      	mov	r4, r0
 800a21a:	d158      	bne.n	800a2ce <_malloc_r+0xf6>
 800a21c:	f8d8 4000 	ldr.w	r4, [r8]
 800a220:	4627      	mov	r7, r4
 800a222:	2f00      	cmp	r7, #0
 800a224:	d143      	bne.n	800a2ae <_malloc_r+0xd6>
 800a226:	2c00      	cmp	r4, #0
 800a228:	d04b      	beq.n	800a2c2 <_malloc_r+0xea>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	4639      	mov	r1, r7
 800a22e:	4630      	mov	r0, r6
 800a230:	eb04 0903 	add.w	r9, r4, r3
 800a234:	f000 fe62 	bl	800aefc <_sbrk_r>
 800a238:	4581      	cmp	r9, r0
 800a23a:	d142      	bne.n	800a2c2 <_malloc_r+0xea>
 800a23c:	6821      	ldr	r1, [r4, #0]
 800a23e:	4630      	mov	r0, r6
 800a240:	1a6d      	subs	r5, r5, r1
 800a242:	4629      	mov	r1, r5
 800a244:	f7ff ffa6 	bl	800a194 <sbrk_aligned>
 800a248:	3001      	adds	r0, #1
 800a24a:	d03a      	beq.n	800a2c2 <_malloc_r+0xea>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	442b      	add	r3, r5
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	f8d8 3000 	ldr.w	r3, [r8]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	bb62      	cbnz	r2, 800a2b4 <_malloc_r+0xdc>
 800a25a:	f8c8 7000 	str.w	r7, [r8]
 800a25e:	e00f      	b.n	800a280 <_malloc_r+0xa8>
 800a260:	6822      	ldr	r2, [r4, #0]
 800a262:	1b52      	subs	r2, r2, r5
 800a264:	d420      	bmi.n	800a2a8 <_malloc_r+0xd0>
 800a266:	2a0b      	cmp	r2, #11
 800a268:	d917      	bls.n	800a29a <_malloc_r+0xc2>
 800a26a:	1961      	adds	r1, r4, r5
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	6025      	str	r5, [r4, #0]
 800a270:	bf18      	it	ne
 800a272:	6059      	strne	r1, [r3, #4]
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	bf08      	it	eq
 800a278:	f8c8 1000 	streq.w	r1, [r8]
 800a27c:	5162      	str	r2, [r4, r5]
 800a27e:	604b      	str	r3, [r1, #4]
 800a280:	4630      	mov	r0, r6
 800a282:	f000 f82f 	bl	800a2e4 <__malloc_unlock>
 800a286:	f104 000b 	add.w	r0, r4, #11
 800a28a:	1d23      	adds	r3, r4, #4
 800a28c:	f020 0007 	bic.w	r0, r0, #7
 800a290:	1ac2      	subs	r2, r0, r3
 800a292:	bf1c      	itt	ne
 800a294:	1a1b      	subne	r3, r3, r0
 800a296:	50a3      	strne	r3, [r4, r2]
 800a298:	e7af      	b.n	800a1fa <_malloc_r+0x22>
 800a29a:	6862      	ldr	r2, [r4, #4]
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	bf0c      	ite	eq
 800a2a0:	f8c8 2000 	streq.w	r2, [r8]
 800a2a4:	605a      	strne	r2, [r3, #4]
 800a2a6:	e7eb      	b.n	800a280 <_malloc_r+0xa8>
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	6864      	ldr	r4, [r4, #4]
 800a2ac:	e7ae      	b.n	800a20c <_malloc_r+0x34>
 800a2ae:	463c      	mov	r4, r7
 800a2b0:	687f      	ldr	r7, [r7, #4]
 800a2b2:	e7b6      	b.n	800a222 <_malloc_r+0x4a>
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	d1fb      	bne.n	800a2b4 <_malloc_r+0xdc>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	6053      	str	r3, [r2, #4]
 800a2c0:	e7de      	b.n	800a280 <_malloc_r+0xa8>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	6033      	str	r3, [r6, #0]
 800a2c8:	f000 f80c 	bl	800a2e4 <__malloc_unlock>
 800a2cc:	e794      	b.n	800a1f8 <_malloc_r+0x20>
 800a2ce:	6005      	str	r5, [r0, #0]
 800a2d0:	e7d6      	b.n	800a280 <_malloc_r+0xa8>
 800a2d2:	bf00      	nop
 800a2d4:	20000440 	.word	0x20000440

0800a2d8 <__malloc_lock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	@ (800a2e0 <__malloc_lock+0x8>)
 800a2da:	f000 be5c 	b.w	800af96 <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20000584 	.word	0x20000584

0800a2e4 <__malloc_unlock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	@ (800a2ec <__malloc_unlock+0x8>)
 800a2e6:	f000 be57 	b.w	800af98 <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20000584 	.word	0x20000584

0800a2f0 <__cvt>:
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f6:	461d      	mov	r5, r3
 800a2f8:	bfbb      	ittet	lt
 800a2fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a2fe:	461d      	movlt	r5, r3
 800a300:	2300      	movge	r3, #0
 800a302:	232d      	movlt	r3, #45	@ 0x2d
 800a304:	b088      	sub	sp, #32
 800a306:	4614      	mov	r4, r2
 800a308:	bfb8      	it	lt
 800a30a:	4614      	movlt	r4, r2
 800a30c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a30e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a310:	7013      	strb	r3, [r2, #0]
 800a312:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a314:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a318:	f023 0820 	bic.w	r8, r3, #32
 800a31c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a320:	d005      	beq.n	800a32e <__cvt+0x3e>
 800a322:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a326:	d100      	bne.n	800a32a <__cvt+0x3a>
 800a328:	3601      	adds	r6, #1
 800a32a:	2302      	movs	r3, #2
 800a32c:	e000      	b.n	800a330 <__cvt+0x40>
 800a32e:	2303      	movs	r3, #3
 800a330:	aa07      	add	r2, sp, #28
 800a332:	9204      	str	r2, [sp, #16]
 800a334:	aa06      	add	r2, sp, #24
 800a336:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a33a:	e9cd 3600 	strd	r3, r6, [sp]
 800a33e:	4622      	mov	r2, r4
 800a340:	462b      	mov	r3, r5
 800a342:	f000 fec9 	bl	800b0d8 <_dtoa_r>
 800a346:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a34a:	4607      	mov	r7, r0
 800a34c:	d119      	bne.n	800a382 <__cvt+0x92>
 800a34e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a350:	07db      	lsls	r3, r3, #31
 800a352:	d50e      	bpl.n	800a372 <__cvt+0x82>
 800a354:	eb00 0906 	add.w	r9, r0, r6
 800a358:	2200      	movs	r2, #0
 800a35a:	2300      	movs	r3, #0
 800a35c:	4620      	mov	r0, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	f7f6 fb22 	bl	80009a8 <__aeabi_dcmpeq>
 800a364:	b108      	cbz	r0, 800a36a <__cvt+0x7a>
 800a366:	f8cd 901c 	str.w	r9, [sp, #28]
 800a36a:	2230      	movs	r2, #48	@ 0x30
 800a36c:	9b07      	ldr	r3, [sp, #28]
 800a36e:	454b      	cmp	r3, r9
 800a370:	d31e      	bcc.n	800a3b0 <__cvt+0xc0>
 800a372:	4638      	mov	r0, r7
 800a374:	9b07      	ldr	r3, [sp, #28]
 800a376:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a378:	1bdb      	subs	r3, r3, r7
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	b008      	add	sp, #32
 800a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a382:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a386:	eb00 0906 	add.w	r9, r0, r6
 800a38a:	d1e5      	bne.n	800a358 <__cvt+0x68>
 800a38c:	7803      	ldrb	r3, [r0, #0]
 800a38e:	2b30      	cmp	r3, #48	@ 0x30
 800a390:	d10a      	bne.n	800a3a8 <__cvt+0xb8>
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	4620      	mov	r0, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	f7f6 fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800a39e:	b918      	cbnz	r0, 800a3a8 <__cvt+0xb8>
 800a3a0:	f1c6 0601 	rsb	r6, r6, #1
 800a3a4:	f8ca 6000 	str.w	r6, [sl]
 800a3a8:	f8da 3000 	ldr.w	r3, [sl]
 800a3ac:	4499      	add	r9, r3
 800a3ae:	e7d3      	b.n	800a358 <__cvt+0x68>
 800a3b0:	1c59      	adds	r1, r3, #1
 800a3b2:	9107      	str	r1, [sp, #28]
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e7d9      	b.n	800a36c <__cvt+0x7c>

0800a3b8 <__exponent>:
 800a3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	bfb6      	itet	lt
 800a3be:	232d      	movlt	r3, #45	@ 0x2d
 800a3c0:	232b      	movge	r3, #43	@ 0x2b
 800a3c2:	4249      	neglt	r1, r1
 800a3c4:	2909      	cmp	r1, #9
 800a3c6:	7002      	strb	r2, [r0, #0]
 800a3c8:	7043      	strb	r3, [r0, #1]
 800a3ca:	dd29      	ble.n	800a420 <__exponent+0x68>
 800a3cc:	f10d 0307 	add.w	r3, sp, #7
 800a3d0:	461d      	mov	r5, r3
 800a3d2:	270a      	movs	r7, #10
 800a3d4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a3d8:	461a      	mov	r2, r3
 800a3da:	fb07 1416 	mls	r4, r7, r6, r1
 800a3de:	3430      	adds	r4, #48	@ 0x30
 800a3e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	2c63      	cmp	r4, #99	@ 0x63
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ee:	dcf1      	bgt.n	800a3d4 <__exponent+0x1c>
 800a3f0:	3130      	adds	r1, #48	@ 0x30
 800a3f2:	1e94      	subs	r4, r2, #2
 800a3f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	1c41      	adds	r1, r0, #1
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	d30a      	bcc.n	800a416 <__exponent+0x5e>
 800a400:	f10d 0309 	add.w	r3, sp, #9
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	42ac      	cmp	r4, r5
 800a408:	bf88      	it	hi
 800a40a:	2300      	movhi	r3, #0
 800a40c:	3302      	adds	r3, #2
 800a40e:	4403      	add	r3, r0
 800a410:	1a18      	subs	r0, r3, r0
 800a412:	b003      	add	sp, #12
 800a414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a416:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a41a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a41e:	e7ed      	b.n	800a3fc <__exponent+0x44>
 800a420:	2330      	movs	r3, #48	@ 0x30
 800a422:	3130      	adds	r1, #48	@ 0x30
 800a424:	7083      	strb	r3, [r0, #2]
 800a426:	70c1      	strb	r1, [r0, #3]
 800a428:	1d03      	adds	r3, r0, #4
 800a42a:	e7f1      	b.n	800a410 <__exponent+0x58>

0800a42c <_printf_float>:
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	b091      	sub	sp, #68	@ 0x44
 800a432:	460c      	mov	r4, r1
 800a434:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a438:	4616      	mov	r6, r2
 800a43a:	461f      	mov	r7, r3
 800a43c:	4605      	mov	r5, r0
 800a43e:	f000 fd11 	bl	800ae64 <_localeconv_r>
 800a442:	6803      	ldr	r3, [r0, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	9308      	str	r3, [sp, #32]
 800a448:	f7f5 fe82 	bl	8000150 <strlen>
 800a44c:	2300      	movs	r3, #0
 800a44e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a450:	f8d8 3000 	ldr.w	r3, [r8]
 800a454:	9009      	str	r0, [sp, #36]	@ 0x24
 800a456:	3307      	adds	r3, #7
 800a458:	f023 0307 	bic.w	r3, r3, #7
 800a45c:	f103 0208 	add.w	r2, r3, #8
 800a460:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a464:	f8d4 b000 	ldr.w	fp, [r4]
 800a468:	f8c8 2000 	str.w	r2, [r8]
 800a46c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a470:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a474:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a476:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a47a:	f04f 32ff 	mov.w	r2, #4294967295
 800a47e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a482:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a486:	4b9c      	ldr	r3, [pc, #624]	@ (800a6f8 <_printf_float+0x2cc>)
 800a488:	f7f6 fac0 	bl	8000a0c <__aeabi_dcmpun>
 800a48c:	bb70      	cbnz	r0, 800a4ec <_printf_float+0xc0>
 800a48e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a492:	f04f 32ff 	mov.w	r2, #4294967295
 800a496:	4b98      	ldr	r3, [pc, #608]	@ (800a6f8 <_printf_float+0x2cc>)
 800a498:	f7f6 fa9a 	bl	80009d0 <__aeabi_dcmple>
 800a49c:	bb30      	cbnz	r0, 800a4ec <_printf_float+0xc0>
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f6 fa89 	bl	80009bc <__aeabi_dcmplt>
 800a4aa:	b110      	cbz	r0, 800a4b2 <_printf_float+0x86>
 800a4ac:	232d      	movs	r3, #45	@ 0x2d
 800a4ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4b2:	4a92      	ldr	r2, [pc, #584]	@ (800a6fc <_printf_float+0x2d0>)
 800a4b4:	4b92      	ldr	r3, [pc, #584]	@ (800a700 <_printf_float+0x2d4>)
 800a4b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a4ba:	bf94      	ite	ls
 800a4bc:	4690      	movls	r8, r2
 800a4be:	4698      	movhi	r8, r3
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	f02b 0304 	bic.w	r3, fp, #4
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	4633      	mov	r3, r6
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	9700      	str	r7, [sp, #0]
 800a4d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a4d8:	f000 f9d4 	bl	800a884 <_printf_common>
 800a4dc:	3001      	adds	r0, #1
 800a4de:	f040 8090 	bne.w	800a602 <_printf_float+0x1d6>
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e6:	b011      	add	sp, #68	@ 0x44
 800a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	464b      	mov	r3, r9
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	f7f6 fa8a 	bl	8000a0c <__aeabi_dcmpun>
 800a4f8:	b148      	cbz	r0, 800a50e <_printf_float+0xe2>
 800a4fa:	464b      	mov	r3, r9
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfb8      	it	lt
 800a500:	232d      	movlt	r3, #45	@ 0x2d
 800a502:	4a80      	ldr	r2, [pc, #512]	@ (800a704 <_printf_float+0x2d8>)
 800a504:	bfb8      	it	lt
 800a506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a50a:	4b7f      	ldr	r3, [pc, #508]	@ (800a708 <_printf_float+0x2dc>)
 800a50c:	e7d3      	b.n	800a4b6 <_printf_float+0x8a>
 800a50e:	6863      	ldr	r3, [r4, #4]
 800a510:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	d13f      	bne.n	800a598 <_printf_float+0x16c>
 800a518:	2306      	movs	r3, #6
 800a51a:	6063      	str	r3, [r4, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	9206      	str	r2, [sp, #24]
 800a526:	aa0e      	add	r2, sp, #56	@ 0x38
 800a528:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a52c:	aa0d      	add	r2, sp, #52	@ 0x34
 800a52e:	9203      	str	r2, [sp, #12]
 800a530:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a534:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a538:	6863      	ldr	r3, [r4, #4]
 800a53a:	4642      	mov	r2, r8
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	4628      	mov	r0, r5
 800a540:	464b      	mov	r3, r9
 800a542:	910a      	str	r1, [sp, #40]	@ 0x28
 800a544:	f7ff fed4 	bl	800a2f0 <__cvt>
 800a548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a54a:	4680      	mov	r8, r0
 800a54c:	2947      	cmp	r1, #71	@ 0x47
 800a54e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a550:	d128      	bne.n	800a5a4 <_printf_float+0x178>
 800a552:	1cc8      	adds	r0, r1, #3
 800a554:	db02      	blt.n	800a55c <_printf_float+0x130>
 800a556:	6863      	ldr	r3, [r4, #4]
 800a558:	4299      	cmp	r1, r3
 800a55a:	dd40      	ble.n	800a5de <_printf_float+0x1b2>
 800a55c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a560:	fa5f fa8a 	uxtb.w	sl, sl
 800a564:	4652      	mov	r2, sl
 800a566:	3901      	subs	r1, #1
 800a568:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a56c:	910d      	str	r1, [sp, #52]	@ 0x34
 800a56e:	f7ff ff23 	bl	800a3b8 <__exponent>
 800a572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a574:	4681      	mov	r9, r0
 800a576:	1813      	adds	r3, r2, r0
 800a578:	2a01      	cmp	r2, #1
 800a57a:	6123      	str	r3, [r4, #16]
 800a57c:	dc02      	bgt.n	800a584 <_printf_float+0x158>
 800a57e:	6822      	ldr	r2, [r4, #0]
 800a580:	07d2      	lsls	r2, r2, #31
 800a582:	d501      	bpl.n	800a588 <_printf_float+0x15c>
 800a584:	3301      	adds	r3, #1
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d09e      	beq.n	800a4ce <_printf_float+0xa2>
 800a590:	232d      	movs	r3, #45	@ 0x2d
 800a592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a596:	e79a      	b.n	800a4ce <_printf_float+0xa2>
 800a598:	2947      	cmp	r1, #71	@ 0x47
 800a59a:	d1bf      	bne.n	800a51c <_printf_float+0xf0>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1bd      	bne.n	800a51c <_printf_float+0xf0>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e7ba      	b.n	800a51a <_printf_float+0xee>
 800a5a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5a8:	d9dc      	bls.n	800a564 <_printf_float+0x138>
 800a5aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a5ae:	d118      	bne.n	800a5e2 <_printf_float+0x1b6>
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	6863      	ldr	r3, [r4, #4]
 800a5b4:	dd0b      	ble.n	800a5ce <_printf_float+0x1a2>
 800a5b6:	6121      	str	r1, [r4, #16]
 800a5b8:	b913      	cbnz	r3, 800a5c0 <_printf_float+0x194>
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	07d0      	lsls	r0, r2, #31
 800a5be:	d502      	bpl.n	800a5c6 <_printf_float+0x19a>
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	440b      	add	r3, r1
 800a5c4:	6123      	str	r3, [r4, #16]
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a5cc:	e7dc      	b.n	800a588 <_printf_float+0x15c>
 800a5ce:	b913      	cbnz	r3, 800a5d6 <_printf_float+0x1aa>
 800a5d0:	6822      	ldr	r2, [r4, #0]
 800a5d2:	07d2      	lsls	r2, r2, #31
 800a5d4:	d501      	bpl.n	800a5da <_printf_float+0x1ae>
 800a5d6:	3302      	adds	r3, #2
 800a5d8:	e7f4      	b.n	800a5c4 <_printf_float+0x198>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e7f2      	b.n	800a5c4 <_printf_float+0x198>
 800a5de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	db05      	blt.n	800a5f4 <_printf_float+0x1c8>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	6121      	str	r1, [r4, #16]
 800a5ec:	07d8      	lsls	r0, r3, #31
 800a5ee:	d5ea      	bpl.n	800a5c6 <_printf_float+0x19a>
 800a5f0:	1c4b      	adds	r3, r1, #1
 800a5f2:	e7e7      	b.n	800a5c4 <_printf_float+0x198>
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	bfcc      	ite	gt
 800a5f8:	2201      	movgt	r2, #1
 800a5fa:	f1c1 0202 	rsble	r2, r1, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	e7e0      	b.n	800a5c4 <_printf_float+0x198>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	055a      	lsls	r2, r3, #21
 800a606:	d407      	bmi.n	800a618 <_printf_float+0x1ec>
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	4642      	mov	r2, r8
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	d12b      	bne.n	800a66e <_printf_float+0x242>
 800a616:	e764      	b.n	800a4e2 <_printf_float+0xb6>
 800a618:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a61c:	f240 80dc 	bls.w	800a7d8 <_printf_float+0x3ac>
 800a620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a624:	2200      	movs	r2, #0
 800a626:	2300      	movs	r3, #0
 800a628:	f7f6 f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d033      	beq.n	800a698 <_printf_float+0x26c>
 800a630:	2301      	movs	r3, #1
 800a632:	4631      	mov	r1, r6
 800a634:	4628      	mov	r0, r5
 800a636:	4a35      	ldr	r2, [pc, #212]	@ (800a70c <_printf_float+0x2e0>)
 800a638:	47b8      	blx	r7
 800a63a:	3001      	adds	r0, #1
 800a63c:	f43f af51 	beq.w	800a4e2 <_printf_float+0xb6>
 800a640:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a644:	4543      	cmp	r3, r8
 800a646:	db02      	blt.n	800a64e <_printf_float+0x222>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	07d8      	lsls	r0, r3, #31
 800a64c:	d50f      	bpl.n	800a66e <_printf_float+0x242>
 800a64e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	47b8      	blx	r7
 800a658:	3001      	adds	r0, #1
 800a65a:	f43f af42 	beq.w	800a4e2 <_printf_float+0xb6>
 800a65e:	f04f 0900 	mov.w	r9, #0
 800a662:	f108 38ff 	add.w	r8, r8, #4294967295
 800a666:	f104 0a1a 	add.w	sl, r4, #26
 800a66a:	45c8      	cmp	r8, r9
 800a66c:	dc09      	bgt.n	800a682 <_printf_float+0x256>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	079b      	lsls	r3, r3, #30
 800a672:	f100 8102 	bmi.w	800a87a <_printf_float+0x44e>
 800a676:	68e0      	ldr	r0, [r4, #12]
 800a678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a67a:	4298      	cmp	r0, r3
 800a67c:	bfb8      	it	lt
 800a67e:	4618      	movlt	r0, r3
 800a680:	e731      	b.n	800a4e6 <_printf_float+0xba>
 800a682:	2301      	movs	r3, #1
 800a684:	4652      	mov	r2, sl
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	f43f af28 	beq.w	800a4e2 <_printf_float+0xb6>
 800a692:	f109 0901 	add.w	r9, r9, #1
 800a696:	e7e8      	b.n	800a66a <_printf_float+0x23e>
 800a698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	dc38      	bgt.n	800a710 <_printf_float+0x2e4>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	4631      	mov	r1, r6
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	4a19      	ldr	r2, [pc, #100]	@ (800a70c <_printf_float+0x2e0>)
 800a6a6:	47b8      	blx	r7
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	f43f af1a 	beq.w	800a4e2 <_printf_float+0xb6>
 800a6ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a6b2:	ea59 0303 	orrs.w	r3, r9, r3
 800a6b6:	d102      	bne.n	800a6be <_printf_float+0x292>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	d5d7      	bpl.n	800a66e <_printf_float+0x242>
 800a6be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b8      	blx	r7
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	f43f af0a 	beq.w	800a4e2 <_printf_float+0xb6>
 800a6ce:	f04f 0a00 	mov.w	sl, #0
 800a6d2:	f104 0b1a 	add.w	fp, r4, #26
 800a6d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6d8:	425b      	negs	r3, r3
 800a6da:	4553      	cmp	r3, sl
 800a6dc:	dc01      	bgt.n	800a6e2 <_printf_float+0x2b6>
 800a6de:	464b      	mov	r3, r9
 800a6e0:	e793      	b.n	800a60a <_printf_float+0x1de>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	465a      	mov	r2, fp
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b8      	blx	r7
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f43f aef8 	beq.w	800a4e2 <_printf_float+0xb6>
 800a6f2:	f10a 0a01 	add.w	sl, sl, #1
 800a6f6:	e7ee      	b.n	800a6d6 <_printf_float+0x2aa>
 800a6f8:	7fefffff 	.word	0x7fefffff
 800a6fc:	0800dbda 	.word	0x0800dbda
 800a700:	0800dbde 	.word	0x0800dbde
 800a704:	0800dbe2 	.word	0x0800dbe2
 800a708:	0800dbe6 	.word	0x0800dbe6
 800a70c:	0800dbea 	.word	0x0800dbea
 800a710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a712:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a716:	4553      	cmp	r3, sl
 800a718:	bfa8      	it	ge
 800a71a:	4653      	movge	r3, sl
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	4699      	mov	r9, r3
 800a720:	dc36      	bgt.n	800a790 <_printf_float+0x364>
 800a722:	f04f 0b00 	mov.w	fp, #0
 800a726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a72a:	f104 021a 	add.w	r2, r4, #26
 800a72e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a730:	930a      	str	r3, [sp, #40]	@ 0x28
 800a732:	eba3 0309 	sub.w	r3, r3, r9
 800a736:	455b      	cmp	r3, fp
 800a738:	dc31      	bgt.n	800a79e <_printf_float+0x372>
 800a73a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a73c:	459a      	cmp	sl, r3
 800a73e:	dc3a      	bgt.n	800a7b6 <_printf_float+0x38a>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	07da      	lsls	r2, r3, #31
 800a744:	d437      	bmi.n	800a7b6 <_printf_float+0x38a>
 800a746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a748:	ebaa 0903 	sub.w	r9, sl, r3
 800a74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a74e:	ebaa 0303 	sub.w	r3, sl, r3
 800a752:	4599      	cmp	r9, r3
 800a754:	bfa8      	it	ge
 800a756:	4699      	movge	r9, r3
 800a758:	f1b9 0f00 	cmp.w	r9, #0
 800a75c:	dc33      	bgt.n	800a7c6 <_printf_float+0x39a>
 800a75e:	f04f 0800 	mov.w	r8, #0
 800a762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a766:	f104 0b1a 	add.w	fp, r4, #26
 800a76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a76c:	ebaa 0303 	sub.w	r3, sl, r3
 800a770:	eba3 0309 	sub.w	r3, r3, r9
 800a774:	4543      	cmp	r3, r8
 800a776:	f77f af7a 	ble.w	800a66e <_printf_float+0x242>
 800a77a:	2301      	movs	r3, #1
 800a77c:	465a      	mov	r2, fp
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	f43f aeac 	beq.w	800a4e2 <_printf_float+0xb6>
 800a78a:	f108 0801 	add.w	r8, r8, #1
 800a78e:	e7ec      	b.n	800a76a <_printf_float+0x33e>
 800a790:	4642      	mov	r2, r8
 800a792:	4631      	mov	r1, r6
 800a794:	4628      	mov	r0, r5
 800a796:	47b8      	blx	r7
 800a798:	3001      	adds	r0, #1
 800a79a:	d1c2      	bne.n	800a722 <_printf_float+0x2f6>
 800a79c:	e6a1      	b.n	800a4e2 <_printf_float+0xb6>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	920a      	str	r2, [sp, #40]	@ 0x28
 800a7a6:	47b8      	blx	r7
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f43f ae9a 	beq.w	800a4e2 <_printf_float+0xb6>
 800a7ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7b0:	f10b 0b01 	add.w	fp, fp, #1
 800a7b4:	e7bb      	b.n	800a72e <_printf_float+0x302>
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d1c0      	bne.n	800a746 <_printf_float+0x31a>
 800a7c4:	e68d      	b.n	800a4e2 <_printf_float+0xb6>
 800a7c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	4442      	add	r2, r8
 800a7d0:	47b8      	blx	r7
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d1c3      	bne.n	800a75e <_printf_float+0x332>
 800a7d6:	e684      	b.n	800a4e2 <_printf_float+0xb6>
 800a7d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a7dc:	f1ba 0f01 	cmp.w	sl, #1
 800a7e0:	dc01      	bgt.n	800a7e6 <_printf_float+0x3ba>
 800a7e2:	07db      	lsls	r3, r3, #31
 800a7e4:	d536      	bpl.n	800a854 <_printf_float+0x428>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b8      	blx	r7
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	f43f ae76 	beq.w	800a4e2 <_printf_float+0xb6>
 800a7f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b8      	blx	r7
 800a800:	3001      	adds	r0, #1
 800a802:	f43f ae6e 	beq.w	800a4e2 <_printf_float+0xb6>
 800a806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a80a:	2200      	movs	r2, #0
 800a80c:	2300      	movs	r3, #0
 800a80e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a812:	f7f6 f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 800a816:	b9c0      	cbnz	r0, 800a84a <_printf_float+0x41e>
 800a818:	4653      	mov	r3, sl
 800a81a:	f108 0201 	add.w	r2, r8, #1
 800a81e:	4631      	mov	r1, r6
 800a820:	4628      	mov	r0, r5
 800a822:	47b8      	blx	r7
 800a824:	3001      	adds	r0, #1
 800a826:	d10c      	bne.n	800a842 <_printf_float+0x416>
 800a828:	e65b      	b.n	800a4e2 <_printf_float+0xb6>
 800a82a:	2301      	movs	r3, #1
 800a82c:	465a      	mov	r2, fp
 800a82e:	4631      	mov	r1, r6
 800a830:	4628      	mov	r0, r5
 800a832:	47b8      	blx	r7
 800a834:	3001      	adds	r0, #1
 800a836:	f43f ae54 	beq.w	800a4e2 <_printf_float+0xb6>
 800a83a:	f108 0801 	add.w	r8, r8, #1
 800a83e:	45d0      	cmp	r8, sl
 800a840:	dbf3      	blt.n	800a82a <_printf_float+0x3fe>
 800a842:	464b      	mov	r3, r9
 800a844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a848:	e6e0      	b.n	800a60c <_printf_float+0x1e0>
 800a84a:	f04f 0800 	mov.w	r8, #0
 800a84e:	f104 0b1a 	add.w	fp, r4, #26
 800a852:	e7f4      	b.n	800a83e <_printf_float+0x412>
 800a854:	2301      	movs	r3, #1
 800a856:	4642      	mov	r2, r8
 800a858:	e7e1      	b.n	800a81e <_printf_float+0x3f2>
 800a85a:	2301      	movs	r3, #1
 800a85c:	464a      	mov	r2, r9
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	47b8      	blx	r7
 800a864:	3001      	adds	r0, #1
 800a866:	f43f ae3c 	beq.w	800a4e2 <_printf_float+0xb6>
 800a86a:	f108 0801 	add.w	r8, r8, #1
 800a86e:	68e3      	ldr	r3, [r4, #12]
 800a870:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a872:	1a5b      	subs	r3, r3, r1
 800a874:	4543      	cmp	r3, r8
 800a876:	dcf0      	bgt.n	800a85a <_printf_float+0x42e>
 800a878:	e6fd      	b.n	800a676 <_printf_float+0x24a>
 800a87a:	f04f 0800 	mov.w	r8, #0
 800a87e:	f104 0919 	add.w	r9, r4, #25
 800a882:	e7f4      	b.n	800a86e <_printf_float+0x442>

0800a884 <_printf_common>:
 800a884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	4616      	mov	r6, r2
 800a88a:	4698      	mov	r8, r3
 800a88c:	688a      	ldr	r2, [r1, #8]
 800a88e:	690b      	ldr	r3, [r1, #16]
 800a890:	4607      	mov	r7, r0
 800a892:	4293      	cmp	r3, r2
 800a894:	bfb8      	it	lt
 800a896:	4613      	movlt	r3, r2
 800a898:	6033      	str	r3, [r6, #0]
 800a89a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a89e:	460c      	mov	r4, r1
 800a8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8a4:	b10a      	cbz	r2, 800a8aa <_printf_common+0x26>
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	6033      	str	r3, [r6, #0]
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	0699      	lsls	r1, r3, #26
 800a8ae:	bf42      	ittt	mi
 800a8b0:	6833      	ldrmi	r3, [r6, #0]
 800a8b2:	3302      	addmi	r3, #2
 800a8b4:	6033      	strmi	r3, [r6, #0]
 800a8b6:	6825      	ldr	r5, [r4, #0]
 800a8b8:	f015 0506 	ands.w	r5, r5, #6
 800a8bc:	d106      	bne.n	800a8cc <_printf_common+0x48>
 800a8be:	f104 0a19 	add.w	sl, r4, #25
 800a8c2:	68e3      	ldr	r3, [r4, #12]
 800a8c4:	6832      	ldr	r2, [r6, #0]
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	dc2b      	bgt.n	800a924 <_printf_common+0xa0>
 800a8cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	3b00      	subs	r3, #0
 800a8d4:	bf18      	it	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	0692      	lsls	r2, r2, #26
 800a8da:	d430      	bmi.n	800a93e <_printf_common+0xba>
 800a8dc:	4641      	mov	r1, r8
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8e4:	47c8      	blx	r9
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d023      	beq.n	800a932 <_printf_common+0xae>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	6922      	ldr	r2, [r4, #16]
 800a8ee:	f003 0306 	and.w	r3, r3, #6
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	bf14      	ite	ne
 800a8f6:	2500      	movne	r5, #0
 800a8f8:	6833      	ldreq	r3, [r6, #0]
 800a8fa:	f04f 0600 	mov.w	r6, #0
 800a8fe:	bf08      	it	eq
 800a900:	68e5      	ldreq	r5, [r4, #12]
 800a902:	f104 041a 	add.w	r4, r4, #26
 800a906:	bf08      	it	eq
 800a908:	1aed      	subeq	r5, r5, r3
 800a90a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a90e:	bf08      	it	eq
 800a910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a914:	4293      	cmp	r3, r2
 800a916:	bfc4      	itt	gt
 800a918:	1a9b      	subgt	r3, r3, r2
 800a91a:	18ed      	addgt	r5, r5, r3
 800a91c:	42b5      	cmp	r5, r6
 800a91e:	d11a      	bne.n	800a956 <_printf_common+0xd2>
 800a920:	2000      	movs	r0, #0
 800a922:	e008      	b.n	800a936 <_printf_common+0xb2>
 800a924:	2301      	movs	r3, #1
 800a926:	4652      	mov	r2, sl
 800a928:	4641      	mov	r1, r8
 800a92a:	4638      	mov	r0, r7
 800a92c:	47c8      	blx	r9
 800a92e:	3001      	adds	r0, #1
 800a930:	d103      	bne.n	800a93a <_printf_common+0xb6>
 800a932:	f04f 30ff 	mov.w	r0, #4294967295
 800a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93a:	3501      	adds	r5, #1
 800a93c:	e7c1      	b.n	800a8c2 <_printf_common+0x3e>
 800a93e:	2030      	movs	r0, #48	@ 0x30
 800a940:	18e1      	adds	r1, r4, r3
 800a942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a94c:	4422      	add	r2, r4
 800a94e:	3302      	adds	r3, #2
 800a950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a954:	e7c2      	b.n	800a8dc <_printf_common+0x58>
 800a956:	2301      	movs	r3, #1
 800a958:	4622      	mov	r2, r4
 800a95a:	4641      	mov	r1, r8
 800a95c:	4638      	mov	r0, r7
 800a95e:	47c8      	blx	r9
 800a960:	3001      	adds	r0, #1
 800a962:	d0e6      	beq.n	800a932 <_printf_common+0xae>
 800a964:	3601      	adds	r6, #1
 800a966:	e7d9      	b.n	800a91c <_printf_common+0x98>

0800a968 <_printf_i>:
 800a968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a96c:	7e0f      	ldrb	r7, [r1, #24]
 800a96e:	4691      	mov	r9, r2
 800a970:	2f78      	cmp	r7, #120	@ 0x78
 800a972:	4680      	mov	r8, r0
 800a974:	460c      	mov	r4, r1
 800a976:	469a      	mov	sl, r3
 800a978:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a97a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a97e:	d807      	bhi.n	800a990 <_printf_i+0x28>
 800a980:	2f62      	cmp	r7, #98	@ 0x62
 800a982:	d80a      	bhi.n	800a99a <_printf_i+0x32>
 800a984:	2f00      	cmp	r7, #0
 800a986:	f000 80d3 	beq.w	800ab30 <_printf_i+0x1c8>
 800a98a:	2f58      	cmp	r7, #88	@ 0x58
 800a98c:	f000 80ba 	beq.w	800ab04 <_printf_i+0x19c>
 800a990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a998:	e03a      	b.n	800aa10 <_printf_i+0xa8>
 800a99a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a99e:	2b15      	cmp	r3, #21
 800a9a0:	d8f6      	bhi.n	800a990 <_printf_i+0x28>
 800a9a2:	a101      	add	r1, pc, #4	@ (adr r1, 800a9a8 <_printf_i+0x40>)
 800a9a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9a8:	0800aa01 	.word	0x0800aa01
 800a9ac:	0800aa15 	.word	0x0800aa15
 800a9b0:	0800a991 	.word	0x0800a991
 800a9b4:	0800a991 	.word	0x0800a991
 800a9b8:	0800a991 	.word	0x0800a991
 800a9bc:	0800a991 	.word	0x0800a991
 800a9c0:	0800aa15 	.word	0x0800aa15
 800a9c4:	0800a991 	.word	0x0800a991
 800a9c8:	0800a991 	.word	0x0800a991
 800a9cc:	0800a991 	.word	0x0800a991
 800a9d0:	0800a991 	.word	0x0800a991
 800a9d4:	0800ab17 	.word	0x0800ab17
 800a9d8:	0800aa3f 	.word	0x0800aa3f
 800a9dc:	0800aad1 	.word	0x0800aad1
 800a9e0:	0800a991 	.word	0x0800a991
 800a9e4:	0800a991 	.word	0x0800a991
 800a9e8:	0800ab39 	.word	0x0800ab39
 800a9ec:	0800a991 	.word	0x0800a991
 800a9f0:	0800aa3f 	.word	0x0800aa3f
 800a9f4:	0800a991 	.word	0x0800a991
 800a9f8:	0800a991 	.word	0x0800a991
 800a9fc:	0800aad9 	.word	0x0800aad9
 800aa00:	6833      	ldr	r3, [r6, #0]
 800aa02:	1d1a      	adds	r2, r3, #4
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6032      	str	r2, [r6, #0]
 800aa08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa10:	2301      	movs	r3, #1
 800aa12:	e09e      	b.n	800ab52 <_printf_i+0x1ea>
 800aa14:	6833      	ldr	r3, [r6, #0]
 800aa16:	6820      	ldr	r0, [r4, #0]
 800aa18:	1d19      	adds	r1, r3, #4
 800aa1a:	6031      	str	r1, [r6, #0]
 800aa1c:	0606      	lsls	r6, r0, #24
 800aa1e:	d501      	bpl.n	800aa24 <_printf_i+0xbc>
 800aa20:	681d      	ldr	r5, [r3, #0]
 800aa22:	e003      	b.n	800aa2c <_printf_i+0xc4>
 800aa24:	0645      	lsls	r5, r0, #25
 800aa26:	d5fb      	bpl.n	800aa20 <_printf_i+0xb8>
 800aa28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa2c:	2d00      	cmp	r5, #0
 800aa2e:	da03      	bge.n	800aa38 <_printf_i+0xd0>
 800aa30:	232d      	movs	r3, #45	@ 0x2d
 800aa32:	426d      	negs	r5, r5
 800aa34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa38:	230a      	movs	r3, #10
 800aa3a:	4859      	ldr	r0, [pc, #356]	@ (800aba0 <_printf_i+0x238>)
 800aa3c:	e011      	b.n	800aa62 <_printf_i+0xfa>
 800aa3e:	6821      	ldr	r1, [r4, #0]
 800aa40:	6833      	ldr	r3, [r6, #0]
 800aa42:	0608      	lsls	r0, r1, #24
 800aa44:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa48:	d402      	bmi.n	800aa50 <_printf_i+0xe8>
 800aa4a:	0649      	lsls	r1, r1, #25
 800aa4c:	bf48      	it	mi
 800aa4e:	b2ad      	uxthmi	r5, r5
 800aa50:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa52:	6033      	str	r3, [r6, #0]
 800aa54:	bf14      	ite	ne
 800aa56:	230a      	movne	r3, #10
 800aa58:	2308      	moveq	r3, #8
 800aa5a:	4851      	ldr	r0, [pc, #324]	@ (800aba0 <_printf_i+0x238>)
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa62:	6866      	ldr	r6, [r4, #4]
 800aa64:	2e00      	cmp	r6, #0
 800aa66:	bfa8      	it	ge
 800aa68:	6821      	ldrge	r1, [r4, #0]
 800aa6a:	60a6      	str	r6, [r4, #8]
 800aa6c:	bfa4      	itt	ge
 800aa6e:	f021 0104 	bicge.w	r1, r1, #4
 800aa72:	6021      	strge	r1, [r4, #0]
 800aa74:	b90d      	cbnz	r5, 800aa7a <_printf_i+0x112>
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	d04b      	beq.n	800ab12 <_printf_i+0x1aa>
 800aa7a:	4616      	mov	r6, r2
 800aa7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa80:	fb03 5711 	mls	r7, r3, r1, r5
 800aa84:	5dc7      	ldrb	r7, [r0, r7]
 800aa86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa8a:	462f      	mov	r7, r5
 800aa8c:	42bb      	cmp	r3, r7
 800aa8e:	460d      	mov	r5, r1
 800aa90:	d9f4      	bls.n	800aa7c <_printf_i+0x114>
 800aa92:	2b08      	cmp	r3, #8
 800aa94:	d10b      	bne.n	800aaae <_printf_i+0x146>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	07df      	lsls	r7, r3, #31
 800aa9a:	d508      	bpl.n	800aaae <_printf_i+0x146>
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	6861      	ldr	r1, [r4, #4]
 800aaa0:	4299      	cmp	r1, r3
 800aaa2:	bfde      	ittt	le
 800aaa4:	2330      	movle	r3, #48	@ 0x30
 800aaa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aaaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aaae:	1b92      	subs	r2, r2, r6
 800aab0:	6122      	str	r2, [r4, #16]
 800aab2:	464b      	mov	r3, r9
 800aab4:	4621      	mov	r1, r4
 800aab6:	4640      	mov	r0, r8
 800aab8:	f8cd a000 	str.w	sl, [sp]
 800aabc:	aa03      	add	r2, sp, #12
 800aabe:	f7ff fee1 	bl	800a884 <_printf_common>
 800aac2:	3001      	adds	r0, #1
 800aac4:	d14a      	bne.n	800ab5c <_printf_i+0x1f4>
 800aac6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaca:	b004      	add	sp, #16
 800aacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	f043 0320 	orr.w	r3, r3, #32
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	2778      	movs	r7, #120	@ 0x78
 800aada:	4832      	ldr	r0, [pc, #200]	@ (800aba4 <_printf_i+0x23c>)
 800aadc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	6831      	ldr	r1, [r6, #0]
 800aae4:	061f      	lsls	r7, r3, #24
 800aae6:	f851 5b04 	ldr.w	r5, [r1], #4
 800aaea:	d402      	bmi.n	800aaf2 <_printf_i+0x18a>
 800aaec:	065f      	lsls	r7, r3, #25
 800aaee:	bf48      	it	mi
 800aaf0:	b2ad      	uxthmi	r5, r5
 800aaf2:	6031      	str	r1, [r6, #0]
 800aaf4:	07d9      	lsls	r1, r3, #31
 800aaf6:	bf44      	itt	mi
 800aaf8:	f043 0320 	orrmi.w	r3, r3, #32
 800aafc:	6023      	strmi	r3, [r4, #0]
 800aafe:	b11d      	cbz	r5, 800ab08 <_printf_i+0x1a0>
 800ab00:	2310      	movs	r3, #16
 800ab02:	e7ab      	b.n	800aa5c <_printf_i+0xf4>
 800ab04:	4826      	ldr	r0, [pc, #152]	@ (800aba0 <_printf_i+0x238>)
 800ab06:	e7e9      	b.n	800aadc <_printf_i+0x174>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	f023 0320 	bic.w	r3, r3, #32
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	e7f6      	b.n	800ab00 <_printf_i+0x198>
 800ab12:	4616      	mov	r6, r2
 800ab14:	e7bd      	b.n	800aa92 <_printf_i+0x12a>
 800ab16:	6833      	ldr	r3, [r6, #0]
 800ab18:	6825      	ldr	r5, [r4, #0]
 800ab1a:	1d18      	adds	r0, r3, #4
 800ab1c:	6961      	ldr	r1, [r4, #20]
 800ab1e:	6030      	str	r0, [r6, #0]
 800ab20:	062e      	lsls	r6, r5, #24
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	d501      	bpl.n	800ab2a <_printf_i+0x1c2>
 800ab26:	6019      	str	r1, [r3, #0]
 800ab28:	e002      	b.n	800ab30 <_printf_i+0x1c8>
 800ab2a:	0668      	lsls	r0, r5, #25
 800ab2c:	d5fb      	bpl.n	800ab26 <_printf_i+0x1be>
 800ab2e:	8019      	strh	r1, [r3, #0]
 800ab30:	2300      	movs	r3, #0
 800ab32:	4616      	mov	r6, r2
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	e7bc      	b.n	800aab2 <_printf_i+0x14a>
 800ab38:	6833      	ldr	r3, [r6, #0]
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	1d1a      	adds	r2, r3, #4
 800ab3e:	6032      	str	r2, [r6, #0]
 800ab40:	681e      	ldr	r6, [r3, #0]
 800ab42:	6862      	ldr	r2, [r4, #4]
 800ab44:	4630      	mov	r0, r6
 800ab46:	f000 fa30 	bl	800afaa <memchr>
 800ab4a:	b108      	cbz	r0, 800ab50 <_printf_i+0x1e8>
 800ab4c:	1b80      	subs	r0, r0, r6
 800ab4e:	6060      	str	r0, [r4, #4]
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	2300      	movs	r3, #0
 800ab56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab5a:	e7aa      	b.n	800aab2 <_printf_i+0x14a>
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	4649      	mov	r1, r9
 800ab60:	4640      	mov	r0, r8
 800ab62:	6923      	ldr	r3, [r4, #16]
 800ab64:	47d0      	blx	sl
 800ab66:	3001      	adds	r0, #1
 800ab68:	d0ad      	beq.n	800aac6 <_printf_i+0x15e>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	079b      	lsls	r3, r3, #30
 800ab6e:	d413      	bmi.n	800ab98 <_printf_i+0x230>
 800ab70:	68e0      	ldr	r0, [r4, #12]
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	4298      	cmp	r0, r3
 800ab76:	bfb8      	it	lt
 800ab78:	4618      	movlt	r0, r3
 800ab7a:	e7a6      	b.n	800aaca <_printf_i+0x162>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4632      	mov	r2, r6
 800ab80:	4649      	mov	r1, r9
 800ab82:	4640      	mov	r0, r8
 800ab84:	47d0      	blx	sl
 800ab86:	3001      	adds	r0, #1
 800ab88:	d09d      	beq.n	800aac6 <_printf_i+0x15e>
 800ab8a:	3501      	adds	r5, #1
 800ab8c:	68e3      	ldr	r3, [r4, #12]
 800ab8e:	9903      	ldr	r1, [sp, #12]
 800ab90:	1a5b      	subs	r3, r3, r1
 800ab92:	42ab      	cmp	r3, r5
 800ab94:	dcf2      	bgt.n	800ab7c <_printf_i+0x214>
 800ab96:	e7eb      	b.n	800ab70 <_printf_i+0x208>
 800ab98:	2500      	movs	r5, #0
 800ab9a:	f104 0619 	add.w	r6, r4, #25
 800ab9e:	e7f5      	b.n	800ab8c <_printf_i+0x224>
 800aba0:	0800dbec 	.word	0x0800dbec
 800aba4:	0800dbfd 	.word	0x0800dbfd

0800aba8 <std>:
 800aba8:	2300      	movs	r3, #0
 800abaa:	b510      	push	{r4, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	e9c0 3300 	strd	r3, r3, [r0]
 800abb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abb6:	6083      	str	r3, [r0, #8]
 800abb8:	8181      	strh	r1, [r0, #12]
 800abba:	6643      	str	r3, [r0, #100]	@ 0x64
 800abbc:	81c2      	strh	r2, [r0, #14]
 800abbe:	6183      	str	r3, [r0, #24]
 800abc0:	4619      	mov	r1, r3
 800abc2:	2208      	movs	r2, #8
 800abc4:	305c      	adds	r0, #92	@ 0x5c
 800abc6:	f000 f914 	bl	800adf2 <memset>
 800abca:	4b0d      	ldr	r3, [pc, #52]	@ (800ac00 <std+0x58>)
 800abcc:	6224      	str	r4, [r4, #32]
 800abce:	6263      	str	r3, [r4, #36]	@ 0x24
 800abd0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac04 <std+0x5c>)
 800abd2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <std+0x60>)
 800abd6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abd8:	4b0c      	ldr	r3, [pc, #48]	@ (800ac0c <std+0x64>)
 800abda:	6323      	str	r3, [r4, #48]	@ 0x30
 800abdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ac10 <std+0x68>)
 800abde:	429c      	cmp	r4, r3
 800abe0:	d006      	beq.n	800abf0 <std+0x48>
 800abe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abe6:	4294      	cmp	r4, r2
 800abe8:	d002      	beq.n	800abf0 <std+0x48>
 800abea:	33d0      	adds	r3, #208	@ 0xd0
 800abec:	429c      	cmp	r4, r3
 800abee:	d105      	bne.n	800abfc <std+0x54>
 800abf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf8:	f000 b9cc 	b.w	800af94 <__retarget_lock_init_recursive>
 800abfc:	bd10      	pop	{r4, pc}
 800abfe:	bf00      	nop
 800ac00:	0800ad6d 	.word	0x0800ad6d
 800ac04:	0800ad8f 	.word	0x0800ad8f
 800ac08:	0800adc7 	.word	0x0800adc7
 800ac0c:	0800adeb 	.word	0x0800adeb
 800ac10:	20000444 	.word	0x20000444

0800ac14 <stdio_exit_handler>:
 800ac14:	4a02      	ldr	r2, [pc, #8]	@ (800ac20 <stdio_exit_handler+0xc>)
 800ac16:	4903      	ldr	r1, [pc, #12]	@ (800ac24 <stdio_exit_handler+0x10>)
 800ac18:	4803      	ldr	r0, [pc, #12]	@ (800ac28 <stdio_exit_handler+0x14>)
 800ac1a:	f000 b869 	b.w	800acf0 <_fwalk_sglue>
 800ac1e:	bf00      	nop
 800ac20:	20000010 	.word	0x20000010
 800ac24:	0800c7a9 	.word	0x0800c7a9
 800ac28:	20000020 	.word	0x20000020

0800ac2c <cleanup_stdio>:
 800ac2c:	6841      	ldr	r1, [r0, #4]
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ac60 <cleanup_stdio+0x34>)
 800ac30:	b510      	push	{r4, lr}
 800ac32:	4299      	cmp	r1, r3
 800ac34:	4604      	mov	r4, r0
 800ac36:	d001      	beq.n	800ac3c <cleanup_stdio+0x10>
 800ac38:	f001 fdb6 	bl	800c7a8 <_fflush_r>
 800ac3c:	68a1      	ldr	r1, [r4, #8]
 800ac3e:	4b09      	ldr	r3, [pc, #36]	@ (800ac64 <cleanup_stdio+0x38>)
 800ac40:	4299      	cmp	r1, r3
 800ac42:	d002      	beq.n	800ac4a <cleanup_stdio+0x1e>
 800ac44:	4620      	mov	r0, r4
 800ac46:	f001 fdaf 	bl	800c7a8 <_fflush_r>
 800ac4a:	68e1      	ldr	r1, [r4, #12]
 800ac4c:	4b06      	ldr	r3, [pc, #24]	@ (800ac68 <cleanup_stdio+0x3c>)
 800ac4e:	4299      	cmp	r1, r3
 800ac50:	d004      	beq.n	800ac5c <cleanup_stdio+0x30>
 800ac52:	4620      	mov	r0, r4
 800ac54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac58:	f001 bda6 	b.w	800c7a8 <_fflush_r>
 800ac5c:	bd10      	pop	{r4, pc}
 800ac5e:	bf00      	nop
 800ac60:	20000444 	.word	0x20000444
 800ac64:	200004ac 	.word	0x200004ac
 800ac68:	20000514 	.word	0x20000514

0800ac6c <global_stdio_init.part.0>:
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac9c <global_stdio_init.part.0+0x30>)
 800ac70:	4c0b      	ldr	r4, [pc, #44]	@ (800aca0 <global_stdio_init.part.0+0x34>)
 800ac72:	4a0c      	ldr	r2, [pc, #48]	@ (800aca4 <global_stdio_init.part.0+0x38>)
 800ac74:	4620      	mov	r0, r4
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	2104      	movs	r1, #4
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f7ff ff94 	bl	800aba8 <std>
 800ac80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac84:	2201      	movs	r2, #1
 800ac86:	2109      	movs	r1, #9
 800ac88:	f7ff ff8e 	bl	800aba8 <std>
 800ac8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac90:	2202      	movs	r2, #2
 800ac92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac96:	2112      	movs	r1, #18
 800ac98:	f7ff bf86 	b.w	800aba8 <std>
 800ac9c:	2000057c 	.word	0x2000057c
 800aca0:	20000444 	.word	0x20000444
 800aca4:	0800ac15 	.word	0x0800ac15

0800aca8 <__sfp_lock_acquire>:
 800aca8:	4801      	ldr	r0, [pc, #4]	@ (800acb0 <__sfp_lock_acquire+0x8>)
 800acaa:	f000 b974 	b.w	800af96 <__retarget_lock_acquire_recursive>
 800acae:	bf00      	nop
 800acb0:	20000585 	.word	0x20000585

0800acb4 <__sfp_lock_release>:
 800acb4:	4801      	ldr	r0, [pc, #4]	@ (800acbc <__sfp_lock_release+0x8>)
 800acb6:	f000 b96f 	b.w	800af98 <__retarget_lock_release_recursive>
 800acba:	bf00      	nop
 800acbc:	20000585 	.word	0x20000585

0800acc0 <__sinit>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4604      	mov	r4, r0
 800acc4:	f7ff fff0 	bl	800aca8 <__sfp_lock_acquire>
 800acc8:	6a23      	ldr	r3, [r4, #32]
 800acca:	b11b      	cbz	r3, 800acd4 <__sinit+0x14>
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f7ff bff0 	b.w	800acb4 <__sfp_lock_release>
 800acd4:	4b04      	ldr	r3, [pc, #16]	@ (800ace8 <__sinit+0x28>)
 800acd6:	6223      	str	r3, [r4, #32]
 800acd8:	4b04      	ldr	r3, [pc, #16]	@ (800acec <__sinit+0x2c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1f5      	bne.n	800accc <__sinit+0xc>
 800ace0:	f7ff ffc4 	bl	800ac6c <global_stdio_init.part.0>
 800ace4:	e7f2      	b.n	800accc <__sinit+0xc>
 800ace6:	bf00      	nop
 800ace8:	0800ac2d 	.word	0x0800ac2d
 800acec:	2000057c 	.word	0x2000057c

0800acf0 <_fwalk_sglue>:
 800acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	4607      	mov	r7, r0
 800acf6:	4688      	mov	r8, r1
 800acf8:	4614      	mov	r4, r2
 800acfa:	2600      	movs	r6, #0
 800acfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad00:	f1b9 0901 	subs.w	r9, r9, #1
 800ad04:	d505      	bpl.n	800ad12 <_fwalk_sglue+0x22>
 800ad06:	6824      	ldr	r4, [r4, #0]
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	d1f7      	bne.n	800acfc <_fwalk_sglue+0xc>
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad12:	89ab      	ldrh	r3, [r5, #12]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d907      	bls.n	800ad28 <_fwalk_sglue+0x38>
 800ad18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	d003      	beq.n	800ad28 <_fwalk_sglue+0x38>
 800ad20:	4629      	mov	r1, r5
 800ad22:	4638      	mov	r0, r7
 800ad24:	47c0      	blx	r8
 800ad26:	4306      	orrs	r6, r0
 800ad28:	3568      	adds	r5, #104	@ 0x68
 800ad2a:	e7e9      	b.n	800ad00 <_fwalk_sglue+0x10>

0800ad2c <siprintf>:
 800ad2c:	b40e      	push	{r1, r2, r3}
 800ad2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad32:	b500      	push	{lr}
 800ad34:	b09c      	sub	sp, #112	@ 0x70
 800ad36:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad38:	9002      	str	r0, [sp, #8]
 800ad3a:	9006      	str	r0, [sp, #24]
 800ad3c:	9107      	str	r1, [sp, #28]
 800ad3e:	9104      	str	r1, [sp, #16]
 800ad40:	4808      	ldr	r0, [pc, #32]	@ (800ad64 <siprintf+0x38>)
 800ad42:	4909      	ldr	r1, [pc, #36]	@ (800ad68 <siprintf+0x3c>)
 800ad44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad48:	9105      	str	r1, [sp, #20]
 800ad4a:	6800      	ldr	r0, [r0, #0]
 800ad4c:	a902      	add	r1, sp, #8
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	f001 fbae 	bl	800c4b0 <_svfiprintf_r>
 800ad54:	2200      	movs	r2, #0
 800ad56:	9b02      	ldr	r3, [sp, #8]
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	b01c      	add	sp, #112	@ 0x70
 800ad5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad60:	b003      	add	sp, #12
 800ad62:	4770      	bx	lr
 800ad64:	2000001c 	.word	0x2000001c
 800ad68:	ffff0208 	.word	0xffff0208

0800ad6c <__sread>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	460c      	mov	r4, r1
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	f000 f89c 	bl	800aeb0 <_read_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	bfab      	itete	ge
 800ad7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad80:	181b      	addge	r3, r3, r0
 800ad82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad86:	bfac      	ite	ge
 800ad88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad8a:	81a3      	strhlt	r3, [r4, #12]
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__swrite>:
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	461f      	mov	r7, r3
 800ad94:	898b      	ldrh	r3, [r1, #12]
 800ad96:	4605      	mov	r5, r0
 800ad98:	05db      	lsls	r3, r3, #23
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	d505      	bpl.n	800adac <__swrite+0x1e>
 800ada0:	2302      	movs	r3, #2
 800ada2:	2200      	movs	r2, #0
 800ada4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada8:	f000 f870 	bl	800ae8c <_lseek_r>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	4632      	mov	r2, r6
 800adb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	4628      	mov	r0, r5
 800adb8:	463b      	mov	r3, r7
 800adba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	f000 b8ab 	b.w	800af1c <_write_r>

0800adc6 <__sseek>:
 800adc6:	b510      	push	{r4, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	f000 f85d 	bl	800ae8c <_lseek_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	bf15      	itete	ne
 800add8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ade2:	81a3      	strheq	r3, [r4, #12]
 800ade4:	bf18      	it	ne
 800ade6:	81a3      	strhne	r3, [r4, #12]
 800ade8:	bd10      	pop	{r4, pc}

0800adea <__sclose>:
 800adea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adee:	f000 b83d 	b.w	800ae6c <_close_r>

0800adf2 <memset>:
 800adf2:	4603      	mov	r3, r0
 800adf4:	4402      	add	r2, r0
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d100      	bne.n	800adfc <memset+0xa>
 800adfa:	4770      	bx	lr
 800adfc:	f803 1b01 	strb.w	r1, [r3], #1
 800ae00:	e7f9      	b.n	800adf6 <memset+0x4>

0800ae02 <_raise_r>:
 800ae02:	291f      	cmp	r1, #31
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4605      	mov	r5, r0
 800ae08:	460c      	mov	r4, r1
 800ae0a:	d904      	bls.n	800ae16 <_raise_r+0x14>
 800ae0c:	2316      	movs	r3, #22
 800ae0e:	6003      	str	r3, [r0, #0]
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295
 800ae14:	bd38      	pop	{r3, r4, r5, pc}
 800ae16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae18:	b112      	cbz	r2, 800ae20 <_raise_r+0x1e>
 800ae1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae1e:	b94b      	cbnz	r3, 800ae34 <_raise_r+0x32>
 800ae20:	4628      	mov	r0, r5
 800ae22:	f000 f869 	bl	800aef8 <_getpid_r>
 800ae26:	4622      	mov	r2, r4
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae30:	f000 b850 	b.w	800aed4 <_kill_r>
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d00a      	beq.n	800ae4e <_raise_r+0x4c>
 800ae38:	1c59      	adds	r1, r3, #1
 800ae3a:	d103      	bne.n	800ae44 <_raise_r+0x42>
 800ae3c:	2316      	movs	r3, #22
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	2001      	movs	r0, #1
 800ae42:	e7e7      	b.n	800ae14 <_raise_r+0x12>
 800ae44:	2100      	movs	r1, #0
 800ae46:	4620      	mov	r0, r4
 800ae48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae4c:	4798      	blx	r3
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e7e0      	b.n	800ae14 <_raise_r+0x12>
	...

0800ae54 <raise>:
 800ae54:	4b02      	ldr	r3, [pc, #8]	@ (800ae60 <raise+0xc>)
 800ae56:	4601      	mov	r1, r0
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	f7ff bfd2 	b.w	800ae02 <_raise_r>
 800ae5e:	bf00      	nop
 800ae60:	2000001c 	.word	0x2000001c

0800ae64 <_localeconv_r>:
 800ae64:	4800      	ldr	r0, [pc, #0]	@ (800ae68 <_localeconv_r+0x4>)
 800ae66:	4770      	bx	lr
 800ae68:	2000015c 	.word	0x2000015c

0800ae6c <_close_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4d05      	ldr	r5, [pc, #20]	@ (800ae88 <_close_r+0x1c>)
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7fd f8bb 	bl	8007ff2 <_close>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_close_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_close_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	20000580 	.word	0x20000580

0800ae8c <_lseek_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	2200      	movs	r2, #0
 800ae96:	4d05      	ldr	r5, [pc, #20]	@ (800aeac <_lseek_r+0x20>)
 800ae98:	602a      	str	r2, [r5, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f7fd f8b3 	bl	8008006 <_lseek>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_lseek_r+0x1e>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_lseek_r+0x1e>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	20000580 	.word	0x20000580

0800aeb0 <_read_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4d05      	ldr	r5, [pc, #20]	@ (800aed0 <_read_r+0x20>)
 800aebc:	602a      	str	r2, [r5, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f7fd f87b 	bl	8007fba <_read>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_read_r+0x1e>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_read_r+0x1e>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20000580 	.word	0x20000580

0800aed4 <_kill_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	2300      	movs	r3, #0
 800aed8:	4d06      	ldr	r5, [pc, #24]	@ (800aef4 <_kill_r+0x20>)
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	4611      	mov	r1, r2
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	f7fd f85c 	bl	8007f9e <_kill>
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	d102      	bne.n	800aef0 <_kill_r+0x1c>
 800aeea:	682b      	ldr	r3, [r5, #0]
 800aeec:	b103      	cbz	r3, 800aef0 <_kill_r+0x1c>
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	bd38      	pop	{r3, r4, r5, pc}
 800aef2:	bf00      	nop
 800aef4:	20000580 	.word	0x20000580

0800aef8 <_getpid_r>:
 800aef8:	f7fd b84f 	b.w	8007f9a <_getpid>

0800aefc <_sbrk_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	2300      	movs	r3, #0
 800af00:	4d05      	ldr	r5, [pc, #20]	@ (800af18 <_sbrk_r+0x1c>)
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	f7fd f880 	bl	800800c <_sbrk>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_sbrk_r+0x1a>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_sbrk_r+0x1a>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20000580 	.word	0x20000580

0800af1c <_write_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	4611      	mov	r1, r2
 800af24:	2200      	movs	r2, #0
 800af26:	4d05      	ldr	r5, [pc, #20]	@ (800af3c <_write_r+0x20>)
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f7fd f853 	bl	8007fd6 <_write>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_write_r+0x1e>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_write_r+0x1e>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20000580 	.word	0x20000580

0800af40 <__errno>:
 800af40:	4b01      	ldr	r3, [pc, #4]	@ (800af48 <__errno+0x8>)
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	2000001c 	.word	0x2000001c

0800af4c <__libc_init_array>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	2600      	movs	r6, #0
 800af50:	4d0c      	ldr	r5, [pc, #48]	@ (800af84 <__libc_init_array+0x38>)
 800af52:	4c0d      	ldr	r4, [pc, #52]	@ (800af88 <__libc_init_array+0x3c>)
 800af54:	1b64      	subs	r4, r4, r5
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	42a6      	cmp	r6, r4
 800af5a:	d109      	bne.n	800af70 <__libc_init_array+0x24>
 800af5c:	f001 ff66 	bl	800ce2c <_init>
 800af60:	2600      	movs	r6, #0
 800af62:	4d0a      	ldr	r5, [pc, #40]	@ (800af8c <__libc_init_array+0x40>)
 800af64:	4c0a      	ldr	r4, [pc, #40]	@ (800af90 <__libc_init_array+0x44>)
 800af66:	1b64      	subs	r4, r4, r5
 800af68:	10a4      	asrs	r4, r4, #2
 800af6a:	42a6      	cmp	r6, r4
 800af6c:	d105      	bne.n	800af7a <__libc_init_array+0x2e>
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	f855 3b04 	ldr.w	r3, [r5], #4
 800af74:	4798      	blx	r3
 800af76:	3601      	adds	r6, #1
 800af78:	e7ee      	b.n	800af58 <__libc_init_array+0xc>
 800af7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af7e:	4798      	blx	r3
 800af80:	3601      	adds	r6, #1
 800af82:	e7f2      	b.n	800af6a <__libc_init_array+0x1e>
 800af84:	0800df50 	.word	0x0800df50
 800af88:	0800df50 	.word	0x0800df50
 800af8c:	0800df50 	.word	0x0800df50
 800af90:	0800df58 	.word	0x0800df58

0800af94 <__retarget_lock_init_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_acquire_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__retarget_lock_release_recursive>:
 800af98:	4770      	bx	lr

0800af9a <strcpy>:
 800af9a:	4603      	mov	r3, r0
 800af9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afa0:	f803 2b01 	strb.w	r2, [r3], #1
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	d1f9      	bne.n	800af9c <strcpy+0x2>
 800afa8:	4770      	bx	lr

0800afaa <memchr>:
 800afaa:	4603      	mov	r3, r0
 800afac:	b510      	push	{r4, lr}
 800afae:	b2c9      	uxtb	r1, r1
 800afb0:	4402      	add	r2, r0
 800afb2:	4293      	cmp	r3, r2
 800afb4:	4618      	mov	r0, r3
 800afb6:	d101      	bne.n	800afbc <memchr+0x12>
 800afb8:	2000      	movs	r0, #0
 800afba:	e003      	b.n	800afc4 <memchr+0x1a>
 800afbc:	7804      	ldrb	r4, [r0, #0]
 800afbe:	3301      	adds	r3, #1
 800afc0:	428c      	cmp	r4, r1
 800afc2:	d1f6      	bne.n	800afb2 <memchr+0x8>
 800afc4:	bd10      	pop	{r4, pc}

0800afc6 <quorem>:
 800afc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	6903      	ldr	r3, [r0, #16]
 800afcc:	690c      	ldr	r4, [r1, #16]
 800afce:	4607      	mov	r7, r0
 800afd0:	42a3      	cmp	r3, r4
 800afd2:	db7e      	blt.n	800b0d2 <quorem+0x10c>
 800afd4:	3c01      	subs	r4, #1
 800afd6:	00a3      	lsls	r3, r4, #2
 800afd8:	f100 0514 	add.w	r5, r0, #20
 800afdc:	f101 0814 	add.w	r8, r1, #20
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afe6:	9301      	str	r3, [sp, #4]
 800afe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aff0:	3301      	adds	r3, #1
 800aff2:	429a      	cmp	r2, r3
 800aff4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800affc:	d32e      	bcc.n	800b05c <quorem+0x96>
 800affe:	f04f 0a00 	mov.w	sl, #0
 800b002:	46c4      	mov	ip, r8
 800b004:	46ae      	mov	lr, r5
 800b006:	46d3      	mov	fp, sl
 800b008:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b00c:	b298      	uxth	r0, r3
 800b00e:	fb06 a000 	mla	r0, r6, r0, sl
 800b012:	0c1b      	lsrs	r3, r3, #16
 800b014:	0c02      	lsrs	r2, r0, #16
 800b016:	fb06 2303 	mla	r3, r6, r3, r2
 800b01a:	f8de 2000 	ldr.w	r2, [lr]
 800b01e:	b280      	uxth	r0, r0
 800b020:	b292      	uxth	r2, r2
 800b022:	1a12      	subs	r2, r2, r0
 800b024:	445a      	add	r2, fp
 800b026:	f8de 0000 	ldr.w	r0, [lr]
 800b02a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b02e:	b29b      	uxth	r3, r3
 800b030:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b034:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b038:	b292      	uxth	r2, r2
 800b03a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b03e:	45e1      	cmp	r9, ip
 800b040:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b044:	f84e 2b04 	str.w	r2, [lr], #4
 800b048:	d2de      	bcs.n	800b008 <quorem+0x42>
 800b04a:	9b00      	ldr	r3, [sp, #0]
 800b04c:	58eb      	ldr	r3, [r5, r3]
 800b04e:	b92b      	cbnz	r3, 800b05c <quorem+0x96>
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	3b04      	subs	r3, #4
 800b054:	429d      	cmp	r5, r3
 800b056:	461a      	mov	r2, r3
 800b058:	d32f      	bcc.n	800b0ba <quorem+0xf4>
 800b05a:	613c      	str	r4, [r7, #16]
 800b05c:	4638      	mov	r0, r7
 800b05e:	f001 f8c3 	bl	800c1e8 <__mcmp>
 800b062:	2800      	cmp	r0, #0
 800b064:	db25      	blt.n	800b0b2 <quorem+0xec>
 800b066:	4629      	mov	r1, r5
 800b068:	2000      	movs	r0, #0
 800b06a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b06e:	f8d1 c000 	ldr.w	ip, [r1]
 800b072:	fa1f fe82 	uxth.w	lr, r2
 800b076:	fa1f f38c 	uxth.w	r3, ip
 800b07a:	eba3 030e 	sub.w	r3, r3, lr
 800b07e:	4403      	add	r3, r0
 800b080:	0c12      	lsrs	r2, r2, #16
 800b082:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b086:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b090:	45c1      	cmp	r9, r8
 800b092:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b096:	f841 3b04 	str.w	r3, [r1], #4
 800b09a:	d2e6      	bcs.n	800b06a <quorem+0xa4>
 800b09c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0a4:	b922      	cbnz	r2, 800b0b0 <quorem+0xea>
 800b0a6:	3b04      	subs	r3, #4
 800b0a8:	429d      	cmp	r5, r3
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	d30b      	bcc.n	800b0c6 <quorem+0x100>
 800b0ae:	613c      	str	r4, [r7, #16]
 800b0b0:	3601      	adds	r6, #1
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	b003      	add	sp, #12
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ba:	6812      	ldr	r2, [r2, #0]
 800b0bc:	3b04      	subs	r3, #4
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	d1cb      	bne.n	800b05a <quorem+0x94>
 800b0c2:	3c01      	subs	r4, #1
 800b0c4:	e7c6      	b.n	800b054 <quorem+0x8e>
 800b0c6:	6812      	ldr	r2, [r2, #0]
 800b0c8:	3b04      	subs	r3, #4
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	d1ef      	bne.n	800b0ae <quorem+0xe8>
 800b0ce:	3c01      	subs	r4, #1
 800b0d0:	e7ea      	b.n	800b0a8 <quorem+0xe2>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e7ee      	b.n	800b0b4 <quorem+0xee>
	...

0800b0d8 <_dtoa_r>:
 800b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	4614      	mov	r4, r2
 800b0de:	461d      	mov	r5, r3
 800b0e0:	69c7      	ldr	r7, [r0, #28]
 800b0e2:	b097      	sub	sp, #92	@ 0x5c
 800b0e4:	4683      	mov	fp, r0
 800b0e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b0ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b0ec:	b97f      	cbnz	r7, 800b10e <_dtoa_r+0x36>
 800b0ee:	2010      	movs	r0, #16
 800b0f0:	f7ff f840 	bl	800a174 <malloc>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0fa:	b920      	cbnz	r0, 800b106 <_dtoa_r+0x2e>
 800b0fc:	21ef      	movs	r1, #239	@ 0xef
 800b0fe:	4ba8      	ldr	r3, [pc, #672]	@ (800b3a0 <_dtoa_r+0x2c8>)
 800b100:	48a8      	ldr	r0, [pc, #672]	@ (800b3a4 <_dtoa_r+0x2cc>)
 800b102:	f001 fba1 	bl	800c848 <__assert_func>
 800b106:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b10a:	6007      	str	r7, [r0, #0]
 800b10c:	60c7      	str	r7, [r0, #12]
 800b10e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b112:	6819      	ldr	r1, [r3, #0]
 800b114:	b159      	cbz	r1, 800b12e <_dtoa_r+0x56>
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	2301      	movs	r3, #1
 800b11a:	4093      	lsls	r3, r2
 800b11c:	604a      	str	r2, [r1, #4]
 800b11e:	608b      	str	r3, [r1, #8]
 800b120:	4658      	mov	r0, fp
 800b122:	f000 fe29 	bl	800bd78 <_Bfree>
 800b126:	2200      	movs	r2, #0
 800b128:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	1e2b      	subs	r3, r5, #0
 800b130:	bfaf      	iteee	ge
 800b132:	2300      	movge	r3, #0
 800b134:	2201      	movlt	r2, #1
 800b136:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b13a:	9303      	strlt	r3, [sp, #12]
 800b13c:	bfa8      	it	ge
 800b13e:	6033      	strge	r3, [r6, #0]
 800b140:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b144:	4b98      	ldr	r3, [pc, #608]	@ (800b3a8 <_dtoa_r+0x2d0>)
 800b146:	bfb8      	it	lt
 800b148:	6032      	strlt	r2, [r6, #0]
 800b14a:	ea33 0308 	bics.w	r3, r3, r8
 800b14e:	d112      	bne.n	800b176 <_dtoa_r+0x9e>
 800b150:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b154:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b15c:	4323      	orrs	r3, r4
 800b15e:	f000 8550 	beq.w	800bc02 <_dtoa_r+0xb2a>
 800b162:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b164:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b3ac <_dtoa_r+0x2d4>
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 8552 	beq.w	800bc12 <_dtoa_r+0xb3a>
 800b16e:	f10a 0303 	add.w	r3, sl, #3
 800b172:	f000 bd4c 	b.w	800bc0e <_dtoa_r+0xb36>
 800b176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b17a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b17e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b182:	2200      	movs	r2, #0
 800b184:	2300      	movs	r3, #0
 800b186:	f7f5 fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800b18a:	4607      	mov	r7, r0
 800b18c:	b158      	cbz	r0, 800b1a6 <_dtoa_r+0xce>
 800b18e:	2301      	movs	r3, #1
 800b190:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b196:	b113      	cbz	r3, 800b19e <_dtoa_r+0xc6>
 800b198:	4b85      	ldr	r3, [pc, #532]	@ (800b3b0 <_dtoa_r+0x2d8>)
 800b19a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b3b4 <_dtoa_r+0x2dc>
 800b1a2:	f000 bd36 	b.w	800bc12 <_dtoa_r+0xb3a>
 800b1a6:	ab14      	add	r3, sp, #80	@ 0x50
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	ab15      	add	r3, sp, #84	@ 0x54
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4658      	mov	r0, fp
 800b1b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1b4:	f001 f8c8 	bl	800c348 <__d2b>
 800b1b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b1bc:	4681      	mov	r9, r0
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	d077      	beq.n	800b2b2 <_dtoa_r+0x1da>
 800b1c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b1d8:	9712      	str	r7, [sp, #72]	@ 0x48
 800b1da:	4619      	mov	r1, r3
 800b1dc:	2200      	movs	r2, #0
 800b1de:	4b76      	ldr	r3, [pc, #472]	@ (800b3b8 <_dtoa_r+0x2e0>)
 800b1e0:	f7f4 ffc2 	bl	8000168 <__aeabi_dsub>
 800b1e4:	a368      	add	r3, pc, #416	@ (adr r3, 800b388 <_dtoa_r+0x2b0>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 f975 	bl	80004d8 <__aeabi_dmul>
 800b1ee:	a368      	add	r3, pc, #416	@ (adr r3, 800b390 <_dtoa_r+0x2b8>)
 800b1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f4:	f7f4 ffba 	bl	800016c <__adddf3>
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	f7f5 f901 	bl	8000404 <__aeabi_i2d>
 800b202:	a365      	add	r3, pc, #404	@ (adr r3, 800b398 <_dtoa_r+0x2c0>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	f7f5 f966 	bl	80004d8 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	4620      	mov	r0, r4
 800b212:	4629      	mov	r1, r5
 800b214:	f7f4 ffaa 	bl	800016c <__adddf3>
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	f7f5 fc0c 	bl	8000a38 <__aeabi_d2iz>
 800b220:	2200      	movs	r2, #0
 800b222:	4607      	mov	r7, r0
 800b224:	2300      	movs	r3, #0
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 fbc7 	bl	80009bc <__aeabi_dcmplt>
 800b22e:	b140      	cbz	r0, 800b242 <_dtoa_r+0x16a>
 800b230:	4638      	mov	r0, r7
 800b232:	f7f5 f8e7 	bl	8000404 <__aeabi_i2d>
 800b236:	4622      	mov	r2, r4
 800b238:	462b      	mov	r3, r5
 800b23a:	f7f5 fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800b23e:	b900      	cbnz	r0, 800b242 <_dtoa_r+0x16a>
 800b240:	3f01      	subs	r7, #1
 800b242:	2f16      	cmp	r7, #22
 800b244:	d853      	bhi.n	800b2ee <_dtoa_r+0x216>
 800b246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b24a:	4b5c      	ldr	r3, [pc, #368]	@ (800b3bc <_dtoa_r+0x2e4>)
 800b24c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f5 fbb2 	bl	80009bc <__aeabi_dcmplt>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d04a      	beq.n	800b2f2 <_dtoa_r+0x21a>
 800b25c:	2300      	movs	r3, #0
 800b25e:	3f01      	subs	r7, #1
 800b260:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b262:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b264:	1b9b      	subs	r3, r3, r6
 800b266:	1e5a      	subs	r2, r3, #1
 800b268:	bf46      	itte	mi
 800b26a:	f1c3 0801 	rsbmi	r8, r3, #1
 800b26e:	2300      	movmi	r3, #0
 800b270:	f04f 0800 	movpl.w	r8, #0
 800b274:	9209      	str	r2, [sp, #36]	@ 0x24
 800b276:	bf48      	it	mi
 800b278:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b27a:	2f00      	cmp	r7, #0
 800b27c:	db3b      	blt.n	800b2f6 <_dtoa_r+0x21e>
 800b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b280:	970e      	str	r7, [sp, #56]	@ 0x38
 800b282:	443b      	add	r3, r7
 800b284:	9309      	str	r3, [sp, #36]	@ 0x24
 800b286:	2300      	movs	r3, #0
 800b288:	930a      	str	r3, [sp, #40]	@ 0x28
 800b28a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b28c:	2b09      	cmp	r3, #9
 800b28e:	d866      	bhi.n	800b35e <_dtoa_r+0x286>
 800b290:	2b05      	cmp	r3, #5
 800b292:	bfc4      	itt	gt
 800b294:	3b04      	subgt	r3, #4
 800b296:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b298:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b29a:	bfc8      	it	gt
 800b29c:	2400      	movgt	r4, #0
 800b29e:	f1a3 0302 	sub.w	r3, r3, #2
 800b2a2:	bfd8      	it	le
 800b2a4:	2401      	movle	r4, #1
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d864      	bhi.n	800b374 <_dtoa_r+0x29c>
 800b2aa:	e8df f003 	tbb	[pc, r3]
 800b2ae:	382b      	.short	0x382b
 800b2b0:	5636      	.short	0x5636
 800b2b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b2b6:	441e      	add	r6, r3
 800b2b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	bfc1      	itttt	gt
 800b2c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b2c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b2c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b2cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b2d0:	bfd6      	itet	le
 800b2d2:	f1c3 0320 	rsble	r3, r3, #32
 800b2d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b2da:	fa04 f003 	lslle.w	r0, r4, r3
 800b2de:	f7f5 f881 	bl	80003e4 <__aeabi_ui2d>
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b2e8:	3e01      	subs	r6, #1
 800b2ea:	9212      	str	r2, [sp, #72]	@ 0x48
 800b2ec:	e775      	b.n	800b1da <_dtoa_r+0x102>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e7b6      	b.n	800b260 <_dtoa_r+0x188>
 800b2f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b2f4:	e7b5      	b.n	800b262 <_dtoa_r+0x18a>
 800b2f6:	427b      	negs	r3, r7
 800b2f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	eba8 0807 	sub.w	r8, r8, r7
 800b300:	930e      	str	r3, [sp, #56]	@ 0x38
 800b302:	e7c2      	b.n	800b28a <_dtoa_r+0x1b2>
 800b304:	2300      	movs	r3, #0
 800b306:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b308:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dc35      	bgt.n	800b37a <_dtoa_r+0x2a2>
 800b30e:	2301      	movs	r3, #1
 800b310:	461a      	mov	r2, r3
 800b312:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b316:	9221      	str	r2, [sp, #132]	@ 0x84
 800b318:	e00b      	b.n	800b332 <_dtoa_r+0x25a>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e7f3      	b.n	800b306 <_dtoa_r+0x22e>
 800b31e:	2300      	movs	r3, #0
 800b320:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b322:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b324:	18fb      	adds	r3, r7, r3
 800b326:	9308      	str	r3, [sp, #32]
 800b328:	3301      	adds	r3, #1
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	bfb8      	it	lt
 800b330:	2301      	movlt	r3, #1
 800b332:	2100      	movs	r1, #0
 800b334:	2204      	movs	r2, #4
 800b336:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b33a:	f102 0514 	add.w	r5, r2, #20
 800b33e:	429d      	cmp	r5, r3
 800b340:	d91f      	bls.n	800b382 <_dtoa_r+0x2aa>
 800b342:	6041      	str	r1, [r0, #4]
 800b344:	4658      	mov	r0, fp
 800b346:	f000 fcd7 	bl	800bcf8 <_Balloc>
 800b34a:	4682      	mov	sl, r0
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d139      	bne.n	800b3c4 <_dtoa_r+0x2ec>
 800b350:	4602      	mov	r2, r0
 800b352:	f240 11af 	movw	r1, #431	@ 0x1af
 800b356:	4b1a      	ldr	r3, [pc, #104]	@ (800b3c0 <_dtoa_r+0x2e8>)
 800b358:	e6d2      	b.n	800b100 <_dtoa_r+0x28>
 800b35a:	2301      	movs	r3, #1
 800b35c:	e7e0      	b.n	800b320 <_dtoa_r+0x248>
 800b35e:	2401      	movs	r4, #1
 800b360:	2300      	movs	r3, #0
 800b362:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b364:	9320      	str	r3, [sp, #128]	@ 0x80
 800b366:	f04f 33ff 	mov.w	r3, #4294967295
 800b36a:	2200      	movs	r2, #0
 800b36c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b370:	2312      	movs	r3, #18
 800b372:	e7d0      	b.n	800b316 <_dtoa_r+0x23e>
 800b374:	2301      	movs	r3, #1
 800b376:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b378:	e7f5      	b.n	800b366 <_dtoa_r+0x28e>
 800b37a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b37c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b380:	e7d7      	b.n	800b332 <_dtoa_r+0x25a>
 800b382:	3101      	adds	r1, #1
 800b384:	0052      	lsls	r2, r2, #1
 800b386:	e7d8      	b.n	800b33a <_dtoa_r+0x262>
 800b388:	636f4361 	.word	0x636f4361
 800b38c:	3fd287a7 	.word	0x3fd287a7
 800b390:	8b60c8b3 	.word	0x8b60c8b3
 800b394:	3fc68a28 	.word	0x3fc68a28
 800b398:	509f79fb 	.word	0x509f79fb
 800b39c:	3fd34413 	.word	0x3fd34413
 800b3a0:	0800dc1b 	.word	0x0800dc1b
 800b3a4:	0800dc32 	.word	0x0800dc32
 800b3a8:	7ff00000 	.word	0x7ff00000
 800b3ac:	0800dc17 	.word	0x0800dc17
 800b3b0:	0800dbeb 	.word	0x0800dbeb
 800b3b4:	0800dbea 	.word	0x0800dbea
 800b3b8:	3ff80000 	.word	0x3ff80000
 800b3bc:	0800dd28 	.word	0x0800dd28
 800b3c0:	0800dc8a 	.word	0x0800dc8a
 800b3c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3c8:	6018      	str	r0, [r3, #0]
 800b3ca:	9b07      	ldr	r3, [sp, #28]
 800b3cc:	2b0e      	cmp	r3, #14
 800b3ce:	f200 80a4 	bhi.w	800b51a <_dtoa_r+0x442>
 800b3d2:	2c00      	cmp	r4, #0
 800b3d4:	f000 80a1 	beq.w	800b51a <_dtoa_r+0x442>
 800b3d8:	2f00      	cmp	r7, #0
 800b3da:	dd33      	ble.n	800b444 <_dtoa_r+0x36c>
 800b3dc:	4b86      	ldr	r3, [pc, #536]	@ (800b5f8 <_dtoa_r+0x520>)
 800b3de:	f007 020f 	and.w	r2, r7, #15
 800b3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3e6:	05f8      	lsls	r0, r7, #23
 800b3e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b3f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b3f4:	d516      	bpl.n	800b424 <_dtoa_r+0x34c>
 800b3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3fa:	4b80      	ldr	r3, [pc, #512]	@ (800b5fc <_dtoa_r+0x524>)
 800b3fc:	2603      	movs	r6, #3
 800b3fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b402:	f7f5 f993 	bl	800072c <__aeabi_ddiv>
 800b406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40a:	f004 040f 	and.w	r4, r4, #15
 800b40e:	4d7b      	ldr	r5, [pc, #492]	@ (800b5fc <_dtoa_r+0x524>)
 800b410:	b954      	cbnz	r4, 800b428 <_dtoa_r+0x350>
 800b412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b41a:	f7f5 f987 	bl	800072c <__aeabi_ddiv>
 800b41e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b422:	e028      	b.n	800b476 <_dtoa_r+0x39e>
 800b424:	2602      	movs	r6, #2
 800b426:	e7f2      	b.n	800b40e <_dtoa_r+0x336>
 800b428:	07e1      	lsls	r1, r4, #31
 800b42a:	d508      	bpl.n	800b43e <_dtoa_r+0x366>
 800b42c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b430:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b434:	f7f5 f850 	bl	80004d8 <__aeabi_dmul>
 800b438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b43c:	3601      	adds	r6, #1
 800b43e:	1064      	asrs	r4, r4, #1
 800b440:	3508      	adds	r5, #8
 800b442:	e7e5      	b.n	800b410 <_dtoa_r+0x338>
 800b444:	f000 80d2 	beq.w	800b5ec <_dtoa_r+0x514>
 800b448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b44c:	427c      	negs	r4, r7
 800b44e:	4b6a      	ldr	r3, [pc, #424]	@ (800b5f8 <_dtoa_r+0x520>)
 800b450:	f004 020f 	and.w	r2, r4, #15
 800b454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 f83c 	bl	80004d8 <__aeabi_dmul>
 800b460:	2602      	movs	r6, #2
 800b462:	2300      	movs	r3, #0
 800b464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b468:	4d64      	ldr	r5, [pc, #400]	@ (800b5fc <_dtoa_r+0x524>)
 800b46a:	1124      	asrs	r4, r4, #4
 800b46c:	2c00      	cmp	r4, #0
 800b46e:	f040 80b2 	bne.w	800b5d6 <_dtoa_r+0x4fe>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1d3      	bne.n	800b41e <_dtoa_r+0x346>
 800b476:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b47a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f000 80b7 	beq.w	800b5f0 <_dtoa_r+0x518>
 800b482:	2200      	movs	r2, #0
 800b484:	4620      	mov	r0, r4
 800b486:	4629      	mov	r1, r5
 800b488:	4b5d      	ldr	r3, [pc, #372]	@ (800b600 <_dtoa_r+0x528>)
 800b48a:	f7f5 fa97 	bl	80009bc <__aeabi_dcmplt>
 800b48e:	2800      	cmp	r0, #0
 800b490:	f000 80ae 	beq.w	800b5f0 <_dtoa_r+0x518>
 800b494:	9b07      	ldr	r3, [sp, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 80aa 	beq.w	800b5f0 <_dtoa_r+0x518>
 800b49c:	9b08      	ldr	r3, [sp, #32]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dd37      	ble.n	800b512 <_dtoa_r+0x43a>
 800b4a2:	1e7b      	subs	r3, r7, #1
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4b55      	ldr	r3, [pc, #340]	@ (800b604 <_dtoa_r+0x52c>)
 800b4ae:	f7f5 f813 	bl	80004d8 <__aeabi_dmul>
 800b4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b6:	9c08      	ldr	r4, [sp, #32]
 800b4b8:	3601      	adds	r6, #1
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7f4 ffa2 	bl	8000404 <__aeabi_i2d>
 800b4c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4c4:	f7f5 f808 	bl	80004d8 <__aeabi_dmul>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b608 <_dtoa_r+0x530>)
 800b4cc:	f7f4 fe4e 	bl	800016c <__adddf3>
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b4d6:	2c00      	cmp	r4, #0
 800b4d8:	f040 809a 	bne.w	800b610 <_dtoa_r+0x538>
 800b4dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4b4a      	ldr	r3, [pc, #296]	@ (800b60c <_dtoa_r+0x534>)
 800b4e4:	f7f4 fe40 	bl	8000168 <__aeabi_dsub>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4f0:	462a      	mov	r2, r5
 800b4f2:	4633      	mov	r3, r6
 800b4f4:	f7f5 fa80 	bl	80009f8 <__aeabi_dcmpgt>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	f040 828e 	bne.w	800ba1a <_dtoa_r+0x942>
 800b4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b502:	462a      	mov	r2, r5
 800b504:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b508:	f7f5 fa58 	bl	80009bc <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f040 8127 	bne.w	800b760 <_dtoa_r+0x688>
 800b512:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b516:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b51a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f2c0 8163 	blt.w	800b7e8 <_dtoa_r+0x710>
 800b522:	2f0e      	cmp	r7, #14
 800b524:	f300 8160 	bgt.w	800b7e8 <_dtoa_r+0x710>
 800b528:	4b33      	ldr	r3, [pc, #204]	@ (800b5f8 <_dtoa_r+0x520>)
 800b52a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b52e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b532:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b536:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b538:	2b00      	cmp	r3, #0
 800b53a:	da03      	bge.n	800b544 <_dtoa_r+0x46c>
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f340 8100 	ble.w	800b744 <_dtoa_r+0x66c>
 800b544:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b548:	4656      	mov	r6, sl
 800b54a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 f8eb 	bl	800072c <__aeabi_ddiv>
 800b556:	f7f5 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800b55a:	4680      	mov	r8, r0
 800b55c:	f7f4 ff52 	bl	8000404 <__aeabi_i2d>
 800b560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b564:	f7f4 ffb8 	bl	80004d8 <__aeabi_dmul>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	f7f4 fdfa 	bl	8000168 <__aeabi_dsub>
 800b574:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b578:	9d07      	ldr	r5, [sp, #28]
 800b57a:	f806 4b01 	strb.w	r4, [r6], #1
 800b57e:	eba6 040a 	sub.w	r4, r6, sl
 800b582:	42a5      	cmp	r5, r4
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	f040 8116 	bne.w	800b7b8 <_dtoa_r+0x6e0>
 800b58c:	f7f4 fdee 	bl	800016c <__adddf3>
 800b590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b594:	4604      	mov	r4, r0
 800b596:	460d      	mov	r5, r1
 800b598:	f7f5 fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	f040 80f8 	bne.w	800b792 <_dtoa_r+0x6ba>
 800b5a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7f5 f9fd 	bl	80009a8 <__aeabi_dcmpeq>
 800b5ae:	b118      	cbz	r0, 800b5b8 <_dtoa_r+0x4e0>
 800b5b0:	f018 0f01 	tst.w	r8, #1
 800b5b4:	f040 80ed 	bne.w	800b792 <_dtoa_r+0x6ba>
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	4658      	mov	r0, fp
 800b5bc:	f000 fbdc 	bl	800bd78 <_Bfree>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	7033      	strb	r3, [r6, #0]
 800b5c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b5c6:	3701      	adds	r7, #1
 800b5c8:	601f      	str	r7, [r3, #0]
 800b5ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8320 	beq.w	800bc12 <_dtoa_r+0xb3a>
 800b5d2:	601e      	str	r6, [r3, #0]
 800b5d4:	e31d      	b.n	800bc12 <_dtoa_r+0xb3a>
 800b5d6:	07e2      	lsls	r2, r4, #31
 800b5d8:	d505      	bpl.n	800b5e6 <_dtoa_r+0x50e>
 800b5da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5de:	f7f4 ff7b 	bl	80004d8 <__aeabi_dmul>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	3601      	adds	r6, #1
 800b5e6:	1064      	asrs	r4, r4, #1
 800b5e8:	3508      	adds	r5, #8
 800b5ea:	e73f      	b.n	800b46c <_dtoa_r+0x394>
 800b5ec:	2602      	movs	r6, #2
 800b5ee:	e742      	b.n	800b476 <_dtoa_r+0x39e>
 800b5f0:	9c07      	ldr	r4, [sp, #28]
 800b5f2:	9704      	str	r7, [sp, #16]
 800b5f4:	e761      	b.n	800b4ba <_dtoa_r+0x3e2>
 800b5f6:	bf00      	nop
 800b5f8:	0800dd28 	.word	0x0800dd28
 800b5fc:	0800dd00 	.word	0x0800dd00
 800b600:	3ff00000 	.word	0x3ff00000
 800b604:	40240000 	.word	0x40240000
 800b608:	401c0000 	.word	0x401c0000
 800b60c:	40140000 	.word	0x40140000
 800b610:	4b70      	ldr	r3, [pc, #448]	@ (800b7d4 <_dtoa_r+0x6fc>)
 800b612:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b61c:	4454      	add	r4, sl
 800b61e:	2900      	cmp	r1, #0
 800b620:	d045      	beq.n	800b6ae <_dtoa_r+0x5d6>
 800b622:	2000      	movs	r0, #0
 800b624:	496c      	ldr	r1, [pc, #432]	@ (800b7d8 <_dtoa_r+0x700>)
 800b626:	f7f5 f881 	bl	800072c <__aeabi_ddiv>
 800b62a:	4633      	mov	r3, r6
 800b62c:	462a      	mov	r2, r5
 800b62e:	f7f4 fd9b 	bl	8000168 <__aeabi_dsub>
 800b632:	4656      	mov	r6, sl
 800b634:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63c:	f7f5 f9fc 	bl	8000a38 <__aeabi_d2iz>
 800b640:	4605      	mov	r5, r0
 800b642:	f7f4 fedf 	bl	8000404 <__aeabi_i2d>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b64e:	f7f4 fd8b 	bl	8000168 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	3530      	adds	r5, #48	@ 0x30
 800b658:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b65c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b660:	f806 5b01 	strb.w	r5, [r6], #1
 800b664:	f7f5 f9aa 	bl	80009bc <__aeabi_dcmplt>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d163      	bne.n	800b734 <_dtoa_r+0x65c>
 800b66c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b670:	2000      	movs	r0, #0
 800b672:	495a      	ldr	r1, [pc, #360]	@ (800b7dc <_dtoa_r+0x704>)
 800b674:	f7f4 fd78 	bl	8000168 <__aeabi_dsub>
 800b678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b67c:	f7f5 f99e 	bl	80009bc <__aeabi_dcmplt>
 800b680:	2800      	cmp	r0, #0
 800b682:	f040 8087 	bne.w	800b794 <_dtoa_r+0x6bc>
 800b686:	42a6      	cmp	r6, r4
 800b688:	f43f af43 	beq.w	800b512 <_dtoa_r+0x43a>
 800b68c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b690:	2200      	movs	r2, #0
 800b692:	4b53      	ldr	r3, [pc, #332]	@ (800b7e0 <_dtoa_r+0x708>)
 800b694:	f7f4 ff20 	bl	80004d8 <__aeabi_dmul>
 800b698:	2200      	movs	r2, #0
 800b69a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a2:	4b4f      	ldr	r3, [pc, #316]	@ (800b7e0 <_dtoa_r+0x708>)
 800b6a4:	f7f4 ff18 	bl	80004d8 <__aeabi_dmul>
 800b6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ac:	e7c4      	b.n	800b638 <_dtoa_r+0x560>
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f7f4 ff11 	bl	80004d8 <__aeabi_dmul>
 800b6b6:	4656      	mov	r6, sl
 800b6b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c2:	f7f5 f9b9 	bl	8000a38 <__aeabi_d2iz>
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	f7f4 fe9c 	bl	8000404 <__aeabi_i2d>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6d4:	f7f4 fd48 	bl	8000168 <__aeabi_dsub>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	3530      	adds	r5, #48	@ 0x30
 800b6de:	f806 5b01 	strb.w	r5, [r6], #1
 800b6e2:	42a6      	cmp	r6, r4
 800b6e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6e8:	f04f 0200 	mov.w	r2, #0
 800b6ec:	d124      	bne.n	800b738 <_dtoa_r+0x660>
 800b6ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6f2:	4b39      	ldr	r3, [pc, #228]	@ (800b7d8 <_dtoa_r+0x700>)
 800b6f4:	f7f4 fd3a 	bl	800016c <__adddf3>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b700:	f7f5 f97a 	bl	80009f8 <__aeabi_dcmpgt>
 800b704:	2800      	cmp	r0, #0
 800b706:	d145      	bne.n	800b794 <_dtoa_r+0x6bc>
 800b708:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b70c:	2000      	movs	r0, #0
 800b70e:	4932      	ldr	r1, [pc, #200]	@ (800b7d8 <_dtoa_r+0x700>)
 800b710:	f7f4 fd2a 	bl	8000168 <__aeabi_dsub>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71c:	f7f5 f94e 	bl	80009bc <__aeabi_dcmplt>
 800b720:	2800      	cmp	r0, #0
 800b722:	f43f aef6 	beq.w	800b512 <_dtoa_r+0x43a>
 800b726:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b728:	1e73      	subs	r3, r6, #1
 800b72a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b72c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b730:	2b30      	cmp	r3, #48	@ 0x30
 800b732:	d0f8      	beq.n	800b726 <_dtoa_r+0x64e>
 800b734:	9f04      	ldr	r7, [sp, #16]
 800b736:	e73f      	b.n	800b5b8 <_dtoa_r+0x4e0>
 800b738:	4b29      	ldr	r3, [pc, #164]	@ (800b7e0 <_dtoa_r+0x708>)
 800b73a:	f7f4 fecd 	bl	80004d8 <__aeabi_dmul>
 800b73e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b742:	e7bc      	b.n	800b6be <_dtoa_r+0x5e6>
 800b744:	d10c      	bne.n	800b760 <_dtoa_r+0x688>
 800b746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b74a:	2200      	movs	r2, #0
 800b74c:	4b25      	ldr	r3, [pc, #148]	@ (800b7e4 <_dtoa_r+0x70c>)
 800b74e:	f7f4 fec3 	bl	80004d8 <__aeabi_dmul>
 800b752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b756:	f7f5 f945 	bl	80009e4 <__aeabi_dcmpge>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f000 815b 	beq.w	800ba16 <_dtoa_r+0x93e>
 800b760:	2400      	movs	r4, #0
 800b762:	4625      	mov	r5, r4
 800b764:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b766:	4656      	mov	r6, sl
 800b768:	43db      	mvns	r3, r3
 800b76a:	9304      	str	r3, [sp, #16]
 800b76c:	2700      	movs	r7, #0
 800b76e:	4621      	mov	r1, r4
 800b770:	4658      	mov	r0, fp
 800b772:	f000 fb01 	bl	800bd78 <_Bfree>
 800b776:	2d00      	cmp	r5, #0
 800b778:	d0dc      	beq.n	800b734 <_dtoa_r+0x65c>
 800b77a:	b12f      	cbz	r7, 800b788 <_dtoa_r+0x6b0>
 800b77c:	42af      	cmp	r7, r5
 800b77e:	d003      	beq.n	800b788 <_dtoa_r+0x6b0>
 800b780:	4639      	mov	r1, r7
 800b782:	4658      	mov	r0, fp
 800b784:	f000 faf8 	bl	800bd78 <_Bfree>
 800b788:	4629      	mov	r1, r5
 800b78a:	4658      	mov	r0, fp
 800b78c:	f000 faf4 	bl	800bd78 <_Bfree>
 800b790:	e7d0      	b.n	800b734 <_dtoa_r+0x65c>
 800b792:	9704      	str	r7, [sp, #16]
 800b794:	4633      	mov	r3, r6
 800b796:	461e      	mov	r6, r3
 800b798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b79c:	2a39      	cmp	r2, #57	@ 0x39
 800b79e:	d107      	bne.n	800b7b0 <_dtoa_r+0x6d8>
 800b7a0:	459a      	cmp	sl, r3
 800b7a2:	d1f8      	bne.n	800b796 <_dtoa_r+0x6be>
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	3201      	adds	r2, #1
 800b7a8:	9204      	str	r2, [sp, #16]
 800b7aa:	2230      	movs	r2, #48	@ 0x30
 800b7ac:	f88a 2000 	strb.w	r2, [sl]
 800b7b0:	781a      	ldrb	r2, [r3, #0]
 800b7b2:	3201      	adds	r2, #1
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	e7bd      	b.n	800b734 <_dtoa_r+0x65c>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4b09      	ldr	r3, [pc, #36]	@ (800b7e0 <_dtoa_r+0x708>)
 800b7bc:	f7f4 fe8c 	bl	80004d8 <__aeabi_dmul>
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	460d      	mov	r5, r1
 800b7c8:	f7f5 f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f43f aebc 	beq.w	800b54a <_dtoa_r+0x472>
 800b7d2:	e6f1      	b.n	800b5b8 <_dtoa_r+0x4e0>
 800b7d4:	0800dd28 	.word	0x0800dd28
 800b7d8:	3fe00000 	.word	0x3fe00000
 800b7dc:	3ff00000 	.word	0x3ff00000
 800b7e0:	40240000 	.word	0x40240000
 800b7e4:	40140000 	.word	0x40140000
 800b7e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	f000 80db 	beq.w	800b9a6 <_dtoa_r+0x8ce>
 800b7f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b7f2:	2a01      	cmp	r2, #1
 800b7f4:	f300 80bf 	bgt.w	800b976 <_dtoa_r+0x89e>
 800b7f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	f000 80b7 	beq.w	800b96e <_dtoa_r+0x896>
 800b800:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b804:	4646      	mov	r6, r8
 800b806:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b80a:	2101      	movs	r1, #1
 800b80c:	441a      	add	r2, r3
 800b80e:	4658      	mov	r0, fp
 800b810:	4498      	add	r8, r3
 800b812:	9209      	str	r2, [sp, #36]	@ 0x24
 800b814:	f000 fb64 	bl	800bee0 <__i2b>
 800b818:	4605      	mov	r5, r0
 800b81a:	b15e      	cbz	r6, 800b834 <_dtoa_r+0x75c>
 800b81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd08      	ble.n	800b834 <_dtoa_r+0x75c>
 800b822:	42b3      	cmp	r3, r6
 800b824:	bfa8      	it	ge
 800b826:	4633      	movge	r3, r6
 800b828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b82a:	eba8 0803 	sub.w	r8, r8, r3
 800b82e:	1af6      	subs	r6, r6, r3
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	9309      	str	r3, [sp, #36]	@ 0x24
 800b834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b836:	b1f3      	cbz	r3, 800b876 <_dtoa_r+0x79e>
 800b838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 80b7 	beq.w	800b9ae <_dtoa_r+0x8d6>
 800b840:	b18c      	cbz	r4, 800b866 <_dtoa_r+0x78e>
 800b842:	4629      	mov	r1, r5
 800b844:	4622      	mov	r2, r4
 800b846:	4658      	mov	r0, fp
 800b848:	f000 fc08 	bl	800c05c <__pow5mult>
 800b84c:	464a      	mov	r2, r9
 800b84e:	4601      	mov	r1, r0
 800b850:	4605      	mov	r5, r0
 800b852:	4658      	mov	r0, fp
 800b854:	f000 fb5a 	bl	800bf0c <__multiply>
 800b858:	4649      	mov	r1, r9
 800b85a:	9004      	str	r0, [sp, #16]
 800b85c:	4658      	mov	r0, fp
 800b85e:	f000 fa8b 	bl	800bd78 <_Bfree>
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	4699      	mov	r9, r3
 800b866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b868:	1b1a      	subs	r2, r3, r4
 800b86a:	d004      	beq.n	800b876 <_dtoa_r+0x79e>
 800b86c:	4649      	mov	r1, r9
 800b86e:	4658      	mov	r0, fp
 800b870:	f000 fbf4 	bl	800c05c <__pow5mult>
 800b874:	4681      	mov	r9, r0
 800b876:	2101      	movs	r1, #1
 800b878:	4658      	mov	r0, fp
 800b87a:	f000 fb31 	bl	800bee0 <__i2b>
 800b87e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b880:	4604      	mov	r4, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 81c9 	beq.w	800bc1a <_dtoa_r+0xb42>
 800b888:	461a      	mov	r2, r3
 800b88a:	4601      	mov	r1, r0
 800b88c:	4658      	mov	r0, fp
 800b88e:	f000 fbe5 	bl	800c05c <__pow5mult>
 800b892:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b894:	4604      	mov	r4, r0
 800b896:	2b01      	cmp	r3, #1
 800b898:	f300 808f 	bgt.w	800b9ba <_dtoa_r+0x8e2>
 800b89c:	9b02      	ldr	r3, [sp, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f040 8087 	bne.w	800b9b2 <_dtoa_r+0x8da>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f040 8083 	bne.w	800b9b6 <_dtoa_r+0x8de>
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8b6:	0d1b      	lsrs	r3, r3, #20
 800b8b8:	051b      	lsls	r3, r3, #20
 800b8ba:	b12b      	cbz	r3, 800b8c8 <_dtoa_r+0x7f0>
 800b8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8be:	f108 0801 	add.w	r8, r8, #1
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f000 81aa 	beq.w	800bc26 <_dtoa_r+0xb4e>
 800b8d2:	6923      	ldr	r3, [r4, #16]
 800b8d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8d8:	6918      	ldr	r0, [r3, #16]
 800b8da:	f000 fab5 	bl	800be48 <__hi0bits>
 800b8de:	f1c0 0020 	rsb	r0, r0, #32
 800b8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e4:	4418      	add	r0, r3
 800b8e6:	f010 001f 	ands.w	r0, r0, #31
 800b8ea:	d071      	beq.n	800b9d0 <_dtoa_r+0x8f8>
 800b8ec:	f1c0 0320 	rsb	r3, r0, #32
 800b8f0:	2b04      	cmp	r3, #4
 800b8f2:	dd65      	ble.n	800b9c0 <_dtoa_r+0x8e8>
 800b8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f6:	f1c0 001c 	rsb	r0, r0, #28
 800b8fa:	4403      	add	r3, r0
 800b8fc:	4480      	add	r8, r0
 800b8fe:	4406      	add	r6, r0
 800b900:	9309      	str	r3, [sp, #36]	@ 0x24
 800b902:	f1b8 0f00 	cmp.w	r8, #0
 800b906:	dd05      	ble.n	800b914 <_dtoa_r+0x83c>
 800b908:	4649      	mov	r1, r9
 800b90a:	4642      	mov	r2, r8
 800b90c:	4658      	mov	r0, fp
 800b90e:	f000 fbff 	bl	800c110 <__lshift>
 800b912:	4681      	mov	r9, r0
 800b914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd05      	ble.n	800b926 <_dtoa_r+0x84e>
 800b91a:	4621      	mov	r1, r4
 800b91c:	461a      	mov	r2, r3
 800b91e:	4658      	mov	r0, fp
 800b920:	f000 fbf6 	bl	800c110 <__lshift>
 800b924:	4604      	mov	r4, r0
 800b926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d053      	beq.n	800b9d4 <_dtoa_r+0x8fc>
 800b92c:	4621      	mov	r1, r4
 800b92e:	4648      	mov	r0, r9
 800b930:	f000 fc5a 	bl	800c1e8 <__mcmp>
 800b934:	2800      	cmp	r0, #0
 800b936:	da4d      	bge.n	800b9d4 <_dtoa_r+0x8fc>
 800b938:	1e7b      	subs	r3, r7, #1
 800b93a:	4649      	mov	r1, r9
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	220a      	movs	r2, #10
 800b940:	2300      	movs	r3, #0
 800b942:	4658      	mov	r0, fp
 800b944:	f000 fa3a 	bl	800bdbc <__multadd>
 800b948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b94a:	4681      	mov	r9, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 816c 	beq.w	800bc2a <_dtoa_r+0xb52>
 800b952:	2300      	movs	r3, #0
 800b954:	4629      	mov	r1, r5
 800b956:	220a      	movs	r2, #10
 800b958:	4658      	mov	r0, fp
 800b95a:	f000 fa2f 	bl	800bdbc <__multadd>
 800b95e:	9b08      	ldr	r3, [sp, #32]
 800b960:	4605      	mov	r5, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	dc61      	bgt.n	800ba2a <_dtoa_r+0x952>
 800b966:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b968:	2b02      	cmp	r3, #2
 800b96a:	dc3b      	bgt.n	800b9e4 <_dtoa_r+0x90c>
 800b96c:	e05d      	b.n	800ba2a <_dtoa_r+0x952>
 800b96e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b970:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b974:	e746      	b.n	800b804 <_dtoa_r+0x72c>
 800b976:	9b07      	ldr	r3, [sp, #28]
 800b978:	1e5c      	subs	r4, r3, #1
 800b97a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	bfbf      	itttt	lt
 800b980:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b982:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b984:	1ae3      	sublt	r3, r4, r3
 800b986:	18d2      	addlt	r2, r2, r3
 800b988:	bfa8      	it	ge
 800b98a:	1b1c      	subge	r4, r3, r4
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	bfbe      	ittt	lt
 800b990:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b992:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b994:	2400      	movlt	r4, #0
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfb5      	itete	lt
 800b99a:	eba8 0603 	sublt.w	r6, r8, r3
 800b99e:	4646      	movge	r6, r8
 800b9a0:	2300      	movlt	r3, #0
 800b9a2:	9b07      	ldrge	r3, [sp, #28]
 800b9a4:	e730      	b.n	800b808 <_dtoa_r+0x730>
 800b9a6:	4646      	mov	r6, r8
 800b9a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b9ac:	e735      	b.n	800b81a <_dtoa_r+0x742>
 800b9ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9b0:	e75c      	b.n	800b86c <_dtoa_r+0x794>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e788      	b.n	800b8c8 <_dtoa_r+0x7f0>
 800b9b6:	9b02      	ldr	r3, [sp, #8]
 800b9b8:	e786      	b.n	800b8c8 <_dtoa_r+0x7f0>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9be:	e788      	b.n	800b8d2 <_dtoa_r+0x7fa>
 800b9c0:	d09f      	beq.n	800b902 <_dtoa_r+0x82a>
 800b9c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9c4:	331c      	adds	r3, #28
 800b9c6:	441a      	add	r2, r3
 800b9c8:	4498      	add	r8, r3
 800b9ca:	441e      	add	r6, r3
 800b9cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9ce:	e798      	b.n	800b902 <_dtoa_r+0x82a>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	e7f6      	b.n	800b9c2 <_dtoa_r+0x8ea>
 800b9d4:	9b07      	ldr	r3, [sp, #28]
 800b9d6:	9704      	str	r7, [sp, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	dc20      	bgt.n	800ba1e <_dtoa_r+0x946>
 800b9dc:	9308      	str	r3, [sp, #32]
 800b9de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	dd1e      	ble.n	800ba22 <_dtoa_r+0x94a>
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f47f aebc 	bne.w	800b764 <_dtoa_r+0x68c>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	2205      	movs	r2, #5
 800b9f0:	4658      	mov	r0, fp
 800b9f2:	f000 f9e3 	bl	800bdbc <__multadd>
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	4648      	mov	r0, r9
 800b9fc:	f000 fbf4 	bl	800c1e8 <__mcmp>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	f77f aeaf 	ble.w	800b764 <_dtoa_r+0x68c>
 800ba06:	2331      	movs	r3, #49	@ 0x31
 800ba08:	4656      	mov	r6, sl
 800ba0a:	f806 3b01 	strb.w	r3, [r6], #1
 800ba0e:	9b04      	ldr	r3, [sp, #16]
 800ba10:	3301      	adds	r3, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	e6aa      	b.n	800b76c <_dtoa_r+0x694>
 800ba16:	9c07      	ldr	r4, [sp, #28]
 800ba18:	9704      	str	r7, [sp, #16]
 800ba1a:	4625      	mov	r5, r4
 800ba1c:	e7f3      	b.n	800ba06 <_dtoa_r+0x92e>
 800ba1e:	9b07      	ldr	r3, [sp, #28]
 800ba20:	9308      	str	r3, [sp, #32]
 800ba22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 8104 	beq.w	800bc32 <_dtoa_r+0xb5a>
 800ba2a:	2e00      	cmp	r6, #0
 800ba2c:	dd05      	ble.n	800ba3a <_dtoa_r+0x962>
 800ba2e:	4629      	mov	r1, r5
 800ba30:	4632      	mov	r2, r6
 800ba32:	4658      	mov	r0, fp
 800ba34:	f000 fb6c 	bl	800c110 <__lshift>
 800ba38:	4605      	mov	r5, r0
 800ba3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d05a      	beq.n	800baf6 <_dtoa_r+0xa1e>
 800ba40:	4658      	mov	r0, fp
 800ba42:	6869      	ldr	r1, [r5, #4]
 800ba44:	f000 f958 	bl	800bcf8 <_Balloc>
 800ba48:	4606      	mov	r6, r0
 800ba4a:	b928      	cbnz	r0, 800ba58 <_dtoa_r+0x980>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba52:	4b83      	ldr	r3, [pc, #524]	@ (800bc60 <_dtoa_r+0xb88>)
 800ba54:	f7ff bb54 	b.w	800b100 <_dtoa_r+0x28>
 800ba58:	692a      	ldr	r2, [r5, #16]
 800ba5a:	f105 010c 	add.w	r1, r5, #12
 800ba5e:	3202      	adds	r2, #2
 800ba60:	0092      	lsls	r2, r2, #2
 800ba62:	300c      	adds	r0, #12
 800ba64:	f000 fee2 	bl	800c82c <memcpy>
 800ba68:	2201      	movs	r2, #1
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4658      	mov	r0, fp
 800ba6e:	f000 fb4f 	bl	800c110 <__lshift>
 800ba72:	462f      	mov	r7, r5
 800ba74:	4605      	mov	r5, r0
 800ba76:	f10a 0301 	add.w	r3, sl, #1
 800ba7a:	9307      	str	r3, [sp, #28]
 800ba7c:	9b08      	ldr	r3, [sp, #32]
 800ba7e:	4453      	add	r3, sl
 800ba80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba82:	9b02      	ldr	r3, [sp, #8]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba8a:	9b07      	ldr	r3, [sp, #28]
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	4648      	mov	r0, r9
 800ba92:	9302      	str	r3, [sp, #8]
 800ba94:	f7ff fa97 	bl	800afc6 <quorem>
 800ba98:	4639      	mov	r1, r7
 800ba9a:	9008      	str	r0, [sp, #32]
 800ba9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800baa0:	4648      	mov	r0, r9
 800baa2:	f000 fba1 	bl	800c1e8 <__mcmp>
 800baa6:	462a      	mov	r2, r5
 800baa8:	9009      	str	r0, [sp, #36]	@ 0x24
 800baaa:	4621      	mov	r1, r4
 800baac:	4658      	mov	r0, fp
 800baae:	f000 fbb7 	bl	800c220 <__mdiff>
 800bab2:	68c2      	ldr	r2, [r0, #12]
 800bab4:	4606      	mov	r6, r0
 800bab6:	bb02      	cbnz	r2, 800bafa <_dtoa_r+0xa22>
 800bab8:	4601      	mov	r1, r0
 800baba:	4648      	mov	r0, r9
 800babc:	f000 fb94 	bl	800c1e8 <__mcmp>
 800bac0:	4602      	mov	r2, r0
 800bac2:	4631      	mov	r1, r6
 800bac4:	4658      	mov	r0, fp
 800bac6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bac8:	f000 f956 	bl	800bd78 <_Bfree>
 800bacc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bace:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bad0:	9e07      	ldr	r6, [sp, #28]
 800bad2:	ea43 0102 	orr.w	r1, r3, r2
 800bad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bad8:	4319      	orrs	r1, r3
 800bada:	d110      	bne.n	800bafe <_dtoa_r+0xa26>
 800badc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bae0:	d029      	beq.n	800bb36 <_dtoa_r+0xa5e>
 800bae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd02      	ble.n	800baee <_dtoa_r+0xa16>
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800baee:	9b02      	ldr	r3, [sp, #8]
 800baf0:	f883 8000 	strb.w	r8, [r3]
 800baf4:	e63b      	b.n	800b76e <_dtoa_r+0x696>
 800baf6:	4628      	mov	r0, r5
 800baf8:	e7bb      	b.n	800ba72 <_dtoa_r+0x99a>
 800bafa:	2201      	movs	r2, #1
 800bafc:	e7e1      	b.n	800bac2 <_dtoa_r+0x9ea>
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	db04      	blt.n	800bb0e <_dtoa_r+0xa36>
 800bb04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bb06:	430b      	orrs	r3, r1
 800bb08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	d120      	bne.n	800bb50 <_dtoa_r+0xa78>
 800bb0e:	2a00      	cmp	r2, #0
 800bb10:	dded      	ble.n	800baee <_dtoa_r+0xa16>
 800bb12:	4649      	mov	r1, r9
 800bb14:	2201      	movs	r2, #1
 800bb16:	4658      	mov	r0, fp
 800bb18:	f000 fafa 	bl	800c110 <__lshift>
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4681      	mov	r9, r0
 800bb20:	f000 fb62 	bl	800c1e8 <__mcmp>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	dc03      	bgt.n	800bb30 <_dtoa_r+0xa58>
 800bb28:	d1e1      	bne.n	800baee <_dtoa_r+0xa16>
 800bb2a:	f018 0f01 	tst.w	r8, #1
 800bb2e:	d0de      	beq.n	800baee <_dtoa_r+0xa16>
 800bb30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb34:	d1d8      	bne.n	800bae8 <_dtoa_r+0xa10>
 800bb36:	2339      	movs	r3, #57	@ 0x39
 800bb38:	9a02      	ldr	r2, [sp, #8]
 800bb3a:	7013      	strb	r3, [r2, #0]
 800bb3c:	4633      	mov	r3, r6
 800bb3e:	461e      	mov	r6, r3
 800bb40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	2a39      	cmp	r2, #57	@ 0x39
 800bb48:	d052      	beq.n	800bbf0 <_dtoa_r+0xb18>
 800bb4a:	3201      	adds	r2, #1
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	e60e      	b.n	800b76e <_dtoa_r+0x696>
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	dd07      	ble.n	800bb64 <_dtoa_r+0xa8c>
 800bb54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb58:	d0ed      	beq.n	800bb36 <_dtoa_r+0xa5e>
 800bb5a:	9a02      	ldr	r2, [sp, #8]
 800bb5c:	f108 0301 	add.w	r3, r8, #1
 800bb60:	7013      	strb	r3, [r2, #0]
 800bb62:	e604      	b.n	800b76e <_dtoa_r+0x696>
 800bb64:	9b07      	ldr	r3, [sp, #28]
 800bb66:	9a07      	ldr	r2, [sp, #28]
 800bb68:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d028      	beq.n	800bbc4 <_dtoa_r+0xaec>
 800bb72:	4649      	mov	r1, r9
 800bb74:	2300      	movs	r3, #0
 800bb76:	220a      	movs	r2, #10
 800bb78:	4658      	mov	r0, fp
 800bb7a:	f000 f91f 	bl	800bdbc <__multadd>
 800bb7e:	42af      	cmp	r7, r5
 800bb80:	4681      	mov	r9, r0
 800bb82:	f04f 0300 	mov.w	r3, #0
 800bb86:	f04f 020a 	mov.w	r2, #10
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	4658      	mov	r0, fp
 800bb8e:	d107      	bne.n	800bba0 <_dtoa_r+0xac8>
 800bb90:	f000 f914 	bl	800bdbc <__multadd>
 800bb94:	4607      	mov	r7, r0
 800bb96:	4605      	mov	r5, r0
 800bb98:	9b07      	ldr	r3, [sp, #28]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	9307      	str	r3, [sp, #28]
 800bb9e:	e774      	b.n	800ba8a <_dtoa_r+0x9b2>
 800bba0:	f000 f90c 	bl	800bdbc <__multadd>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4607      	mov	r7, r0
 800bba8:	2300      	movs	r3, #0
 800bbaa:	220a      	movs	r2, #10
 800bbac:	4658      	mov	r0, fp
 800bbae:	f000 f905 	bl	800bdbc <__multadd>
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	e7f0      	b.n	800bb98 <_dtoa_r+0xac0>
 800bbb6:	9b08      	ldr	r3, [sp, #32]
 800bbb8:	2700      	movs	r7, #0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bfcc      	ite	gt
 800bbbe:	461e      	movgt	r6, r3
 800bbc0:	2601      	movle	r6, #1
 800bbc2:	4456      	add	r6, sl
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	4658      	mov	r0, fp
 800bbca:	f000 faa1 	bl	800c110 <__lshift>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4681      	mov	r9, r0
 800bbd2:	f000 fb09 	bl	800c1e8 <__mcmp>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	dcb0      	bgt.n	800bb3c <_dtoa_r+0xa64>
 800bbda:	d102      	bne.n	800bbe2 <_dtoa_r+0xb0a>
 800bbdc:	f018 0f01 	tst.w	r8, #1
 800bbe0:	d1ac      	bne.n	800bb3c <_dtoa_r+0xa64>
 800bbe2:	4633      	mov	r3, r6
 800bbe4:	461e      	mov	r6, r3
 800bbe6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbea:	2a30      	cmp	r2, #48	@ 0x30
 800bbec:	d0fa      	beq.n	800bbe4 <_dtoa_r+0xb0c>
 800bbee:	e5be      	b.n	800b76e <_dtoa_r+0x696>
 800bbf0:	459a      	cmp	sl, r3
 800bbf2:	d1a4      	bne.n	800bb3e <_dtoa_r+0xa66>
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	9304      	str	r3, [sp, #16]
 800bbfa:	2331      	movs	r3, #49	@ 0x31
 800bbfc:	f88a 3000 	strb.w	r3, [sl]
 800bc00:	e5b5      	b.n	800b76e <_dtoa_r+0x696>
 800bc02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bc04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc64 <_dtoa_r+0xb8c>
 800bc08:	b11b      	cbz	r3, 800bc12 <_dtoa_r+0xb3a>
 800bc0a:	f10a 0308 	add.w	r3, sl, #8
 800bc0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	4650      	mov	r0, sl
 800bc14:	b017      	add	sp, #92	@ 0x5c
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	f77f ae3d 	ble.w	800b89c <_dtoa_r+0x7c4>
 800bc22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc24:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc26:	2001      	movs	r0, #1
 800bc28:	e65b      	b.n	800b8e2 <_dtoa_r+0x80a>
 800bc2a:	9b08      	ldr	r3, [sp, #32]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f77f aed6 	ble.w	800b9de <_dtoa_r+0x906>
 800bc32:	4656      	mov	r6, sl
 800bc34:	4621      	mov	r1, r4
 800bc36:	4648      	mov	r0, r9
 800bc38:	f7ff f9c5 	bl	800afc6 <quorem>
 800bc3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	f806 8b01 	strb.w	r8, [r6], #1
 800bc46:	eba6 020a 	sub.w	r2, r6, sl
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	ddb3      	ble.n	800bbb6 <_dtoa_r+0xade>
 800bc4e:	4649      	mov	r1, r9
 800bc50:	2300      	movs	r3, #0
 800bc52:	220a      	movs	r2, #10
 800bc54:	4658      	mov	r0, fp
 800bc56:	f000 f8b1 	bl	800bdbc <__multadd>
 800bc5a:	4681      	mov	r9, r0
 800bc5c:	e7ea      	b.n	800bc34 <_dtoa_r+0xb5c>
 800bc5e:	bf00      	nop
 800bc60:	0800dc8a 	.word	0x0800dc8a
 800bc64:	0800dc0e 	.word	0x0800dc0e

0800bc68 <_free_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	d040      	beq.n	800bcf2 <_free_r+0x8a>
 800bc70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc74:	1f0c      	subs	r4, r1, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bfb8      	it	lt
 800bc7a:	18e4      	addlt	r4, r4, r3
 800bc7c:	f7fe fb2c 	bl	800a2d8 <__malloc_lock>
 800bc80:	4a1c      	ldr	r2, [pc, #112]	@ (800bcf4 <_free_r+0x8c>)
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	b933      	cbnz	r3, 800bc94 <_free_r+0x2c>
 800bc86:	6063      	str	r3, [r4, #4]
 800bc88:	6014      	str	r4, [r2, #0]
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc90:	f7fe bb28 	b.w	800a2e4 <__malloc_unlock>
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	d908      	bls.n	800bcaa <_free_r+0x42>
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	1821      	adds	r1, r4, r0
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	bf01      	itttt	eq
 800bca0:	6819      	ldreq	r1, [r3, #0]
 800bca2:	685b      	ldreq	r3, [r3, #4]
 800bca4:	1809      	addeq	r1, r1, r0
 800bca6:	6021      	streq	r1, [r4, #0]
 800bca8:	e7ed      	b.n	800bc86 <_free_r+0x1e>
 800bcaa:	461a      	mov	r2, r3
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	b10b      	cbz	r3, 800bcb4 <_free_r+0x4c>
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	d9fa      	bls.n	800bcaa <_free_r+0x42>
 800bcb4:	6811      	ldr	r1, [r2, #0]
 800bcb6:	1850      	adds	r0, r2, r1
 800bcb8:	42a0      	cmp	r0, r4
 800bcba:	d10b      	bne.n	800bcd4 <_free_r+0x6c>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	4401      	add	r1, r0
 800bcc0:	1850      	adds	r0, r2, r1
 800bcc2:	4283      	cmp	r3, r0
 800bcc4:	6011      	str	r1, [r2, #0]
 800bcc6:	d1e0      	bne.n	800bc8a <_free_r+0x22>
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	4408      	add	r0, r1
 800bcce:	6010      	str	r0, [r2, #0]
 800bcd0:	6053      	str	r3, [r2, #4]
 800bcd2:	e7da      	b.n	800bc8a <_free_r+0x22>
 800bcd4:	d902      	bls.n	800bcdc <_free_r+0x74>
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	e7d6      	b.n	800bc8a <_free_r+0x22>
 800bcdc:	6820      	ldr	r0, [r4, #0]
 800bcde:	1821      	adds	r1, r4, r0
 800bce0:	428b      	cmp	r3, r1
 800bce2:	bf01      	itttt	eq
 800bce4:	6819      	ldreq	r1, [r3, #0]
 800bce6:	685b      	ldreq	r3, [r3, #4]
 800bce8:	1809      	addeq	r1, r1, r0
 800bcea:	6021      	streq	r1, [r4, #0]
 800bcec:	6063      	str	r3, [r4, #4]
 800bcee:	6054      	str	r4, [r2, #4]
 800bcf0:	e7cb      	b.n	800bc8a <_free_r+0x22>
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	20000440 	.word	0x20000440

0800bcf8 <_Balloc>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	69c6      	ldr	r6, [r0, #28]
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	460d      	mov	r5, r1
 800bd00:	b976      	cbnz	r6, 800bd20 <_Balloc+0x28>
 800bd02:	2010      	movs	r0, #16
 800bd04:	f7fe fa36 	bl	800a174 <malloc>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	61e0      	str	r0, [r4, #28]
 800bd0c:	b920      	cbnz	r0, 800bd18 <_Balloc+0x20>
 800bd0e:	216b      	movs	r1, #107	@ 0x6b
 800bd10:	4b17      	ldr	r3, [pc, #92]	@ (800bd70 <_Balloc+0x78>)
 800bd12:	4818      	ldr	r0, [pc, #96]	@ (800bd74 <_Balloc+0x7c>)
 800bd14:	f000 fd98 	bl	800c848 <__assert_func>
 800bd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd1c:	6006      	str	r6, [r0, #0]
 800bd1e:	60c6      	str	r6, [r0, #12]
 800bd20:	69e6      	ldr	r6, [r4, #28]
 800bd22:	68f3      	ldr	r3, [r6, #12]
 800bd24:	b183      	cbz	r3, 800bd48 <_Balloc+0x50>
 800bd26:	69e3      	ldr	r3, [r4, #28]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd2e:	b9b8      	cbnz	r0, 800bd60 <_Balloc+0x68>
 800bd30:	2101      	movs	r1, #1
 800bd32:	fa01 f605 	lsl.w	r6, r1, r5
 800bd36:	1d72      	adds	r2, r6, #5
 800bd38:	4620      	mov	r0, r4
 800bd3a:	0092      	lsls	r2, r2, #2
 800bd3c:	f000 fda2 	bl	800c884 <_calloc_r>
 800bd40:	b160      	cbz	r0, 800bd5c <_Balloc+0x64>
 800bd42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd46:	e00e      	b.n	800bd66 <_Balloc+0x6e>
 800bd48:	2221      	movs	r2, #33	@ 0x21
 800bd4a:	2104      	movs	r1, #4
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 fd99 	bl	800c884 <_calloc_r>
 800bd52:	69e3      	ldr	r3, [r4, #28]
 800bd54:	60f0      	str	r0, [r6, #12]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e4      	bne.n	800bd26 <_Balloc+0x2e>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	6802      	ldr	r2, [r0, #0]
 800bd62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd66:	2300      	movs	r3, #0
 800bd68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd6c:	e7f7      	b.n	800bd5e <_Balloc+0x66>
 800bd6e:	bf00      	nop
 800bd70:	0800dc1b 	.word	0x0800dc1b
 800bd74:	0800dc9b 	.word	0x0800dc9b

0800bd78 <_Bfree>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	69c6      	ldr	r6, [r0, #28]
 800bd7c:	4605      	mov	r5, r0
 800bd7e:	460c      	mov	r4, r1
 800bd80:	b976      	cbnz	r6, 800bda0 <_Bfree+0x28>
 800bd82:	2010      	movs	r0, #16
 800bd84:	f7fe f9f6 	bl	800a174 <malloc>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	61e8      	str	r0, [r5, #28]
 800bd8c:	b920      	cbnz	r0, 800bd98 <_Bfree+0x20>
 800bd8e:	218f      	movs	r1, #143	@ 0x8f
 800bd90:	4b08      	ldr	r3, [pc, #32]	@ (800bdb4 <_Bfree+0x3c>)
 800bd92:	4809      	ldr	r0, [pc, #36]	@ (800bdb8 <_Bfree+0x40>)
 800bd94:	f000 fd58 	bl	800c848 <__assert_func>
 800bd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd9c:	6006      	str	r6, [r0, #0]
 800bd9e:	60c6      	str	r6, [r0, #12]
 800bda0:	b13c      	cbz	r4, 800bdb2 <_Bfree+0x3a>
 800bda2:	69eb      	ldr	r3, [r5, #28]
 800bda4:	6862      	ldr	r2, [r4, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdac:	6021      	str	r1, [r4, #0]
 800bdae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	0800dc1b 	.word	0x0800dc1b
 800bdb8:	0800dc9b 	.word	0x0800dc9b

0800bdbc <__multadd>:
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	461e      	mov	r6, r3
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	690d      	ldr	r5, [r1, #16]
 800bdca:	f101 0c14 	add.w	ip, r1, #20
 800bdce:	f8dc 3000 	ldr.w	r3, [ip]
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	b299      	uxth	r1, r3
 800bdd6:	fb02 6101 	mla	r1, r2, r1, r6
 800bdda:	0c1e      	lsrs	r6, r3, #16
 800bddc:	0c0b      	lsrs	r3, r1, #16
 800bdde:	fb02 3306 	mla	r3, r2, r6, r3
 800bde2:	b289      	uxth	r1, r1
 800bde4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bde8:	4285      	cmp	r5, r0
 800bdea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdee:	f84c 1b04 	str.w	r1, [ip], #4
 800bdf2:	dcec      	bgt.n	800bdce <__multadd+0x12>
 800bdf4:	b30e      	cbz	r6, 800be3a <__multadd+0x7e>
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	dc19      	bgt.n	800be30 <__multadd+0x74>
 800bdfc:	6861      	ldr	r1, [r4, #4]
 800bdfe:	4638      	mov	r0, r7
 800be00:	3101      	adds	r1, #1
 800be02:	f7ff ff79 	bl	800bcf8 <_Balloc>
 800be06:	4680      	mov	r8, r0
 800be08:	b928      	cbnz	r0, 800be16 <__multadd+0x5a>
 800be0a:	4602      	mov	r2, r0
 800be0c:	21ba      	movs	r1, #186	@ 0xba
 800be0e:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <__multadd+0x84>)
 800be10:	480c      	ldr	r0, [pc, #48]	@ (800be44 <__multadd+0x88>)
 800be12:	f000 fd19 	bl	800c848 <__assert_func>
 800be16:	6922      	ldr	r2, [r4, #16]
 800be18:	f104 010c 	add.w	r1, r4, #12
 800be1c:	3202      	adds	r2, #2
 800be1e:	0092      	lsls	r2, r2, #2
 800be20:	300c      	adds	r0, #12
 800be22:	f000 fd03 	bl	800c82c <memcpy>
 800be26:	4621      	mov	r1, r4
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff ffa5 	bl	800bd78 <_Bfree>
 800be2e:	4644      	mov	r4, r8
 800be30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be34:	3501      	adds	r5, #1
 800be36:	615e      	str	r6, [r3, #20]
 800be38:	6125      	str	r5, [r4, #16]
 800be3a:	4620      	mov	r0, r4
 800be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be40:	0800dc8a 	.word	0x0800dc8a
 800be44:	0800dc9b 	.word	0x0800dc9b

0800be48 <__hi0bits>:
 800be48:	4603      	mov	r3, r0
 800be4a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be4e:	bf3a      	itte	cc
 800be50:	0403      	lslcc	r3, r0, #16
 800be52:	2010      	movcc	r0, #16
 800be54:	2000      	movcs	r0, #0
 800be56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be5a:	bf3c      	itt	cc
 800be5c:	021b      	lslcc	r3, r3, #8
 800be5e:	3008      	addcc	r0, #8
 800be60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be64:	bf3c      	itt	cc
 800be66:	011b      	lslcc	r3, r3, #4
 800be68:	3004      	addcc	r0, #4
 800be6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be6e:	bf3c      	itt	cc
 800be70:	009b      	lslcc	r3, r3, #2
 800be72:	3002      	addcc	r0, #2
 800be74:	2b00      	cmp	r3, #0
 800be76:	db05      	blt.n	800be84 <__hi0bits+0x3c>
 800be78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be7c:	f100 0001 	add.w	r0, r0, #1
 800be80:	bf08      	it	eq
 800be82:	2020      	moveq	r0, #32
 800be84:	4770      	bx	lr

0800be86 <__lo0bits>:
 800be86:	6803      	ldr	r3, [r0, #0]
 800be88:	4602      	mov	r2, r0
 800be8a:	f013 0007 	ands.w	r0, r3, #7
 800be8e:	d00b      	beq.n	800bea8 <__lo0bits+0x22>
 800be90:	07d9      	lsls	r1, r3, #31
 800be92:	d421      	bmi.n	800bed8 <__lo0bits+0x52>
 800be94:	0798      	lsls	r0, r3, #30
 800be96:	bf49      	itett	mi
 800be98:	085b      	lsrmi	r3, r3, #1
 800be9a:	089b      	lsrpl	r3, r3, #2
 800be9c:	2001      	movmi	r0, #1
 800be9e:	6013      	strmi	r3, [r2, #0]
 800bea0:	bf5c      	itt	pl
 800bea2:	2002      	movpl	r0, #2
 800bea4:	6013      	strpl	r3, [r2, #0]
 800bea6:	4770      	bx	lr
 800bea8:	b299      	uxth	r1, r3
 800beaa:	b909      	cbnz	r1, 800beb0 <__lo0bits+0x2a>
 800beac:	2010      	movs	r0, #16
 800beae:	0c1b      	lsrs	r3, r3, #16
 800beb0:	b2d9      	uxtb	r1, r3
 800beb2:	b909      	cbnz	r1, 800beb8 <__lo0bits+0x32>
 800beb4:	3008      	adds	r0, #8
 800beb6:	0a1b      	lsrs	r3, r3, #8
 800beb8:	0719      	lsls	r1, r3, #28
 800beba:	bf04      	itt	eq
 800bebc:	091b      	lsreq	r3, r3, #4
 800bebe:	3004      	addeq	r0, #4
 800bec0:	0799      	lsls	r1, r3, #30
 800bec2:	bf04      	itt	eq
 800bec4:	089b      	lsreq	r3, r3, #2
 800bec6:	3002      	addeq	r0, #2
 800bec8:	07d9      	lsls	r1, r3, #31
 800beca:	d403      	bmi.n	800bed4 <__lo0bits+0x4e>
 800becc:	085b      	lsrs	r3, r3, #1
 800bece:	f100 0001 	add.w	r0, r0, #1
 800bed2:	d003      	beq.n	800bedc <__lo0bits+0x56>
 800bed4:	6013      	str	r3, [r2, #0]
 800bed6:	4770      	bx	lr
 800bed8:	2000      	movs	r0, #0
 800beda:	4770      	bx	lr
 800bedc:	2020      	movs	r0, #32
 800bede:	4770      	bx	lr

0800bee0 <__i2b>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	460c      	mov	r4, r1
 800bee4:	2101      	movs	r1, #1
 800bee6:	f7ff ff07 	bl	800bcf8 <_Balloc>
 800beea:	4602      	mov	r2, r0
 800beec:	b928      	cbnz	r0, 800befa <__i2b+0x1a>
 800beee:	f240 1145 	movw	r1, #325	@ 0x145
 800bef2:	4b04      	ldr	r3, [pc, #16]	@ (800bf04 <__i2b+0x24>)
 800bef4:	4804      	ldr	r0, [pc, #16]	@ (800bf08 <__i2b+0x28>)
 800bef6:	f000 fca7 	bl	800c848 <__assert_func>
 800befa:	2301      	movs	r3, #1
 800befc:	6144      	str	r4, [r0, #20]
 800befe:	6103      	str	r3, [r0, #16]
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	0800dc8a 	.word	0x0800dc8a
 800bf08:	0800dc9b 	.word	0x0800dc9b

0800bf0c <__multiply>:
 800bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	4614      	mov	r4, r2
 800bf12:	690a      	ldr	r2, [r1, #16]
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	460f      	mov	r7, r1
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	bfa2      	ittt	ge
 800bf1c:	4623      	movge	r3, r4
 800bf1e:	460c      	movge	r4, r1
 800bf20:	461f      	movge	r7, r3
 800bf22:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf26:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	6861      	ldr	r1, [r4, #4]
 800bf2e:	eb0a 0609 	add.w	r6, sl, r9
 800bf32:	42b3      	cmp	r3, r6
 800bf34:	b085      	sub	sp, #20
 800bf36:	bfb8      	it	lt
 800bf38:	3101      	addlt	r1, #1
 800bf3a:	f7ff fedd 	bl	800bcf8 <_Balloc>
 800bf3e:	b930      	cbnz	r0, 800bf4e <__multiply+0x42>
 800bf40:	4602      	mov	r2, r0
 800bf42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf46:	4b43      	ldr	r3, [pc, #268]	@ (800c054 <__multiply+0x148>)
 800bf48:	4843      	ldr	r0, [pc, #268]	@ (800c058 <__multiply+0x14c>)
 800bf4a:	f000 fc7d 	bl	800c848 <__assert_func>
 800bf4e:	f100 0514 	add.w	r5, r0, #20
 800bf52:	462b      	mov	r3, r5
 800bf54:	2200      	movs	r2, #0
 800bf56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf5a:	4543      	cmp	r3, r8
 800bf5c:	d321      	bcc.n	800bfa2 <__multiply+0x96>
 800bf5e:	f107 0114 	add.w	r1, r7, #20
 800bf62:	f104 0214 	add.w	r2, r4, #20
 800bf66:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf6a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf6e:	9302      	str	r3, [sp, #8]
 800bf70:	1b13      	subs	r3, r2, r4
 800bf72:	3b15      	subs	r3, #21
 800bf74:	f023 0303 	bic.w	r3, r3, #3
 800bf78:	3304      	adds	r3, #4
 800bf7a:	f104 0715 	add.w	r7, r4, #21
 800bf7e:	42ba      	cmp	r2, r7
 800bf80:	bf38      	it	cc
 800bf82:	2304      	movcc	r3, #4
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	9b02      	ldr	r3, [sp, #8]
 800bf88:	9103      	str	r1, [sp, #12]
 800bf8a:	428b      	cmp	r3, r1
 800bf8c:	d80c      	bhi.n	800bfa8 <__multiply+0x9c>
 800bf8e:	2e00      	cmp	r6, #0
 800bf90:	dd03      	ble.n	800bf9a <__multiply+0x8e>
 800bf92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d05a      	beq.n	800c050 <__multiply+0x144>
 800bf9a:	6106      	str	r6, [r0, #16]
 800bf9c:	b005      	add	sp, #20
 800bf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa2:	f843 2b04 	str.w	r2, [r3], #4
 800bfa6:	e7d8      	b.n	800bf5a <__multiply+0x4e>
 800bfa8:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfac:	f1ba 0f00 	cmp.w	sl, #0
 800bfb0:	d023      	beq.n	800bffa <__multiply+0xee>
 800bfb2:	46a9      	mov	r9, r5
 800bfb4:	f04f 0c00 	mov.w	ip, #0
 800bfb8:	f104 0e14 	add.w	lr, r4, #20
 800bfbc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfc0:	f8d9 3000 	ldr.w	r3, [r9]
 800bfc4:	fa1f fb87 	uxth.w	fp, r7
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfce:	4463      	add	r3, ip
 800bfd0:	f8d9 c000 	ldr.w	ip, [r9]
 800bfd4:	0c3f      	lsrs	r7, r7, #16
 800bfd6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bfda:	fb0a c707 	mla	r7, sl, r7, ip
 800bfde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfe8:	4572      	cmp	r2, lr
 800bfea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bfee:	f849 3b04 	str.w	r3, [r9], #4
 800bff2:	d8e3      	bhi.n	800bfbc <__multiply+0xb0>
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	f845 c003 	str.w	ip, [r5, r3]
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	3104      	adds	r1, #4
 800bffe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c002:	f1b9 0f00 	cmp.w	r9, #0
 800c006:	d021      	beq.n	800c04c <__multiply+0x140>
 800c008:	46ae      	mov	lr, r5
 800c00a:	f04f 0a00 	mov.w	sl, #0
 800c00e:	682b      	ldr	r3, [r5, #0]
 800c010:	f104 0c14 	add.w	ip, r4, #20
 800c014:	f8bc b000 	ldrh.w	fp, [ip]
 800c018:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	fb09 770b 	mla	r7, r9, fp, r7
 800c022:	4457      	add	r7, sl
 800c024:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c028:	f84e 3b04 	str.w	r3, [lr], #4
 800c02c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c034:	f8be 3000 	ldrh.w	r3, [lr]
 800c038:	4562      	cmp	r2, ip
 800c03a:	fb09 330a 	mla	r3, r9, sl, r3
 800c03e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c042:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c046:	d8e5      	bhi.n	800c014 <__multiply+0x108>
 800c048:	9f01      	ldr	r7, [sp, #4]
 800c04a:	51eb      	str	r3, [r5, r7]
 800c04c:	3504      	adds	r5, #4
 800c04e:	e79a      	b.n	800bf86 <__multiply+0x7a>
 800c050:	3e01      	subs	r6, #1
 800c052:	e79c      	b.n	800bf8e <__multiply+0x82>
 800c054:	0800dc8a 	.word	0x0800dc8a
 800c058:	0800dc9b 	.word	0x0800dc9b

0800c05c <__pow5mult>:
 800c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c060:	4615      	mov	r5, r2
 800c062:	f012 0203 	ands.w	r2, r2, #3
 800c066:	4607      	mov	r7, r0
 800c068:	460e      	mov	r6, r1
 800c06a:	d007      	beq.n	800c07c <__pow5mult+0x20>
 800c06c:	4c25      	ldr	r4, [pc, #148]	@ (800c104 <__pow5mult+0xa8>)
 800c06e:	3a01      	subs	r2, #1
 800c070:	2300      	movs	r3, #0
 800c072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c076:	f7ff fea1 	bl	800bdbc <__multadd>
 800c07a:	4606      	mov	r6, r0
 800c07c:	10ad      	asrs	r5, r5, #2
 800c07e:	d03d      	beq.n	800c0fc <__pow5mult+0xa0>
 800c080:	69fc      	ldr	r4, [r7, #28]
 800c082:	b97c      	cbnz	r4, 800c0a4 <__pow5mult+0x48>
 800c084:	2010      	movs	r0, #16
 800c086:	f7fe f875 	bl	800a174 <malloc>
 800c08a:	4602      	mov	r2, r0
 800c08c:	61f8      	str	r0, [r7, #28]
 800c08e:	b928      	cbnz	r0, 800c09c <__pow5mult+0x40>
 800c090:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c094:	4b1c      	ldr	r3, [pc, #112]	@ (800c108 <__pow5mult+0xac>)
 800c096:	481d      	ldr	r0, [pc, #116]	@ (800c10c <__pow5mult+0xb0>)
 800c098:	f000 fbd6 	bl	800c848 <__assert_func>
 800c09c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0a0:	6004      	str	r4, [r0, #0]
 800c0a2:	60c4      	str	r4, [r0, #12]
 800c0a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0ac:	b94c      	cbnz	r4, 800c0c2 <__pow5mult+0x66>
 800c0ae:	f240 2171 	movw	r1, #625	@ 0x271
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff ff14 	bl	800bee0 <__i2b>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	f04f 0900 	mov.w	r9, #0
 800c0c6:	07eb      	lsls	r3, r5, #31
 800c0c8:	d50a      	bpl.n	800c0e0 <__pow5mult+0x84>
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f7ff ff1c 	bl	800bf0c <__multiply>
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff fe4d 	bl	800bd78 <_Bfree>
 800c0de:	4646      	mov	r6, r8
 800c0e0:	106d      	asrs	r5, r5, #1
 800c0e2:	d00b      	beq.n	800c0fc <__pow5mult+0xa0>
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	b938      	cbnz	r0, 800c0f8 <__pow5mult+0x9c>
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	f7ff ff0d 	bl	800bf0c <__multiply>
 800c0f2:	6020      	str	r0, [r4, #0]
 800c0f4:	f8c0 9000 	str.w	r9, [r0]
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	e7e4      	b.n	800c0c6 <__pow5mult+0x6a>
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c102:	bf00      	nop
 800c104:	0800dcf4 	.word	0x0800dcf4
 800c108:	0800dc1b 	.word	0x0800dc1b
 800c10c:	0800dc9b 	.word	0x0800dc9b

0800c110 <__lshift>:
 800c110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	460c      	mov	r4, r1
 800c116:	4607      	mov	r7, r0
 800c118:	4691      	mov	r9, r2
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	6849      	ldr	r1, [r1, #4]
 800c11e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c128:	f108 0601 	add.w	r6, r8, #1
 800c12c:	42b3      	cmp	r3, r6
 800c12e:	db0b      	blt.n	800c148 <__lshift+0x38>
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff fde1 	bl	800bcf8 <_Balloc>
 800c136:	4605      	mov	r5, r0
 800c138:	b948      	cbnz	r0, 800c14e <__lshift+0x3e>
 800c13a:	4602      	mov	r2, r0
 800c13c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c140:	4b27      	ldr	r3, [pc, #156]	@ (800c1e0 <__lshift+0xd0>)
 800c142:	4828      	ldr	r0, [pc, #160]	@ (800c1e4 <__lshift+0xd4>)
 800c144:	f000 fb80 	bl	800c848 <__assert_func>
 800c148:	3101      	adds	r1, #1
 800c14a:	005b      	lsls	r3, r3, #1
 800c14c:	e7ee      	b.n	800c12c <__lshift+0x1c>
 800c14e:	2300      	movs	r3, #0
 800c150:	f100 0114 	add.w	r1, r0, #20
 800c154:	f100 0210 	add.w	r2, r0, #16
 800c158:	4618      	mov	r0, r3
 800c15a:	4553      	cmp	r3, sl
 800c15c:	db33      	blt.n	800c1c6 <__lshift+0xb6>
 800c15e:	6920      	ldr	r0, [r4, #16]
 800c160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c164:	f104 0314 	add.w	r3, r4, #20
 800c168:	f019 091f 	ands.w	r9, r9, #31
 800c16c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c170:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c174:	d02b      	beq.n	800c1ce <__lshift+0xbe>
 800c176:	468a      	mov	sl, r1
 800c178:	2200      	movs	r2, #0
 800c17a:	f1c9 0e20 	rsb	lr, r9, #32
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	fa00 f009 	lsl.w	r0, r0, r9
 800c184:	4310      	orrs	r0, r2
 800c186:	f84a 0b04 	str.w	r0, [sl], #4
 800c18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18e:	459c      	cmp	ip, r3
 800c190:	fa22 f20e 	lsr.w	r2, r2, lr
 800c194:	d8f3      	bhi.n	800c17e <__lshift+0x6e>
 800c196:	ebac 0304 	sub.w	r3, ip, r4
 800c19a:	3b15      	subs	r3, #21
 800c19c:	f023 0303 	bic.w	r3, r3, #3
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	f104 0015 	add.w	r0, r4, #21
 800c1a6:	4584      	cmp	ip, r0
 800c1a8:	bf38      	it	cc
 800c1aa:	2304      	movcc	r3, #4
 800c1ac:	50ca      	str	r2, [r1, r3]
 800c1ae:	b10a      	cbz	r2, 800c1b4 <__lshift+0xa4>
 800c1b0:	f108 0602 	add.w	r6, r8, #2
 800c1b4:	3e01      	subs	r6, #1
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	612e      	str	r6, [r5, #16]
 800c1bc:	f7ff fddc 	bl	800bd78 <_Bfree>
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	e7c5      	b.n	800c15a <__lshift+0x4a>
 800c1ce:	3904      	subs	r1, #4
 800c1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d4:	459c      	cmp	ip, r3
 800c1d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1da:	d8f9      	bhi.n	800c1d0 <__lshift+0xc0>
 800c1dc:	e7ea      	b.n	800c1b4 <__lshift+0xa4>
 800c1de:	bf00      	nop
 800c1e0:	0800dc8a 	.word	0x0800dc8a
 800c1e4:	0800dc9b 	.word	0x0800dc9b

0800c1e8 <__mcmp>:
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	690a      	ldr	r2, [r1, #16]
 800c1ec:	6900      	ldr	r0, [r0, #16]
 800c1ee:	b530      	push	{r4, r5, lr}
 800c1f0:	1a80      	subs	r0, r0, r2
 800c1f2:	d10e      	bne.n	800c212 <__mcmp+0x2a>
 800c1f4:	3314      	adds	r3, #20
 800c1f6:	3114      	adds	r1, #20
 800c1f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c208:	4295      	cmp	r5, r2
 800c20a:	d003      	beq.n	800c214 <__mcmp+0x2c>
 800c20c:	d205      	bcs.n	800c21a <__mcmp+0x32>
 800c20e:	f04f 30ff 	mov.w	r0, #4294967295
 800c212:	bd30      	pop	{r4, r5, pc}
 800c214:	42a3      	cmp	r3, r4
 800c216:	d3f3      	bcc.n	800c200 <__mcmp+0x18>
 800c218:	e7fb      	b.n	800c212 <__mcmp+0x2a>
 800c21a:	2001      	movs	r0, #1
 800c21c:	e7f9      	b.n	800c212 <__mcmp+0x2a>
	...

0800c220 <__mdiff>:
 800c220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	4689      	mov	r9, r1
 800c226:	4606      	mov	r6, r0
 800c228:	4611      	mov	r1, r2
 800c22a:	4648      	mov	r0, r9
 800c22c:	4614      	mov	r4, r2
 800c22e:	f7ff ffdb 	bl	800c1e8 <__mcmp>
 800c232:	1e05      	subs	r5, r0, #0
 800c234:	d112      	bne.n	800c25c <__mdiff+0x3c>
 800c236:	4629      	mov	r1, r5
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff fd5d 	bl	800bcf8 <_Balloc>
 800c23e:	4602      	mov	r2, r0
 800c240:	b928      	cbnz	r0, 800c24e <__mdiff+0x2e>
 800c242:	f240 2137 	movw	r1, #567	@ 0x237
 800c246:	4b3e      	ldr	r3, [pc, #248]	@ (800c340 <__mdiff+0x120>)
 800c248:	483e      	ldr	r0, [pc, #248]	@ (800c344 <__mdiff+0x124>)
 800c24a:	f000 fafd 	bl	800c848 <__assert_func>
 800c24e:	2301      	movs	r3, #1
 800c250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c254:	4610      	mov	r0, r2
 800c256:	b003      	add	sp, #12
 800c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25c:	bfbc      	itt	lt
 800c25e:	464b      	movlt	r3, r9
 800c260:	46a1      	movlt	r9, r4
 800c262:	4630      	mov	r0, r6
 800c264:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c268:	bfba      	itte	lt
 800c26a:	461c      	movlt	r4, r3
 800c26c:	2501      	movlt	r5, #1
 800c26e:	2500      	movge	r5, #0
 800c270:	f7ff fd42 	bl	800bcf8 <_Balloc>
 800c274:	4602      	mov	r2, r0
 800c276:	b918      	cbnz	r0, 800c280 <__mdiff+0x60>
 800c278:	f240 2145 	movw	r1, #581	@ 0x245
 800c27c:	4b30      	ldr	r3, [pc, #192]	@ (800c340 <__mdiff+0x120>)
 800c27e:	e7e3      	b.n	800c248 <__mdiff+0x28>
 800c280:	f100 0b14 	add.w	fp, r0, #20
 800c284:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c288:	f109 0310 	add.w	r3, r9, #16
 800c28c:	60c5      	str	r5, [r0, #12]
 800c28e:	f04f 0c00 	mov.w	ip, #0
 800c292:	f109 0514 	add.w	r5, r9, #20
 800c296:	46d9      	mov	r9, fp
 800c298:	6926      	ldr	r6, [r4, #16]
 800c29a:	f104 0e14 	add.w	lr, r4, #20
 800c29e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	9b01      	ldr	r3, [sp, #4]
 800c2aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2b2:	b281      	uxth	r1, r0
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	fa1f f38a 	uxth.w	r3, sl
 800c2ba:	1a5b      	subs	r3, r3, r1
 800c2bc:	0c00      	lsrs	r0, r0, #16
 800c2be:	4463      	add	r3, ip
 800c2c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2ce:	4576      	cmp	r6, lr
 800c2d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2d4:	f849 3b04 	str.w	r3, [r9], #4
 800c2d8:	d8e6      	bhi.n	800c2a8 <__mdiff+0x88>
 800c2da:	1b33      	subs	r3, r6, r4
 800c2dc:	3b15      	subs	r3, #21
 800c2de:	f023 0303 	bic.w	r3, r3, #3
 800c2e2:	3415      	adds	r4, #21
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	42a6      	cmp	r6, r4
 800c2e8:	bf38      	it	cc
 800c2ea:	2304      	movcc	r3, #4
 800c2ec:	441d      	add	r5, r3
 800c2ee:	445b      	add	r3, fp
 800c2f0:	461e      	mov	r6, r3
 800c2f2:	462c      	mov	r4, r5
 800c2f4:	4544      	cmp	r4, r8
 800c2f6:	d30e      	bcc.n	800c316 <__mdiff+0xf6>
 800c2f8:	f108 0103 	add.w	r1, r8, #3
 800c2fc:	1b49      	subs	r1, r1, r5
 800c2fe:	f021 0103 	bic.w	r1, r1, #3
 800c302:	3d03      	subs	r5, #3
 800c304:	45a8      	cmp	r8, r5
 800c306:	bf38      	it	cc
 800c308:	2100      	movcc	r1, #0
 800c30a:	440b      	add	r3, r1
 800c30c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c310:	b199      	cbz	r1, 800c33a <__mdiff+0x11a>
 800c312:	6117      	str	r7, [r2, #16]
 800c314:	e79e      	b.n	800c254 <__mdiff+0x34>
 800c316:	46e6      	mov	lr, ip
 800c318:	f854 1b04 	ldr.w	r1, [r4], #4
 800c31c:	fa1f fc81 	uxth.w	ip, r1
 800c320:	44f4      	add	ip, lr
 800c322:	0c08      	lsrs	r0, r1, #16
 800c324:	4471      	add	r1, lr
 800c326:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c32a:	b289      	uxth	r1, r1
 800c32c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c330:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c334:	f846 1b04 	str.w	r1, [r6], #4
 800c338:	e7dc      	b.n	800c2f4 <__mdiff+0xd4>
 800c33a:	3f01      	subs	r7, #1
 800c33c:	e7e6      	b.n	800c30c <__mdiff+0xec>
 800c33e:	bf00      	nop
 800c340:	0800dc8a 	.word	0x0800dc8a
 800c344:	0800dc9b 	.word	0x0800dc9b

0800c348 <__d2b>:
 800c348:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c34c:	2101      	movs	r1, #1
 800c34e:	4690      	mov	r8, r2
 800c350:	4699      	mov	r9, r3
 800c352:	9e08      	ldr	r6, [sp, #32]
 800c354:	f7ff fcd0 	bl	800bcf8 <_Balloc>
 800c358:	4604      	mov	r4, r0
 800c35a:	b930      	cbnz	r0, 800c36a <__d2b+0x22>
 800c35c:	4602      	mov	r2, r0
 800c35e:	f240 310f 	movw	r1, #783	@ 0x30f
 800c362:	4b23      	ldr	r3, [pc, #140]	@ (800c3f0 <__d2b+0xa8>)
 800c364:	4823      	ldr	r0, [pc, #140]	@ (800c3f4 <__d2b+0xac>)
 800c366:	f000 fa6f 	bl	800c848 <__assert_func>
 800c36a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c36e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c372:	b10d      	cbz	r5, 800c378 <__d2b+0x30>
 800c374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	f1b8 0300 	subs.w	r3, r8, #0
 800c37e:	d024      	beq.n	800c3ca <__d2b+0x82>
 800c380:	4668      	mov	r0, sp
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	f7ff fd7f 	bl	800be86 <__lo0bits>
 800c388:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c38c:	b1d8      	cbz	r0, 800c3c6 <__d2b+0x7e>
 800c38e:	f1c0 0320 	rsb	r3, r0, #32
 800c392:	fa02 f303 	lsl.w	r3, r2, r3
 800c396:	430b      	orrs	r3, r1
 800c398:	40c2      	lsrs	r2, r0
 800c39a:	6163      	str	r3, [r4, #20]
 800c39c:	9201      	str	r2, [sp, #4]
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	bf0c      	ite	eq
 800c3a4:	2201      	moveq	r2, #1
 800c3a6:	2202      	movne	r2, #2
 800c3a8:	61a3      	str	r3, [r4, #24]
 800c3aa:	6122      	str	r2, [r4, #16]
 800c3ac:	b1ad      	cbz	r5, 800c3da <__d2b+0x92>
 800c3ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3b2:	4405      	add	r5, r0
 800c3b4:	6035      	str	r5, [r6, #0]
 800c3b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3bc:	6018      	str	r0, [r3, #0]
 800c3be:	4620      	mov	r0, r4
 800c3c0:	b002      	add	sp, #8
 800c3c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c3c6:	6161      	str	r1, [r4, #20]
 800c3c8:	e7e9      	b.n	800c39e <__d2b+0x56>
 800c3ca:	a801      	add	r0, sp, #4
 800c3cc:	f7ff fd5b 	bl	800be86 <__lo0bits>
 800c3d0:	9b01      	ldr	r3, [sp, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	6163      	str	r3, [r4, #20]
 800c3d6:	3020      	adds	r0, #32
 800c3d8:	e7e7      	b.n	800c3aa <__d2b+0x62>
 800c3da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3e2:	6030      	str	r0, [r6, #0]
 800c3e4:	6918      	ldr	r0, [r3, #16]
 800c3e6:	f7ff fd2f 	bl	800be48 <__hi0bits>
 800c3ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3ee:	e7e4      	b.n	800c3ba <__d2b+0x72>
 800c3f0:	0800dc8a 	.word	0x0800dc8a
 800c3f4:	0800dc9b 	.word	0x0800dc9b

0800c3f8 <__ssputs_r>:
 800c3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3fc:	461f      	mov	r7, r3
 800c3fe:	688e      	ldr	r6, [r1, #8]
 800c400:	4682      	mov	sl, r0
 800c402:	42be      	cmp	r6, r7
 800c404:	460c      	mov	r4, r1
 800c406:	4690      	mov	r8, r2
 800c408:	680b      	ldr	r3, [r1, #0]
 800c40a:	d82d      	bhi.n	800c468 <__ssputs_r+0x70>
 800c40c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c410:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c414:	d026      	beq.n	800c464 <__ssputs_r+0x6c>
 800c416:	6965      	ldr	r5, [r4, #20]
 800c418:	6909      	ldr	r1, [r1, #16]
 800c41a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c41e:	eba3 0901 	sub.w	r9, r3, r1
 800c422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c426:	1c7b      	adds	r3, r7, #1
 800c428:	444b      	add	r3, r9
 800c42a:	106d      	asrs	r5, r5, #1
 800c42c:	429d      	cmp	r5, r3
 800c42e:	bf38      	it	cc
 800c430:	461d      	movcc	r5, r3
 800c432:	0553      	lsls	r3, r2, #21
 800c434:	d527      	bpl.n	800c486 <__ssputs_r+0x8e>
 800c436:	4629      	mov	r1, r5
 800c438:	f7fd fece 	bl	800a1d8 <_malloc_r>
 800c43c:	4606      	mov	r6, r0
 800c43e:	b360      	cbz	r0, 800c49a <__ssputs_r+0xa2>
 800c440:	464a      	mov	r2, r9
 800c442:	6921      	ldr	r1, [r4, #16]
 800c444:	f000 f9f2 	bl	800c82c <memcpy>
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c452:	81a3      	strh	r3, [r4, #12]
 800c454:	6126      	str	r6, [r4, #16]
 800c456:	444e      	add	r6, r9
 800c458:	6026      	str	r6, [r4, #0]
 800c45a:	463e      	mov	r6, r7
 800c45c:	6165      	str	r5, [r4, #20]
 800c45e:	eba5 0509 	sub.w	r5, r5, r9
 800c462:	60a5      	str	r5, [r4, #8]
 800c464:	42be      	cmp	r6, r7
 800c466:	d900      	bls.n	800c46a <__ssputs_r+0x72>
 800c468:	463e      	mov	r6, r7
 800c46a:	4632      	mov	r2, r6
 800c46c:	4641      	mov	r1, r8
 800c46e:	6820      	ldr	r0, [r4, #0]
 800c470:	f000 f9c2 	bl	800c7f8 <memmove>
 800c474:	2000      	movs	r0, #0
 800c476:	68a3      	ldr	r3, [r4, #8]
 800c478:	1b9b      	subs	r3, r3, r6
 800c47a:	60a3      	str	r3, [r4, #8]
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	4433      	add	r3, r6
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c486:	462a      	mov	r2, r5
 800c488:	f000 fa22 	bl	800c8d0 <_realloc_r>
 800c48c:	4606      	mov	r6, r0
 800c48e:	2800      	cmp	r0, #0
 800c490:	d1e0      	bne.n	800c454 <__ssputs_r+0x5c>
 800c492:	4650      	mov	r0, sl
 800c494:	6921      	ldr	r1, [r4, #16]
 800c496:	f7ff fbe7 	bl	800bc68 <_free_r>
 800c49a:	230c      	movs	r3, #12
 800c49c:	f8ca 3000 	str.w	r3, [sl]
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	e7e9      	b.n	800c482 <__ssputs_r+0x8a>
	...

0800c4b0 <_svfiprintf_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4698      	mov	r8, r3
 800c4b6:	898b      	ldrh	r3, [r1, #12]
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	061b      	lsls	r3, r3, #24
 800c4bc:	460d      	mov	r5, r1
 800c4be:	4614      	mov	r4, r2
 800c4c0:	b09d      	sub	sp, #116	@ 0x74
 800c4c2:	d510      	bpl.n	800c4e6 <_svfiprintf_r+0x36>
 800c4c4:	690b      	ldr	r3, [r1, #16]
 800c4c6:	b973      	cbnz	r3, 800c4e6 <_svfiprintf_r+0x36>
 800c4c8:	2140      	movs	r1, #64	@ 0x40
 800c4ca:	f7fd fe85 	bl	800a1d8 <_malloc_r>
 800c4ce:	6028      	str	r0, [r5, #0]
 800c4d0:	6128      	str	r0, [r5, #16]
 800c4d2:	b930      	cbnz	r0, 800c4e2 <_svfiprintf_r+0x32>
 800c4d4:	230c      	movs	r3, #12
 800c4d6:	603b      	str	r3, [r7, #0]
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	b01d      	add	sp, #116	@ 0x74
 800c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e2:	2340      	movs	r3, #64	@ 0x40
 800c4e4:	616b      	str	r3, [r5, #20]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ea:	2320      	movs	r3, #32
 800c4ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4f0:	2330      	movs	r3, #48	@ 0x30
 800c4f2:	f04f 0901 	mov.w	r9, #1
 800c4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c694 <_svfiprintf_r+0x1e4>
 800c4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c502:	4623      	mov	r3, r4
 800c504:	469a      	mov	sl, r3
 800c506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50a:	b10a      	cbz	r2, 800c510 <_svfiprintf_r+0x60>
 800c50c:	2a25      	cmp	r2, #37	@ 0x25
 800c50e:	d1f9      	bne.n	800c504 <_svfiprintf_r+0x54>
 800c510:	ebba 0b04 	subs.w	fp, sl, r4
 800c514:	d00b      	beq.n	800c52e <_svfiprintf_r+0x7e>
 800c516:	465b      	mov	r3, fp
 800c518:	4622      	mov	r2, r4
 800c51a:	4629      	mov	r1, r5
 800c51c:	4638      	mov	r0, r7
 800c51e:	f7ff ff6b 	bl	800c3f8 <__ssputs_r>
 800c522:	3001      	adds	r0, #1
 800c524:	f000 80a7 	beq.w	800c676 <_svfiprintf_r+0x1c6>
 800c528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c52a:	445a      	add	r2, fp
 800c52c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c52e:	f89a 3000 	ldrb.w	r3, [sl]
 800c532:	2b00      	cmp	r3, #0
 800c534:	f000 809f 	beq.w	800c676 <_svfiprintf_r+0x1c6>
 800c538:	2300      	movs	r3, #0
 800c53a:	f04f 32ff 	mov.w	r2, #4294967295
 800c53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c542:	f10a 0a01 	add.w	sl, sl, #1
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	9307      	str	r3, [sp, #28]
 800c54a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c54e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c550:	4654      	mov	r4, sl
 800c552:	2205      	movs	r2, #5
 800c554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c558:	484e      	ldr	r0, [pc, #312]	@ (800c694 <_svfiprintf_r+0x1e4>)
 800c55a:	f7fe fd26 	bl	800afaa <memchr>
 800c55e:	9a04      	ldr	r2, [sp, #16]
 800c560:	b9d8      	cbnz	r0, 800c59a <_svfiprintf_r+0xea>
 800c562:	06d0      	lsls	r0, r2, #27
 800c564:	bf44      	itt	mi
 800c566:	2320      	movmi	r3, #32
 800c568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c56c:	0711      	lsls	r1, r2, #28
 800c56e:	bf44      	itt	mi
 800c570:	232b      	movmi	r3, #43	@ 0x2b
 800c572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c576:	f89a 3000 	ldrb.w	r3, [sl]
 800c57a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c57c:	d015      	beq.n	800c5aa <_svfiprintf_r+0xfa>
 800c57e:	4654      	mov	r4, sl
 800c580:	2000      	movs	r0, #0
 800c582:	f04f 0c0a 	mov.w	ip, #10
 800c586:	9a07      	ldr	r2, [sp, #28]
 800c588:	4621      	mov	r1, r4
 800c58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c58e:	3b30      	subs	r3, #48	@ 0x30
 800c590:	2b09      	cmp	r3, #9
 800c592:	d94b      	bls.n	800c62c <_svfiprintf_r+0x17c>
 800c594:	b1b0      	cbz	r0, 800c5c4 <_svfiprintf_r+0x114>
 800c596:	9207      	str	r2, [sp, #28]
 800c598:	e014      	b.n	800c5c4 <_svfiprintf_r+0x114>
 800c59a:	eba0 0308 	sub.w	r3, r0, r8
 800c59e:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	46a2      	mov	sl, r4
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	e7d2      	b.n	800c550 <_svfiprintf_r+0xa0>
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	1d19      	adds	r1, r3, #4
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	9103      	str	r1, [sp, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	bfbb      	ittet	lt
 800c5b6:	425b      	neglt	r3, r3
 800c5b8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5bc:	9307      	strge	r3, [sp, #28]
 800c5be:	9307      	strlt	r3, [sp, #28]
 800c5c0:	bfb8      	it	lt
 800c5c2:	9204      	strlt	r2, [sp, #16]
 800c5c4:	7823      	ldrb	r3, [r4, #0]
 800c5c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5c8:	d10a      	bne.n	800c5e0 <_svfiprintf_r+0x130>
 800c5ca:	7863      	ldrb	r3, [r4, #1]
 800c5cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ce:	d132      	bne.n	800c636 <_svfiprintf_r+0x186>
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	3402      	adds	r4, #2
 800c5d4:	1d1a      	adds	r2, r3, #4
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	9203      	str	r2, [sp, #12]
 800c5da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5de:	9305      	str	r3, [sp, #20]
 800c5e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c698 <_svfiprintf_r+0x1e8>
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	4650      	mov	r0, sl
 800c5e8:	7821      	ldrb	r1, [r4, #0]
 800c5ea:	f7fe fcde 	bl	800afaa <memchr>
 800c5ee:	b138      	cbz	r0, 800c600 <_svfiprintf_r+0x150>
 800c5f0:	2240      	movs	r2, #64	@ 0x40
 800c5f2:	9b04      	ldr	r3, [sp, #16]
 800c5f4:	eba0 000a 	sub.w	r0, r0, sl
 800c5f8:	4082      	lsls	r2, r0
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	3401      	adds	r4, #1
 800c5fe:	9304      	str	r3, [sp, #16]
 800c600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c604:	2206      	movs	r2, #6
 800c606:	4825      	ldr	r0, [pc, #148]	@ (800c69c <_svfiprintf_r+0x1ec>)
 800c608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c60c:	f7fe fccd 	bl	800afaa <memchr>
 800c610:	2800      	cmp	r0, #0
 800c612:	d036      	beq.n	800c682 <_svfiprintf_r+0x1d2>
 800c614:	4b22      	ldr	r3, [pc, #136]	@ (800c6a0 <_svfiprintf_r+0x1f0>)
 800c616:	bb1b      	cbnz	r3, 800c660 <_svfiprintf_r+0x1b0>
 800c618:	9b03      	ldr	r3, [sp, #12]
 800c61a:	3307      	adds	r3, #7
 800c61c:	f023 0307 	bic.w	r3, r3, #7
 800c620:	3308      	adds	r3, #8
 800c622:	9303      	str	r3, [sp, #12]
 800c624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c626:	4433      	add	r3, r6
 800c628:	9309      	str	r3, [sp, #36]	@ 0x24
 800c62a:	e76a      	b.n	800c502 <_svfiprintf_r+0x52>
 800c62c:	460c      	mov	r4, r1
 800c62e:	2001      	movs	r0, #1
 800c630:	fb0c 3202 	mla	r2, ip, r2, r3
 800c634:	e7a8      	b.n	800c588 <_svfiprintf_r+0xd8>
 800c636:	2300      	movs	r3, #0
 800c638:	f04f 0c0a 	mov.w	ip, #10
 800c63c:	4619      	mov	r1, r3
 800c63e:	3401      	adds	r4, #1
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	4620      	mov	r0, r4
 800c644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c648:	3a30      	subs	r2, #48	@ 0x30
 800c64a:	2a09      	cmp	r2, #9
 800c64c:	d903      	bls.n	800c656 <_svfiprintf_r+0x1a6>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0c6      	beq.n	800c5e0 <_svfiprintf_r+0x130>
 800c652:	9105      	str	r1, [sp, #20]
 800c654:	e7c4      	b.n	800c5e0 <_svfiprintf_r+0x130>
 800c656:	4604      	mov	r4, r0
 800c658:	2301      	movs	r3, #1
 800c65a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c65e:	e7f0      	b.n	800c642 <_svfiprintf_r+0x192>
 800c660:	ab03      	add	r3, sp, #12
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	462a      	mov	r2, r5
 800c666:	4638      	mov	r0, r7
 800c668:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a4 <_svfiprintf_r+0x1f4>)
 800c66a:	a904      	add	r1, sp, #16
 800c66c:	f7fd fede 	bl	800a42c <_printf_float>
 800c670:	1c42      	adds	r2, r0, #1
 800c672:	4606      	mov	r6, r0
 800c674:	d1d6      	bne.n	800c624 <_svfiprintf_r+0x174>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	065b      	lsls	r3, r3, #25
 800c67a:	f53f af2d 	bmi.w	800c4d8 <_svfiprintf_r+0x28>
 800c67e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c680:	e72c      	b.n	800c4dc <_svfiprintf_r+0x2c>
 800c682:	ab03      	add	r3, sp, #12
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	462a      	mov	r2, r5
 800c688:	4638      	mov	r0, r7
 800c68a:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <_svfiprintf_r+0x1f4>)
 800c68c:	a904      	add	r1, sp, #16
 800c68e:	f7fe f96b 	bl	800a968 <_printf_i>
 800c692:	e7ed      	b.n	800c670 <_svfiprintf_r+0x1c0>
 800c694:	0800ddf0 	.word	0x0800ddf0
 800c698:	0800ddf6 	.word	0x0800ddf6
 800c69c:	0800ddfa 	.word	0x0800ddfa
 800c6a0:	0800a42d 	.word	0x0800a42d
 800c6a4:	0800c3f9 	.word	0x0800c3f9

0800c6a8 <__sflush_r>:
 800c6a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	0716      	lsls	r6, r2, #28
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	d454      	bmi.n	800c760 <__sflush_r+0xb8>
 800c6b6:	684b      	ldr	r3, [r1, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dc02      	bgt.n	800c6c2 <__sflush_r+0x1a>
 800c6bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dd48      	ble.n	800c754 <__sflush_r+0xac>
 800c6c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	d045      	beq.n	800c754 <__sflush_r+0xac>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6ce:	682f      	ldr	r7, [r5, #0]
 800c6d0:	6a21      	ldr	r1, [r4, #32]
 800c6d2:	602b      	str	r3, [r5, #0]
 800c6d4:	d030      	beq.n	800c738 <__sflush_r+0x90>
 800c6d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	0759      	lsls	r1, r3, #29
 800c6dc:	d505      	bpl.n	800c6ea <__sflush_r+0x42>
 800c6de:	6863      	ldr	r3, [r4, #4]
 800c6e0:	1ad2      	subs	r2, r2, r3
 800c6e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6e4:	b10b      	cbz	r3, 800c6ea <__sflush_r+0x42>
 800c6e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6e8:	1ad2      	subs	r2, r2, r3
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6f0:	6a21      	ldr	r1, [r4, #32]
 800c6f2:	47b0      	blx	r6
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	d106      	bne.n	800c708 <__sflush_r+0x60>
 800c6fa:	6829      	ldr	r1, [r5, #0]
 800c6fc:	291d      	cmp	r1, #29
 800c6fe:	d82b      	bhi.n	800c758 <__sflush_r+0xb0>
 800c700:	4a28      	ldr	r2, [pc, #160]	@ (800c7a4 <__sflush_r+0xfc>)
 800c702:	410a      	asrs	r2, r1
 800c704:	07d6      	lsls	r6, r2, #31
 800c706:	d427      	bmi.n	800c758 <__sflush_r+0xb0>
 800c708:	2200      	movs	r2, #0
 800c70a:	6062      	str	r2, [r4, #4]
 800c70c:	6922      	ldr	r2, [r4, #16]
 800c70e:	04d9      	lsls	r1, r3, #19
 800c710:	6022      	str	r2, [r4, #0]
 800c712:	d504      	bpl.n	800c71e <__sflush_r+0x76>
 800c714:	1c42      	adds	r2, r0, #1
 800c716:	d101      	bne.n	800c71c <__sflush_r+0x74>
 800c718:	682b      	ldr	r3, [r5, #0]
 800c71a:	b903      	cbnz	r3, 800c71e <__sflush_r+0x76>
 800c71c:	6560      	str	r0, [r4, #84]	@ 0x54
 800c71e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c720:	602f      	str	r7, [r5, #0]
 800c722:	b1b9      	cbz	r1, 800c754 <__sflush_r+0xac>
 800c724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c728:	4299      	cmp	r1, r3
 800c72a:	d002      	beq.n	800c732 <__sflush_r+0x8a>
 800c72c:	4628      	mov	r0, r5
 800c72e:	f7ff fa9b 	bl	800bc68 <_free_r>
 800c732:	2300      	movs	r3, #0
 800c734:	6363      	str	r3, [r4, #52]	@ 0x34
 800c736:	e00d      	b.n	800c754 <__sflush_r+0xac>
 800c738:	2301      	movs	r3, #1
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b0      	blx	r6
 800c73e:	4602      	mov	r2, r0
 800c740:	1c50      	adds	r0, r2, #1
 800c742:	d1c9      	bne.n	800c6d8 <__sflush_r+0x30>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0c6      	beq.n	800c6d8 <__sflush_r+0x30>
 800c74a:	2b1d      	cmp	r3, #29
 800c74c:	d001      	beq.n	800c752 <__sflush_r+0xaa>
 800c74e:	2b16      	cmp	r3, #22
 800c750:	d11d      	bne.n	800c78e <__sflush_r+0xe6>
 800c752:	602f      	str	r7, [r5, #0]
 800c754:	2000      	movs	r0, #0
 800c756:	e021      	b.n	800c79c <__sflush_r+0xf4>
 800c758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c75c:	b21b      	sxth	r3, r3
 800c75e:	e01a      	b.n	800c796 <__sflush_r+0xee>
 800c760:	690f      	ldr	r7, [r1, #16]
 800c762:	2f00      	cmp	r7, #0
 800c764:	d0f6      	beq.n	800c754 <__sflush_r+0xac>
 800c766:	0793      	lsls	r3, r2, #30
 800c768:	bf18      	it	ne
 800c76a:	2300      	movne	r3, #0
 800c76c:	680e      	ldr	r6, [r1, #0]
 800c76e:	bf08      	it	eq
 800c770:	694b      	ldreq	r3, [r1, #20]
 800c772:	1bf6      	subs	r6, r6, r7
 800c774:	600f      	str	r7, [r1, #0]
 800c776:	608b      	str	r3, [r1, #8]
 800c778:	2e00      	cmp	r6, #0
 800c77a:	ddeb      	ble.n	800c754 <__sflush_r+0xac>
 800c77c:	4633      	mov	r3, r6
 800c77e:	463a      	mov	r2, r7
 800c780:	4628      	mov	r0, r5
 800c782:	6a21      	ldr	r1, [r4, #32]
 800c784:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c788:	47e0      	blx	ip
 800c78a:	2800      	cmp	r0, #0
 800c78c:	dc07      	bgt.n	800c79e <__sflush_r+0xf6>
 800c78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c796:	f04f 30ff 	mov.w	r0, #4294967295
 800c79a:	81a3      	strh	r3, [r4, #12]
 800c79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c79e:	4407      	add	r7, r0
 800c7a0:	1a36      	subs	r6, r6, r0
 800c7a2:	e7e9      	b.n	800c778 <__sflush_r+0xd0>
 800c7a4:	dfbffffe 	.word	0xdfbffffe

0800c7a8 <_fflush_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	690b      	ldr	r3, [r1, #16]
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	b913      	cbnz	r3, 800c7b8 <_fflush_r+0x10>
 800c7b2:	2500      	movs	r5, #0
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	b118      	cbz	r0, 800c7c2 <_fflush_r+0x1a>
 800c7ba:	6a03      	ldr	r3, [r0, #32]
 800c7bc:	b90b      	cbnz	r3, 800c7c2 <_fflush_r+0x1a>
 800c7be:	f7fe fa7f 	bl	800acc0 <__sinit>
 800c7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0f3      	beq.n	800c7b2 <_fflush_r+0xa>
 800c7ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7cc:	07d0      	lsls	r0, r2, #31
 800c7ce:	d404      	bmi.n	800c7da <_fflush_r+0x32>
 800c7d0:	0599      	lsls	r1, r3, #22
 800c7d2:	d402      	bmi.n	800c7da <_fflush_r+0x32>
 800c7d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7d6:	f7fe fbde 	bl	800af96 <__retarget_lock_acquire_recursive>
 800c7da:	4628      	mov	r0, r5
 800c7dc:	4621      	mov	r1, r4
 800c7de:	f7ff ff63 	bl	800c6a8 <__sflush_r>
 800c7e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	07da      	lsls	r2, r3, #31
 800c7e8:	d4e4      	bmi.n	800c7b4 <_fflush_r+0xc>
 800c7ea:	89a3      	ldrh	r3, [r4, #12]
 800c7ec:	059b      	lsls	r3, r3, #22
 800c7ee:	d4e1      	bmi.n	800c7b4 <_fflush_r+0xc>
 800c7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7f2:	f7fe fbd1 	bl	800af98 <__retarget_lock_release_recursive>
 800c7f6:	e7dd      	b.n	800c7b4 <_fflush_r+0xc>

0800c7f8 <memmove>:
 800c7f8:	4288      	cmp	r0, r1
 800c7fa:	b510      	push	{r4, lr}
 800c7fc:	eb01 0402 	add.w	r4, r1, r2
 800c800:	d902      	bls.n	800c808 <memmove+0x10>
 800c802:	4284      	cmp	r4, r0
 800c804:	4623      	mov	r3, r4
 800c806:	d807      	bhi.n	800c818 <memmove+0x20>
 800c808:	1e43      	subs	r3, r0, #1
 800c80a:	42a1      	cmp	r1, r4
 800c80c:	d008      	beq.n	800c820 <memmove+0x28>
 800c80e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c812:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c816:	e7f8      	b.n	800c80a <memmove+0x12>
 800c818:	4601      	mov	r1, r0
 800c81a:	4402      	add	r2, r0
 800c81c:	428a      	cmp	r2, r1
 800c81e:	d100      	bne.n	800c822 <memmove+0x2a>
 800c820:	bd10      	pop	{r4, pc}
 800c822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c82a:	e7f7      	b.n	800c81c <memmove+0x24>

0800c82c <memcpy>:
 800c82c:	440a      	add	r2, r1
 800c82e:	4291      	cmp	r1, r2
 800c830:	f100 33ff 	add.w	r3, r0, #4294967295
 800c834:	d100      	bne.n	800c838 <memcpy+0xc>
 800c836:	4770      	bx	lr
 800c838:	b510      	push	{r4, lr}
 800c83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c83e:	4291      	cmp	r1, r2
 800c840:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c844:	d1f9      	bne.n	800c83a <memcpy+0xe>
 800c846:	bd10      	pop	{r4, pc}

0800c848 <__assert_func>:
 800c848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c84a:	4614      	mov	r4, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	4b09      	ldr	r3, [pc, #36]	@ (800c874 <__assert_func+0x2c>)
 800c850:	4605      	mov	r5, r0
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68d8      	ldr	r0, [r3, #12]
 800c856:	b954      	cbnz	r4, 800c86e <__assert_func+0x26>
 800c858:	4b07      	ldr	r3, [pc, #28]	@ (800c878 <__assert_func+0x30>)
 800c85a:	461c      	mov	r4, r3
 800c85c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c860:	9100      	str	r1, [sp, #0]
 800c862:	462b      	mov	r3, r5
 800c864:	4905      	ldr	r1, [pc, #20]	@ (800c87c <__assert_func+0x34>)
 800c866:	f000 f86f 	bl	800c948 <fiprintf>
 800c86a:	f7fd fc7b 	bl	800a164 <abort>
 800c86e:	4b04      	ldr	r3, [pc, #16]	@ (800c880 <__assert_func+0x38>)
 800c870:	e7f4      	b.n	800c85c <__assert_func+0x14>
 800c872:	bf00      	nop
 800c874:	2000001c 	.word	0x2000001c
 800c878:	0800de46 	.word	0x0800de46
 800c87c:	0800de18 	.word	0x0800de18
 800c880:	0800de0b 	.word	0x0800de0b

0800c884 <_calloc_r>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	fba1 5402 	umull	r5, r4, r1, r2
 800c88a:	b93c      	cbnz	r4, 800c89c <_calloc_r+0x18>
 800c88c:	4629      	mov	r1, r5
 800c88e:	f7fd fca3 	bl	800a1d8 <_malloc_r>
 800c892:	4606      	mov	r6, r0
 800c894:	b928      	cbnz	r0, 800c8a2 <_calloc_r+0x1e>
 800c896:	2600      	movs	r6, #0
 800c898:	4630      	mov	r0, r6
 800c89a:	bd70      	pop	{r4, r5, r6, pc}
 800c89c:	220c      	movs	r2, #12
 800c89e:	6002      	str	r2, [r0, #0]
 800c8a0:	e7f9      	b.n	800c896 <_calloc_r+0x12>
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f7fe faa4 	bl	800adf2 <memset>
 800c8aa:	e7f5      	b.n	800c898 <_calloc_r+0x14>

0800c8ac <__ascii_mbtowc>:
 800c8ac:	b082      	sub	sp, #8
 800c8ae:	b901      	cbnz	r1, 800c8b2 <__ascii_mbtowc+0x6>
 800c8b0:	a901      	add	r1, sp, #4
 800c8b2:	b142      	cbz	r2, 800c8c6 <__ascii_mbtowc+0x1a>
 800c8b4:	b14b      	cbz	r3, 800c8ca <__ascii_mbtowc+0x1e>
 800c8b6:	7813      	ldrb	r3, [r2, #0]
 800c8b8:	600b      	str	r3, [r1, #0]
 800c8ba:	7812      	ldrb	r2, [r2, #0]
 800c8bc:	1e10      	subs	r0, r2, #0
 800c8be:	bf18      	it	ne
 800c8c0:	2001      	movne	r0, #1
 800c8c2:	b002      	add	sp, #8
 800c8c4:	4770      	bx	lr
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	e7fb      	b.n	800c8c2 <__ascii_mbtowc+0x16>
 800c8ca:	f06f 0001 	mvn.w	r0, #1
 800c8ce:	e7f8      	b.n	800c8c2 <__ascii_mbtowc+0x16>

0800c8d0 <_realloc_r>:
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	4615      	mov	r5, r2
 800c8d8:	460c      	mov	r4, r1
 800c8da:	b921      	cbnz	r1, 800c8e6 <_realloc_r+0x16>
 800c8dc:	4611      	mov	r1, r2
 800c8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e2:	f7fd bc79 	b.w	800a1d8 <_malloc_r>
 800c8e6:	b92a      	cbnz	r2, 800c8f4 <_realloc_r+0x24>
 800c8e8:	f7ff f9be 	bl	800bc68 <_free_r>
 800c8ec:	2400      	movs	r4, #0
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f4:	f000 f83a 	bl	800c96c <_malloc_usable_size_r>
 800c8f8:	4285      	cmp	r5, r0
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	d802      	bhi.n	800c904 <_realloc_r+0x34>
 800c8fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c902:	d8f4      	bhi.n	800c8ee <_realloc_r+0x1e>
 800c904:	4629      	mov	r1, r5
 800c906:	4640      	mov	r0, r8
 800c908:	f7fd fc66 	bl	800a1d8 <_malloc_r>
 800c90c:	4607      	mov	r7, r0
 800c90e:	2800      	cmp	r0, #0
 800c910:	d0ec      	beq.n	800c8ec <_realloc_r+0x1c>
 800c912:	42b5      	cmp	r5, r6
 800c914:	462a      	mov	r2, r5
 800c916:	4621      	mov	r1, r4
 800c918:	bf28      	it	cs
 800c91a:	4632      	movcs	r2, r6
 800c91c:	f7ff ff86 	bl	800c82c <memcpy>
 800c920:	4621      	mov	r1, r4
 800c922:	4640      	mov	r0, r8
 800c924:	f7ff f9a0 	bl	800bc68 <_free_r>
 800c928:	463c      	mov	r4, r7
 800c92a:	e7e0      	b.n	800c8ee <_realloc_r+0x1e>

0800c92c <__ascii_wctomb>:
 800c92c:	4603      	mov	r3, r0
 800c92e:	4608      	mov	r0, r1
 800c930:	b141      	cbz	r1, 800c944 <__ascii_wctomb+0x18>
 800c932:	2aff      	cmp	r2, #255	@ 0xff
 800c934:	d904      	bls.n	800c940 <__ascii_wctomb+0x14>
 800c936:	228a      	movs	r2, #138	@ 0x8a
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	4770      	bx	lr
 800c940:	2001      	movs	r0, #1
 800c942:	700a      	strb	r2, [r1, #0]
 800c944:	4770      	bx	lr
	...

0800c948 <fiprintf>:
 800c948:	b40e      	push	{r1, r2, r3}
 800c94a:	b503      	push	{r0, r1, lr}
 800c94c:	4601      	mov	r1, r0
 800c94e:	ab03      	add	r3, sp, #12
 800c950:	4805      	ldr	r0, [pc, #20]	@ (800c968 <fiprintf+0x20>)
 800c952:	f853 2b04 	ldr.w	r2, [r3], #4
 800c956:	6800      	ldr	r0, [r0, #0]
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	f000 f837 	bl	800c9cc <_vfiprintf_r>
 800c95e:	b002      	add	sp, #8
 800c960:	f85d eb04 	ldr.w	lr, [sp], #4
 800c964:	b003      	add	sp, #12
 800c966:	4770      	bx	lr
 800c968:	2000001c 	.word	0x2000001c

0800c96c <_malloc_usable_size_r>:
 800c96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c970:	1f18      	subs	r0, r3, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfbc      	itt	lt
 800c976:	580b      	ldrlt	r3, [r1, r0]
 800c978:	18c0      	addlt	r0, r0, r3
 800c97a:	4770      	bx	lr

0800c97c <__sfputc_r>:
 800c97c:	6893      	ldr	r3, [r2, #8]
 800c97e:	b410      	push	{r4}
 800c980:	3b01      	subs	r3, #1
 800c982:	2b00      	cmp	r3, #0
 800c984:	6093      	str	r3, [r2, #8]
 800c986:	da07      	bge.n	800c998 <__sfputc_r+0x1c>
 800c988:	6994      	ldr	r4, [r2, #24]
 800c98a:	42a3      	cmp	r3, r4
 800c98c:	db01      	blt.n	800c992 <__sfputc_r+0x16>
 800c98e:	290a      	cmp	r1, #10
 800c990:	d102      	bne.n	800c998 <__sfputc_r+0x1c>
 800c992:	bc10      	pop	{r4}
 800c994:	f000 b932 	b.w	800cbfc <__swbuf_r>
 800c998:	6813      	ldr	r3, [r2, #0]
 800c99a:	1c58      	adds	r0, r3, #1
 800c99c:	6010      	str	r0, [r2, #0]
 800c99e:	7019      	strb	r1, [r3, #0]
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	bc10      	pop	{r4}
 800c9a4:	4770      	bx	lr

0800c9a6 <__sfputs_r>:
 800c9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	460f      	mov	r7, r1
 800c9ac:	4614      	mov	r4, r2
 800c9ae:	18d5      	adds	r5, r2, r3
 800c9b0:	42ac      	cmp	r4, r5
 800c9b2:	d101      	bne.n	800c9b8 <__sfputs_r+0x12>
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	e007      	b.n	800c9c8 <__sfputs_r+0x22>
 800c9b8:	463a      	mov	r2, r7
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c0:	f7ff ffdc 	bl	800c97c <__sfputc_r>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d1f3      	bne.n	800c9b0 <__sfputs_r+0xa>
 800c9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9cc <_vfiprintf_r>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	460d      	mov	r5, r1
 800c9d2:	4614      	mov	r4, r2
 800c9d4:	4698      	mov	r8, r3
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	b09d      	sub	sp, #116	@ 0x74
 800c9da:	b118      	cbz	r0, 800c9e4 <_vfiprintf_r+0x18>
 800c9dc:	6a03      	ldr	r3, [r0, #32]
 800c9de:	b90b      	cbnz	r3, 800c9e4 <_vfiprintf_r+0x18>
 800c9e0:	f7fe f96e 	bl	800acc0 <__sinit>
 800c9e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9e6:	07d9      	lsls	r1, r3, #31
 800c9e8:	d405      	bmi.n	800c9f6 <_vfiprintf_r+0x2a>
 800c9ea:	89ab      	ldrh	r3, [r5, #12]
 800c9ec:	059a      	lsls	r2, r3, #22
 800c9ee:	d402      	bmi.n	800c9f6 <_vfiprintf_r+0x2a>
 800c9f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9f2:	f7fe fad0 	bl	800af96 <__retarget_lock_acquire_recursive>
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	071b      	lsls	r3, r3, #28
 800c9fa:	d501      	bpl.n	800ca00 <_vfiprintf_r+0x34>
 800c9fc:	692b      	ldr	r3, [r5, #16]
 800c9fe:	b99b      	cbnz	r3, 800ca28 <_vfiprintf_r+0x5c>
 800ca00:	4629      	mov	r1, r5
 800ca02:	4630      	mov	r0, r6
 800ca04:	f000 f938 	bl	800cc78 <__swsetup_r>
 800ca08:	b170      	cbz	r0, 800ca28 <_vfiprintf_r+0x5c>
 800ca0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca0c:	07dc      	lsls	r4, r3, #31
 800ca0e:	d504      	bpl.n	800ca1a <_vfiprintf_r+0x4e>
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	b01d      	add	sp, #116	@ 0x74
 800ca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1a:	89ab      	ldrh	r3, [r5, #12]
 800ca1c:	0598      	lsls	r0, r3, #22
 800ca1e:	d4f7      	bmi.n	800ca10 <_vfiprintf_r+0x44>
 800ca20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca22:	f7fe fab9 	bl	800af98 <__retarget_lock_release_recursive>
 800ca26:	e7f3      	b.n	800ca10 <_vfiprintf_r+0x44>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca2c:	2320      	movs	r3, #32
 800ca2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca32:	2330      	movs	r3, #48	@ 0x30
 800ca34:	f04f 0901 	mov.w	r9, #1
 800ca38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cbe8 <_vfiprintf_r+0x21c>
 800ca40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca44:	4623      	mov	r3, r4
 800ca46:	469a      	mov	sl, r3
 800ca48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca4c:	b10a      	cbz	r2, 800ca52 <_vfiprintf_r+0x86>
 800ca4e:	2a25      	cmp	r2, #37	@ 0x25
 800ca50:	d1f9      	bne.n	800ca46 <_vfiprintf_r+0x7a>
 800ca52:	ebba 0b04 	subs.w	fp, sl, r4
 800ca56:	d00b      	beq.n	800ca70 <_vfiprintf_r+0xa4>
 800ca58:	465b      	mov	r3, fp
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7ff ffa1 	bl	800c9a6 <__sfputs_r>
 800ca64:	3001      	adds	r0, #1
 800ca66:	f000 80a7 	beq.w	800cbb8 <_vfiprintf_r+0x1ec>
 800ca6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca6c:	445a      	add	r2, fp
 800ca6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca70:	f89a 3000 	ldrb.w	r3, [sl]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f000 809f 	beq.w	800cbb8 <_vfiprintf_r+0x1ec>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca84:	f10a 0a01 	add.w	sl, sl, #1
 800ca88:	9304      	str	r3, [sp, #16]
 800ca8a:	9307      	str	r3, [sp, #28]
 800ca8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca92:	4654      	mov	r4, sl
 800ca94:	2205      	movs	r2, #5
 800ca96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca9a:	4853      	ldr	r0, [pc, #332]	@ (800cbe8 <_vfiprintf_r+0x21c>)
 800ca9c:	f7fe fa85 	bl	800afaa <memchr>
 800caa0:	9a04      	ldr	r2, [sp, #16]
 800caa2:	b9d8      	cbnz	r0, 800cadc <_vfiprintf_r+0x110>
 800caa4:	06d1      	lsls	r1, r2, #27
 800caa6:	bf44      	itt	mi
 800caa8:	2320      	movmi	r3, #32
 800caaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caae:	0713      	lsls	r3, r2, #28
 800cab0:	bf44      	itt	mi
 800cab2:	232b      	movmi	r3, #43	@ 0x2b
 800cab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cab8:	f89a 3000 	ldrb.w	r3, [sl]
 800cabc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cabe:	d015      	beq.n	800caec <_vfiprintf_r+0x120>
 800cac0:	4654      	mov	r4, sl
 800cac2:	2000      	movs	r0, #0
 800cac4:	f04f 0c0a 	mov.w	ip, #10
 800cac8:	9a07      	ldr	r2, [sp, #28]
 800caca:	4621      	mov	r1, r4
 800cacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cad0:	3b30      	subs	r3, #48	@ 0x30
 800cad2:	2b09      	cmp	r3, #9
 800cad4:	d94b      	bls.n	800cb6e <_vfiprintf_r+0x1a2>
 800cad6:	b1b0      	cbz	r0, 800cb06 <_vfiprintf_r+0x13a>
 800cad8:	9207      	str	r2, [sp, #28]
 800cada:	e014      	b.n	800cb06 <_vfiprintf_r+0x13a>
 800cadc:	eba0 0308 	sub.w	r3, r0, r8
 800cae0:	fa09 f303 	lsl.w	r3, r9, r3
 800cae4:	4313      	orrs	r3, r2
 800cae6:	46a2      	mov	sl, r4
 800cae8:	9304      	str	r3, [sp, #16]
 800caea:	e7d2      	b.n	800ca92 <_vfiprintf_r+0xc6>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1d19      	adds	r1, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	9103      	str	r1, [sp, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bfbb      	ittet	lt
 800caf8:	425b      	neglt	r3, r3
 800cafa:	f042 0202 	orrlt.w	r2, r2, #2
 800cafe:	9307      	strge	r3, [sp, #28]
 800cb00:	9307      	strlt	r3, [sp, #28]
 800cb02:	bfb8      	it	lt
 800cb04:	9204      	strlt	r2, [sp, #16]
 800cb06:	7823      	ldrb	r3, [r4, #0]
 800cb08:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb0a:	d10a      	bne.n	800cb22 <_vfiprintf_r+0x156>
 800cb0c:	7863      	ldrb	r3, [r4, #1]
 800cb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb10:	d132      	bne.n	800cb78 <_vfiprintf_r+0x1ac>
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	3402      	adds	r4, #2
 800cb16:	1d1a      	adds	r2, r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	9203      	str	r2, [sp, #12]
 800cb1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb20:	9305      	str	r3, [sp, #20]
 800cb22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cbec <_vfiprintf_r+0x220>
 800cb26:	2203      	movs	r2, #3
 800cb28:	4650      	mov	r0, sl
 800cb2a:	7821      	ldrb	r1, [r4, #0]
 800cb2c:	f7fe fa3d 	bl	800afaa <memchr>
 800cb30:	b138      	cbz	r0, 800cb42 <_vfiprintf_r+0x176>
 800cb32:	2240      	movs	r2, #64	@ 0x40
 800cb34:	9b04      	ldr	r3, [sp, #16]
 800cb36:	eba0 000a 	sub.w	r0, r0, sl
 800cb3a:	4082      	lsls	r2, r0
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	3401      	adds	r4, #1
 800cb40:	9304      	str	r3, [sp, #16]
 800cb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb46:	2206      	movs	r2, #6
 800cb48:	4829      	ldr	r0, [pc, #164]	@ (800cbf0 <_vfiprintf_r+0x224>)
 800cb4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb4e:	f7fe fa2c 	bl	800afaa <memchr>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d03f      	beq.n	800cbd6 <_vfiprintf_r+0x20a>
 800cb56:	4b27      	ldr	r3, [pc, #156]	@ (800cbf4 <_vfiprintf_r+0x228>)
 800cb58:	bb1b      	cbnz	r3, 800cba2 <_vfiprintf_r+0x1d6>
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	3307      	adds	r3, #7
 800cb5e:	f023 0307 	bic.w	r3, r3, #7
 800cb62:	3308      	adds	r3, #8
 800cb64:	9303      	str	r3, [sp, #12]
 800cb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb68:	443b      	add	r3, r7
 800cb6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6c:	e76a      	b.n	800ca44 <_vfiprintf_r+0x78>
 800cb6e:	460c      	mov	r4, r1
 800cb70:	2001      	movs	r0, #1
 800cb72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb76:	e7a8      	b.n	800caca <_vfiprintf_r+0xfe>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f04f 0c0a 	mov.w	ip, #10
 800cb7e:	4619      	mov	r1, r3
 800cb80:	3401      	adds	r4, #1
 800cb82:	9305      	str	r3, [sp, #20]
 800cb84:	4620      	mov	r0, r4
 800cb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb8a:	3a30      	subs	r2, #48	@ 0x30
 800cb8c:	2a09      	cmp	r2, #9
 800cb8e:	d903      	bls.n	800cb98 <_vfiprintf_r+0x1cc>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c6      	beq.n	800cb22 <_vfiprintf_r+0x156>
 800cb94:	9105      	str	r1, [sp, #20]
 800cb96:	e7c4      	b.n	800cb22 <_vfiprintf_r+0x156>
 800cb98:	4604      	mov	r4, r0
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cba0:	e7f0      	b.n	800cb84 <_vfiprintf_r+0x1b8>
 800cba2:	ab03      	add	r3, sp, #12
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	462a      	mov	r2, r5
 800cba8:	4630      	mov	r0, r6
 800cbaa:	4b13      	ldr	r3, [pc, #76]	@ (800cbf8 <_vfiprintf_r+0x22c>)
 800cbac:	a904      	add	r1, sp, #16
 800cbae:	f7fd fc3d 	bl	800a42c <_printf_float>
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	1c78      	adds	r0, r7, #1
 800cbb6:	d1d6      	bne.n	800cb66 <_vfiprintf_r+0x19a>
 800cbb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbba:	07d9      	lsls	r1, r3, #31
 800cbbc:	d405      	bmi.n	800cbca <_vfiprintf_r+0x1fe>
 800cbbe:	89ab      	ldrh	r3, [r5, #12]
 800cbc0:	059a      	lsls	r2, r3, #22
 800cbc2:	d402      	bmi.n	800cbca <_vfiprintf_r+0x1fe>
 800cbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbc6:	f7fe f9e7 	bl	800af98 <__retarget_lock_release_recursive>
 800cbca:	89ab      	ldrh	r3, [r5, #12]
 800cbcc:	065b      	lsls	r3, r3, #25
 800cbce:	f53f af1f 	bmi.w	800ca10 <_vfiprintf_r+0x44>
 800cbd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbd4:	e71e      	b.n	800ca14 <_vfiprintf_r+0x48>
 800cbd6:	ab03      	add	r3, sp, #12
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	462a      	mov	r2, r5
 800cbdc:	4630      	mov	r0, r6
 800cbde:	4b06      	ldr	r3, [pc, #24]	@ (800cbf8 <_vfiprintf_r+0x22c>)
 800cbe0:	a904      	add	r1, sp, #16
 800cbe2:	f7fd fec1 	bl	800a968 <_printf_i>
 800cbe6:	e7e4      	b.n	800cbb2 <_vfiprintf_r+0x1e6>
 800cbe8:	0800ddf0 	.word	0x0800ddf0
 800cbec:	0800ddf6 	.word	0x0800ddf6
 800cbf0:	0800ddfa 	.word	0x0800ddfa
 800cbf4:	0800a42d 	.word	0x0800a42d
 800cbf8:	0800c9a7 	.word	0x0800c9a7

0800cbfc <__swbuf_r>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	460e      	mov	r6, r1
 800cc00:	4614      	mov	r4, r2
 800cc02:	4605      	mov	r5, r0
 800cc04:	b118      	cbz	r0, 800cc0e <__swbuf_r+0x12>
 800cc06:	6a03      	ldr	r3, [r0, #32]
 800cc08:	b90b      	cbnz	r3, 800cc0e <__swbuf_r+0x12>
 800cc0a:	f7fe f859 	bl	800acc0 <__sinit>
 800cc0e:	69a3      	ldr	r3, [r4, #24]
 800cc10:	60a3      	str	r3, [r4, #8]
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	071a      	lsls	r2, r3, #28
 800cc16:	d501      	bpl.n	800cc1c <__swbuf_r+0x20>
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	b943      	cbnz	r3, 800cc2e <__swbuf_r+0x32>
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f000 f82a 	bl	800cc78 <__swsetup_r>
 800cc24:	b118      	cbz	r0, 800cc2e <__swbuf_r+0x32>
 800cc26:	f04f 37ff 	mov.w	r7, #4294967295
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	6922      	ldr	r2, [r4, #16]
 800cc32:	b2f6      	uxtb	r6, r6
 800cc34:	1a98      	subs	r0, r3, r2
 800cc36:	6963      	ldr	r3, [r4, #20]
 800cc38:	4637      	mov	r7, r6
 800cc3a:	4283      	cmp	r3, r0
 800cc3c:	dc05      	bgt.n	800cc4a <__swbuf_r+0x4e>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4628      	mov	r0, r5
 800cc42:	f7ff fdb1 	bl	800c7a8 <_fflush_r>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d1ed      	bne.n	800cc26 <__swbuf_r+0x2a>
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	60a3      	str	r3, [r4, #8]
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	6022      	str	r2, [r4, #0]
 800cc56:	701e      	strb	r6, [r3, #0]
 800cc58:	6962      	ldr	r2, [r4, #20]
 800cc5a:	1c43      	adds	r3, r0, #1
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d004      	beq.n	800cc6a <__swbuf_r+0x6e>
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	07db      	lsls	r3, r3, #31
 800cc64:	d5e1      	bpl.n	800cc2a <__swbuf_r+0x2e>
 800cc66:	2e0a      	cmp	r6, #10
 800cc68:	d1df      	bne.n	800cc2a <__swbuf_r+0x2e>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f7ff fd9b 	bl	800c7a8 <_fflush_r>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d0d9      	beq.n	800cc2a <__swbuf_r+0x2e>
 800cc76:	e7d6      	b.n	800cc26 <__swbuf_r+0x2a>

0800cc78 <__swsetup_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4b29      	ldr	r3, [pc, #164]	@ (800cd20 <__swsetup_r+0xa8>)
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	6818      	ldr	r0, [r3, #0]
 800cc80:	460c      	mov	r4, r1
 800cc82:	b118      	cbz	r0, 800cc8c <__swsetup_r+0x14>
 800cc84:	6a03      	ldr	r3, [r0, #32]
 800cc86:	b90b      	cbnz	r3, 800cc8c <__swsetup_r+0x14>
 800cc88:	f7fe f81a 	bl	800acc0 <__sinit>
 800cc8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc90:	0719      	lsls	r1, r3, #28
 800cc92:	d422      	bmi.n	800ccda <__swsetup_r+0x62>
 800cc94:	06da      	lsls	r2, r3, #27
 800cc96:	d407      	bmi.n	800cca8 <__swsetup_r+0x30>
 800cc98:	2209      	movs	r2, #9
 800cc9a:	602a      	str	r2, [r5, #0]
 800cc9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	e033      	b.n	800cd10 <__swsetup_r+0x98>
 800cca8:	0758      	lsls	r0, r3, #29
 800ccaa:	d512      	bpl.n	800ccd2 <__swsetup_r+0x5a>
 800ccac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccae:	b141      	cbz	r1, 800ccc2 <__swsetup_r+0x4a>
 800ccb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccb4:	4299      	cmp	r1, r3
 800ccb6:	d002      	beq.n	800ccbe <__swsetup_r+0x46>
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f7fe ffd5 	bl	800bc68 <_free_r>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	2300      	movs	r3, #0
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	6923      	ldr	r3, [r4, #16]
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	f043 0308 	orr.w	r3, r3, #8
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	b94b      	cbnz	r3, 800ccf2 <__swsetup_r+0x7a>
 800ccde:	89a3      	ldrh	r3, [r4, #12]
 800cce0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cce8:	d003      	beq.n	800ccf2 <__swsetup_r+0x7a>
 800ccea:	4621      	mov	r1, r4
 800ccec:	4628      	mov	r0, r5
 800ccee:	f000 f83e 	bl	800cd6e <__smakebuf_r>
 800ccf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf6:	f013 0201 	ands.w	r2, r3, #1
 800ccfa:	d00a      	beq.n	800cd12 <__swsetup_r+0x9a>
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	60a2      	str	r2, [r4, #8]
 800cd00:	6962      	ldr	r2, [r4, #20]
 800cd02:	4252      	negs	r2, r2
 800cd04:	61a2      	str	r2, [r4, #24]
 800cd06:	6922      	ldr	r2, [r4, #16]
 800cd08:	b942      	cbnz	r2, 800cd1c <__swsetup_r+0xa4>
 800cd0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd0e:	d1c5      	bne.n	800cc9c <__swsetup_r+0x24>
 800cd10:	bd38      	pop	{r3, r4, r5, pc}
 800cd12:	0799      	lsls	r1, r3, #30
 800cd14:	bf58      	it	pl
 800cd16:	6962      	ldrpl	r2, [r4, #20]
 800cd18:	60a2      	str	r2, [r4, #8]
 800cd1a:	e7f4      	b.n	800cd06 <__swsetup_r+0x8e>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	e7f7      	b.n	800cd10 <__swsetup_r+0x98>
 800cd20:	2000001c 	.word	0x2000001c

0800cd24 <__swhatbuf_r>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	460c      	mov	r4, r1
 800cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2c:	4615      	mov	r5, r2
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	461e      	mov	r6, r3
 800cd32:	b096      	sub	sp, #88	@ 0x58
 800cd34:	da0c      	bge.n	800cd50 <__swhatbuf_r+0x2c>
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	2100      	movs	r1, #0
 800cd3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd3e:	bf14      	ite	ne
 800cd40:	2340      	movne	r3, #64	@ 0x40
 800cd42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd46:	2000      	movs	r0, #0
 800cd48:	6031      	str	r1, [r6, #0]
 800cd4a:	602b      	str	r3, [r5, #0]
 800cd4c:	b016      	add	sp, #88	@ 0x58
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	466a      	mov	r2, sp
 800cd52:	f000 f849 	bl	800cde8 <_fstat_r>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	dbed      	blt.n	800cd36 <__swhatbuf_r+0x12>
 800cd5a:	9901      	ldr	r1, [sp, #4]
 800cd5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd64:	4259      	negs	r1, r3
 800cd66:	4159      	adcs	r1, r3
 800cd68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd6c:	e7eb      	b.n	800cd46 <__swhatbuf_r+0x22>

0800cd6e <__smakebuf_r>:
 800cd6e:	898b      	ldrh	r3, [r1, #12]
 800cd70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd72:	079d      	lsls	r5, r3, #30
 800cd74:	4606      	mov	r6, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	d507      	bpl.n	800cd8a <__smakebuf_r+0x1c>
 800cd7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd7e:	6023      	str	r3, [r4, #0]
 800cd80:	6123      	str	r3, [r4, #16]
 800cd82:	2301      	movs	r3, #1
 800cd84:	6163      	str	r3, [r4, #20]
 800cd86:	b003      	add	sp, #12
 800cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8a:	466a      	mov	r2, sp
 800cd8c:	ab01      	add	r3, sp, #4
 800cd8e:	f7ff ffc9 	bl	800cd24 <__swhatbuf_r>
 800cd92:	9f00      	ldr	r7, [sp, #0]
 800cd94:	4605      	mov	r5, r0
 800cd96:	4639      	mov	r1, r7
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7fd fa1d 	bl	800a1d8 <_malloc_r>
 800cd9e:	b948      	cbnz	r0, 800cdb4 <__smakebuf_r+0x46>
 800cda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda4:	059a      	lsls	r2, r3, #22
 800cda6:	d4ee      	bmi.n	800cd86 <__smakebuf_r+0x18>
 800cda8:	f023 0303 	bic.w	r3, r3, #3
 800cdac:	f043 0302 	orr.w	r3, r3, #2
 800cdb0:	81a3      	strh	r3, [r4, #12]
 800cdb2:	e7e2      	b.n	800cd7a <__smakebuf_r+0xc>
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdbe:	81a3      	strh	r3, [r4, #12]
 800cdc0:	9b01      	ldr	r3, [sp, #4]
 800cdc2:	6020      	str	r0, [r4, #0]
 800cdc4:	b15b      	cbz	r3, 800cdde <__smakebuf_r+0x70>
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdcc:	f000 f81e 	bl	800ce0c <_isatty_r>
 800cdd0:	b128      	cbz	r0, 800cdde <__smakebuf_r+0x70>
 800cdd2:	89a3      	ldrh	r3, [r4, #12]
 800cdd4:	f023 0303 	bic.w	r3, r3, #3
 800cdd8:	f043 0301 	orr.w	r3, r3, #1
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	431d      	orrs	r5, r3
 800cde2:	81a5      	strh	r5, [r4, #12]
 800cde4:	e7cf      	b.n	800cd86 <__smakebuf_r+0x18>
	...

0800cde8 <_fstat_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	2300      	movs	r3, #0
 800cdec:	4d06      	ldr	r5, [pc, #24]	@ (800ce08 <_fstat_r+0x20>)
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	602b      	str	r3, [r5, #0]
 800cdf6:	f7fb f8ff 	bl	8007ff8 <_fstat>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	d102      	bne.n	800ce04 <_fstat_r+0x1c>
 800cdfe:	682b      	ldr	r3, [r5, #0]
 800ce00:	b103      	cbz	r3, 800ce04 <_fstat_r+0x1c>
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	bd38      	pop	{r3, r4, r5, pc}
 800ce06:	bf00      	nop
 800ce08:	20000580 	.word	0x20000580

0800ce0c <_isatty_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	2300      	movs	r3, #0
 800ce10:	4d05      	ldr	r5, [pc, #20]	@ (800ce28 <_isatty_r+0x1c>)
 800ce12:	4604      	mov	r4, r0
 800ce14:	4608      	mov	r0, r1
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	f7fb f8f3 	bl	8008002 <_isatty>
 800ce1c:	1c43      	adds	r3, r0, #1
 800ce1e:	d102      	bne.n	800ce26 <_isatty_r+0x1a>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	b103      	cbz	r3, 800ce26 <_isatty_r+0x1a>
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	20000580 	.word	0x20000580

0800ce2c <_init>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	bf00      	nop
 800ce30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce32:	bc08      	pop	{r3}
 800ce34:	469e      	mov	lr, r3
 800ce36:	4770      	bx	lr

0800ce38 <_fini>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	bf00      	nop
 800ce3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3e:	bc08      	pop	{r3}
 800ce40:	469e      	mov	lr, r3
 800ce42:	4770      	bx	lr

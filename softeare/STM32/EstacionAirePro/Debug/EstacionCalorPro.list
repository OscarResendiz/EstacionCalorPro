
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e304  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  0800e418  0800e418  0000f418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f380  0800f380  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f380  0800f380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f388  0800f388  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f388  0800f388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800f390  0800f390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f398  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001d8  0800f570  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800f570  00011580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265dc  00000000  00000000  00011201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ad8  00000000  00000000  000377dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002328  00000000  00000000  0003f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aaa  00000000  00000000  000415e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef4d  00000000  00000000  0004308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028820  00000000  00000000  00061fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009efe0  00000000  00000000  0008a7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001297d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a34c  00000000  00000000  0012981c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00133b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e3fc 	.word	0x0800e3fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800e3fc 	.word	0x0800e3fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <_ZN15CManejadorBotonC1Ev+0x38>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	0800e554 	.word	0x0800e554

080010b8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <_ZN15CManejadorBotonD1Ev+0x1c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	0800e554 	.word	0x0800e554

080010d8 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe9 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80010e6:	2120      	movs	r1, #32
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f00a fb05 	bl	800b6f8 <_ZdlPvj>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	80fb      	strh	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	797a      	ldrb	r2, [r7, #5]
 800111e:	729a      	strb	r2, [r3, #10]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	891b      	ldrh	r3, [r3, #8]
 8001144:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f007 f92f 	bl	80083bc <HAL_GPIO_Init>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	891b      	ldrh	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f007 faa3 	bl	80086c4 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0

}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	61da      	str	r2, [r3, #28]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d058      	beq.n	8001266 <_ZN15CManejadorBoton7ProcesaEi+0xc4>
		return;
	if(gpio_pin!=Gpio_Pin)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d154      	bne.n	800126a <_ZN15CManejadorBoton7ProcesaEi+0xc8>
		return;
	int tiempoClick = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
	int estado = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	estado = Leer();
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffcc 	bl	8001166 <_ZN15CManejadorBoton4LeerEv>
 80011ce:	6138      	str	r0, [r7, #16]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80011d0:	f006 fc92 	bl	8007af8 <HAL_GetTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b63      	cmp	r3, #99	@ 0x63
 80011e2:	dd44      	ble.n	800126e <_ZN15CManejadorBoton7ProcesaEi+0xcc>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80011e4:	f006 fc88 	bl	8007af8 <HAL_GetTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11d      	bne.n	800123a <_ZN15CManejadorBoton7ProcesaEi+0x98>
	{
		Manejador->OnBotonSueltoEvent(Identificador);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69d8      	ldr	r0, [r3, #28]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3310      	adds	r3, #16
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	7a92      	ldrb	r2, [r2, #10]
 8001210:	4611      	mov	r1, r2
 8001212:	4798      	blx	r3
		tiempoClick = HAL_GetTick() - TiempoInicioClick;
 8001214:	f006 fc70 	bl	8007af8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
		Manejador->OnBotonClickEvent(Identificador, tiempoClick);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69d8      	ldr	r0, [r3, #28]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3308      	adds	r3, #8
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	7a92      	ldrb	r2, [r2, #10]
 8001234:	4611      	mov	r1, r2
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4798      	blx	r3
	}
	if (Estado == BOTON_PRESIONADO)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
	{
		TiempoInicioClick = HAL_GetTick();
 8001242:	f006 fc59 	bl	8007af8 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
		Manejador->OnBotonPresionadoEvent(Identificador);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69d8      	ldr	r0, [r3, #28]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	330c      	adds	r3, #12
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7a92      	ldrb	r2, [r2, #10]
 8001260:	4611      	mov	r1, r2
 8001262:	4798      	blx	r3
 8001264:	e004      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 8001266:	bf00      	nop
 8001268:	e002      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 800126e:	bf00      	nop
	}
}
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	0800e564 	.word	0x0800e564

08001298 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	0800e564 	.word	0x0800e564

080012b8 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
}
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffe9 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 80012c6:	2104      	movs	r1, #4
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f00a fa15 	bl	800b6f8 <_ZdlPvj>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN22CManejadorEventosBoton17OnBotonClickEventEii>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]

}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <_ZN22CManejadorEventosBoton22OnBotonPresionadoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoEvent(int idBoton)
 {
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]

 }
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <_ZN22CManejadorEventosBoton18OnBotonSueltoEventEi>:
 void CManejadorEventosBoton::OnBotonSueltoEvent(int idBoton)
 {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]

 }
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <_ZN22CManejadorEventosBoton27OnBotonPresionadoLargoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoLargoEvent(int idBoton)
 {
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]

 }
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
	...

0800132c <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>

Calefactor::Calefactor()
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	4a05      	ldr	r2, [pc, #20]	@ (800134c <_ZN10CalefactorC1Ev+0x20>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	0800e584 	.word	0x0800e584

08001350 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <_ZN10CalefactorD1Ev+0x1c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	0800e584 	.word	0x0800e584

08001370 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
}
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe9 	bl	8001350 <_ZN10CalefactorD1Ev>
 800137e:	2110      	movs	r1, #16
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f00a f9b9 	bl	800b6f8 <_ZdlPvj>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	811a      	strh	r2, [r3, #8]

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = Gpio_Pin;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f006 ffe8 	bl	80083bc <HAL_GPIO_Init>
	Apagar();
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f817 	bl	8001420 <_ZN10Calefactor6ApagarEv>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6858      	ldr	r0, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	891b      	ldrh	r3, [r3, #8]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	f007 f970 	bl	80086f2 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6858      	ldr	r0, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	891b      	ldrh	r3, [r3, #8]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f007 f95d 	bl	80086f2 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	0800e594 	.word	0x0800e594

08001468 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	0800e594 	.word	0x0800e594

08001488 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
}
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe9 	bl	8001468 <_ZN20ControlVelocidadAireD1Ev>
 8001496:	2134      	movs	r1, #52	@ 0x34
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f00a f92d 	bl	800b6f8 <_ZdlPvj>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
	 ADC_ChannelConfTypeDef sConfig = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <_ZN20ControlVelocidadAire10InicializaEv+0xc8>)
 80014d8:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014f2:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.NbrOfConversion = 1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f006 fb22 	bl	8007b54 <HAL_ADC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf14      	ite	ne
 8001516:	2301      	movne	r3, #1
 8001518:	2300      	moveq	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <_ZN20ControlVelocidadAire10InicializaEv+0x7e>
	 {
	 Error_Handler();
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f845 	bl	80015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800152e:	2307      	movs	r3, #7
 8001530:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fc9b 	bl	8007e78 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <_ZN20ControlVelocidadAire10InicializaEv+0xb0>
	 {
	 Error_Handler();
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f82c 	bl	80015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f006 fbd1 	bl	8007d04 <HAL_ADC_Start>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40012400 	.word	0x40012400

08001574 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	4618      	mov	r0, r3
 8001582:	f006 fc6d 	bl	8007e60 <HAL_ADC_GetValue>
 8001586:	4603      	mov	r3, r0
 8001588:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2264      	movs	r2, #100	@ 0x64
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x38>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	441a      	add	r2, r3
 800159a:	12d2      	asrs	r2, r2, #11
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	3364      	adds	r3, #100	@ 0x64
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	80080081 	.word	0x80080081

080015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe52 	bl	8001278 <_ZN22CManejadorEventosBotonC1Ev>
 80015d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <_ZN8CEncoderC1Ev+0x44>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800e5a4 	.word	0x0800e5a4

0800160c <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4a05      	ldr	r2, [pc, #20]	@ (800162c <_ZN8CEncoderD1Ev+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe3b 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800e5a4 	.word	0x0800e5a4

08001630 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
}
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_ZN8CEncoderD1Ev>
 800163e:	214c      	movs	r1, #76	@ 0x4c
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f00a f859 	bl	800b6f8 <_ZdlPvj>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8c3a      	ldrh	r2, [r7, #32]
 8001676:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001682:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 800168a:	2020      	movs	r0, #32
 800168c:	f00a f836 	bl	800b6fc <_Znwj>
 8001690:	4603      	mov	r3, r0
 8001692:	461c      	mov	r4, r3
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fcf1 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd6e 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	69d8      	ldr	r0, [r3, #28]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8b1a      	ldrh	r2, [r3, #24]
 80016b8:	2303      	movs	r3, #3
 80016ba:	f7ff fd1d 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f807 	bl	80016d2 <_ZN8CEncoder6LeeClkEv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}

080016d2 <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f006 ffed 	bl	80086c4 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8a1b      	ldrh	r3, [r3, #16]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f006 ffdc 	bl	80086c4 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;// GPIO_MODE_INPUT;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <_ZN8CEncoder4InitEv+0x78>)
 8001736:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f107 0208 	add.w	r2, r7, #8
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f006 fe38 	bl	80083bc <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8a1b      	ldrh	r3, [r3, #16]
 8001750:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f107 0208 	add.w	r2, r7, #8
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fe29 	bl	80083bc <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8b1b      	ldrh	r3, [r3, #24]
 800176e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fe1a 	bl	80083bc <HAL_GPIO_Init>
}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	10310000 	.word	0x10310000

08001794 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	621a      	str	r2, [r3, #32]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <_ZN8CEncoder18OnBotonSueltoEventEi>:

void CEncoder::OnBotonSueltoEvent(int idBoton)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <_ZN8CEncoder18OnBotonSueltoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d10c      	bne.n	80017e0 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderSueltoEvent(ID_Encoder);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a18      	ldr	r0, [r3, #32]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	331c      	adds	r3, #28
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017d8:	4611      	mov	r1, r2
 80017da:	4798      	blx	r3
		break;
 80017dc:	e000      	b.n	80017e0 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
		return;
 80017de:	bf00      	nop
	}
}
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZN8CEncoder22OnBotonPresionadoEventEi>:

void CEncoder::OnBotonPresionadoEvent(int idBoton)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d10c      	bne.n	8001818 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderPresionadoEvent(ID_Encoder);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a18      	ldr	r0, [r3, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3314      	adds	r3, #20
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001810:	4611      	mov	r1, r2
 8001812:	4798      	blx	r3
		break;
 8001814:	e000      	b.n	8001818 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
		return;
 8001816:	bf00      	nop
	}
}
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZN8CEncoder17OnBotonClickEventEii>:

void CEncoder::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]

	switch (idBoton)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10b      	bne.n	8001848 <_ZN8CEncoder17OnBotonClickEventEii+0x2a>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder, tiempoClick);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a18      	ldr	r0, [r3, #32]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3310      	adds	r3, #16
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4798      	blx	r3
		break;
 8001846:	bf00      	nop
	}
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc9e 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f804 	bl	8001876 <_ZN8CEncoder10leeEncoderEi>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	461a      	mov	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4293      	cmp	r3, r2
 800188a:	d128      	bne.n	80018de <_ZN8CEncoder10leeEncoderEi+0x68>
		return;
	CLK_status = LeeClk();
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff20 	bl	80016d2 <_ZN8CEncoder6LeeClkEv>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d017      	beq.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d113      	bne.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
	{
		if (LeeDt() != CLK_status)
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff21 	bl	80016f4 <_ZN8CEncoder5LeeDtEv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <_ZN8CEncoder10leeEncoderEi+0x58>
		{
			incrementa();
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f80d 	bl	80018e6 <_ZN8CEncoder10incrementaEv>
 80018cc:	e002      	b.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
		}
		else
		{
			decrementa();
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f81c 	bl	800190c <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
 80018dc:	e000      	b.n	80018e0 <_ZN8CEncoder10leeEncoderEi+0x6a>
		return;
 80018de:	bf00      	nop
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a18      	ldr	r0, [r3, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001900:	4611      	mov	r1, r2
 8001902:	4798      	blx	r3
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a18      	ldr	r0, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	330c      	adds	r3, #12
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001926:	4611      	mov	r1, r2
 8001928:	4798      	blx	r3
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0800e5c8 	.word	0x0800e5c8

08001954 <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	0800e5c8 	.word	0x0800e5c8

08001974 <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
}
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe9 	bl	8001954 <_ZN24CManejadorEventosEncoderD1Ev>
 8001982:	2104      	movs	r1, #4
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f009 feb7 	bl	800b6f8 <_ZdlPvj>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]

}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]

}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEii>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]

}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_ZN24CManejadorEventosEncoder29OnBotonEncoderPresionadoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]

}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_ZN24CManejadorEventosEncoder34OnBotonEncoderPresionadoLargoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]

}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_ZN24CManejadorEventosEncoder25OnBotonEncoderSueltoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]

}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_ZN13CEstacionBaseC1Ev+0x20>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	0800e5f0 	.word	0x0800e5f0

08001a34 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	0800e5f0 	.word	0x0800e5f0

08001a54 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
}
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe9 	bl	8001a34 <_ZN13CEstacionBaseD1Ev>
 8001a62:	2108      	movs	r1, #8
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f009 fe47 	bl	800b6f8 <_ZdlPvj>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN13CEstacionBase18GetTemperaturaRealEv>:

float CEstacionBase::GetTemperaturaReal() //regresa la tenperatura actual de la estacion
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

}
 8001a7c:	bf00      	nop
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]

}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

}
 8001aa4:	bf00      	nop
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]

}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

}
 8001acc:	bf00      	nop
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

}
 8001ae0:	bf00      	nop
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4798      	blx	r3
 8001b62:	e000      	b.n	8001b66 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8001b64:	bf00      	nop
}
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3308      	adds	r3, #8
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4798      	blx	r3
 8001b92:	e000      	b.n	8001b96 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8001b94:	bf00      	nop

}
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]

}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]

}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	return 0;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]

}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]

}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
	...

08001c3c <_ZN16CestacionBaku601D1Ev>:
#include <Estaciones/CestacionBaku601.hpp>
#include "Calefactor/Calefactor.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.h"

CestacionBaku601::~CestacionBaku601()
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <_ZN16CestacionBaku601D1Ev+0x50>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <_ZN16CestacionBaku601D1Ev+0x54>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	33e0      	adds	r3, #224	@ 0xe0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fd9b 	bl	8006790 <_ZN15SensorMagneticoD1Ev>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	33d0      	adds	r3, #208	@ 0xd0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fb76 	bl	8001350 <_ZN10CalefactorD1Ev>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3384      	adds	r3, #132	@ 0x84
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 fbe3 	bl	8006434 <_ZN3PwmD1Ev>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3308      	adds	r3, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fd46 	bl	8006704 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff feda 	bl	8001a34 <_ZN13CEstacionBaseD1Ev>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800e650 	.word	0x0800e650
 8001c90:	0800e6b4 	.word	0x0800e6b4

08001c94 <_ZThn8_N16CestacionBaku601D1Ev>:
	Calefactor calefactor;
	SensorMagnetico sensorMagnetico;
	int NivelAire=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 8001c94:	f1a0 0008 	sub.w	r0, r0, #8
 8001c98:	f7ff bfd0 	b.w	8001c3c <_ZN16CestacionBaku601D1Ev>

08001c9c <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
}
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffc9 	bl	8001c3c <_ZN16CestacionBaku601D1Ev>
 8001caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f009 fd22 	bl	800b6f8 <_ZdlPvj>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_ZThn8_N16CestacionBaku601D0Ev>:
 8001cbe:	f1a0 0008 	sub.w	r0, r0, #8
 8001cc2:	f7ff bfeb 	b.w	8001c9c <_ZN16CestacionBaku601D0Ev>
	...

08001cc8 <_ZN16CestacionBaku601C1Ev>:

CestacionBaku601::CestacionBaku601() :
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fe9c 	bl	8001a10 <_ZN13CEstacionBaseC1Ev>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fd01 	bl	80066e4 <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8001ce2:	4a57      	ldr	r2, [pc, #348]	@ (8001e40 <_ZN16CestacionBaku601C1Ev+0x178>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4a56      	ldr	r2, [pc, #344]	@ (8001e44 <_ZN16CestacionBaku601C1Ev+0x17c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2264      	movs	r2, #100	@ 0x64
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2205      	movs	r2, #5
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e48 <_ZN16CestacionBaku601C1Ev+0x180>)
 8001d50:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a3d      	ldr	r2, [pc, #244]	@ (8001e4c <_ZN16CestacionBaku601C1Ev+0x184>)
 8001d56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2208      	movs	r2, #8
 8001d68:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	220b      	movs	r2, #11
 8001d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	220c      	movs	r2, #12
 8001d74:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	665a      	str	r2, [r3, #100]	@ 0x64
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3368      	adds	r3, #104	@ 0x68
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 fa0c 	bl	800619e <_ZN7MAX6675C1Ev>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3384      	adds	r3, #132	@ 0x84
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fb42 	bl	8006414 <_ZN3PwmC1Ev>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	33d0      	adds	r3, #208	@ 0xd0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fac9 	bl	800132c <_ZN10CalefactorC1Ev>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	33e0      	adds	r3, #224	@ 0xe0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fcda 	bl	8006758 <_ZN15SensorMagneticoC1Ev>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 8001db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dbc:	f004 fb5a 	bl	8006474 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3368      	adds	r3, #104	@ 0x68
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4922      	ldr	r1, [pc, #136]	@ (8001e50 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 fa04 	bl	80061d6 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3368      	adds	r3, #104	@ 0x68
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	491e      	ldr	r1, [pc, #120]	@ (8001e50 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fa0f 	bl	80061fa <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3368      	adds	r3, #104	@ 0x68
 8001de0:	2201      	movs	r2, #1
 8001de2:	491b      	ldr	r1, [pc, #108]	@ (8001e50 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f9e4 	bl	80061b2 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3368      	adds	r3, #104	@ 0x68
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fab8 	bl	8006364 <_ZN7MAX66754InitEv>


	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	33d0      	adds	r3, #208	@ 0xd0
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4916      	ldr	r1, [pc, #88]	@ (8001e54 <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fac7 	bl	8001390 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	33d0      	adds	r3, #208	@ 0xd0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fad4 	bl	80013b4 <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	33e0      	adds	r3, #224	@ 0xe0
 8001e10:	2220      	movs	r2, #32
 8001e12:	4910      	ldr	r1, [pc, #64]	@ (8001e54 <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 fcdb 	bl	80067d0 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	33e0      	adds	r3, #224	@ 0xe0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fce8 	bl	80067f4 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f004 fcfd 	bl	8006830 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0800e650 	.word	0x0800e650
 8001e44:	0800e6b4 	.word	0x0800e6b4
 8001e48:	40a00000 	.word	0x40a00000
 8001e4c:	44160000 	.word	0x44160000
 8001e50:	40010800 	.word	0x40010800
 8001e54:	40010c00 	.word	0x40010c00

08001e58 <_ZN16CestacionBaku60118GetTemperaturaRealEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaReal()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	return thermocouple.MAX6675_lee(); //* .59;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3368      	adds	r3, #104	@ 0x68
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 fa11 	bl	800628c <_ZN7MAX667511MAX6675_leeEv>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	NivelAire=nivel;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	//pwm.SicloTrabajo(nivel);
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <_ZN16CestacionBaku6019GetEstadoEv>:


//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	33e0      	adds	r3, #224	@ 0xe0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 fcbc 	bl	800684a <_ZN15SensorMagnetico4LeerEv>
 8001ed2:	4603      	mov	r3, r0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:




void CestacionBaku601::IncrementaTemperatura()
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	da04      	bge.n	8001efa <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	611a      	str	r2, [r3, #16]
	}
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dd04      	ble.n	8001f1e <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
	}
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_ZN16CestacionBaku60117ActivarCalefactorEv>:


void CestacionBaku601::ActivarCalefactor()
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:


void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]

}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8001f6c:	f1a0 0008 	sub.w	r0, r0, #8
 8001f70:	f7ff bff2 	b.w	8001f58 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

08001f74 <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f80d 	bl	8001f9c <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
	ProcesaTemperaturaReal();
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f821 	bl	8001fca <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>
	procesaAire();
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f843 	bl	8002014 <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f862 	bl	8002058 <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3310      	adds	r3, #16
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d002      	beq.n	8001fc2 <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	615a      	str	r2, [r3, #20]
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>:

void CestacionBaku601::ProcesaTemperaturaReal()
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	int temperatura = GetTemperaturaReal();
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f825 	bl	8001030 <__aeabi_f2iz>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60fb      	str	r3, [r7, #12]
	if (temperaturaRealAnterior != temperatura)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d00b      	beq.n	800200c <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv+0x42>
	{
		temperaturaRealAnterior = temperatura;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	619a      	str	r2, [r3, #24]
		TemperaturaRealEvent(temperaturaRealAnterior);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3350      	adds	r3, #80	@ 0x50
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6992      	ldr	r2, [r2, #24]
 8002008:	4611      	mov	r1, r2
 800200a:	4798      	blx	r3
	}
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN16CestacionBaku60111procesaAireEv>:

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3318      	adds	r3, #24
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4610      	mov	r0, r2
 8002028:	4798      	blx	r3
 800202a:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	429a      	cmp	r2, r3
 8002034:	d00b      	beq.n	800204e <_ZN16CestacionBaku60111procesaAireEv+0x3a>
	{
		AireAnterior = aire;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	334c      	adds	r3, #76	@ 0x4c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	69d2      	ldr	r2, [r2, #28]
 800204a:	4611      	mov	r1, r2
 800204c:	4798      	blx	r3
	}
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <_ZN16CestacionBaku60117ProcesaCalefactorEv>:


void CestacionBaku601::ProcesaCalefactor()
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002064:	2b00      	cmp	r3, #0
 8002066:	d108      	bne.n	800207a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor=0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	33d0      	adds	r3, #208	@ 0xd0
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f9d4 	bl	8001420 <_ZN10Calefactor6ApagarEv>
		return;
 8002078:	e094      	b.n	80021a4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	int sensor = sensorMagnetico.Leer();
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	33e0      	adds	r3, #224	@ 0xe0
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fbe3 	bl	800684a <_ZN15SensorMagnetico4LeerEv>
 8002084:	6178      	str	r0, [r7, #20]
	if (sensor == BOTON_PRESIONADO)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x3c>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88f 	bl	80021b0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 8002092:	e087      	b.n	80021a4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	TiempoEnfriando=0;
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3318      	adds	r3, #24
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
 80020b0:	6138      	str	r0, [r7, #16]
	pwm.SicloTrabajo(aire);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3384      	adds	r3, #132	@ 0x84
 80020b6:	6939      	ldr	r1, [r7, #16]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fa87 	bl	80065cc <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual=HAL_GetTick(); //me trae el tiempo en milisegundos
 80020be:	f005 fd1b 	bl	8007af8 <HAL_GetTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
	if(TiempoActual<TiempoProximoMuestreo )
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	429a      	cmp	r2, r3
 80020d4:	db65      	blt.n	80021a2 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo=TiempoActual+TiempoMuestreoTemperatura;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	441a      	add	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
	float temperatura = GetTemperaturaReal();
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3308      	adds	r3, #8
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	60f8      	str	r0, [r7, #12]
	 PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fd80 	bl	8000bfc <__aeabi_i2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fcc5 	bl	8000a90 <__aeabi_fsub>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	63da      	str	r2, [r3, #60]	@ 0x3c
	 Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800211e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fd6a 	bl	8000bfc <__aeabi_i2f>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	4628      	mov	r0, r5
 800212e:	f7fe fdb9 	bl	8000ca4 <__aeabi_fmul>
 8002132:	4603      	mov	r3, r0
 8002134:	4619      	mov	r1, r3
 8002136:	4620      	mov	r0, r4
 8002138:	f7fe fcac 	bl	8000a94 <__addsf3>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
	 PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT)/10;   //Calculo de la salida del controlador PI
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002156:	f7fe fe59 	bl	8000e0c <__aeabi_fdiv>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fd9d 	bl	8000ca4 <__aeabi_fmul>
 800216a:	4603      	mov	r3, r0
 800216c:	4619      	mov	r1, r3
 800216e:	4628      	mov	r0, r5
 8002170:	f7fe fc90 	bl	8000a94 <__addsf3>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe fd93 	bl	8000ca4 <__aeabi_fmul>
 800217e:	4603      	mov	r3, r0
 8002180:	490a      	ldr	r1, [pc, #40]	@ (80021ac <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x154>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fe42 	bl	8000e0c <__aeabi_fdiv>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44
	 //asigno la potencia del calefactor
	 PotenciaCalefactor=PID_value;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe ff4b 	bl	8001030 <__aeabi_f2iz>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
 80021a0:	e000      	b.n	80021a4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
		return;
 80021a2:	bf00      	nop
}
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bdb0      	pop	{r4, r5, r7, pc}
 80021aa:	bf00      	nop
 80021ac:	41200000 	.word	0x41200000

080021b0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor=0; //bajo toda la potencia
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaReal();
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3308      	adds	r3, #8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	60f8      	str	r0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 80021cc:	492c      	ldr	r1, [pc, #176]	@ (8002280 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd0>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7fe ff10 	bl	8000ff4 <__aeabi_fcmple>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03c      	beq.n	8002254 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xa4>
	{
		if(TiempoEnfriando==0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	f7fe fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x5a>
		{
			TiempoEnfriando=HAL_GetTick();
 80021f2:	f005 fc81 	bl	8007af8 <HAL_GetTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f8f3 	bl	80003e4 <__aeabi_ui2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 8002208:	e033      	b.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
		}
		if(HAL_GetTick()-TiempoEnfriando<=10000)
 800220a:	f005 fc75 	bl	8007af8 <HAL_GetTick>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f8e7 	bl	80003e4 <__aeabi_ui2d>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800221c:	f7fd ffa4 	bl	8000168 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	2301      	movs	r3, #1
 800222a:	461c      	mov	r4, r3
 800222c:	a312      	add	r3, pc, #72	@ (adr r3, 8002278 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fbcd 	bl	80009d0 <__aeabi_dcmple>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x90>
 800223c:	2300      	movs	r3, #0
 800223e:	461c      	mov	r4, r3
 8002240:	b2e3      	uxtb	r3, r4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc0>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3384      	adds	r3, #132	@ 0x84
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f004 f9bd 	bl	80065cc <_ZN3Pwm12SicloTrabajoEi>
		return;
 8002252:	e00e      	b.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
	}
	//pongo al maximo el aire para enfriar la pistola
	if(temperatura>10)
 8002254:	490b      	ldr	r1, [pc, #44]	@ (8002284 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd4>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7fe fee0 	bl	800101c <__aeabi_fcmpgt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
	{
		pwm.SicloTrabajo(100);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3384      	adds	r3, #132	@ 0x84
 8002266:	2164      	movs	r1, #100	@ 0x64
 8002268:	4618      	mov	r0, r3
 800226a:	f004 f9af 	bl	80065cc <_ZN3Pwm12SicloTrabajoEi>
 800226e:	e000      	b.n	8002272 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
			return;
 8002270:	bf00      	nop
	}
}
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	00000000 	.word	0x00000000
 800227c:	40c38800 	.word	0x40c38800
 8002280:	41f00000 	.word	0x41f00000
 8002284:	41200000 	.word	0x41200000

08002288 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	if(gpio_pin!=CruceCero_Pin)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d124      	bne.n	80022e2 <_ZN16CestacionBaku60110CruceXCeroEi+0x5a>
		return;
	if(TiempoAntiReboresCruceXCero>0)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229c:	2b00      	cmp	r3, #0
 800229e:	dc22      	bgt.n	80022e6 <_ZN16CestacionBaku60110CruceXCeroEi+0x5e>
	{
		return;
	}
	TiempoAntiReboresCruceXCero=9;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2209      	movs	r2, #9
 80022a4:	651a      	str	r2, [r3, #80]	@ 0x50

	if(ciclos>=100)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022aa:	2b63      	cmp	r3, #99	@ 0x63
 80022ac:	dd02      	ble.n	80022b4 <_ZN16CestacionBaku60110CruceXCeroEi+0x2c>
	{
		ciclos=0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if(ciclos<PotenciaCalefactor)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	429a      	cmp	r2, r3
 80022be:	da05      	bge.n	80022cc <_ZN16CestacionBaku60110CruceXCeroEi+0x44>
	{
		calefactor.Encender();
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	33d0      	adds	r3, #208	@ 0xd0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f898 	bl	80013fa <_ZN10Calefactor8EncenderEv>
 80022ca:	e004      	b.n	80022d6 <_ZN16CestacionBaku60110CruceXCeroEi+0x4e>
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,	GPIO_PinState::GPIO_PIN_SET);
	}
	else
	{
		calefactor.Apagar();
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	33d0      	adds	r3, #208	@ 0xd0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f8a5 	bl	8001420 <_ZN10Calefactor6ApagarEv>
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,	GPIO_PinState::GPIO_PIN_RESET);
	}
	ciclos=ciclos+1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
 80022e0:	e002      	b.n	80022e8 <_ZN16CestacionBaku60110CruceXCeroEi+0x60>
		return;
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <_ZN16CestacionBaku60110CruceXCeroEi+0x60>
		return;
 80022e6:	bf00      	nop
}
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
		if(TiempoAntiReboresCruceXCero>0)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dd04      	ble.n	8002308 <_ZN16CestacionBaku6019TimerTickEv+0x1a>
		{
			TiempoAntiReboresCruceXCero--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	651a      	str	r2, [r3, #80]	@ 0x50
		}
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor=valor;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	CruceXCero(GPIO_Pin);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	333c      	adds	r3, #60	@ 0x3c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <_ZN18CComponenteBaseTftC1Ev+0x2c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	0800e6c8 	.word	0x0800e6c8

08002394 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	0800e6c8 	.word	0x0800e6c8

080023b4 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
}
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ffe9 	bl	8002394 <_ZN18CComponenteBaseTftD1Ev>
 80023c2:	2118      	movs	r1, #24
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f009 f997 	bl	800b6f8 <_ZdlPvj>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
	//Tft->drawPixel(x, y, color);
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	//Tft->startWrite();
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	4608      	mov	r0, r1
 8002414:	4611      	mov	r1, r2
 8002416:	461a      	mov	r2, r3
 8002418:	4603      	mov	r3, r0
 800241a:	817b      	strh	r3, [r7, #10]
 800241c:	460b      	mov	r3, r1
 800241e:	813b      	strh	r3, [r7, #8]
 8002420:	4613      	mov	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
	//Tft->writePixel(x, y, color);
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	4608      	mov	r0, r1
 8002438:	4611      	mov	r1, r2
 800243a:	461a      	mov	r2, r3
 800243c:	4603      	mov	r3, r0
 800243e:	817b      	strh	r3, [r7, #10]
 8002440:	460b      	mov	r3, r1
 8002442:	813b      	strh	r3, [r7, #8]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFillRect(x, y, w, h, color);
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	4608      	mov	r0, r1
 800245c:	4611      	mov	r1, r2
 800245e:	461a      	mov	r2, r3
 8002460:	4603      	mov	r3, r0
 8002462:	817b      	strh	r3, [r7, #10]
 8002464:	460b      	mov	r3, r1
 8002466:	813b      	strh	r3, [r7, #8]
 8002468:	4613      	mov	r3, r2
 800246a:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastVLine(x, y, h, color);
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	4608      	mov	r0, r1
 8002480:	4611      	mov	r1, r2
 8002482:	461a      	mov	r2, r3
 8002484:	4603      	mov	r3, r0
 8002486:	817b      	strh	r3, [r7, #10]
 8002488:	460b      	mov	r3, r1
 800248a:	813b      	strh	r3, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastHLine(x, y, w, color);
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	4608      	mov	r0, r1
 80024a4:	4611      	mov	r1, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	817b      	strh	r3, [r7, #10]
 80024ac:	460b      	mov	r3, r1
 80024ae:	813b      	strh	r3, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
	//Tft->writeLine(x0, y0, x1, y1, color);
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	//Tft->endWrite();
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
	//Tft->setRotation(r);
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
	//Tft->invertDisplay(i);
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastVLine(x, y, h, color);
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastHLine(x, y, w, color);
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
	//Tft->fillScreen(color);
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	4608      	mov	r0, r1
 8002564:	4611      	mov	r1, r2
 8002566:	461a      	mov	r2, r3
 8002568:	4603      	mov	r3, r0
 800256a:	817b      	strh	r3, [r7, #10]
 800256c:	460b      	mov	r3, r1
 800256e:	813b      	strh	r3, [r7, #8]
 8002570:	4613      	mov	r3, r2
 8002572:	80fb      	strh	r3, [r7, #6]
	//Tft->drawLine(x0, y0, x1, y1, color);
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_ZN18CComponenteBaseTft5widthEv>:
void CComponenteBaseTft::cp437(bool x)
{
	//Tft->cp437(x);
}
int16_t CComponenteBaseTft::width(void)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	return 319;
 8002586:	f240 133f 	movw	r3, #319	@ 0x13f
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	return 239;
 800259c:	23ef      	movs	r3, #239	@ 0xef
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 80025c2:	8978      	ldrh	r0, [r7, #10]
 80025c4:	8939      	ldrh	r1, [r7, #8]
 80025c6:	897a      	ldrh	r2, [r7, #10]
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4413      	add	r3, r2
 80025cc:	b29c      	uxth	r4, r3
 80025ce:	893a      	ldrh	r2, [r7, #8]
 80025d0:	8c3b      	ldrh	r3, [r7, #32]
 80025d2:	4413      	add	r3, r2
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	4622      	mov	r2, r4
 80025de:	f002 fa7c 	bl	8004ada <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}

080025ea <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b087      	sub	sp, #28
 80025ee:	af02      	add	r7, sp, #8
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	4608      	mov	r0, r1
 80025f4:	4611      	mov	r1, r2
 80025f6:	461a      	mov	r2, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	817b      	strh	r3, [r7, #10]
 80025fc:	460b      	mov	r3, r1
 80025fe:	813b      	strh	r3, [r7, #8]
 8002600:	4613      	mov	r3, r2
 8002602:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002604:	8978      	ldrh	r0, [r7, #10]
 8002606:	8939      	ldrh	r1, [r7, #8]
 8002608:	897a      	ldrh	r2, [r7, #10]
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	4413      	add	r3, r2
 800260e:	b29c      	uxth	r4, r3
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	8c3b      	ldrh	r3, [r7, #32]
 8002614:	4413      	add	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	4622      	mov	r2, r4
 8002620:	f002 f9da 	bl	80049d8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
	//Tft->drawRect(x, y, w, h, color);
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}

0800262c <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 800263c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002644:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
	//Tft->setTextSize(sx, sy);
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	611a      	str	r2, [r3, #16]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b085      	sub	sp, #20
 8002692:	af02      	add	r7, sp, #8
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	b29c      	uxth	r4, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6952      	ldr	r2, [r2, #20]
 80026b0:	b292      	uxth	r2, r2
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4623      	mov	r3, r4
 80026b8:	4602      	mov	r2, r0
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f002 fb02 	bl	8004cc4 <_Z17ILI9341_Draw_TextPKciittt>
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}

080026c8 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <_ZN12CEtiquetaTftD1Ev+0x20>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fb31 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	0800e718 	.word	0x0800e718

080026ec <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
}
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_ZN12CEtiquetaTftD1Ev>
 80026fa:	21a4      	movs	r1, #164	@ 0xa4
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f008 fffb 	bl	800b6f8 <_ZdlPvj>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af04      	add	r7, sp, #16
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	f000 fb27 	bl	8002d84 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002736:	4a11      	ldr	r2, [pc, #68]	@ (800277c <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2203      	movs	r2, #3
 8002740:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3330      	adds	r3, #48	@ 0x30
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	4618      	mov	r0, r3
 800275c:	f009 ff05 	bl	800c56a <strcpy>
	ColorTexto = colorTexto;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002764:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800276c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	0800e718 	.word	0x0800e718

08002780 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002780:	b40e      	push	{r1, r2, r3}
 8002782:	b580      	push	{r7, lr}
 8002784:	b0bb      	sub	sp, #236	@ 0xec
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 800279c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80027a0:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027aa:	e0f1      	b.n	8002990 <_ZN12CEtiquetaTft8SetTextoEPcz+0x210>
	{

		if (*p != '%')
 80027ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b25      	cmp	r3, #37	@ 0x25
 80027b4:	d00f      	beq.n	80027d6 <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ba:	7819      	ldrb	r1, [r3, #0]
 80027bc:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80027c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027c4:	4413      	add	r3, r2
 80027c6:	460a      	mov	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80027ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027ce:	3301      	adds	r3, #1
 80027d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 80027d4:	e0d7      	b.n	8002986 <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		}
		encontrado = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 80027dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	3b63      	subs	r3, #99	@ 0x63
 80027ee:	2b15      	cmp	r3, #21
 80027f0:	f200 8092 	bhi.w	8002918 <_ZN12CEtiquetaTft8SetTextoEPcz+0x198>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	080028c5 	.word	0x080028c5
 8002800:	08002855 	.word	0x08002855
 8002804:	08002919 	.word	0x08002919
 8002808:	080028e1 	.word	0x080028e1
 800280c:	08002919 	.word	0x08002919
 8002810:	08002919 	.word	0x08002919
 8002814:	08002871 	.word	0x08002871
 8002818:	08002919 	.word	0x08002919
 800281c:	08002919 	.word	0x08002919
 8002820:	08002919 	.word	0x08002919
 8002824:	08002919 	.word	0x08002919
 8002828:	08002919 	.word	0x08002919
 800282c:	08002919 	.word	0x08002919
 8002830:	080028a9 	.word	0x080028a9
 8002834:	08002919 	.word	0x08002919
 8002838:	08002919 	.word	0x08002919
 800283c:	080028fd 	.word	0x080028fd
 8002840:	08002919 	.word	0x08002919
 8002844:	08002919 	.word	0x08002919
 8002848:	08002919 	.word	0x08002919
 800284c:	08002919 	.word	0x08002919
 8002850:	0800288d 	.word	0x0800288d
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1d1a      	adds	r2, r3, #4
 8002858:	60fa      	str	r2, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4959      	ldr	r1, [pc, #356]	@ (80029c8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x248>)
 8002862:	4618      	mov	r0, r3
 8002864:	f009 fd4a 	bl	800c2fc <siprintf>
			encontrado = 1;
 8002868:	2301      	movs	r3, #1
 800286a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800286e:	e063      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1d1a      	adds	r2, r3, #4
 8002874:	60fa      	str	r2, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4953      	ldr	r1, [pc, #332]	@ (80029cc <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>)
 800287e:	4618      	mov	r0, r3
 8002880:	f009 fd3c 	bl	800c2fc <siprintf>
			encontrado = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800288a:	e055      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	60fa      	str	r2, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	494d      	ldr	r1, [pc, #308]	@ (80029d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 800289a:	4618      	mov	r0, r3
 800289c:	f009 fd2e 	bl	800c2fc <siprintf>
			encontrado = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028a6:	e047      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, int));
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	60fa      	str	r2, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4947      	ldr	r1, [pc, #284]	@ (80029d4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f009 fd20 	bl	800c2fc <siprintf>
			encontrado = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028c2:	e039      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1d1a      	adds	r2, r3, #4
 80028c8:	60fa      	str	r2, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4941      	ldr	r1, [pc, #260]	@ (80029d8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f009 fd12 	bl	800c2fc <siprintf>
			encontrado = 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028de:	e02b      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, int));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1d1a      	adds	r2, r3, #4
 80028e4:	60fa      	str	r2, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	493b      	ldr	r1, [pc, #236]	@ (80029dc <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f009 fd04 	bl	800c2fc <siprintf>
			encontrado = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80028fa:	e01d      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	60fa      	str	r2, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 800290a:	4618      	mov	r0, r3
 800290c:	f009 fcf6 	bl	800c2fc <siprintf>
			encontrado = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002916:	e00f      	b.n	8002938 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		default:
			buffer[posbuffer] = *p;
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291c:	7819      	ldrb	r1, [r3, #0]
 800291e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002926:	4413      	add	r3, r2
 8002928:	460a      	mov	r2, r1
 800292a:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 800292c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 8002936:	bf00      	nop
		}
		if (encontrado == 1)
 8002938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800293c:	2b01      	cmp	r3, #1
 800293e:	d122      	bne.n	8002986 <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		{
			postmp = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002946:	e016      	b.n	8002976 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f6>
			{
				buffer[posbuffer] = tmp[postmp];
 8002948:	f107 0210 	add.w	r2, r7, #16
 800294c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002950:	4413      	add	r3, r2
 8002952:	7819      	ldrb	r1, [r3, #0]
 8002954:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295c:	4413      	add	r3, r2
 800295e:	460a      	mov	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 8002962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002966:	3301      	adds	r3, #1
 8002968:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002976:	f107 0210 	add.w	r2, r7, #16
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e0      	bne.n	8002948 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c8>
	for (p = formato; *p; p++)
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298a:	3301      	adds	r3, #1
 800298c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f47f af08 	bne.w	80027ac <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 800299c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80029a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3330      	adds	r3, #48	@ 0x30
 80029ae:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f009 fdd8 	bl	800c56a <strcpy>
}
 80029ba:	bf00      	nop
 80029bc:	37ec      	adds	r7, #236	@ 0xec
 80029be:	46bd      	mov	sp, r7
 80029c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029c4:	b003      	add	sp, #12
 80029c6:	4770      	bx	lr
 80029c8:	0800e418 	.word	0x0800e418
 80029cc:	0800e41c 	.word	0x0800e41c
 80029d0:	0800e420 	.word	0x0800e420
 80029d4:	0800e424 	.word	0x0800e424
 80029d8:	0800e428 	.word	0x0800e428
 80029dc:	0800e42c 	.word	0x0800e42c
 80029e0:	0800e430 	.word	0x0800e430

080029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f9d9 	bl	8002de8 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b219      	sxth	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff fde3 	bl	800262c <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7ff fdef 	bl	8002656 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7ff fdf4 	bl	8002672 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3330      	adds	r3, #48	@ 0x30
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f7ff fdfb 	bl	800268e <_ZN18CComponenteBaseTft5printEPc>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	BackColor=color;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	615a      	str	r2, [r3, #20]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
	...

08002abc <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <_ZN13CPantallaBaseD1Ev+0x30>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <_ZN13CPantallaBaseD1Ev+0x34>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3330      	adds	r3, #48	@ 0x30
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fa63 	bl	8005fa0 <_ZN26CManejadorEventosControlesD1Ev>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f92f 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	0800e774 	.word	0x0800e774
 8002af0:	0800e7e8 	.word	0x0800e7e8

08002af4 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 8002af4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002af8:	f7ff bfe0 	b.w	8002abc <_ZN13CPantallaBaseD1Ev>

08002afc <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
}
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffd9 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 8002b0a:	21ac      	movs	r1, #172	@ 0xac
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f008 fdf3 	bl	800b6f8 <_ZdlPvj>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZThn48_N13CPantallaBaseD0Ev>:
 8002b1c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002b20:	f7ff bfec 	b.w	8002afc <_ZN13CPantallaBaseD0Ev>

08002b24 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08f      	sub	sp, #60	@ 0x3c
 8002b28:	af08      	add	r7, sp, #32
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	231f      	movs	r3, #31
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	2301      	movs	r3, #1
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2300      	movs	r3, #0
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	f000 f91c 	bl	8002d84 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3330      	adds	r3, #48	@ 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fa15 	bl	8005f80 <_ZN26CManejadorEventosControlesC1Ev>
 8002b56:	4a2a      	ldr	r2, [pc, #168]	@ (8002c00 <_ZN13CPantallaBaseC1EiPc+0xdc>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4a29      	ldr	r2, [pc, #164]	@ (8002c04 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3340      	adds	r3, #64	@ 0x40
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f009 fcf0 	bl	800c56a <strcpy>
	setRotation(3);  //ROTACION::HORIZONTAL); //en horizontal
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fc9e 	bl	80024d0 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fcf1 	bl	800257e <_ZN18CComponenteBaseTft5widthEv>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	617b      	str	r3, [r7, #20]
	int alto = height();
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fcf6 	bl	8002594 <_ZN18CComponenteBaseTft6heightEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f967 	bl	8002e86 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 8002bb8:	20a4      	movs	r0, #164	@ 0xa4
 8002bba:	f008 fd9f 	bl	800b6fc <_Znwj>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461c      	mov	r4, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6999      	ldr	r1, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3340      	adds	r3, #64	@ 0x40
 8002bce:	201f      	movs	r0, #31
 8002bd0:	9006      	str	r0, [sp, #24]
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	9005      	str	r0, [sp, #20]
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	9004      	str	r0, [sp, #16]
 8002bda:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bde:	9003      	str	r0, [sp, #12]
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	231f      	movs	r3, #31
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	231e      	movs	r3, #30
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff fd8d 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	0800e774 	.word	0x0800e774
 8002c04:	0800e7e8 	.word	0x0800e7e8

08002c08 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
	CRectanguloTft::Show();
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f8e8 	bl	8002de8 <_ZN14CRectanguloTft4ShowEv>
	//dibujo el titulo
	LabelTitulo->Show();
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3348      	adds	r3, #72	@ 0x48
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4610      	mov	r0, r2
 8002c28:	4798      	blx	r3
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
//	if(visible==false)
//	{
		//Show();
//		visible=true;
//	}
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3328      	adds	r3, #40	@ 0x28
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3230      	adds	r2, #48	@ 0x30
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3334      	adds	r3, #52	@ 0x34
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4610      	mov	r0, r2
 8002c84:	4798      	blx	r3
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	Estacion->QuitaManejadorControles();
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	332c      	adds	r3, #44	@ 0x2c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4798      	blx	r3
	Visible=false;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	return Visible;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d004      	beq.n	8002cf6 <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002cf4:	e000      	b.n	8002cf8 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8002cf6:	bf00      	nop
}
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3390      	adds	r3, #144	@ 0x90
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	3230      	adds	r2, #48	@ 0x30
 8002d32:	4611      	mov	r1, r2
 8002d34:	4798      	blx	r3
 8002d36:	e000      	b.n	8002d3a <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 8002d38:	bf00      	nop
}
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <_ZN14CRectanguloTftD1Ev+0x20>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fb1f 	bl	8002394 <_ZN18CComponenteBaseTftD1Ev>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	0800e858 	.word	0x0800e858

08002d64 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
}
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffe7 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 8002d72:	2130      	movs	r1, #48	@ 0x30
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f008 fcbf 	bl	800b6f8 <_ZdlPvj>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fae5 	bl	8002364 <_ZN18CComponenteBaseTftC1Ev>
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	0800e858 	.word	0x0800e858

08002de8 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3338      	adds	r3, #56	@ 0x38
 8002df8:	681c      	ldr	r4, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	b219      	sxth	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	b21d      	sxth	r5, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	b21e      	sxth	r6, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6952      	ldr	r2, [r2, #20]
 8002e16:	b292      	uxth	r2, r2
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4633      	mov	r3, r6
 8002e1e:	462a      	mov	r2, r5
 8002e20:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d118      	bne.n	8002e5c <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3344      	adds	r3, #68	@ 0x44
 8002e32:	681c      	ldr	r4, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	b219      	sxth	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	b21d      	sxth	r5, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	b21e      	sxth	r6, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e50:	b292      	uxth	r2, r2
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4633      	mov	r3, r6
 8002e58:	462a      	mov	r2, r5
 8002e5a:	47a0      	blx	r4
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e64 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  Xi=x;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	619a      	str	r2, [r3, #24]
  Yi=y;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	61da      	str	r2, [r3, #28]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	615a      	str	r2, [r3, #20]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return Xi;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return Yi;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return Alto;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	0fd9      	lsrs	r1, r3, #31
 8002f16:	440b      	add	r3, r1
 8002f18:	105b      	asrs	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
	...

08002f28 <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b08d      	sub	sp, #52	@ 0x34
 8002f2c:	af08      	add	r7, sp, #32
 8002f2e:	6078      	str	r0, [r7, #4]
CPantallaBase(1, "CONF MEMORIA")
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fdf4 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 8002f3c:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002f50:	20a4      	movs	r0, #164	@ 0xa4
 8002f52:	f008 fbd3 	bl	800b6fc <_Znwj>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461c      	mov	r4, r3
 8002f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f5e:	9306      	str	r3, [sp, #24]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9305      	str	r3, [sp, #20]
 8002f64:	2303      	movs	r3, #3
 8002f66:	9304      	str	r3, [sp, #16]
 8002f68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f6c:	9303      	str	r3, [sp, #12]
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ec <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2314      	movs	r3, #20
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2332      	movs	r3, #50	@ 0x32
 8002f7c:	2223      	movs	r2, #35	@ 0x23
 8002f7e:	2105      	movs	r1, #5
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff fbc3 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002f8c:	20a4      	movs	r0, #164	@ 0xa4
 8002f8e:	f008 fbb5 	bl	800b6fc <_Znwj>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461c      	mov	r4, r3
 8002f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f9a:	9306      	str	r3, [sp, #24]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9305      	str	r3, [sp, #20]
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	9304      	str	r3, [sp, #16]
 8002fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fa8:	9303      	str	r3, [sp, #12]
 8002faa:	4b51      	ldr	r3, [pc, #324]	@ (80030f0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2332      	movs	r3, #50	@ 0x32
 8002fb8:	2241      	movs	r2, #65	@ 0x41
 8002fba:	2105      	movs	r1, #5
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff fba5 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff9a 	bl	8002f04 <_ZN14CRectanguloTft11DameCentroXEv>
 8002fd0:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8002fd2:	20a4      	movs	r0, #164	@ 0xa4
 8002fd4:	f008 fb92 	bl	800b6fc <_Znwj>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461c      	mov	r4, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8002fe2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fe6:	9306      	str	r3, [sp, #24]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	9305      	str	r3, [sp, #20]
 8002fec:	2303      	movs	r3, #3
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80030f4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	231e      	movs	r3, #30
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2396      	movs	r3, #150	@ 0x96
 8003004:	2269      	movs	r2, #105	@ 0x69
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff fb80 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003018:	2205      	movs	r2, #5
 800301a:	2105      	movs	r1, #5
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fce1 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8003022:	20a4      	movs	r0, #164	@ 0xa4
 8003024:	f008 fb6a 	bl	800b6fc <_Znwj>
 8003028:	4603      	mov	r3, r0
 800302a:	461c      	mov	r4, r3
 800302c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003030:	9306      	str	r3, [sp, #24]
 8003032:	2300      	movs	r3, #0
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	2303      	movs	r3, #3
 8003038:	9304      	str	r3, [sp, #16]
 800303a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	231e      	movs	r3, #30
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	23c8      	movs	r3, #200	@ 0xc8
 800304e:	2287      	movs	r2, #135	@ 0x87
 8003050:	2105      	movs	r1, #5
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff fb5a 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800305e:	20a4      	movs	r0, #164	@ 0xa4
 8003060:	f008 fb4c 	bl	800b6fc <_Znwj>
 8003064:	4603      	mov	r3, r0
 8003066:	461c      	mov	r4, r3
 8003068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800306c:	9306      	str	r3, [sp, #24]
 800306e:	2301      	movs	r3, #1
 8003070:	9305      	str	r3, [sp, #20]
 8003072:	2303      	movs	r3, #3
 8003074:	9304      	str	r3, [sp, #16]
 8003076:	2300      	movs	r3, #0
 8003078:	9303      	str	r3, [sp, #12]
 800307a:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	231e      	movs	r3, #30
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2382      	movs	r3, #130	@ 0x82
 800308a:	22c8      	movs	r2, #200	@ 0xc8
 800308c:	210a      	movs	r1, #10
 800308e:	4620      	mov	r0, r4
 8003090:	f7ff fb3c 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800309a:	20a4      	movs	r0, #164	@ 0xa4
 800309c:	f008 fb2e 	bl	800b6fc <_Znwj>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461c      	mov	r4, r3
 80030a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030a8:	9306      	str	r3, [sp, #24]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	2303      	movs	r3, #3
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	231e      	movs	r3, #30
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2391      	movs	r3, #145	@ 0x91
 80030c6:	22c8      	movs	r2, #200	@ 0xc8
 80030c8:	21a0      	movs	r1, #160	@ 0xa0
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fb1e 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	0800e434 	.word	0x0800e434
 80030e4:	0800e8b4 	.word	0x0800e8b4
 80030e8:	0800e93c 	.word	0x0800e93c
 80030ec:	0800e444 	.word	0x0800e444
 80030f0:	0800e450 	.word	0x0800e450
 80030f4:	0800e45c 	.word	0x0800e45c
 80030f8:	0800e464 	.word	0x0800e464
 80030fc:	0800e470 	.word	0x0800e470
 8003100:	0800e478 	.word	0x0800e478

08003104 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4a07      	ldr	r2, [pc, #28]	@ (800312c <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fcce 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	0800e8b4 	.word	0x0800e8b4
 8003130:	0800e93c 	.word	0x0800e93c

08003134 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:
	void LeeDatosMemoria();
	int DameDireccionMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 8003134:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003138:	f7ff bfe4 	b.w	8003104 <_ZN26CConfigurarPantallaMemoriaD1Ev>

0800313c <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
}
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffdd 	bl	8003104 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 800314a:	21e0      	movs	r1, #224	@ 0xe0
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f008 fad3 	bl	800b6f8 <_ZdlPvj>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 800315c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003160:	f7ff bfec 	b.w	800313c <_ZN26CConfigurarPantallaMemoriaD0Ev>

08003164 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003172:	4618      	mov	r0, r3
 8003174:	f002 fbe3 	bl	800593e <_ZN19CManejadorControles12GetNivelAireEv>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	CPantallaBase::Show();
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fd40 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f881 	bl	8003290 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3348      	adds	r3, #72	@ 0x48
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
	MuestraInformacion();
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8df 	bl	8003368 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto("Memoria: %d", NumeroMemoria);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80031b6:	461a      	mov	r2, r3
 80031b8:	4913      	ldr	r1, [pc, #76]	@ (8003208 <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 80031ba:	f7ff fae1 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3348      	adds	r3, #72	@ 0x48
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4610      	mov	r0, r2
 80031d2:	4798      	blx	r3
	LabelGuardar->Show();
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3348      	adds	r3, #72	@ 0x48
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4610      	mov	r0, r2
 80031e8:	4798      	blx	r3
	LabelCancelar->Show();
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3348      	adds	r3, #72	@ 0x48
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4610      	mov	r0, r2
 80031fe:	4798      	blx	r3
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	0800e484 	.word	0x0800e484

0800320c <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fb8f 	bl	800593e <_ZN19CManejadorControles12GetNivelAireEv>
 8003220:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	429a      	cmp	r2, r3
 800322e:	dc06      	bgt.n	800323e <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b01      	subs	r3, #1
 800323a:	429a      	cmp	r2, r3
 800323c:	da03      	bge.n	8003246 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
	MuestraInformacion();
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f88e 	bl	8003368 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	VelocidadAireAnterior=-1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	NumeroMemoria=numeroMemoria;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	DireccionMemoria=DameDireccionMemoria();
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f852 	bl	8003324 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af04      	add	r7, sp, #16
 8003296:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
 80032a4:	9302      	str	r3, [sp, #8]
 80032a6:	2304      	movs	r3, #4
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2301      	movs	r3, #1
 80032b2:	21a0      	movs	r1, #160	@ 0xa0
 80032b4:	481a      	ldr	r0, [pc, #104]	@ (8003320 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x90>)
 80032b6:	f005 fc8b 	bl	8008bd0 <HAL_I2C_Mem_Read>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d026      	beq.n	8003318 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
	  {
			Temperatura=datos_r[0];
 80032ca:	89bb      	ldrh	r3, [r7, #12]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			VelocidadAire=datos_r[1];
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

		 	if(Temperatura<0 || Temperatura>500)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db05      	blt.n	80032f4 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x64>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80032ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032f2:	dd03      	ble.n	80032fc <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2264      	movs	r2, #100	@ 0x64
 80032f8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003302:	2b00      	cmp	r3, #0
 8003304:	db04      	blt.n	8003310 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x80>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800330c:	2b64      	cmp	r3, #100	@ 0x64
 800330e:	dd03      	ble.n	8003318 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2232      	movs	r2, #50	@ 0x32
 8003314:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
	  }

}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	2000024c 	.word	0x2000024c

08003324 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>:
int CConfigurarPantallaMemoria::DameDireccionMemoria()
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	int direccion=1;
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003336:	2b03      	cmp	r3, #3
 8003338:	d00c      	beq.n	8003354 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x30>
 800333a:	2b03      	cmp	r3, #3
 800333c:	dc0d      	bgt.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d002      	beq.n	8003348 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x24>
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 8003346:	e008      	b.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=1;
 8003348:	2301      	movs	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
		break;
 800334c:	e005      	b.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=5;
 800334e:	2305      	movs	r3, #5
 8003350:	60fb      	str	r3, [r7, #12]
		break;
 8003352:	e002      	b.n	800335a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=9;
 8003354:	2309      	movs	r3, #9
 8003356:	60fb      	str	r3, [r7, #12]
		break;
 8003358:	bf00      	nop
	}
	return direccion;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
	...

08003368 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800337c:	429a      	cmp	r2, r3
 800337e:	d01a      	beq.n	80033b6 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto("%d", Temperatura);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800338c:	461a      	mov	r2, r3
 800338e:	491d      	ldr	r1, [pc, #116]	@ (8003404 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003390:	f7ff f9f6 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3348      	adds	r3, #72	@ 0x48
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4610      	mov	r0, r2
 80033a8:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d01a      	beq.n	80033fc <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto("Aire: %d", VelocidadAire);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80033d2:	461a      	mov	r2, r3
 80033d4:	490c      	ldr	r1, [pc, #48]	@ (8003408 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 80033d6:	f7ff f9d3 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3348      	adds	r3, #72	@ 0x48
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	0800e490 	.word	0x0800e490
 8003408:	0800e494 	.word	0x0800e494

0800340c <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800341a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800341e:	da06      	bge.n	800342e <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 8003438:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800343c:	f7ff bfe6 	b.w	800340c <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

08003440 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800344e:	2b00      	cmp	r3, #0
 8003450:	dd06      	ble.n	8003460 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800346a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800346e:	f7ff bfe7 	b.w	8003440 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

08003474 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent(int tiempoClick)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af04      	add	r7, sp, #16
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	//hay que guarar la informacion
 	uint16_t datos_w[2];

 	datos_w[0]=Temperatura;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003484:	b29b      	uxth	r3, r3
 8003486:	81bb      	strh	r3, [r7, #12]
 	datos_w[1]=VelocidadAire;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800348e:	b29b      	uxth	r3, r3
 8003490:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_w,4,HAL_MAX_DELAY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003498:	b29a      	uxth	r2, r3
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	2304      	movs	r3, #4
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2301      	movs	r3, #1
 80034ac:	21a0      	movs	r1, #160	@ 0xa0
 80034ae:	4805      	ldr	r0, [pc, #20]	@ (80034c4 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi+0x50>)
 80034b0:	f005 fa94 	bl	80089dc <HAL_I2C_Mem_Write>
	 ManejadorPantallas.MuestraMenuPrincipal();
 80034b4:	4804      	ldr	r0, [pc, #16]	@ (80034c8 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi+0x54>)
 80034b6:	f000 f884 	bl	80035c2 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000024c 	.word	0x2000024c
 80034c8:	200001f8 	.word	0x200001f8

080034cc <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi>:
	virtual void OnBotonUnoClickEvent(int tiempoClick);
 80034cc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80034d0:	f7ff bfd0 	b.w	8003474 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEi>

080034d4 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEi>:
void CConfigurarPantallaMemoria::OnBotonDosClickEvent(int tiempoClick)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80034de:	4803      	ldr	r0, [pc, #12]	@ (80034ec <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEi+0x18>)
 80034e0:	f000 f86f 	bl	80035c2 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200001f8 	.word	0x200001f8

080034f0 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 80034f0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80034f4:	f7ff bfee 	b.w	80034d4 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEi>

080034f8 <_ZN19CManejadorPantallasC1Ev>:
#include "GUI/PantallaManual/CPantallaManual.hpp"
#include <GUI/PantallaMenuPrincipal/CMenuPrincipal.h>
#include <stdio.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>

CManejadorPantallas::CManejadorPantallas()
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <_ZN19CManejadorPantallasC1Ev+0x34>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
{
	// TODO Auto-generated constructor stub
}
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	0800e9ac 	.word	0x0800e9ac

08003530 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <_ZN19CManejadorPantallasD1Ev+0x1c>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	0800e9ac 	.word	0x0800e9ac

08003550 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
}
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffe9 	bl	8003530 <_ZN19CManejadorPantallasD1Ev>
 800355e:	2120      	movs	r1, #32
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f008 f8c9 	bl	800b6f8 <_ZdlPvj>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	605a      	str	r2, [r3, #4]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 800358a:	b590      	push	{r4, r7, lr}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 800359a:	20e8      	movs	r0, #232	@ 0xe8
 800359c:	f008 f8ae 	bl	800b6fc <_Znwj>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461c      	mov	r4, r3
 80035a4:	4620      	mov	r0, r4
 80035a6:	f000 fcf5 	bl	8003f94 <_ZN15CPantallaManualC1Ev>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60dc      	str	r4, [r3, #12]
	AsignaPantallaActual(pantallaManual);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f841 	bl	800363c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}

080035c2 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 80035c2:	b590      	push	{r4, r7, lr}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 80035d2:	20c0      	movs	r0, #192	@ 0xc0
 80035d4:	f008 f892 	bl	800b6fc <_Znwj>
 80035d8:	4603      	mov	r3, r0
 80035da:	461c      	mov	r4, r3
 80035dc:	4620      	mov	r0, r4
 80035de:	f001 f893 	bl	8004708 <_ZN14CMenuPrincipalC1Ev>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611c      	str	r4, [r3, #16]
	AsignaPantallaActual(menuPrincipal);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f825 	bl	800363c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}

080035fa <_ZN19CManejadorPantallas16RefrescaPantallaEv>:

void CManejadorPantallas::RefrescaPantalla()
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
	if(CambioPantalla==true)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7f1b      	ldrb	r3, [r3, #28]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d108      	bne.n	800361c <_ZN19CManejadorPantallas16RefrescaPantallaEv+0x22>
		PantallaActual->Show();
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3348      	adds	r3, #72	@ 0x48
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4610      	mov	r0, r2
 800361a:	4798      	blx	r3
	PantallaActual->Refresca();
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3354      	adds	r3, #84	@ 0x54
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4610      	mov	r0, r2
 800362c:	4798      	blx	r3
	CambioPantalla=false;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	if(PantallaActual!=NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase+0x24>
		PantallaActual->Ocultar();
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3360      	adds	r3, #96	@ 0x60
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4610      	mov	r0, r2
 800365e:	4798      	blx	r3
	PantallaActual=pantalla;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	609a      	str	r2, [r3, #8]
	PantallaActual->SetEstacion(Estacion);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6898      	ldr	r0, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3358      	adds	r3, #88	@ 0x58
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6852      	ldr	r2, [r2, #4]
 8003678:	4611      	mov	r1, r2
 800367a:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6898      	ldr	r0, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	335c      	adds	r3, #92	@ 0x5c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6952      	ldr	r2, [r2, #20]
 800368e:	4611      	mov	r1, r2
 8003690:	4798      	blx	r3
	CambioPantalla=true;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:
void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	615a      	str	r2, [r3, #20]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 80036ba:	b590      	push	{r4, r7, lr}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 80036cc:	20e0      	movs	r0, #224	@ 0xe0
 80036ce:	f008 f815 	bl	800b6fc <_Znwj>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461c      	mov	r4, r3
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff fc26 	bl	8002f28 <_ZN26CConfigurarPantallaMemoriaC1Ev>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619c      	str	r4, [r3, #24]
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	336c      	adds	r3, #108	@ 0x6c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	4610      	mov	r0, r2
 80036f2:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff9e 	bl	800363c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}

08003708 <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	0800e9bc 	.word	0x0800e9bc

08003728 <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	0800e9bc 	.word	0x0800e9bc

08003748 <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
}
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ffe9 	bl	8003728 <_ZN20CManejadorEventoMenuD1Ev>
 8003756:	2104      	movs	r1, #4
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f007 ffcd 	bl	800b6f8 <_ZdlPvj>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]

}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af04      	add	r7, sp, #16
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	9303      	str	r3, [sp, #12]
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	f7ff faef 	bl	8002d84 <_ZN14CRectanguloTftC1Eiiiiiii>
 80037a6:	4a0c      	ldr	r2, [pc, #48]	@ (80037d8 <_ZN5CMenuC1Eiiiiiii+0x5c>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2219      	movs	r2, #25
 80037b0:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c2:	3305      	adds	r3, #5
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	fb92 f2f3 	sdiv	r2, r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	0800e9d0 	.word	0x0800e9d0

080037dc <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <_ZN5CMenuD1Ev+0x20>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff faa7 	bl	8002d40 <_ZN14CRectanguloTftD1Ev>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	0800e9d0 	.word	0x0800e9d0

08003800 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
}
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ffe7 	bl	80037dc <_ZN5CMenuD1Ev>
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f007 ff71 	bl	800b6f8 <_ZdlPvj>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	int y;
	CRectanguloTft::Show();
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fadc 	bl	8002de8 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003834:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003836:	e01c      	b.n	8003872 <_ZN5CMenu4ShowEv+0x52>
	{
		y=tmp->DamePosicionY()+tmp->DameAltura();
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fb3c 	bl	8003eb6 <_ZN9CMenuItem13DamePosicionYEv>
 800383e:	4604      	mov	r4, r0
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fb46 	bl	8003ed2 <_ZN9CMenuItem10DameAlturaEv>
 8003846:	4603      	mov	r3, r0
 8003848:	4423      	add	r3, r4
 800384a:	60bb      	str	r3, [r7, #8]
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8c3 	bl	80039da <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <_ZN5CMenu4ShowEv+0x5a>
		{
			return;
		}
		tmp->Show();
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa8e 	bl	8003d86 <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fb18 	bl	8003ea0 <_ZN9CMenuItem13DameSiguienteEv>
 8003870:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1df      	bne.n	8003838 <_ZN5CMenu4ShowEv+0x18>
 8003878:	e000      	b.n	800387c <_ZN5CMenu4ShowEv+0x5c>
			return;
 800387a:	bf00      	nop
	}
}
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}

08003882 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 80038b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b4:	b091      	sub	sp, #68	@ 0x44
 80038b6:	af08      	add	r7, sp, #32
 80038b8:	6178      	str	r0, [r7, #20]
 80038ba:	6139      	str	r1, [r7, #16]
 80038bc:	60fa      	str	r2, [r7, #12]
 80038be:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 80038c0:	20a4      	movs	r0, #164	@ 0xa4
 80038c2:	f007 ff1b 	bl	800b6fc <_Znwj>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461c      	mov	r4, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	699d      	ldr	r5, [r3, #24]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	69de      	ldr	r6, [r3, #28]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e0:	6979      	ldr	r1, [r7, #20]
 80038e2:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80038e4:	6978      	ldr	r0, [r7, #20]
 80038e6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80038e8:	9006      	str	r0, [sp, #24]
 80038ea:	2000      	movs	r0, #0
 80038ec:	9005      	str	r0, [sp, #20]
 80038ee:	2003      	movs	r0, #3
 80038f0:	9004      	str	r0, [sp, #16]
 80038f2:	9103      	str	r1, [sp, #12]
 80038f4:	6939      	ldr	r1, [r7, #16]
 80038f6:	9102      	str	r1, [sp, #8]
 80038f8:	9201      	str	r2, [sp, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4632      	mov	r2, r6
 8003900:	4629      	mov	r1, r5
 8003902:	4620      	mov	r0, r4
 8003904:	f7fe ff02 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003908:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 800390a:	2028      	movs	r0, #40	@ 0x28
 800390c:	f007 fef6 	bl	800b6fc <_Znwj>
 8003910:	4603      	mov	r3, r0
 8003912:	461c      	mov	r4, r3
 8003914:	7afb      	ldrb	r3, [r7, #11]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	4620      	mov	r0, r4
 800391c:	f000 f9d8 	bl	8003cd0 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8003920:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4603      	mov	r3, r0
 8003936:	69b8      	ldr	r0, [r7, #24]
 8003938:	f000 fa5c 	bl	8003df4 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 800393c:	69bb      	ldr	r3, [r7, #24]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003946 <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff ffa9 	bl	80038b2 <_ZN5CMenu8CreaItemEPcib>
 8003960:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	2b00      	cmp	r3, #0
 8003968:	d111      	bne.n	800398e <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fa54 	bl	8003e24 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 800398c:	e00e      	b.n	80039ac <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f9dd 	bl	8003d54 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f806 	bl	80039b2 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f911 	bl	8003bce <_ZN5CMenu14CalculaPaginasEv>
}
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:

void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	3305      	adds	r3, #5
 80039c8:	4619      	mov	r1, r3
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	f000 fa39 	bl	8003e42 <_ZN9CMenuItem16CalculaPosicionYEi>
 80039d0:	e000      	b.n	80039d4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 80039d2:	bf00      	nop
}
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 80039da:	b590      	push	{r4, r7, lr}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	f000 fa66 	bl	8003eb6 <_ZN9CMenuItem13DamePosicionYEv>
 80039ea:	4604      	mov	r4, r0
 80039ec:	6838      	ldr	r0, [r7, #0]
 80039ee:	f000 fa70 	bl	8003ed2 <_ZN9CMenuItem10DameAlturaEv>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4423      	add	r3, r4
 80039f6:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	4413      	add	r3, r2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	dd01      	ble.n	8003a0c <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 8003a0c:	2301      	movs	r3, #1
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}

08003a16 <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03f      	beq.n	8003aa6 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 8003a2c:	e037      	b.n	8003a9e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa5d 	bl	8003eee <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02d      	beq.n	8003a96 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fa30 	bl	8003ea0 <_ZN9CMenuItem13DameSiguienteEv>
 8003a40:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d030      	beq.n	8003aaa <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f9ea 	bl	8003e24 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8003a50:	2101      	movs	r1, #1
 8003a52:	68b8      	ldr	r0, [r7, #8]
 8003a54:	f000 f9e6 	bl	8003e24 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ffba 	bl	80039da <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d006      	beq.n	8003a7a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f98a 	bl	8003d86 <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f000 f987 	bl	8003d86 <_ZN9CMenuItem4ShowEv>
				return;
 8003a78:	e018      	b.n	8003aac <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff98 	bl	80039b2 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3348      	adds	r3, #72	@ 0x48
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
				return;
 8003a94:	e00a      	b.n	8003aac <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fa02 	bl	8003ea0 <_ZN9CMenuItem13DameSiguienteEv>
 8003a9c:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1c4      	bne.n	8003a2e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 8003aa4:	e002      	b.n	8003aac <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 8003aaa:	bf00      	nop
	}

}
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d05c      	beq.n	8003b7c <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 8003ac8:	e054      	b.n	8003b74 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f000 fa0f 	bl	8003eee <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d04a      	beq.n	8003b6c <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f000 fa15 	bl	8003f06 <_ZN9CMenuItem12DameAnteriorEv>
 8003adc:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d04d      	beq.n	8003b80 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f000 f99c 	bl	8003e24 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 8003aec:	2101      	movs	r1, #1
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f998 	bl	8003e24 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f8ba 	bl	8003c76 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f000 f937 	bl	8003d86 <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f934 	bl	8003d86 <_ZN9CMenuItem4ShowEv>
				return;
 8003b1e:	e030      	b.n	8003b82 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b24:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 8003b26:	e00b      	b.n	8003b40 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f000 f9ec 	bl	8003f06 <_ZN9CMenuItem12DameAnteriorEv>
 8003b2e:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dced      	bgt.n	8003b28 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8003b4c:	e000      	b.n	8003b50 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8003b4e:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8003b50:	6979      	ldr	r1, [r7, #20]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ff2d 	bl	80039b2 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3348      	adds	r3, #72	@ 0x48
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
				return;
 8003b6a:	e00a      	b.n	8003b82 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f000 f9ca 	bl	8003f06 <_ZN9CMenuItem12DameAnteriorEv>
 8003b72:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1a7      	bne.n	8003aca <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8003b7a:	e002      	b.n	8003b82 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 8003b7c:	bf00      	nop
 8003b7e:	e000      	b.n	8003b82 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8003b80:	bf00      	nop
	}

}
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 8003b88:	b5b0      	push	{r4, r5, r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d014      	beq.n	8003bc2 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	681c      	ldr	r4, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f9b2 	bl	8003f1c <_ZN9CMenuItem17DameIdentificadorEv>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	47a0      	blx	r4
 8003bc0:	e002      	b.n	8003bc8 <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003bc6:	bf00      	nop
}
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdb0      	pop	{r4, r5, r7, pc}

08003bce <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f833 	bl	8003c42 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3314      	adds	r3, #20
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003bfa:	e01a      	b.n	8003c32 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c06:	fb01 f202 	mul.w	r2, r1, r2
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3314      	adds	r3, #20
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	3301      	adds	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f938 	bl	8003ea0 <_ZN9CMenuItem13DameSiguienteEv>
 8003c30:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e1      	bne.n	8003bfc <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e009      	b.n	8003c64 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3314      	adds	r3, #20
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3301      	adds	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	ddf2      	ble.n	8003c50 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e00d      	b.n	8003ca2 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d101      	bne.n	8003c9c <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e006      	b.n	8003caa <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	ddee      	ble.n	8003c86 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8003ca8:	2300      	movs	r3, #0

}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
	...

08003cd0 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	70fb      	strb	r3, [r7, #3]
 8003cde:	4a0c      	ldr	r2, [pc, #48]	@ (8003d10 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x40>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	0800ea2c 	.word	0x0800ea2c

08003d14 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <_ZN9CMenuItemD1Ev+0x1c>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	0800ea2c 	.word	0x0800ea2c

08003d34 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
}
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ffe9 	bl	8003d14 <_ZN9CMenuItemD1Ev>
 8003d42:	2128      	movs	r1, #40	@ 0x28
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f007 fcd7 	bl	800b6f8 <_ZdlPvj>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	60da      	str	r2, [r3, #12]
		return;
 8003d72:	e005      	b.n	8003d80 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	6839      	ldr	r1, [r7, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ffea 	bl	8003d54 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f7fe fe31 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe fe74 	bl	8002aa0 <_ZN12CEtiquetaTft12SetBackColorEi>
 8003db8:	e00f      	b.n	8003dda <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f7fe fe20 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7fe fe63 	bl	8002aa0 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3348      	adds	r3, #72	@ 0x48
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4610      	mov	r0, r2
 8003dea:	4798      	blx	r3
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff f836 	bl	8002ec2 <_ZN14CRectanguloTft13DamePosicionXEv>
 8003e56:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	334c      	adds	r3, #76	@ 0x4c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4798      	blx	r3
	if(Siguiente==NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d010      	beq.n	8003e98 <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff f837 	bl	8002eee <_ZN14CRectanguloTft8DameAltoEv>
 8003e80:	4602      	mov	r2, r0
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	3305      	adds	r3, #5
 8003e88:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ffd6 	bl	8003e42 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003e96:	e000      	b.n	8003e9a <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8003e98:	bf00      	nop
}
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff f808 	bl	8002ed8 <_ZN14CRectanguloTft13DamePosicionYEv>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f805 	bl	8002eee <_ZN14CRectanguloTft8DameAltoEv>
 8003ee4:	4603      	mov	r3, r0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
	return Anterior;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	return Identificador;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
	...

08003f34 <_ZN15CPantallaManualD1Ev>:
#include "Uart/Uart.h"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <_ZN15CPantallaManualD1Ev+0x28>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	4a07      	ldr	r2, [pc, #28]	@ (8003f60 <_ZN15CPantallaManualD1Ev+0x2c>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fdb6 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	0800ea3c 	.word	0x0800ea3c
 8003f60:	0800eacc 	.word	0x0800eacc

08003f64 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
//	CEtiquetaTft *LabelPID;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8003f64:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003f68:	f7ff bfe4 	b.w	8003f34 <_ZN15CPantallaManualD1Ev>

08003f6c <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
}
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ffdd 	bl	8003f34 <_ZN15CPantallaManualD1Ev>
 8003f7a:	21e8      	movs	r1, #232	@ 0xe8
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f007 fbbb 	bl	800b6f8 <_ZdlPvj>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <_ZThn48_N15CPantallaManualD0Ev>:
 8003f8c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003f90:	f7ff bfec 	b.w	8003f6c <_ZN15CPantallaManualD0Ev>

08003f94 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b08d      	sub	sp, #52	@ 0x34
 8003f98:	af08      	add	r7, sp, #32
 8003f9a:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: Manual")
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a68      	ldr	r2, [pc, #416]	@ (8004140 <_ZN15CPantallaManualC1Ev+0x1ac>)
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fdbe 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 8003fa8:	4a66      	ldr	r2, [pc, #408]	@ (8004144 <_ZN15CPantallaManualC1Ev+0x1b0>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	4a66      	ldr	r2, [pc, #408]	@ (8004148 <_ZN15CPantallaManualC1Ev+0x1b4>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004014:	20a4      	movs	r0, #164	@ 0xa4
 8004016:	f007 fb71 	bl	800b6fc <_Znwj>
 800401a:	4603      	mov	r3, r0
 800401c:	461c      	mov	r4, r3
 800401e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004022:	9306      	str	r3, [sp, #24]
 8004024:	2300      	movs	r3, #0
 8004026:	9305      	str	r3, [sp, #20]
 8004028:	2303      	movs	r3, #3
 800402a:	9304      	str	r3, [sp, #16]
 800402c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	4b46      	ldr	r3, [pc, #280]	@ (800414c <_ZN15CPantallaManualC1Ev+0x1b8>)
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	2300      	movs	r3, #0
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	2314      	movs	r3, #20
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2332      	movs	r3, #50	@ 0x32
 8004040:	2223      	movs	r2, #35	@ 0x23
 8004042:	2105      	movs	r1, #5
 8004044:	4620      	mov	r0, r4
 8004046:	f7fe fb61 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	int centroX = DameCentroX();
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe ff56 	bl	8002f04 <_ZN14CRectanguloTft11DameCentroXEv>
 8004058:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 800405a:	20a4      	movs	r0, #164	@ 0xa4
 800405c:	f007 fb4e 	bl	800b6fc <_Znwj>
 8004060:	4603      	mov	r3, r0
 8004062:	461c      	mov	r4, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 800406a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800406e:	9306      	str	r3, [sp, #24]
 8004070:	2301      	movs	r3, #1
 8004072:	9305      	str	r3, [sp, #20]
 8004074:	2303      	movs	r3, #3
 8004076:	9304      	str	r3, [sp, #16]
 8004078:	2300      	movs	r3, #0
 800407a:	9303      	str	r3, [sp, #12]
 800407c:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <_ZN15CPantallaManualC1Ev+0x1bc>)
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	231e      	movs	r3, #30
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2396      	movs	r3, #150	@ 0x96
 800408c:	2241      	movs	r2, #65	@ 0x41
 800408e:	4620      	mov	r0, r4
 8004090:	f7fe fb3c 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelTemperaturas->SetSeparacion(5, 5);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040a0:	2205      	movs	r2, #5
 80040a2:	2105      	movs	r1, #5
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fc9d 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 80040aa:	20a4      	movs	r0, #164	@ 0xa4
 80040ac:	f007 fb26 	bl	800b6fc <_Znwj>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461c      	mov	r4, r3
 80040b4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80040b8:	9306      	str	r3, [sp, #24]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	2303      	movs	r3, #3
 80040c0:	9304      	str	r3, [sp, #16]
 80040c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <_ZN15CPantallaManualC1Ev+0x1c0>)
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	231e      	movs	r3, #30
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	23c8      	movs	r3, #200	@ 0xc8
 80040d6:	2269      	movs	r2, #105	@ 0x69
 80040d8:	2105      	movs	r1, #5
 80040da:	4620      	mov	r0, r4
 80040dc:	f7fe fb16 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 80040e6:	20a4      	movs	r0, #164	@ 0xa4
 80040e8:	f007 fb08 	bl	800b6fc <_Znwj>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461c      	mov	r4, r3
 80040f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80040f4:	9306      	str	r3, [sp, #24]
 80040f6:	2300      	movs	r3, #0
 80040f8:	9305      	str	r3, [sp, #20]
 80040fa:	2303      	movs	r3, #3
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004102:	9303      	str	r3, [sp, #12]
 8004104:	4b14      	ldr	r3, [pc, #80]	@ (8004158 <_ZN15CPantallaManualC1Ev+0x1c4>)
 8004106:	9302      	str	r3, [sp, #8]
 8004108:	2300      	movs	r3, #0
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	2323      	movs	r3, #35	@ 0x23
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004114:	2291      	movs	r2, #145	@ 0x91
 8004116:	2105      	movs	r1, #5
 8004118:	4620      	mov	r0, r4
 800411a:	f7fe faf7 	bl	800270c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800412a:	2205      	movs	r2, #5
 800412c:	210f      	movs	r1, #15
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fc58 	bl	80029e4 <_ZN12CEtiquetaTft13SetSeparacionEii>

//	LabelPID=new CEtiquetaTft( 5, 180, 200, 30, COLOR::BLACK, "PID: 00",COLOR::WHITE, 3, 0, COLOR::RED);
}
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}
 800413e:	bf00      	nop
 8004140:	0800e4a0 	.word	0x0800e4a0
 8004144:	0800ea3c 	.word	0x0800ea3c
 8004148:	0800eacc 	.word	0x0800eacc
 800414c:	0800e4b0 	.word	0x0800e4b0
 8004150:	0800e4bc 	.word	0x0800e4bc
 8004154:	0800e4c4 	.word	0x0800e4c4
 8004158:	0800e4d0 	.word	0x0800e4d0

0800415c <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800417a:	429a      	cmp	r2, r3
 800417c:	d10e      	bne.n	800419c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3364      	adds	r3, #100	@ 0x64
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4610      	mov	r0, r2
 800418a:	4798      	blx	r3
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d143      	bne.n	8004224 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	if (EstadoBoquilla == 1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d115      	bne.n	80041de <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041b8:	211f      	movs	r1, #31
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fe74 	bl	8002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fc1e 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041d4:	4915      	ldr	r1, [pc, #84]	@ (800422c <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fad2 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
 80041dc:	e016      	b.n	800420c <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041e4:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fe5d 	bl	8002ea8 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fc06 	bl	8002a0a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004204:	490a      	ldr	r1, [pc, #40]	@ (8004230 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe faba 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3348      	adds	r3, #72	@ 0x48
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4610      	mov	r0, r2
 8004220:	4798      	blx	r3
 8004222:	e000      	b.n	8004226 <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8004224:	bf00      	nop
}
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	0800e4e0 	.word	0x0800e4e0
 8004230:	0800e4d0 	.word	0x0800e4d0

08004234 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3310      	adds	r3, #16
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4610      	mov	r0, r2
 8004250:	4798      	blx	r3
 8004252:	4602      	mov	r2, r0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaReal();
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4610      	mov	r0, r2
 800426e:	4798      	blx	r3
 8004270:	4603      	mov	r3, r0
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fedc 	bl	8001030 <__aeabi_f2iz>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire = ManejadorControles->GetNivelAire();
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004286:	4618      	mov	r0, r3
 8004288:	f001 fb59 	bl	800593e <_ZN19CManejadorControles12GetNivelAireEv>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	EstadoBoquilla=Estacion->GetEstado();
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	331c      	adds	r3, #28
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4610      	mov	r0, r2
 80042a8:	4798      	blx	r3
 80042aa:	4602      	mov	r2, r0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11e      	bne.n	800430c <_ZN15CPantallaManual19MuestraTemperaturasEb+0x50>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura && EsVisible()==true )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042da:	429a      	cmp	r2, r3
 80042dc:	d113      	bne.n	8004306 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d10b      	bne.n	8004306 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3364      	adds	r3, #100	@ 0x64
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4c>
 8004306:	2300      	movs	r3, #0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d123      	bne.n	8004354 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x98>
			return;
	}
	TemperaturaAnterior=Temperatura;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	SetTemperaturaAnterior=SetTemperatura;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004336:	4909      	ldr	r1, [pc, #36]	@ (800435c <_ZN15CPantallaManual19MuestraTemperaturasEb+0xa0>)
 8004338:	f7fe fa22 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3348      	adds	r3, #72	@ 0x48
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4610      	mov	r0, r2
 8004350:	4798      	blx	r3
 8004352:	e000      	b.n	8004356 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x9a>
			return;
 8004354:	bf00      	nop
}
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	0800e4f0 	.word	0x0800e4f0

08004360 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Estacion->SetNivelAire(NivelAire);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3314      	adds	r3, #20
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 800438a:	4611      	mov	r1, r2
 800438c:	4798      	blx	r3
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
private:
	void MuestraEstado(bool forrzar);
	void MuestraNivelAire(bool forrzar);
	void LeeDatosEstacion();
	void MuestraTemperaturas(bool forrzar);
	void OnNivelAireEvent(int aire);
 8004396:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800439a:	f7ff bfe1 	b.w	8004360 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

080043a0 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d116      	bne.n	80043e0 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80043be:	429a      	cmp	r2, r3
 80043c0:	d10b      	bne.n	80043da <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3364      	adds	r3, #100	@ 0x64
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d129      	bne.n	8004434 <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Estacion->SetNivelAire(NivelAire);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8004404:	4611      	mov	r1, r2
 8004406:	4798      	blx	r3
	LabelAire->SetTexto("Aire: %d", NivelAire);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004414:	461a      	mov	r2, r3
 8004416:	4909      	ldr	r1, [pc, #36]	@ (800443c <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8004418:	f7fe f9b2 	bl	8002780 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3348      	adds	r3, #72	@ 0x48
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4610      	mov	r0, r2
 8004430:	4798      	blx	r3
 8004432:	e000      	b.n	8004436 <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8004434:	bf00      	nop

}
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	0800e4f8 	.word	0x0800e4f8

08004440 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 800445c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004460:	f7ff bfee 	b.w	8004440 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08004464 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3320      	adds	r3, #32
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4610      	mov	r0, r2
 8004480:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:
	void MuestraInformacion(bool forzar);

	//eventos del Encoder
	virtual void OnPerillaIncremento();
 8004492:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004496:	f7ff bfe5 	b.w	8004464 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

0800449a <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3324      	adds	r3, #36	@ 0x24
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4610      	mov	r0, r2
 80044b6:	4798      	blx	r3
	TemperaturaGuardada=false;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80044c8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80044cc:	f7ff bfe5 	b.w	800449a <_ZN15CPantallaManual19OnPerillaDecrementoEv>

080044d0 <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <_ZN15CPantallaManual8RefrescaEv+0x18>
		GuardaTemperatura();
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f88e 	bl	8004604 <_ZN15CPantallaManual17GuardaTemperaturaEv>
	MuestraInformacion(false);
 80044e8:	2100      	movs	r1, #0
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f866 	bl	80045bc <_ZN15CPantallaManual18MuestraInformacionEb>
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN15CPantallaManual20OnBotonUnoClickEventEi>:
 void CPantallaManual::OnBotonUnoClickEvent(int tiempoClick)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
	int pid=Estacion->GetPID();
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3344      	adds	r3, #68	@ 0x44
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4610      	mov	r0, r2
 8004516:	4798      	blx	r3
 8004518:	60f8      	str	r0, [r7, #12]
	pid++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3301      	adds	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
	Estacion->SetPID(pid);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3348      	adds	r3, #72	@ 0x48
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	4610      	mov	r0, r2
 8004536:	4798      	blx	r3
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);

	virtual void OnBotonUnoClickEvent(int tiempoClick);
 8004540:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004544:	f7ff bfd8 	b.w	80044f8 <_ZN15CPantallaManual20OnBotonUnoClickEventEi>

08004548 <_ZN15CPantallaManual20OnBotonDosClickEventEi>:
 void CPantallaManual::OnBotonDosClickEvent(int tiempoClick)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
		int pid=Estacion->GetPID();
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3344      	adds	r3, #68	@ 0x44
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
 8004568:	60f8      	str	r0, [r7, #12]
		pid--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
		Estacion->SetPID(pid);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3348      	adds	r3, #72	@ 0x48
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	4610      	mov	r0, r2
 8004586:	4798      	blx	r3

}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 8004590:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004594:	f7ff bfd8 	b.w	8004548 <_ZN15CPantallaManual20OnBotonDosClickEventEi>

08004598 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>:
 void CPantallaManual::OnBotonPerillaClickEvent(int tiempoClick)
 {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80045a2:	4803      	ldr	r0, [pc, #12]	@ (80045b0 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi+0x18>)
 80045a4:	f7ff f80d 	bl	80035c2 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200001f8 	.word	0x200001f8

080045b4 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 80045b4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80045b8:	f7ff bfee 	b.w	8004598 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>

080045bc <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fe33 	bl	8004234 <_ZN15CPantallaManual16LeeDatosEstacionEv>
		MuestraTemperaturas(forzar);
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fe72 	bl	80042bc <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fdbd 	bl	800415c <_ZN15CPantallaManual13MuestraEstadoEb>
		MuestraNivelAire(forzar);
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff feda 	bl	80043a0 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3368      	adds	r3, #104	@ 0x68
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2101      	movs	r1, #1
 80045f8:	4610      	mov	r0, r2
 80045fa:	4798      	blx	r3

 }
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	@ 0x28
 8004608:	af04      	add	r7, sp, #16
 800460a:	6078      	str	r0, [r7, #4]
 	uint8_t temperatura=Estacion->GetTemperatura();
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3310      	adds	r3, #16
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4610      	mov	r0, r2
 8004620:	4798      	blx	r3
 8004622:	4603      	mov	r3, r0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	74fb      	strb	r3, [r7, #19]
 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 8004628:	f003 fa66 	bl	8007af8 <HAL_GetTick>
 800462c:	4603      	mov	r3, r0
 800462e:	617b      	str	r3, [r7, #20]
 	if(t>tiempoescritura)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	dd17      	ble.n	800466c <_ZN15CPantallaManual17GuardaTemperaturaEv+0x68>
 	{

 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY);
 800463c:	f04f 33ff 	mov.w	r3, #4294967295
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	2301      	movs	r3, #1
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	f107 0313 	add.w	r3, r7, #19
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2301      	movs	r3, #1
 800464e:	2200      	movs	r2, #0
 8004650:	21a0      	movs	r1, #160	@ 0xa0
 8004652:	4808      	ldr	r0, [pc, #32]	@ (8004674 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x70>)
 8004654:	f004 f9c2 	bl	80089dc <HAL_I2C_Mem_Write>
 		TemperaturaGuardada=true;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 		tiempoescritura=t+1000;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 	}

 }
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	2000024c 	.word	0x2000024c

08004678 <_ZN15CPantallaManual4ShowEv>:
 void CPantallaManual::Show()
 {
 8004678:	b580      	push	{r7, lr}
 800467a:	b094      	sub	sp, #80	@ 0x50
 800467c:	af04      	add	r7, sp, #16
 800467e:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fac0 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3348      	adds	r3, #72	@ 0x48
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4610      	mov	r0, r2
 800469c:	4798      	blx	r3

 	uint8_t temperatura;
 	uint8_t datos_w[10];
 	uint8_t datos_r[10];
 	char buf_tx[30];
 	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY)==HAL_OK)
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	9302      	str	r3, [sp, #8]
 80046a4:	2301      	movs	r3, #1
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2301      	movs	r3, #1
 80046b0:	2200      	movs	r2, #0
 80046b2:	21a0      	movs	r1, #160	@ 0xa0
 80046b4:	4813      	ldr	r0, [pc, #76]	@ (8004704 <_ZN15CPantallaManual4ShowEv+0x8c>)
 80046b6:	f004 fa8b 	bl	8008bd0 <HAL_I2C_Mem_Read>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <_ZN15CPantallaManual4ShowEv+0x74>
 	  {
 		 	if(temperatura>=0 && temperatura<=500)
 		 	{
 		 		Estacion->SetTemperatura(temperatura);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
 		 	}
 		 	TemperaturaGuardada=true;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 	  }
 	LeeDatosEstacion();
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff fda1 	bl	8004234 <_ZN15CPantallaManual16LeeDatosEstacionEv>
 	MuestraInformacion(true);
 80046f2:	2101      	movs	r1, #1
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff61 	bl	80045bc <_ZN15CPantallaManual18MuestraInformacionEb>
 }
 80046fa:	bf00      	nop
 80046fc:	3740      	adds	r7, #64	@ 0x40
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2000024c 	.word	0x2000024c

08004708 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b087      	sub	sp, #28
 800470c:	af04      	add	r7, sp, #16
 800470e:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, " Menu Principal")
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <_ZN14CMenuPrincipalC1Ev+0xd8>)
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fa04 	bl	8002b24 <_ZN13CPantallaBaseC1EiPc>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	33ac      	adds	r3, #172	@ 0xac
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fff1 	bl	8003708 <_ZN20CManejadorEventoMenuC1Ev>
 8004726:	4a2f      	ldr	r2, [pc, #188]	@ (80047e4 <_ZN14CMenuPrincipalC1Ev+0xdc>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <_ZN14CMenuPrincipalC1Ev+0xe0>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	631a      	str	r2, [r3, #48]	@ 0x30
 8004732:	4a2e      	ldr	r2, [pc, #184]	@ (80047ec <_ZN14CMenuPrincipalC1Ev+0xe4>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 800473a:	2080      	movs	r0, #128	@ 0x80
 800473c:	f006 ffde 	bl	800b6fc <_Znwj>
 8004740:	4603      	mov	r3, r0
 8004742:	461c      	mov	r4, r3
 8004744:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004748:	9303      	str	r3, [sp, #12]
 800474a:	2301      	movs	r3, #1
 800474c:	9302      	str	r3, [sp, #8]
 800474e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	23d2      	movs	r3, #210	@ 0xd2
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800475c:	221e      	movs	r2, #30
 800475e:	2104      	movs	r1, #4
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff f80b 	bl	800377c <_ZN5CMenuC1Eiiiiiii>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	33ac      	adds	r3, #172	@ 0xac
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7ff fa9b 	bl	8003cb4 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004784:	2300      	movs	r3, #0
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800478c:	f247 726f 	movw	r2, #30575	@ 0x776f
 8004790:	2100      	movs	r1, #0
 8004792:	f7ff f876 	bl	8003882 <_ZN5CMenu18AsignaColoresItemsEiiii>

	Menu->AgregaItem("Conf Memoria 1", MENU_MEMORIA_1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800479c:	2300      	movs	r3, #0
 800479e:	2201      	movs	r2, #1
 80047a0:	4913      	ldr	r1, [pc, #76]	@ (80047f0 <_ZN14CMenuPrincipalC1Ev+0xe8>)
 80047a2:	f7ff f8d0 	bl	8003946 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Conf Memoria 2", MENU_MEMORIA_2);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80047ac:	2300      	movs	r3, #0
 80047ae:	2202      	movs	r2, #2
 80047b0:	4910      	ldr	r1, [pc, #64]	@ (80047f4 <_ZN14CMenuPrincipalC1Ev+0xec>)
 80047b2:	f7ff f8c8 	bl	8003946 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Conf Memoria 3", MENU_MEMORIA_3);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80047bc:	2300      	movs	r3, #0
 80047be:	2203      	movs	r2, #3
 80047c0:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <_ZN14CMenuPrincipalC1Ev+0xf0>)
 80047c2:	f7ff f8c0 	bl	8003946 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Salir", MENU_SALIR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80047cc:	2300      	movs	r3, #0
 80047ce:	2200      	movs	r2, #0
 80047d0:	490a      	ldr	r1, [pc, #40]	@ (80047fc <_ZN14CMenuPrincipalC1Ev+0xf4>)
 80047d2:	f7ff f8b8 	bl	8003946 <_ZN5CMenu10AgregaItemEPcib>
}
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd90      	pop	{r4, r7, pc}
 80047e0:	0800e504 	.word	0x0800e504
 80047e4:	0800eb3c 	.word	0x0800eb3c
 80047e8:	0800ebc4 	.word	0x0800ebc4
 80047ec:	0800ec34 	.word	0x0800ec34
 80047f0:	0800e514 	.word	0x0800e514
 80047f4:	0800e524 	.word	0x0800e524
 80047f8:	0800e534 	.word	0x0800e534
 80047fc:	0800e544 	.word	0x0800e544

08004800 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	4a0b      	ldr	r2, [pc, #44]	@ (8004838 <_ZN14CMenuPrincipalD1Ev+0x38>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	4a0b      	ldr	r2, [pc, #44]	@ (800483c <_ZN14CMenuPrincipalD1Ev+0x3c>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30
 8004814:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <_ZN14CMenuPrincipalD1Ev+0x40>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	33ac      	adds	r3, #172	@ 0xac
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe ff81 	bl	8003728 <_ZN20CManejadorEventoMenuD1Ev>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe f947 	bl	8002abc <_ZN13CPantallaBaseD1Ev>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	0800eb3c 	.word	0x0800eb3c
 800483c:	0800ebc4 	.word	0x0800ebc4
 8004840:	0800ec34 	.word	0x0800ec34

08004844 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 8004844:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004848:	f7ff bfda 	b.w	8004800 <_ZN14CMenuPrincipalD1Ev>

0800484c <_ZThn172_N14CMenuPrincipalD1Ev>:
 800484c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8004850:	f7ff bfd6 	b.w	8004800 <_ZN14CMenuPrincipalD1Ev>

08004854 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
}
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ffcf 	bl	8004800 <_ZN14CMenuPrincipalD1Ev>
 8004862:	21c0      	movs	r1, #192	@ 0xc0
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f006 ff47 	bl	800b6f8 <_ZdlPvj>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZThn172_N14CMenuPrincipalD0Ev>:
 8004874:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8004878:	f7ff bfec 	b.w	8004854 <_ZN14CMenuPrincipalD0Ev>

0800487c <_ZThn48_N14CMenuPrincipalD0Ev>:
 800487c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004880:	f7ff bfe8 	b.w	8004854 <_ZN14CMenuPrincipalD0Ev>

08004884 <_ZN14CMenuPrincipal4ShowEv>:

void CMenuPrincipal::Show()
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe f9ba 	bl	8002c08 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3348      	adds	r3, #72	@ 0x48
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4610      	mov	r0, r2
 80048a8:	4798      	blx	r3
	SetVisible(true);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3368      	adds	r3, #104	@ 0x68
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZN14CMenuPrincipal8RefrescaEv>:
void CMenuPrincipal::Refresca()
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3364      	adds	r3, #100	@ 0x64
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4610      	mov	r0, r2
 80048d6:	4798      	blx	r3
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <_ZN14CMenuPrincipal8RefrescaEv+0x32>
		Show();
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3348      	adds	r3, #72	@ 0x48
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi>:
void CMenuPrincipal::OnBotonCuatroClickEvent(int tiempoClick)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaManual();
 8004906:	4803      	ldr	r0, [pc, #12]	@ (8004914 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi+0x18>)
 8004908:	f7fe fe3f 	bl	800358a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	200001f8 	.word	0x200001f8

08004918 <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEi>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonCuatroClickEvent(int tiempoClick);
 8004918:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800491c:	f7ff bfee 	b.w	80048fc <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi>

08004920 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>:
void CMenuPrincipal::OnPerillaIncremento()
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff f871 	bl	8003a16 <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <_ZThn48_N14CMenuPrincipal19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 800493c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004940:	f7ff bfee 	b.w	8004920 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>

08004944 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>:
void CMenuPrincipal::OnPerillaDecremento()
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f8ad 	bl	8003ab2 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_ZThn48_N14CMenuPrincipal19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004960:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004964:	f7ff bfee 	b.w	8004944 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>

08004968 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEi>:
void CMenuPrincipal::OnBotonPerillaClickEvent(int tiempoClick)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
	Menu->OnClickSeleccionado();
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff f905 	bl	8003b88 <_ZN5CMenu19OnClickSeleccionadoEv>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <_ZThn48_N14CMenuPrincipal24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8004986:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800498a:	f7ff bfed 	b.w	8004968 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEi>
	...

08004990 <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	switch(identificador)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <_ZN14CMenuPrincipal11OnMenuEventEi+0x20>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	db0d      	blt.n	80049c2 <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d809      	bhi.n	80049c2 <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 80049ae:	e003      	b.n	80049b8 <_ZN14CMenuPrincipal11OnMenuEventEi+0x28>
	{
	case MENU_SALIR:
		ManejadorPantallas.MuestraPantallaManual();
 80049b0:	4806      	ldr	r0, [pc, #24]	@ (80049cc <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 80049b2:	f7fe fdea 	bl	800358a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
		break;
 80049b6:	e004      	b.n	80049c2 <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
	case MENU_MEMORIA_1:
	case MENU_MEMORIA_2:
	case MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	4804      	ldr	r0, [pc, #16]	@ (80049cc <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 80049bc:	f7fe fe7d 	bl	80036ba <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 80049c0:	bf00      	nop
	}

}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200001f8 	.word	0x200001f8

080049d0 <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 80049d0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80049d4:	f7ff bfdc 	b.w	8004990 <_ZN14CMenuPrincipal11OnMenuEventEi>

080049d8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	80fb      	strh	r3, [r7, #6]
 80049ea:	4603      	mov	r3, r0
 80049ec:	80bb      	strh	r3, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	807b      	strh	r3, [r7, #2]
 80049f2:	4613      	mov	r3, r2
 80049f4:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fc f8f2 	bl	8000bfc <__aeabi_i2f>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7fc fadd 	bl	8000fe0 <__aeabi_fcmplt>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8004a36:	883a      	ldrh	r2, [r7, #0]
 8004a38:	88bb      	ldrh	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fc f8dd 	bl	8000bfc <__aeabi_i2f>
 8004a42:	4603      	mov	r3, r0
 8004a44:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7fc fac8 	bl	8000fe0 <__aeabi_fcmplt>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8004a60:	887a      	ldrh	r2, [r7, #2]
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	82fb      	strh	r3, [r7, #22]
 8004a68:	e003      	b.n	8004a72 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	887b      	ldrh	r3, [r7, #2]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8004a72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004a74:	8afa      	ldrh	r2, [r7, #22]
 8004a76:	88b9      	ldrh	r1, [r7, #4]
 8004a78:	88f8      	ldrh	r0, [r7, #6]
 8004a7a:	f000 fd73 	bl	8005564 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8004a7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004a80:	8afa      	ldrh	r2, [r7, #22]
 8004a82:	8839      	ldrh	r1, [r7, #0]
 8004a84:	88f8      	ldrh	r0, [r7, #6]
 8004a86:	f000 fd6d 	bl	8005564 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004a8a:	7cbb      	ldrb	r3, [r7, #18]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8004a90:	883a      	ldrh	r2, [r7, #0]
 8004a92:	88bb      	ldrh	r3, [r7, #4]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	82bb      	strh	r3, [r7, #20]
 8004a98:	e003      	b.n	8004aa2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004a9a:	88ba      	ldrh	r2, [r7, #4]
 8004a9c:	883b      	ldrh	r3, [r7, #0]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8004aa2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004aa4:	8aba      	ldrh	r2, [r7, #20]
 8004aa6:	88b9      	ldrh	r1, [r7, #4]
 8004aa8:	88f8      	ldrh	r0, [r7, #6]
 8004aaa:	f000 fda9 	bl	8005600 <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8004aae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ab0:	8aba      	ldrh	r2, [r7, #20]
 8004ab2:	88b9      	ldrh	r1, [r7, #4]
 8004ab4:	8878      	ldrh	r0, [r7, #2]
 8004ab6:	f000 fda3 	bl	8005600 <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 8004aba:	8afb      	ldrh	r3, [r7, #22]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8004ac0:	8abb      	ldrh	r3, [r7, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8004ac6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004ac8:	8839      	ldrh	r1, [r7, #0]
 8004aca:	887b      	ldrh	r3, [r7, #2]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fc13 	bl	80052f8 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd90      	pop	{r4, r7, pc}

08004ada <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004ada:	b590      	push	{r4, r7, lr}
 8004adc:	b089      	sub	sp, #36	@ 0x24
 8004ade:	af02      	add	r7, sp, #8
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	4608      	mov	r0, r1
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4623      	mov	r3, r4
 8004aea:	80fb      	strh	r3, [r7, #6]
 8004aec:	4603      	mov	r3, r0
 8004aee:	80bb      	strh	r3, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8004b14:	887a      	ldrh	r2, [r7, #2]
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da01      	bge.n	8004b26 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8004b2a:	883a      	ldrh	r2, [r7, #0]
 8004b2c:	88bb      	ldrh	r3, [r7, #4]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da01      	bge.n	8004b3c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	823b      	strh	r3, [r7, #16]
 8004b4e:	e005      	b.n	8004b5c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004b5c:	7cbb      	ldrb	r3, [r7, #18]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8004b62:	883a      	ldrh	r2, [r7, #0]
 8004b64:	88bb      	ldrh	r3, [r7, #4]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8004b6a:	88bb      	ldrh	r3, [r7, #4]
 8004b6c:	81fb      	strh	r3, [r7, #14]
 8004b6e:	e005      	b.n	8004b7c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004b70:	88ba      	ldrh	r2, [r7, #4]
 8004b72:	883b      	ldrh	r3, [r7, #0]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8004b78:	883b      	ldrh	r3, [r7, #0]
 8004b7a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8004b7c:	8abc      	ldrh	r4, [r7, #20]
 8004b7e:	8afa      	ldrh	r2, [r7, #22]
 8004b80:	89f9      	ldrh	r1, [r7, #14]
 8004b82:	8a38      	ldrh	r0, [r7, #16]
 8004b84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4623      	mov	r3, r4
 8004b8a:	f000 fc81 	bl	8005490 <_Z22ILI9341_Draw_Rectanglettttt>
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}
	...

08004b98 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b08b      	sub	sp, #44	@ 0x2c
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
 8004bb2:	2b1f      	cmp	r3, #31
 8004bb4:	d802      	bhi.n	8004bbc <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
 8004bba:	e002      	b.n	8004bc2 <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 8004bbc:	7ffb      	ldrb	r3, [r7, #31]
 8004bbe:	3b20      	subs	r3, #32
 8004bc0:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	773b      	strb	r3, [r7, #28]
 8004bc6:	e012      	b.n	8004bee <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 8004bc8:	7ffa      	ldrb	r2, [r7, #31]
 8004bca:	7f38      	ldrb	r0, [r7, #28]
 8004bcc:	7f39      	ldrb	r1, [r7, #28]
 8004bce:	4c3c      	ldr	r4, [pc, #240]	@ (8004cc0 <_Z17ILI9341_Draw_Charciittt+0x128>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4423      	add	r3, r4
 8004bda:	4403      	add	r3, r0
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	f101 0320 	add.w	r3, r1, #32
 8004be2:	443b      	add	r3, r7
 8004be4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004be8:	7f3b      	ldrb	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	773b      	strb	r3, [r7, #28]
 8004bee:	7f3b      	ldrb	r3, [r7, #28]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d9e9      	bls.n	8004bc8 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	b298      	uxth	r0, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	b299      	uxth	r1, r3
 8004bfc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004bfe:	461a      	mov	r2, r3
 8004c00:	0052      	lsls	r2, r2, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	b29c      	uxth	r4, r3
 8004c0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4623      	mov	r3, r4
 8004c14:	f000 fc3c 	bl	8005490 <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	777b      	strb	r3, [r7, #29]
 8004c1c:	e047      	b.n	8004cae <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	77bb      	strb	r3, [r7, #30]
 8004c22:	e03e      	b.n	8004ca2 <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 8004c24:	7f7b      	ldrb	r3, [r7, #29]
 8004c26:	3320      	adds	r3, #32
 8004c28:	443b      	add	r3, r7
 8004c2a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	7fbb      	ldrb	r3, [r7, #30]
 8004c32:	fa42 f303 	asr.w	r3, r2, r3
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d02e      	beq.n	8004c9c <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 8004c3e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d110      	bne.n	8004c66 <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8004c44:	7f7b      	ldrb	r3, [r7, #29]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b298      	uxth	r0, r3
 8004c50:	7fbb      	ldrb	r3, [r7, #30]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	89ba      	ldrh	r2, [r7, #12]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f000 fb4a 	bl	80052f8 <_Z18ILI9341_Draw_Pixelttt>
 8004c64:	e01a      	b.n	8004c9c <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8004c66:	7f7b      	ldrb	r3, [r7, #29]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	b298      	uxth	r0, r3
 8004c7a:	7fbb      	ldrb	r3, [r7, #30]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8004c90:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004c92:	89bb      	ldrh	r3, [r7, #12]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4623      	mov	r3, r4
 8004c98:	f000 fbfa 	bl	8005490 <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004c9c:	7fbb      	ldrb	r3, [r7, #30]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	77bb      	strb	r3, [r7, #30]
 8004ca2:	7fbb      	ldrb	r3, [r7, #30]
 8004ca4:	2b07      	cmp	r3, #7
 8004ca6:	d9bd      	bls.n	8004c24 <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 8004ca8:	7f7b      	ldrb	r3, [r7, #29]
 8004caa:	3301      	adds	r3, #1
 8004cac:	777b      	strb	r3, [r7, #29]
 8004cae:	7f7b      	ldrb	r3, [r7, #29]
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d9b4      	bls.n	8004c1e <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	0800ec40 	.word	0x0800ec40

08004cc4 <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	807b      	strh	r3, [r7, #2]
	while (*Text)
 8004cd2:	e016      	b.n	8004d02 <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	60fa      	str	r2, [r7, #12]
 8004cda:	7818      	ldrb	r0, [r3, #0]
 8004cdc:	887a      	ldrh	r2, [r7, #2]
 8004cde:	8bbb      	ldrh	r3, [r7, #28]
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	8b3b      	ldrh	r3, [r7, #24]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	f7ff ff54 	bl	8004b98 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 8004cf0:	8b3a      	ldrh	r2, [r7, #24]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4413      	add	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4413      	add	r3, r2
 8004d00:	60bb      	str	r3, [r7, #8]
	while (*Text)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e4      	bne.n	8004cd4 <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8004d18:	f002 fb54 	bl	80073c4 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8004d1c:	f001 ff1c 	bl	8006b58 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004d20:	2200      	movs	r2, #0
 8004d22:	2101      	movs	r1, #1
 8004d24:	4802      	ldr	r0, [pc, #8]	@ (8004d30 <_Z16ILI9341_SPI_Initv+0x1c>)
 8004d26:	f003 fce4 	bl	80086f2 <HAL_GPIO_WritePin>
}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40010c00 	.word	0x40010c00

08004d34 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004d3e:	1df9      	adds	r1, r7, #7
 8004d40:	2301      	movs	r3, #1
 8004d42:	2201      	movs	r2, #1
 8004d44:	4803      	ldr	r0, [pc, #12]	@ (8004d54 <_Z16ILI9341_SPI_Sendh+0x20>)
 8004d46:	f005 faa9 	bl	800a29c <HAL_SPI_Transmit>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200003d0 	.word	0x200003d0

08004d58 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	480a      	ldr	r0, [pc, #40]	@ (8004d90 <_Z21ILI9341_Write_Commandh+0x38>)
 8004d68:	f003 fcc3 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2102      	movs	r1, #2
 8004d70:	4807      	ldr	r0, [pc, #28]	@ (8004d90 <_Z21ILI9341_Write_Commandh+0x38>)
 8004d72:	f003 fcbe 	bl	80086f2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ffdb 	bl	8004d34 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004d7e:	2201      	movs	r2, #1
 8004d80:	2101      	movs	r1, #1
 8004d82:	4803      	ldr	r0, [pc, #12]	@ (8004d90 <_Z21ILI9341_Write_Commandh+0x38>)
 8004d84:	f003 fcb5 	bl	80086f2 <HAL_GPIO_WritePin>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40010c00 	.word	0x40010c00

08004d94 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2102      	movs	r1, #2
 8004da2:	480a      	ldr	r0, [pc, #40]	@ (8004dcc <_Z18ILI9341_Write_Datah+0x38>)
 8004da4:	f003 fca5 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004da8:	2200      	movs	r2, #0
 8004daa:	2101      	movs	r1, #1
 8004dac:	4807      	ldr	r0, [pc, #28]	@ (8004dcc <_Z18ILI9341_Write_Datah+0x38>)
 8004dae:	f003 fca0 	bl	80086f2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ffbd 	bl	8004d34 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004dba:	2201      	movs	r2, #1
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	4803      	ldr	r0, [pc, #12]	@ (8004dcc <_Z18ILI9341_Write_Datah+0x38>)
 8004dc0:	f003 fc97 	bl	80086f2 <HAL_GPIO_WritePin>
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40010c00 	.word	0x40010c00

08004dd0 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	80fb      	strh	r3, [r7, #6]
 8004de2:	4603      	mov	r3, r0
 8004de4:	80bb      	strh	r3, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	807b      	strh	r3, [r7, #2]
 8004dea:	4613      	mov	r3, r2
 8004dec:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8004dee:	202a      	movs	r0, #42	@ 0x2a
 8004df0:	f7ff ffb2 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ffc9 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ffc4 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ffbd 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8004e1a:	887b      	ldrh	r3, [r7, #2]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ffb8 	bl	8004d94 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8004e24:	202b      	movs	r0, #43	@ 0x2b
 8004e26:	f7ff ff97 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8004e2a:	88bb      	ldrh	r3, [r7, #4]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ffae 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8004e38:	88bb      	ldrh	r3, [r7, #4]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ffa9 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8004e42:	883b      	ldrh	r3, [r7, #0]
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff ffa2 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8004e50:	883b      	ldrh	r3, [r7, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ff9d 	bl	8004d94 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8004e5a:	202c      	movs	r0, #44	@ 0x2c
 8004e5c:	f7ff ff7c 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd90      	pop	{r4, r7, pc}

08004e68 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	2120      	movs	r1, #32
 8004e70:	480a      	ldr	r0, [pc, #40]	@ (8004e9c <_Z13ILI9341_Resetv+0x34>)
 8004e72:	f003 fc3e 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004e76:	20c8      	movs	r0, #200	@ 0xc8
 8004e78:	f002 fe48 	bl	8007b0c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4806      	ldr	r0, [pc, #24]	@ (8004e9c <_Z13ILI9341_Resetv+0x34>)
 8004e82:	f003 fc36 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004e86:	20c8      	movs	r0, #200	@ 0xc8
 8004e88:	f002 fe40 	bl	8007b0c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2120      	movs	r1, #32
 8004e90:	4802      	ldr	r0, [pc, #8]	@ (8004e9c <_Z13ILI9341_Resetv+0x34>)
 8004e92:	f003 fc2e 	bl	80086f2 <HAL_GPIO_WritePin>
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40010c00 	.word	0x40010c00

08004ea0 <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8004eae:	2036      	movs	r0, #54	@ 0x36
 8004eb0:	f7ff ff52 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f002 fe29 	bl	8007b0c <HAL_Delay>

	switch (screen_rotation)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d837      	bhi.n	8004f30 <_Z20ILI9341_Set_Rotationh+0x90>
 8004ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <_Z20ILI9341_Set_Rotationh+0x28>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004ed9 	.word	0x08004ed9
 8004ecc:	08004eef 	.word	0x08004eef
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f1b 	.word	0x08004f1b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8004ed8:	2048      	movs	r0, #72	@ 0x48
 8004eda:	f7ff ff5b 	bl	8004d94 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8004ede:	4b17      	ldr	r3, [pc, #92]	@ (8004f3c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004ee0:	22f0      	movs	r2, #240	@ 0xf0
 8004ee2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8004ee4:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004ee6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004eea:	801a      	strh	r2, [r3, #0]
		break;
 8004eec:	e021      	b.n	8004f32 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8004eee:	2028      	movs	r0, #40	@ 0x28
 8004ef0:	f7ff ff50 	bl	8004d94 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004ef6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004efa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004efe:	22f0      	movs	r2, #240	@ 0xf0
 8004f00:	801a      	strh	r2, [r3, #0]
		break;
 8004f02:	e016      	b.n	8004f32 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8004f04:	2088      	movs	r0, #136	@ 0x88
 8004f06:	f7ff ff45 	bl	8004d94 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004f0c:	22f0      	movs	r2, #240	@ 0xf0
 8004f0e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004f12:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f16:	801a      	strh	r2, [r3, #0]
		break;
 8004f18:	e00b      	b.n	8004f32 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8004f1a:	20e8      	movs	r0, #232	@ 0xe8
 8004f1c:	f7ff ff3a 	bl	8004d94 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8004f20:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004f22:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f26:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004f2a:	22f0      	movs	r2, #240	@ 0xf0
 8004f2c:	801a      	strh	r2, [r3, #0]
		break;
 8004f2e:	e000      	b.n	8004f32 <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8004f30:	bf00      	nop
	}
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000002 	.word	0x20000002
 8004f40:	20000000 	.word	0x20000000

08004f44 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	4802      	ldr	r0, [pc, #8]	@ (8004f58 <_Z14ILI9341_Enablev+0x14>)
 8004f4e:	f003 fbd0 	bl	80086f2 <HAL_GPIO_WritePin>
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40010c00 	.word	0x40010c00

08004f5c <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8004f60:	f7ff fff0 	bl	8004f44 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8004f64:	f7ff fed6 	bl	8004d14 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8004f68:	f7ff ff7e 	bl	8004e68 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f7ff fef3 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8004f72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f76:	f002 fdc9 	bl	8007b0c <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8004f7a:	20cb      	movs	r0, #203	@ 0xcb
 8004f7c:	f7ff feec 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8004f80:	2039      	movs	r0, #57	@ 0x39
 8004f82:	f7ff ff07 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8004f86:	202c      	movs	r0, #44	@ 0x2c
 8004f88:	f7ff ff04 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f7ff ff01 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8004f92:	2034      	movs	r0, #52	@ 0x34
 8004f94:	f7ff fefe 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8004f98:	2002      	movs	r0, #2
 8004f9a:	f7ff fefb 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8004f9e:	20cf      	movs	r0, #207	@ 0xcf
 8004fa0:	f7ff feda 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7ff fef5 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8004faa:	20c1      	movs	r0, #193	@ 0xc1
 8004fac:	f7ff fef2 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 8004fb0:	2030      	movs	r0, #48	@ 0x30
 8004fb2:	f7ff feef 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8004fb6:	20e8      	movs	r0, #232	@ 0xe8
 8004fb8:	f7ff fece 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8004fbc:	2085      	movs	r0, #133	@ 0x85
 8004fbe:	f7ff fee9 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7ff fee6 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8004fc8:	2078      	movs	r0, #120	@ 0x78
 8004fca:	f7ff fee3 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8004fce:	20ea      	movs	r0, #234	@ 0xea
 8004fd0:	f7ff fec2 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7ff fedd 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7ff feda 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8004fe0:	20ed      	movs	r0, #237	@ 0xed
 8004fe2:	f7ff feb9 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8004fe6:	2064      	movs	r0, #100	@ 0x64
 8004fe8:	f7ff fed4 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8004fec:	2003      	movs	r0, #3
 8004fee:	f7ff fed1 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 8004ff2:	2012      	movs	r0, #18
 8004ff4:	f7ff fece 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8004ff8:	2081      	movs	r0, #129	@ 0x81
 8004ffa:	f7ff fecb 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8004ffe:	20f7      	movs	r0, #247	@ 0xf7
 8005000:	f7ff feaa 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8005004:	2020      	movs	r0, #32
 8005006:	f7ff fec5 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 800500a:	20c0      	movs	r0, #192	@ 0xc0
 800500c:	f7ff fea4 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8005010:	2023      	movs	r0, #35	@ 0x23
 8005012:	f7ff febf 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8005016:	20c1      	movs	r0, #193	@ 0xc1
 8005018:	f7ff fe9e 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 800501c:	2010      	movs	r0, #16
 800501e:	f7ff feb9 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8005022:	20c5      	movs	r0, #197	@ 0xc5
 8005024:	f7ff fe98 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8005028:	203e      	movs	r0, #62	@ 0x3e
 800502a:	f7ff feb3 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 800502e:	2028      	movs	r0, #40	@ 0x28
 8005030:	f7ff feb0 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8005034:	20c7      	movs	r0, #199	@ 0xc7
 8005036:	f7ff fe8f 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 800503a:	2086      	movs	r0, #134	@ 0x86
 800503c:	f7ff feaa 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8005040:	2036      	movs	r0, #54	@ 0x36
 8005042:	f7ff fe89 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8005046:	2048      	movs	r0, #72	@ 0x48
 8005048:	f7ff fea4 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 800504c:	203a      	movs	r0, #58	@ 0x3a
 800504e:	f7ff fe83 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8005052:	2055      	movs	r0, #85	@ 0x55
 8005054:	f7ff fe9e 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8005058:	20b1      	movs	r0, #177	@ 0xb1
 800505a:	f7ff fe7d 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 800505e:	2000      	movs	r0, #0
 8005060:	f7ff fe98 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8005064:	2018      	movs	r0, #24
 8005066:	f7ff fe95 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800506a:	20b6      	movs	r0, #182	@ 0xb6
 800506c:	f7ff fe74 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8005070:	2008      	movs	r0, #8
 8005072:	f7ff fe8f 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8005076:	2082      	movs	r0, #130	@ 0x82
 8005078:	f7ff fe8c 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 800507c:	2027      	movs	r0, #39	@ 0x27
 800507e:	f7ff fe89 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8005082:	20f2      	movs	r0, #242	@ 0xf2
 8005084:	f7ff fe68 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005088:	2000      	movs	r0, #0
 800508a:	f7ff fe83 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800508e:	2026      	movs	r0, #38	@ 0x26
 8005090:	f7ff fe62 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8005094:	2001      	movs	r0, #1
 8005096:	f7ff fe7d 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800509a:	20e0      	movs	r0, #224	@ 0xe0
 800509c:	f7ff fe5c 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 80050a0:	200f      	movs	r0, #15
 80050a2:	f7ff fe77 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80050a6:	2031      	movs	r0, #49	@ 0x31
 80050a8:	f7ff fe74 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 80050ac:	202b      	movs	r0, #43	@ 0x2b
 80050ae:	f7ff fe71 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 80050b2:	200c      	movs	r0, #12
 80050b4:	f7ff fe6e 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80050b8:	200e      	movs	r0, #14
 80050ba:	f7ff fe6b 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 80050be:	2008      	movs	r0, #8
 80050c0:	f7ff fe68 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 80050c4:	204e      	movs	r0, #78	@ 0x4e
 80050c6:	f7ff fe65 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 80050ca:	20f1      	movs	r0, #241	@ 0xf1
 80050cc:	f7ff fe62 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 80050d0:	2037      	movs	r0, #55	@ 0x37
 80050d2:	f7ff fe5f 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 80050d6:	2007      	movs	r0, #7
 80050d8:	f7ff fe5c 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 80050dc:	2010      	movs	r0, #16
 80050de:	f7ff fe59 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 80050e2:	2003      	movs	r0, #3
 80050e4:	f7ff fe56 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80050e8:	200e      	movs	r0, #14
 80050ea:	f7ff fe53 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 80050ee:	2009      	movs	r0, #9
 80050f0:	f7ff fe50 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80050f4:	2000      	movs	r0, #0
 80050f6:	f7ff fe4d 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80050fa:	20e1      	movs	r0, #225	@ 0xe1
 80050fc:	f7ff fe2c 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005100:	2000      	movs	r0, #0
 8005102:	f7ff fe47 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005106:	200e      	movs	r0, #14
 8005108:	f7ff fe44 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 800510c:	2014      	movs	r0, #20
 800510e:	f7ff fe41 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005112:	2003      	movs	r0, #3
 8005114:	f7ff fe3e 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8005118:	2011      	movs	r0, #17
 800511a:	f7ff fe3b 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 800511e:	2007      	movs	r0, #7
 8005120:	f7ff fe38 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005124:	2031      	movs	r0, #49	@ 0x31
 8005126:	f7ff fe35 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 800512a:	20c1      	movs	r0, #193	@ 0xc1
 800512c:	f7ff fe32 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8005130:	2048      	movs	r0, #72	@ 0x48
 8005132:	f7ff fe2f 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8005136:	2008      	movs	r0, #8
 8005138:	f7ff fe2c 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 800513c:	200f      	movs	r0, #15
 800513e:	f7ff fe29 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8005142:	200c      	movs	r0, #12
 8005144:	f7ff fe26 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005148:	2031      	movs	r0, #49	@ 0x31
 800514a:	f7ff fe23 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 800514e:	2036      	movs	r0, #54	@ 0x36
 8005150:	f7ff fe20 	bl	8004d94 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005154:	200f      	movs	r0, #15
 8005156:	f7ff fe1d 	bl	8004d94 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800515a:	2011      	movs	r0, #17
 800515c:	f7ff fdfc 	bl	8004d58 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8005160:	2078      	movs	r0, #120	@ 0x78
 8005162:	f002 fcd3 	bl	8007b0c <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8005166:	2029      	movs	r0, #41	@ 0x29
 8005168:	f7ff fdf6 	bl	8004d58 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800516c:	2000      	movs	r0, #0
 800516e:	f7ff fe97 	bl	8004ea0 <_Z20ILI9341_Set_Rotationh>
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800517c:	b08d      	sub	sp, #52	@ 0x34
 800517e:	af00      	add	r7, sp, #0
 8005180:	4603      	mov	r3, r0
 8005182:	6039      	str	r1, [r7, #0]
 8005184:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8005186:	466b      	mov	r3, sp
 8005188:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005196:	d202      	bcs.n	800519e <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800519c:	e002      	b.n	80051a4 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 800519e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80051a4:	2201      	movs	r2, #1
 80051a6:	2102      	movs	r1, #2
 80051a8:	483e      	ldr	r0, [pc, #248]	@ (80052a4 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80051aa:	f003 faa2 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80051ae:	2200      	movs	r2, #0
 80051b0:	2101      	movs	r1, #1
 80051b2:	483c      	ldr	r0, [pc, #240]	@ (80052a4 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80051b4:	f003 fa9d 	bl	80086f2 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 80051c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c4:	460b      	mov	r3, r1
 80051c6:	3b01      	subs	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	2300      	movs	r3, #0
 80051cc:	4688      	mov	r8, r1
 80051ce:	4699      	mov	r9, r3
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e4:	2300      	movs	r3, #0
 80051e6:	460c      	mov	r4, r1
 80051e8:	461d      	mov	r5, r3
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	00eb      	lsls	r3, r5, #3
 80051f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f8:	00e2      	lsls	r2, r4, #3
 80051fa:	1dcb      	adds	r3, r1, #7
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	ebad 0d03 	sub.w	sp, sp, r3
 8005204:	466b      	mov	r3, sp
 8005206:	3300      	adds	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 800520a:	2300      	movs	r3, #0
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520e:	e00e      	b.n	800522e <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	4413      	add	r3, r2
 8005216:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800521a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	3301      	adds	r3, #1
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	b2d1      	uxtb	r1, r2
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	3302      	adds	r3, #2
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d3ec      	bcc.n	8005210 <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524a:	fbb3 f2f2 	udiv	r2, r3, r2
 800524e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005250:	fb01 f202 	mul.w	r2, r1, r2
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
 8005262:	e009      	b.n	8005278 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	b29a      	uxth	r2, r3
 8005268:	230a      	movs	r3, #10
 800526a:	69b9      	ldr	r1, [r7, #24]
 800526c:	480e      	ldr	r0, [pc, #56]	@ (80052a8 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 800526e:	f005 f815 	bl	800a29c <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	3301      	adds	r3, #1
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
 8005278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3f1      	bcc.n	8005264 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	b29a      	uxth	r2, r3
 8005284:	230a      	movs	r3, #10
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	4807      	ldr	r0, [pc, #28]	@ (80052a8 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 800528a:	f005 f807 	bl	800a29c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800528e:	2201      	movs	r2, #1
 8005290:	2101      	movs	r1, #1
 8005292:	4804      	ldr	r0, [pc, #16]	@ (80052a4 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005294:	f003 fa2d 	bl	80086f2 <HAL_GPIO_WritePin>
 8005298:	46b5      	mov	sp, r6
}
 800529a:	bf00      	nop
 800529c:	3734      	adds	r7, #52	@ 0x34
 800529e:	46bd      	mov	sp, r7
 80052a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a4:	40010c00 	.word	0x40010c00
 80052a8:	200003d0 	.word	0x200003d0

080052ac <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80052b6:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <_Z19ILI9341_Fill_Screent+0x44>)
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <_Z19ILI9341_Fill_Screent+0x48>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2100      	movs	r1, #0
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff fd83 	bl	8004dd0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80052ca:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <_Z19ILI9341_Fill_Screent+0x44>)
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <_Z19ILI9341_Fill_Screent+0x48>)
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ff48 	bl	8005178 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000002 	.word	0x20000002
 80052f4:	20000000 	.word	0x20000000

080052f8 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	80fb      	strh	r3, [r7, #6]
 8005302:	460b      	mov	r3, r1
 8005304:	80bb      	strh	r3, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800530a:	4b5d      	ldr	r3, [pc, #372]	@ (8005480 <_Z18ILI9341_Draw_Pixelttt+0x188>)
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	429a      	cmp	r2, r3
 8005314:	d205      	bcs.n	8005322 <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8005316:	4b5b      	ldr	r3, [pc, #364]	@ (8005484 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	88ba      	ldrh	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d301      	bcc.n	8005326 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	f040 80a5 	bne.w	8005478 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800532e:	2200      	movs	r2, #0
 8005330:	2102      	movs	r1, #2
 8005332:	4855      	ldr	r0, [pc, #340]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005334:	f003 f9dd 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005338:	2200      	movs	r2, #0
 800533a:	2101      	movs	r1, #1
 800533c:	4852      	ldr	r0, [pc, #328]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800533e:	f003 f9d8 	bl	80086f2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8005342:	202a      	movs	r0, #42	@ 0x2a
 8005344:	f7ff fcf6 	bl	8004d34 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005348:	2201      	movs	r2, #1
 800534a:	2102      	movs	r1, #2
 800534c:	484e      	ldr	r0, [pc, #312]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800534e:	f003 f9d0 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005352:	2201      	movs	r2, #1
 8005354:	2101      	movs	r1, #1
 8005356:	484c      	ldr	r0, [pc, #304]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005358:	f003 f9cb 	bl	80086f2 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800535c:	2200      	movs	r2, #0
 800535e:	2101      	movs	r1, #1
 8005360:	4849      	ldr	r0, [pc, #292]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005362:	f003 f9c6 	bl	80086f2 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	b29b      	uxth	r3, r3
 800536c:	b2db      	uxtb	r3, r3
 800536e:	753b      	strb	r3, [r7, #20]
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	757b      	strb	r3, [r7, #21]
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	3301      	adds	r3, #1
 800537a:	121b      	asrs	r3, r3, #8
 800537c:	b2db      	uxtb	r3, r3
 800537e:	75bb      	strb	r3, [r7, #22]
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	3301      	adds	r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800538a:	f107 0114 	add.w	r1, r7, #20
 800538e:	2301      	movs	r3, #1
 8005390:	2204      	movs	r2, #4
 8005392:	483e      	ldr	r0, [pc, #248]	@ (800548c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005394:	f004 ff82 	bl	800a29c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005398:	2201      	movs	r2, #1
 800539a:	2101      	movs	r1, #1
 800539c:	483a      	ldr	r0, [pc, #232]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800539e:	f003 f9a8 	bl	80086f2 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2102      	movs	r1, #2
 80053a6:	4838      	ldr	r0, [pc, #224]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053a8:	f003 f9a3 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80053ac:	2200      	movs	r2, #0
 80053ae:	2101      	movs	r1, #1
 80053b0:	4835      	ldr	r0, [pc, #212]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053b2:	f003 f99e 	bl	80086f2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 80053b6:	202b      	movs	r0, #43	@ 0x2b
 80053b8:	f7ff fcbc 	bl	8004d34 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80053bc:	2201      	movs	r2, #1
 80053be:	2102      	movs	r1, #2
 80053c0:	4831      	ldr	r0, [pc, #196]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053c2:	f003 f996 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80053c6:	2201      	movs	r2, #1
 80053c8:	2101      	movs	r1, #1
 80053ca:	482f      	ldr	r0, [pc, #188]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053cc:	f003 f991 	bl	80086f2 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80053d0:	2200      	movs	r2, #0
 80053d2:	2101      	movs	r1, #1
 80053d4:	482c      	ldr	r0, [pc, #176]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053d6:	f003 f98c 	bl	80086f2 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 80053da:	88bb      	ldrh	r3, [r7, #4]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	b29b      	uxth	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	743b      	strb	r3, [r7, #16]
 80053e4:	88bb      	ldrh	r3, [r7, #4]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	747b      	strb	r3, [r7, #17]
 80053ea:	88bb      	ldrh	r3, [r7, #4]
 80053ec:	3301      	adds	r3, #1
 80053ee:	121b      	asrs	r3, r3, #8
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	74bb      	strb	r3, [r7, #18]
 80053f4:	88bb      	ldrh	r3, [r7, #4]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	3301      	adds	r3, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80053fe:	f107 0110 	add.w	r1, r7, #16
 8005402:	2301      	movs	r3, #1
 8005404:	2204      	movs	r2, #4
 8005406:	4821      	ldr	r0, [pc, #132]	@ (800548c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005408:	f004 ff48 	bl	800a29c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800540c:	2201      	movs	r2, #1
 800540e:	2101      	movs	r1, #1
 8005410:	481d      	ldr	r0, [pc, #116]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005412:	f003 f96e 	bl	80086f2 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005416:	2200      	movs	r2, #0
 8005418:	2102      	movs	r1, #2
 800541a:	481b      	ldr	r0, [pc, #108]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800541c:	f003 f969 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005420:	2200      	movs	r2, #0
 8005422:	2101      	movs	r1, #1
 8005424:	4818      	ldr	r0, [pc, #96]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005426:	f003 f964 	bl	80086f2 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 800542a:	202c      	movs	r0, #44	@ 0x2c
 800542c:	f7ff fc82 	bl	8004d34 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005430:	2201      	movs	r2, #1
 8005432:	2102      	movs	r1, #2
 8005434:	4814      	ldr	r0, [pc, #80]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005436:	f003 f95c 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800543a:	2201      	movs	r2, #1
 800543c:	2101      	movs	r1, #1
 800543e:	4812      	ldr	r0, [pc, #72]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005440:	f003 f957 	bl	80086f2 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005444:	2200      	movs	r2, #0
 8005446:	2101      	movs	r1, #1
 8005448:	480f      	ldr	r0, [pc, #60]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800544a:	f003 f952 	bl	80086f2 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
	{ Colour >> 8, Colour };
 800544e:	887b      	ldrh	r3, [r7, #2]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	b29b      	uxth	r3, r3
 8005454:	b2db      	uxtb	r3, r3
 8005456:	733b      	strb	r3, [r7, #12]
 8005458:	887b      	ldrh	r3, [r7, #2]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800545e:	f107 010c 	add.w	r1, r7, #12
 8005462:	2301      	movs	r3, #1
 8005464:	2202      	movs	r2, #2
 8005466:	4809      	ldr	r0, [pc, #36]	@ (800548c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005468:	f004 ff18 	bl	800a29c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800546c:	2201      	movs	r2, #1
 800546e:	2101      	movs	r1, #1
 8005470:	4805      	ldr	r0, [pc, #20]	@ (8005488 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005472:	f003 f93e 	bl	80086f2 <HAL_GPIO_WritePin>
 8005476:	e000      	b.n	800547a <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8005478:	bf00      	nop

}
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000002 	.word	0x20000002
 8005484:	20000000 	.word	0x20000000
 8005488:	40010c00 	.word	0x40010c00
 800548c:	200003d0 	.word	0x200003d0

08005490 <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	80fb      	strh	r3, [r7, #6]
 80054a2:	4603      	mov	r3, r0
 80054a4:	80bb      	strh	r3, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	807b      	strh	r3, [r7, #2]
 80054aa:	4613      	mov	r3, r2
 80054ac:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80054ae:	4b2b      	ldr	r3, [pc, #172]	@ (800555c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d205      	bcs.n	80054c6 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 80054ba:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	88ba      	ldrh	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d301      	bcc.n	80054ca <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d141      	bne.n	8005554 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80054d0:	88fa      	ldrh	r2, [r7, #6]
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	4413      	add	r3, r2
 80054d6:	4a21      	ldr	r2, [pc, #132]	@ (800555c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	b292      	uxth	r2, r2
 80054dc:	4293      	cmp	r3, r2
 80054de:	bfcc      	ite	gt
 80054e0:	2301      	movgt	r3, #1
 80054e2:	2300      	movle	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80054ea:	4b1c      	ldr	r3, [pc, #112]	@ (800555c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 80054f6:	88ba      	ldrh	r2, [r7, #4]
 80054f8:	883b      	ldrh	r3, [r7, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	4a18      	ldr	r2, [pc, #96]	@ (8005560 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80054fe:	8812      	ldrh	r2, [r2, #0]
 8005500:	b292      	uxth	r2, r2
 8005502:	4293      	cmp	r3, r2
 8005504:	bfcc      	ite	gt
 8005506:	2301      	movgt	r3, #1
 8005508:	2300      	movle	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 8005510:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29a      	uxth	r2, r3
 8005516:	88bb      	ldrh	r3, [r7, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	887b      	ldrh	r3, [r7, #2]
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29c      	uxth	r4, r3
 8005528:	88ba      	ldrh	r2, [r7, #4]
 800552a:	883b      	ldrh	r3, [r7, #0]
 800552c:	4413      	add	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	88b9      	ldrh	r1, [r7, #4]
 8005536:	88f8      	ldrh	r0, [r7, #6]
 8005538:	4622      	mov	r2, r4
 800553a:	f7ff fc49 	bl	8004dd0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800553e:	883b      	ldrh	r3, [r7, #0]
 8005540:	887a      	ldrh	r2, [r7, #2]
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	461a      	mov	r2, r3
 8005548:	8b3b      	ldrh	r3, [r7, #24]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fe13 	bl	8005178 <_Z25ILI9341_Draw_Colour_Bursttm>
 8005552:	e000      	b.n	8005556 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 8005554:	bf00      	nop
}
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	bd90      	pop	{r4, r7, pc}
 800555c:	20000002 	.word	0x20000002
 8005560:	20000000 	.word	0x20000000

08005564 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4623      	mov	r3, r4
 8005574:	80fb      	strh	r3, [r7, #6]
 8005576:	4603      	mov	r3, r0
 8005578:	80bb      	strh	r3, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	807b      	strh	r3, [r7, #2]
 800557e:	4613      	mov	r3, r2
 8005580:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005582:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	88fa      	ldrh	r2, [r7, #6]
 800558a:	429a      	cmp	r2, r3
 800558c:	d205      	bcs.n	800559a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 800558e:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	88ba      	ldrh	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d301      	bcc.n	800559e <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d124      	bne.n	80055ee <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	4413      	add	r3, r2
 80055aa:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80055ac:	8812      	ldrh	r2, [r2, #0]
 80055ae:	b292      	uxth	r2, r2
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bfcc      	ite	gt
 80055b4:	2301      	movgt	r3, #1
 80055b6:	2300      	movle	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	4413      	add	r3, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	88bb      	ldrh	r3, [r7, #4]
 80055d8:	88b9      	ldrh	r1, [r7, #4]
 80055da:	88f8      	ldrh	r0, [r7, #6]
 80055dc:	f7ff fbf8 	bl	8004dd0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 80055e0:	887a      	ldrh	r2, [r7, #2]
 80055e2:	883b      	ldrh	r3, [r7, #0]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fdc6 	bl	8005178 <_Z25ILI9341_Draw_Colour_Bursttm>
 80055ec:	e000      	b.n	80055f0 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 80055ee:	bf00      	nop
}
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd90      	pop	{r4, r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000002 	.word	0x20000002
 80055fc:	20000000 	.word	0x20000000

08005600 <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	4611      	mov	r1, r2
 800560c:	461a      	mov	r2, r3
 800560e:	4623      	mov	r3, r4
 8005610:	80fb      	strh	r3, [r7, #6]
 8005612:	4603      	mov	r3, r0
 8005614:	80bb      	strh	r3, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	807b      	strh	r3, [r7, #2]
 800561a:	4613      	mov	r3, r2
 800561c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800561e:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	429a      	cmp	r2, r3
 8005628:	d205      	bcs.n	8005636 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 800562a:	4b1b      	ldr	r3, [pc, #108]	@ (8005698 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	88ba      	ldrh	r2, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d301      	bcc.n	800563a <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d124      	bne.n	800568a <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8005640:	88ba      	ldrh	r2, [r7, #4]
 8005642:	887b      	ldrh	r3, [r7, #2]
 8005644:	4413      	add	r3, r2
 8005646:	4a14      	ldr	r2, [pc, #80]	@ (8005698 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005648:	8812      	ldrh	r2, [r2, #0]
 800564a:	b292      	uxth	r2, r2
 800564c:	4293      	cmp	r3, r2
 800564e:	bfcc      	ite	gt
 8005650:	2301      	movgt	r3, #1
 8005652:	2300      	movle	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 800565a:	4b0f      	ldr	r3, [pc, #60]	@ (8005698 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29a      	uxth	r2, r3
 8005660:	88bb      	ldrh	r3, [r7, #4]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8005666:	88ba      	ldrh	r2, [r7, #4]
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	4413      	add	r3, r2
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29b      	uxth	r3, r3
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	88b9      	ldrh	r1, [r7, #4]
 8005676:	88f8      	ldrh	r0, [r7, #6]
 8005678:	f7ff fbaa 	bl	8004dd0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	883b      	ldrh	r3, [r7, #0]
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fd78 	bl	8005178 <_Z25ILI9341_Draw_Colour_Bursttm>
 8005688:	e000      	b.n	800568c <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 800568a:	bf00      	nop
}
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}
 8005692:	bf00      	nop
 8005694:	20000002 	.word	0x20000002
 8005698:	20000000 	.word	0x20000000

0800569c <_ZN19CManejadorControlesC1Ev>:
 */

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"

CManejadorControles::CManejadorControles()
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fde6 	bl	8001278 <_ZN22CManejadorEventosBotonC1Ev>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fc f93f 	bl	8001934 <_ZN24CManejadorEventosEncoderC1Ev>
 80056b6:	4a52      	ldr	r2, [pc, #328]	@ (8005800 <_ZN19CManejadorControlesC1Ev+0x164>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	4a51      	ldr	r2, [pc, #324]	@ (8005804 <_ZN19CManejadorControlesC1Ev+0x168>)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	330c      	adds	r3, #12
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fb fcd5 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	332c      	adds	r3, #44	@ 0x2c
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fb fcd0 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	334c      	adds	r3, #76	@ 0x4c
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fb fccb 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	336c      	adds	r3, #108	@ 0x6c
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fb fcc6 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	338c      	adds	r3, #140	@ 0x8c
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fb ff65 	bl	80015c4 <_ZN8CEncoderC1Ev>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	33d8      	adds	r3, #216	@ 0xd8
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fb fea2 	bl	8001448 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOA, GPIO_PIN_4, 1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 000c 	add.w	r0, r3, #12
 800570a:	2301      	movs	r3, #1
 800570c:	2210      	movs	r2, #16
 800570e:	493e      	ldr	r1, [pc, #248]	@ (8005808 <_ZN19CManejadorControlesC1Ev+0x16c>)
 8005710:	f7fb fcf2 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	330c      	adds	r3, #12
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f7fb fd33 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	330c      	adds	r3, #12
 8005726:	4618      	mov	r0, r3
 8005728:	f7fb fcff 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8005732:	2302      	movs	r3, #2
 8005734:	2240      	movs	r2, #64	@ 0x40
 8005736:	4934      	ldr	r1, [pc, #208]	@ (8005808 <_ZN19CManejadorControlesC1Ev+0x16c>)
 8005738:	f7fb fcde 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	332c      	adds	r3, #44	@ 0x2c
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7fb fd1f 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	332c      	adds	r3, #44	@ 0x2c
 800574e:	4618      	mov	r0, r3
 8005750:	f7fb fceb 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800575a:	2303      	movs	r3, #3
 800575c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005760:	492a      	ldr	r1, [pc, #168]	@ (800580c <_ZN19CManejadorControlesC1Ev+0x170>)
 8005762:	f7fb fcc9 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	334c      	adds	r3, #76	@ 0x4c
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f7fb fd0a 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	334c      	adds	r3, #76	@ 0x4c
 8005778:	4618      	mov	r0, r3
 800577a:	f7fb fcd6 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8005784:	2304      	movs	r3, #4
 8005786:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800578a:	4920      	ldr	r1, [pc, #128]	@ (800580c <_ZN19CManejadorControlesC1Ev+0x170>)
 800578c:	f7fb fcb4 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	336c      	adds	r3, #108	@ 0x6c
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4611      	mov	r1, r2
 8005798:	4618      	mov	r0, r3
 800579a:	f7fb fcf5 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	336c      	adds	r3, #108	@ 0x6c
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fb fcc1 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 80057ae:	2301      	movs	r3, #1
 80057b0:	9303      	str	r3, [sp, #12]
 80057b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	4b14      	ldr	r3, [pc, #80]	@ (800580c <_ZN19CManejadorControlesC1Ev+0x170>)
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	4b12      	ldr	r3, [pc, #72]	@ (800580c <_ZN19CManejadorControlesC1Ev+0x170>)
 80057c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057c8:	4910      	ldr	r1, [pc, #64]	@ (800580c <_ZN19CManejadorControlesC1Ev+0x170>)
 80057ca:	f7fb ff41 	bl	8001650 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7fb ffda 	bl	8001794 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	338c      	adds	r3, #140	@ 0x8c
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fb ff97 	bl	8001718 <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	33d8      	adds	r3, #216	@ 0xd8
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fb fe5a 	bl	80014a8 <_ZN20ControlVelocidadAire10InicializaEv>

}
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	0800ee88 	.word	0x0800ee88
 8005804:	0800ef24 	.word	0x0800ef24
 8005808:	40010800 	.word	0x40010800
 800580c:	40010c00 	.word	0x40010c00

08005810 <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	4a18      	ldr	r2, [pc, #96]	@ (800587c <_ZN19CManejadorControlesD1Ev+0x6c>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <_ZN19CManejadorControlesD1Ev+0x70>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	33d8      	adds	r3, #216	@ 0xd8
 8005828:	4618      	mov	r0, r3
 800582a:	f7fb fe1d 	bl	8001468 <_ZN20ControlVelocidadAireD1Ev>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	338c      	adds	r3, #140	@ 0x8c
 8005832:	4618      	mov	r0, r3
 8005834:	f7fb feea 	bl	800160c <_ZN8CEncoderD1Ev>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	336c      	adds	r3, #108	@ 0x6c
 800583c:	4618      	mov	r0, r3
 800583e:	f7fb fc3b 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	334c      	adds	r3, #76	@ 0x4c
 8005846:	4618      	mov	r0, r3
 8005848:	f7fb fc36 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	332c      	adds	r3, #44	@ 0x2c
 8005850:	4618      	mov	r0, r3
 8005852:	f7fb fc31 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	330c      	adds	r3, #12
 800585a:	4618      	mov	r0, r3
 800585c:	f7fb fc2c 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fc f875 	bl	8001954 <_ZN24CManejadorEventosEncoderD1Ev>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4618      	mov	r0, r3
 800586e:	f7fb fd13 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	0800ee88 	.word	0x0800ee88
 8005880:	0800ef24 	.word	0x0800ef24

08005884 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 8005884:	f1a0 0004 	sub.w	r0, r0, #4
 8005888:	f7ff bfc2 	b.w	8005810 <_ZN19CManejadorControlesD1Ev>

0800588c <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
}
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffbb 	bl	8005810 <_ZN19CManejadorControlesD1Ev>
 800589a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f005 ff2a 	bl	800b6f8 <_ZdlPvj>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <_ZThn4_N19CManejadorControlesD0Ev>:
 80058ae:	f1a0 0004 	sub.w	r0, r0, #4
 80058b2:	f7ff bfeb 	b.w	800588c <_ZN19CManejadorControlesD0Ev>

080058b6 <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f80b 	bl	80058de <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	338c      	adds	r3, #140	@ 0x8c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	330c      	adds	r3, #12
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fb fc57 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	332c      	adds	r3, #44	@ 0x2c
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fb fc51 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	334c      	adds	r3, #76	@ 0x4c
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fb fc4b 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonManual.Procesa(gpio_pin);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	336c      	adds	r3, #108	@ 0x6c
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f7fb fc45 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	338c      	adds	r3, #140	@ 0x8c
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fb ff8d 	bl	8001850 <_ZN8CEncoder7ProcesaEi>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	33d8      	adds	r3, #216	@ 0xd8
 800594a:	4618      	mov	r0, r3
 800594c:	f7fb fe12 	bl	8001574 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 8005950:	4603      	mov	r3, r0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <_ZN19CManejadorControles18BotonUnoClickEventEi>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent(int tiempoClick)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <_ZN19CManejadorControles18BotonUnoClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonUnoClickEvent(tiempoClick);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3310      	adds	r3, #16
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
 8005980:	e000      	b.n	8005984 <_ZN19CManejadorControles18BotonUnoClickEventEi+0x2a>
		return;
 8005982:	bf00      	nop

}
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <_ZN19CManejadorControles23BotonUnoPresionadoEventEv>:
void CManejadorControles::BotonUnoPresionadoEvent()
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <_ZN19CManejadorControles23BotonUnoPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoEvent();
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
 80059ac:	e000      	b.n	80059b0 <_ZN19CManejadorControles23BotonUnoPresionadoEventEv+0x26>
		return;
 80059ae:	bf00      	nop

}
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <_ZN19CManejadorControles28BotonUnoPresionadoLargoEventEv>:
void CManejadorControles::BotonUnoPresionadoLargoEvent()
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <_ZN19CManejadorControles28BotonUnoPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoLargoEvent();
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3318      	adds	r3, #24
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4610      	mov	r0, r2
 80059d6:	4798      	blx	r3
 80059d8:	e000      	b.n	80059dc <_ZN19CManejadorControles28BotonUnoPresionadoLargoEventEv+0x26>
		return;
 80059da:	bf00      	nop

}
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <_ZN19CManejadorControles19BotonUnoSueltoEventEv>:
void CManejadorControles::BotonUnoSueltoEvent()
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <_ZN19CManejadorControles19BotonUnoSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoSueltoEvent();
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	331c      	adds	r3, #28
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	e000      	b.n	8005a08 <_ZN19CManejadorControles19BotonUnoSueltoEventEv+0x26>
		return;
 8005a06:	bf00      	nop

}
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_ZN19CManejadorControles18BotonDosClickEventEi>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent(int tiempoClick)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <_ZN19CManejadorControles18BotonDosClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonDosClickEvent(tiempoClick);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	4610      	mov	r0, r2
 8005a32:	4798      	blx	r3
 8005a34:	e000      	b.n	8005a38 <_ZN19CManejadorControles18BotonDosClickEventEi+0x2a>
		return;
 8005a36:	bf00      	nop

}
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZN19CManejadorControles23BotonDosPresionadoEventEv>:
void CManejadorControles::BotonDosPresionadoEvent()
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <_ZN19CManejadorControles23BotonDosPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoEvent();
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3324      	adds	r3, #36	@ 0x24
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
 8005a60:	e000      	b.n	8005a64 <_ZN19CManejadorControles23BotonDosPresionadoEventEv+0x26>
		return;
 8005a62:	bf00      	nop

}
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <_ZN19CManejadorControles28BotonDosPresionaLargodoEventEv>:
void CManejadorControles::BotonDosPresionaLargodoEvent()
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <_ZN19CManejadorControles28BotonDosPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoLargoEvent();
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3328      	adds	r3, #40	@ 0x28
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	e000      	b.n	8005a90 <_ZN19CManejadorControles28BotonDosPresionaLargodoEventEv+0x26>
		return;
 8005a8e:	bf00      	nop

}
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <_ZN19CManejadorControles19BotonDosSueltoEventEv>:
void CManejadorControles::BotonDosSueltoEvent()
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <_ZN19CManejadorControles19BotonDosSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosSueltoEvent();
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	332c      	adds	r3, #44	@ 0x2c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	e000      	b.n	8005abc <_ZN19CManejadorControles19BotonDosSueltoEventEv+0x26>
		return;
 8005aba:	bf00      	nop

}
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <_ZN19CManejadorControles19BotonTresClickEventEi>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent(int tiempoClick)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <_ZN19CManejadorControles19BotonTresClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonTresClickEvent(tiempoClick);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3330      	adds	r3, #48	@ 0x30
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
 8005ae8:	e000      	b.n	8005aec <_ZN19CManejadorControles19BotonTresClickEventEi+0x2a>
		return;
 8005aea:	bf00      	nop

}
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_ZN19CManejadorControles24BotonTresPresionadoEventEv>:
void CManejadorControles::BotonTresPresionadoEvent()
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <_ZN19CManejadorControles24BotonTresPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoEvent();
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3334      	adds	r3, #52	@ 0x34
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	e000      	b.n	8005b18 <_ZN19CManejadorControles24BotonTresPresionadoEventEv+0x26>
		return;
 8005b16:	bf00      	nop

}
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <_ZN19CManejadorControles29BotonTresPresionaLargodoEventEv>:
void CManejadorControles::BotonTresPresionaLargodoEvent()
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <_ZN19CManejadorControles29BotonTresPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoLargoEvent();
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3338      	adds	r3, #56	@ 0x38
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	e000      	b.n	8005b44 <_ZN19CManejadorControles29BotonTresPresionaLargodoEventEv+0x26>
		return;
 8005b42:	bf00      	nop

}
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_ZN19CManejadorControles20BotonTresSueltoEventEv>:
void CManejadorControles::BotonTresSueltoEvent()
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <_ZN19CManejadorControles20BotonTresSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresSueltoEvent();
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	333c      	adds	r3, #60	@ 0x3c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
 8005b6c:	e000      	b.n	8005b70 <_ZN19CManejadorControles20BotonTresSueltoEventEv+0x26>
		return;
 8005b6e:	bf00      	nop

}
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_ZN19CManejadorControles21BotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent(int tiempoClick)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <_ZN19CManejadorControles21BotonCuatroClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonCuatroClickEvent(tiempoClick);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3340      	adds	r3, #64	@ 0x40
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
 8005b9c:	e000      	b.n	8005ba0 <_ZN19CManejadorControles21BotonCuatroClickEventEi+0x2a>
		return;
 8005b9e:	bf00      	nop

}
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <_ZN19CManejadorControles26BotonCuatroPresionadoEventEv>:
void CManejadorControles::BotonCuatroPresionadoEvent()
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <_ZN19CManejadorControles26BotonCuatroPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoEvent();
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3344      	adds	r3, #68	@ 0x44
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
 8005bc8:	e000      	b.n	8005bcc <_ZN19CManejadorControles26BotonCuatroPresionadoEventEv+0x26>
		return;
 8005bca:	bf00      	nop

}
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_ZN19CManejadorControles31BotonCuatroPresionaLargodoEventEv>:
void CManejadorControles::BotonCuatroPresionaLargodoEvent()
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <_ZN19CManejadorControles31BotonCuatroPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoLargoEvent();
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3348      	adds	r3, #72	@ 0x48
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	e000      	b.n	8005bf8 <_ZN19CManejadorControles31BotonCuatroPresionaLargodoEventEv+0x26>
		return;
 8005bf6:	bf00      	nop
}
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <_ZN19CManejadorControles22BotonCuatroSueltoEventEv>:
void CManejadorControles::BotonCuatroSueltoEvent()
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <_ZN19CManejadorControles22BotonCuatroSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroSueltoEvent();
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	334c      	adds	r3, #76	@ 0x4c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	e000      	b.n	8005c24 <_ZN19CManejadorControles22BotonCuatroSueltoEventEv+0x26>
		return;
 8005c22:	bf00      	nop

}
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <_ZN19CManejadorControles22BotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent(int tiempoClick)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <_ZN19CManejadorControles22BotonPerillaClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonPerillaClickEvent(tiempoClick);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3350      	adds	r3, #80	@ 0x50
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	e000      	b.n	8005c54 <_ZN19CManejadorControles22BotonPerillaClickEventEi+0x2a>
		return;
 8005c52:	bf00      	nop

}
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <_ZN19CManejadorControles27BotonPerillaPresionadoEventEv>:
void CManejadorControles::BotonPerillaPresionadoEvent()
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <_ZN19CManejadorControles27BotonPerillaPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoEvent();
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3354      	adds	r3, #84	@ 0x54
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4798      	blx	r3
 8005c7c:	e000      	b.n	8005c80 <_ZN19CManejadorControles27BotonPerillaPresionadoEventEv+0x26>
		return;
 8005c7e:	bf00      	nop

}
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <_ZN19CManejadorControles32BotonPerillaPresionadoLargoEventEv>:
void CManejadorControles::BotonPerillaPresionadoLargoEvent()
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <_ZN19CManejadorControles32BotonPerillaPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoLargoEvent();
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3358      	adds	r3, #88	@ 0x58
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
 8005ca8:	e000      	b.n	8005cac <_ZN19CManejadorControles32BotonPerillaPresionadoLargoEventEv+0x26>
		return;
 8005caa:	bf00      	nop

}
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_ZN19CManejadorControles23BotonPerillaSueltoEventEv>:
void CManejadorControles::BotonPerillaSueltoEvent()
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <_ZN19CManejadorControles23BotonPerillaSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaSueltoEvent();
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	335c      	adds	r3, #92	@ 0x5c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	e000      	b.n	8005cd8 <_ZN19CManejadorControles23BotonPerillaSueltoEventEv+0x26>
		return;
 8005cd6:	bf00      	nop
}
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3360      	adds	r3, #96	@ 0x60
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	e000      	b.n	8005d04 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 8005d02:	bf00      	nop

}
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3364      	adds	r3, #100	@ 0x64
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
 8005d2c:	e000      	b.n	8005d30 <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 8005d2e:	bf00      	nop

}
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <_ZN19CManejadorControles17OnBotonClickEventEii>:

void CManejadorControles::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
	switch (idBoton)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d82b      	bhi.n	8005da4 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
 8005d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <_ZN19CManejadorControles17OnBotonClickEventEii+0x1c>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d95 	.word	0x08005d95
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent(tiempoClick);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3330      	adds	r3, #48	@ 0x30
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	4798      	blx	r3
		break;
 8005d72:	e017      	b.n	8005da4 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
	case BOTON_MEMORIA2:
		BotonDosClickEvent(tiempoClick);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3340      	adds	r3, #64	@ 0x40
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	4798      	blx	r3
		break;
 8005d82:	e00f      	b.n	8005da4 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
	case BOTON_MEMORIA3:
		BotonTresClickEvent(tiempoClick);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3350      	adds	r3, #80	@ 0x50
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	4798      	blx	r3
		break;
 8005d92:	e007      	b.n	8005da4 <_ZN19CManejadorControles17OnBotonClickEventEii+0x6c>
	case BOTON_MANUAL:
		BotonCuatroClickEvent(tiempoClick);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3360      	adds	r3, #96	@ 0x60
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	4798      	blx	r3
		break;
 8005da2:	bf00      	nop
	}
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <_ZN19CManejadorControles22OnBotonPresionadoEventEi>:

void CManejadorControles::OnBotonPresionadoEvent(int idBoton)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d826      	bhi.n	8005e0c <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
 8005dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x18>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005dd5 	.word	0x08005dd5
 8005dc8:	08005de3 	.word	0x08005de3
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005dff 	.word	0x08005dff
	{
	case BOTON_MEMORIA1:
		BotonUnoPresionadoEvent();
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3334      	adds	r3, #52	@ 0x34
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
		break;
 8005de0:	e014      	b.n	8005e0c <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosPresionadoEvent();
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3344      	adds	r3, #68	@ 0x44
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
		break;
 8005dee:	e00d      	b.n	8005e0c <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresPresionadoEvent();
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3354      	adds	r3, #84	@ 0x54
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
		break;
 8005dfc:	e006      	b.n	8005e0c <_ZN19CManejadorControles22OnBotonPresionadoEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroPresionadoEvent();
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3364      	adds	r3, #100	@ 0x64
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
		break;
 8005e0a:	bf00      	nop
	}

}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <_ZN19CManejadorControles18OnBotonSueltoEventEi>:

void CManejadorControles::OnBotonSueltoEvent(int idBoton)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d826      	bhi.n	8005e74 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
 8005e26:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x18>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e4b 	.word	0x08005e4b
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e67 	.word	0x08005e67
	{
	case BOTON_MEMORIA1:
		BotonUnoSueltoEvent();
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	333c      	adds	r3, #60	@ 0x3c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
		break;
 8005e48:	e014      	b.n	8005e74 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosSueltoEvent();
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	334c      	adds	r3, #76	@ 0x4c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
		break;
 8005e56:	e00d      	b.n	8005e74 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresSueltoEvent();
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	335c      	adds	r3, #92	@ 0x5c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
		break;
 8005e64:	e006      	b.n	8005e74 <_ZN19CManejadorControles18OnBotonSueltoEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroSueltoEvent();
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	336c      	adds	r3, #108	@ 0x6c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
		break;
 8005e72:	bf00      	nop
	}
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <_ZN19CManejadorControles19OnIncrementoEncoderEi>:

//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3380      	adds	r3, #128	@ 0x80
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 8005e9a:	f1a0 0004 	sub.w	r0, r0, #4
 8005e9e:	f7ff bfed 	b.w	8005e7c <_ZN19CManejadorControles19OnIncrementoEncoderEi>

08005ea2 <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3384      	adds	r3, #132	@ 0x84
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 8005ec0:	f1a0 0004 	sub.w	r0, r0, #4
 8005ec4:	f7ff bfed 	b.w	8005ea2 <_ZN19CManejadorControles19OnDecrementoEncoderEi>

08005ec8 <_ZN19CManejadorControles24OnBotonEncoderClickEventEii>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
	BotonPerillaClickEvent(tiempoClick);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3370      	adds	r3, #112	@ 0x70
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	4798      	blx	r3
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEii>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick);
 8005eea:	f1a0 0004 	sub.w	r0, r0, #4
 8005eee:	f7ff bfeb 	b.w	8005ec8 <_ZN19CManejadorControles24OnBotonEncoderClickEventEii>

08005ef2 <_ZN19CManejadorControles29OnBotonEncoderPresionadoEventEi>:

void CManejadorControles::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoEvent();
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3374      	adds	r3, #116	@ 0x74
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <_ZThn4_N19CManejadorControles29OnBotonEncoderPresionadoEventEi>:
	virtual void OnBotonEncoderPresionadoEvent(int id_Encoder);
 8005f10:	f1a0 0004 	sub.w	r0, r0, #4
 8005f14:	f7ff bfed 	b.w	8005ef2 <_ZN19CManejadorControles29OnBotonEncoderPresionadoEventEi>

08005f18 <_ZN19CManejadorControles34OnBotonEncoderPresionadoLargoEventEi>:

void CManejadorControles::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoLargoEvent();
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3378      	adds	r3, #120	@ 0x78
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <_ZThn4_N19CManejadorControles34OnBotonEncoderPresionadoLargoEventEi>:
	virtual void OnBotonEncoderPresionadoLargoEvent(int id_Encoder);
 8005f36:	f1a0 0004 	sub.w	r0, r0, #4
 8005f3a:	f7ff bfed 	b.w	8005f18 <_ZN19CManejadorControles34OnBotonEncoderPresionadoLargoEventEi>

08005f3e <_ZN19CManejadorControles25OnBotonEncoderSueltoEventEi>:

void CManejadorControles::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
	BotonPerillaSueltoEvent();
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	337c      	adds	r3, #124	@ 0x7c
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZThn4_N19CManejadorControles25OnBotonEncoderSueltoEventEi>:
	virtual void OnBotonEncoderSueltoEvent(int id_Encoder);
 8005f5c:	f1a0 0004 	sub.w	r0, r0, #4
 8005f60:	f7ff bfed 	b.w	8005f3e <_ZN19CManejadorControles25OnBotonEncoderSueltoEventEi>

08005f64 <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:


void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr
	...

08005f80 <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	4a04      	ldr	r2, [pc, #16]	@ (8005f9c <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	0800ef4c 	.word	0x0800ef4c

08005fa0 <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	4a04      	ldr	r2, [pc, #16]	@ (8005fbc <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	0800ef4c 	.word	0x0800ef4c

08005fc0 <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
}
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ffe9 	bl	8005fa0 <_ZN26CManejadorEventosControlesD1Ev>
 8005fce:	2104      	movs	r1, #4
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f005 fb91 	bl	800b6f8 <_ZdlPvj>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]

}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]

}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEi>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent(int tiempoClick)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <_ZN26CManejadorEventosControles25OnBotonUnoPresionadoEventEv>:
void CManejadorEventosControles::OnBotonUnoPresionadoEvent()
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <_ZN26CManejadorEventosControles30OnBotonUnoPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonUnoPresionadoLargoEvent()
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]

}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <_ZN26CManejadorEventosControles21OnBotonUnoSueltoEventEv>:
void CManejadorEventosControles::OnBotonUnoSueltoEvent()
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr

08006052 <_ZN26CManejadorEventosControles20OnBotonDosClickEventEi>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent(int tiempoClick)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]

}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <_ZN26CManejadorEventosControles25OnBotonDosPresionadoEventEv>:
void CManejadorEventosControles::OnBotonDosPresionadoEvent()
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]

}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <_ZN26CManejadorEventosControles30OnBotonDosPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonDosPresionadoLargoEvent()
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <_ZN26CManejadorEventosControles21OnBotonDosSueltoEventEv>:
void CManejadorEventosControles::OnBotonDosSueltoEvent()
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]

}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <_ZN26CManejadorEventosControles21OnBotonTresClickEventEi>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent(int tiempoClick)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]

}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <_ZN26CManejadorEventosControles26OnBotonTresPresionadoEventEv>:
void CManejadorEventosControles::OnBotonTresPresionadoEvent()
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <_ZN26CManejadorEventosControles31OnBotonTresPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonTresPresionadoLargoEvent()
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]

}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <_ZN26CManejadorEventosControles22OnBotonTresSueltoEventEv>:
void CManejadorEventosControles::OnBotonTresSueltoEvent()
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent(int tiempoClick)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]

}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <_ZN26CManejadorEventosControles28OnBotonCuatroPresionadoEventEv>:
void CManejadorEventosControles::OnBotonCuatroPresionadoEvent()
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]

}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <_ZN26CManejadorEventosControles33OnBotonCuatroPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonCuatroPresionadoLargoEvent()
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <_ZN26CManejadorEventosControles24OnBotonCuatroSueltoEventEv>:
void CManejadorEventosControles::OnBotonCuatroSueltoEvent()
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]

}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent(int tiempoClick)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]

}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <_ZN26CManejadorEventosControles29OnBotonPerillaPresionadoEventEv>:
void CManejadorEventosControles::OnBotonPerillaPresionadoEvent()
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <_ZN26CManejadorEventosControles34OnBotonPerillaPresionadoLargoEventEv>:
void CManejadorEventosControles::OnBotonPerillaPresionadoLargoEvent()
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]

}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <_ZN26CManejadorEventosControles25OnBotonPerillaSueltoEventEv>:
void CManejadorEventosControles::OnBotonPerillaSueltoEvent()
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]

}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]

}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.h"
MAX6675::MAX6675()
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
{

}
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	4613      	mov	r3, r2
 80061be:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	819a      	strh	r2, [r3, #12]

}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr

080061d6 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	4613      	mov	r3, r2
 80061e2:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	81da      	strh	r2, [r3, #14]

}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	4613      	mov	r3, r2
 8006206:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	821a      	strh	r2, [r3, #16]

}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6858      	ldr	r0, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	89db      	ldrh	r3, [r3, #14]
 800622e:	2201      	movs	r2, #1
 8006230:	4619      	mov	r1, r3
 8006232:	f002 fa5e 	bl	80086f2 <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e002      	b.n	8006242 <_ZN7MAX667513MAX6675_pulsoEv+0x24>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	3301      	adds	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006248:	dbf8      	blt.n	800623c <_ZN7MAX667513MAX6675_pulsoEv+0x1e>
//	Delay_us(10);
//	HAL_Delay(1);
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	899b      	ldrh	r3, [r3, #12]
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f002 fa35 	bl	80086c4 <HAL_GPIO_ReadPin>
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6858      	ldr	r0, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	89db      	ldrh	r3, [r3, #14]
 8006266:	2200      	movs	r2, #0
 8006268:	4619      	mov	r1, r3
 800626a:	f002 fa42 	bl	80086f2 <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	e002      	b.n	800627a <_ZN7MAX667513MAX6675_pulsoEv+0x5c>
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	3301      	adds	r3, #1
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006280:	dbf8      	blt.n	8006274 <_ZN7MAX667513MAX6675_pulsoEv+0x56>
//	Delay_us(10);
//	HAL_Delay(1);
	return lei;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <_ZN7MAX667511MAX6675_leeEv>:
float MAX6675::MAX6675_lee()
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	int tiempoClick = HAL_GetTick() - TiempoTranscurrido;
 8006294:	f001 fc30 	bl	8007af8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	613b      	str	r3, [r7, #16]
	if (tiempoClick < 275)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80062a8:	dc02      	bgt.n	80062b0 <_ZN7MAX667511MAX6675_leeEv+0x24>
	{
		return UltimaTemperatura;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	e052      	b.n	8006356 <_ZN7MAX667511MAX6675_leeEv+0xca>
	}
	TiempoTranscurrido = HAL_GetTick();
 80062b0:	f001 fc22 	bl	8007af8 <HAL_GetTick>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	615a      	str	r2, [r3, #20]

	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 80062bc:	2300      	movs	r3, #0
 80062be:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6898      	ldr	r0, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8a1b      	ldrh	r3, [r3, #16]
 80062c8:	2200      	movs	r2, #0
 80062ca:	4619      	mov	r1, r3
 80062cc:	f002 fa11 	bl	80086f2 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	for (cont = 15; cont >= 0; cont--)
 80062d0:	230f      	movs	r3, #15
 80062d2:	757b      	strb	r3, [r7, #21]
 80062d4:	e01b      	b.n	800630e <_ZN7MAX667511MAX6675_leeEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff ffa1 	bl	800621e <_ZN7MAX667513MAX6675_pulsoEv>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <_ZN7MAX667511MAX6675_leeEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 80062ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80062f0:	2201      	movs	r2, #1
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	b21a      	sxth	r2, r3
 80062f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	b21b      	sxth	r3, r3
 8006300:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 8006302:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	757b      	strb	r3, [r7, #21]
 800630e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006312:	2b00      	cmp	r3, #0
 8006314:	dadf      	bge.n	80062d6 <_ZN7MAX667511MAX6675_leeEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6898      	ldr	r0, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8a1b      	ldrh	r3, [r3, #16]
 800631e:	2201      	movs	r2, #1
 8006320:	4619      	mov	r1, r3
 8006322:	f002 f9e6 	bl	80086f2 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 8006326:	8afb      	ldrh	r3, [r7, #22]
 8006328:	08db      	lsrs	r3, r3, #3
 800632a:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura=(((float) sensor_dato * 0.25)); //0.25
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fa fc60 	bl	8000bf4 <__aeabi_ui2f>
 8006334:	4603      	mov	r3, r0
 8006336:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa fcb2 	bl	8000ca4 <__aeabi_fmul>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	619a      	str	r2, [r3, #24]
//	SerialPrintf("temperatura=%f sensor=%d\r\n", UltimaTemperatura,sensor_dato);
	return UltimaTemperatura+26;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	4904      	ldr	r1, [pc, #16]	@ (8006360 <_ZN7MAX667511MAX6675_leeEv+0xd4>)
 800634e:	4618      	mov	r0, r3
 8006350:	f7fa fba0 	bl	8000a94 <__addsf3>
 8006354:	4603      	mov	r3, r0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	41d00000 	.word	0x41d00000

08006364 <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	89da      	ldrh	r2, [r3, #14]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8a1b      	ldrh	r3, [r3, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	b29b      	uxth	r3, r3
 8006386:	2200      	movs	r2, #0
 8006388:	4619      	mov	r1, r3
 800638a:	4821      	ldr	r0, [pc, #132]	@ (8006410 <_ZN7MAX66754InitEv+0xac>)
 800638c:	f002 f9b1 	bl	80086f2 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : DAT_MAX_Pin */
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	899b      	ldrh	r3, [r3, #12]
 8006394:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f107 0208 	add.w	r2, r7, #8
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f002 f807 	bl	80083bc <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	89da      	ldrh	r2, [r3, #14]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8a1b      	ldrh	r3, [r3, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063bc:	2301      	movs	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c4:	2302      	movs	r3, #2
 80063c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c8:	f107 0308 	add.w	r3, r7, #8
 80063cc:	4619      	mov	r1, r3
 80063ce:	4810      	ldr	r0, [pc, #64]	@ (8006410 <_ZN7MAX66754InitEv+0xac>)
 80063d0:	f001 fff4 	bl	80083bc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6858      	ldr	r0, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	89db      	ldrh	r3, [r3, #14]
 80063dc:	2200      	movs	r2, #0
 80063de:	4619      	mov	r1, r3
 80063e0:	f002 f987 	bl	80086f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6898      	ldr	r0, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8a1b      	ldrh	r3, [r3, #16]
 80063ec:	2201      	movs	r2, #1
 80063ee:	4619      	mov	r1, r3
 80063f0:	f002 f97f 	bl	80086f2 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80063f4:	2064      	movs	r0, #100	@ 0x64
 80063f6:	f001 fb89 	bl	8007b0c <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 80063fa:	f001 fb7d 	bl	8007af8 <HAL_GetTick>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	615a      	str	r2, [r3, #20]
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40010800 	.word	0x40010800

08006414 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f1xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	4a04      	ldr	r2, [pc, #16]	@ (8006430 <_ZN3PwmC1Ev+0x1c>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	0800efbc 	.word	0x0800efbc

08006434 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	4a04      	ldr	r2, [pc, #16]	@ (8006450 <_ZN3PwmD1Ev+0x1c>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	0800efbc 	.word	0x0800efbc

08006454 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
}
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ffe9 	bl	8006434 <_ZN3PwmD1Ev>
 8006462:	214c      	movs	r1, #76	@ 0x4c
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f005 f947 	bl	800b6f8 <_ZdlPvj>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b092      	sub	sp, #72	@ 0x48
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006482:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	609a      	str	r2, [r3, #8]
 800648e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006490:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800649a:	f107 0314 	add.w	r3, r7, #20
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	611a      	str	r2, [r3, #16]
 80064aa:	615a      	str	r2, [r3, #20]
 80064ac:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2280      	movs	r2, #128	@ 0x80
 80064d0:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f004 f8ca 	bl	800a670 <HAL_TIM_Base_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f887 	bl	8006600 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3304      	adds	r3, #4
 80064fc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f004 fc1a 	bl	800ad3c <HAL_TIM_ConfigClockSource>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf14      	ite	ne
 800650e:	2301      	movne	r3, #1
 8006510:	2300      	moveq	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f871 	bl	8006600 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3304      	adds	r3, #4
 8006522:	4618      	mov	r0, r3
 8006524:	f004 f946 	bl	800a7b4 <HAL_TIM_PWM_Init>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f861 	bl	8006600 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800653e:	2300      	movs	r3, #0
 8006540:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3304      	adds	r3, #4
 800654a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800654e:	4611      	mov	r1, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f004 ff83 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf14      	ite	ne
 800655c:	2301      	movne	r3, #1
 800655e:	2300      	moveq	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f84a 	bl	8006600 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800656c:	2360      	movs	r3, #96	@ 0x60
 800656e:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006578:	2300      	movs	r3, #0
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3304      	adds	r3, #4
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	f107 0114 	add.w	r1, r7, #20
 8006586:	4618      	mov	r0, r3
 8006588:	f004 fb16 	bl	800abb8 <HAL_TIM_PWM_ConfigChannel>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2301      	movne	r3, #1
 8006594:	2300      	moveq	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f82f 	bl	8006600 <_ZN3Pwm13Error_HandlerEv>
	  }
	  HAL_TIM_MspPostInit(&Htim);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f833 	bl	8006614 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(&Htim,chanel);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3304      	adds	r3, #4
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f004 f954 	bl	800a864 <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 80065bc:	2100      	movs	r1, #0
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f804 	bl	80065cc <_ZN3Pwm12SicloTrabajoEi>
}
 80065c4:	bf00      	nop
 80065c6:	3748      	adds	r7, #72	@ 0x48
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	4a06      	ldr	r2, [pc, #24]	@ (80065fc <_ZN3Pwm12SicloTrabajoEi+0x30>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	51eb851f 	.word	0x51eb851f

08006600 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
	...

08006614 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>:
void Pwm::HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	@ 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	605a      	str	r2, [r3, #4]
 8006628:	609a      	str	r2, [r3, #8]
 800662a:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a28      	ldr	r2, [pc, #160]	@ (80066d4 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d119      	bne.n	800666a <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0x56>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006636:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	4a27      	ldr	r2, [pc, #156]	@ (80066d8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 800663c:	f043 0304 	orr.w	r3, r3, #4
 8006640:	6193      	str	r3, [r2, #24]
 8006642:	4b25      	ldr	r3, [pc, #148]	@ (80066d8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800664e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006654:	2302      	movs	r3, #2
 8006656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006658:	2302      	movs	r3, #2
 800665a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	4619      	mov	r1, r3
 8006662:	481e      	ldr	r0, [pc, #120]	@ (80066dc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8006664:	f001 feaa 	bl	80083bc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
  }

}
 8006668:	e02f      	b.n	80066ca <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
  else if(htim->Instance==TIM2)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006672:	d12a      	bne.n	80066ca <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006674:	4b18      	ldr	r3, [pc, #96]	@ (80066d8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	4a17      	ldr	r2, [pc, #92]	@ (80066d8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 800667a:	f043 0304 	orr.w	r3, r3, #4
 800667e:	6193      	str	r3, [r2, #24]
 8006680:	4b15      	ldr	r3, [pc, #84]	@ (80066d8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800668c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006692:	2302      	movs	r3, #2
 8006694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006696:	2302      	movs	r3, #2
 8006698:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669a:	f107 0314 	add.w	r3, r7, #20
 800669e:	4619      	mov	r1, r3
 80066a0:	480e      	ldr	r0, [pc, #56]	@ (80066dc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 80066a2:	f001 fe8b 	bl	80083bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80066a6:	4b0e      	ldr	r3, [pc, #56]	@ (80066e0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80066ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80066bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c4:	4a06      	ldr	r2, [pc, #24]	@ (80066e0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	6053      	str	r3, [r2, #4]
}
 80066ca:	bf00      	nop
 80066cc:	3728      	adds	r7, #40	@ 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40010800 	.word	0x40010800
 80066e0:	40010000 	.word	0x40010000

080066e4 <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	4a04      	ldr	r2, [pc, #16]	@ (8006700 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	0800efcc 	.word	0x0800efcc

08006704 <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	4a04      	ldr	r2, [pc, #16]	@ (8006720 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	0800efcc 	.word	0x0800efcc

08006724 <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
}
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ffe9 	bl	8006704 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8006732:	2104      	movs	r1, #4
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f004 ffdf 	bl	800b6f8 <_ZdlPvj>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <_ZN15SensorMagneticoC1Ev>:

#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f1xx.h"
#include "Constantes.hpp"

SensorMagnetico::SensorMagnetico()
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	4a0a      	ldr	r2, [pc, #40]	@ (800678c <_ZN15SensorMagneticoC1Ev+0x34>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	60da      	str	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	611a      	str	r2, [r3, #16]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	615a      	str	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	0800efe0 	.word	0x0800efe0

08006790 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	4a04      	ldr	r2, [pc, #16]	@ (80067ac <_ZN15SensorMagneticoD1Ev+0x1c>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	0800efe0 	.word	0x0800efe0

080067b0 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
}
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ffe9 	bl	8006790 <_ZN15SensorMagneticoD1Ev>
 80067be:	211c      	movs	r1, #28
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f004 ff99 	bl	800b6f8 <_ZdlPvj>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	811a      	strh	r2, [r3, #8]

}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 80067fc:	f107 0308 	add.w	r3, r7, #8
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	891b      	ldrh	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006814:	2301      	movs	r3, #1
 8006816:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f107 0208 	add.w	r2, r7, #8
 8006820:	4611      	mov	r1, r2
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fdca 	bl	80083bc <HAL_GPIO_Init>
}
 8006828:	bf00      	nop
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	60da      	str	r2, [r3, #12]

}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	891b      	ldrh	r3, [r3, #8]
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f001 ff31 	bl	80086c4 <HAL_GPIO_ReadPin>
 8006862:	4603      	mov	r3, r0

}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08c      	sub	sp, #48	@ 0x30
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006880:	4b3b      	ldr	r3, [pc, #236]	@ (8006970 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	4a3a      	ldr	r2, [pc, #232]	@ (8006970 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 8006886:	f043 0302 	orr.w	r3, r3, #2
 800688a:	61d3      	str	r3, [r2, #28]
 800688c:	4b38      	ldr	r3, [pc, #224]	@ (8006970 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f640 5215 	movw	r2, #3349	@ 0xd15
 80068b0:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f003 fed0 	bl	800a670 <HAL_TIM_Base_Init>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bf14      	ite	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	2300      	moveq	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x78>
	{
		return false;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e041      	b.n	8006968 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_ClockConfigTypeDef TimClock =
 80068e4:	f107 0320 	add.w	r3, r7, #32
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	609a      	str	r2, [r3, #8]
 80068f0:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068f6:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f107 0220 	add.w	r2, r7, #32
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f004 fa1b 	bl	800ad3c <HAL_TIM_ConfigClockSource>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf14      	ite	ne
 800690c:	2301      	movne	r3, #1
 800690e:	2300      	moveq	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xae>
	{
		return false;
 8006916:	2300      	movs	r3, #0
 8006918:	e026      	b.n	8006968 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_MasterConfigTypeDef TimMaster =
 800691a:	f107 0318 	add.w	r3, r7, #24
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 8006928:	2300      	movs	r3, #0
 800692a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f107 0218 	add.w	r2, r7, #24
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f004 fd91 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf14      	ite	ne
 8006940:	2301      	movne	r3, #1
 8006942:	2300      	moveq	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe2>
	{
		return false;
 800694a:	2300      	movs	r3, #0
 800694c:	e00c      	b.n	8006968 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 800694e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006952:	2200      	movs	r2, #0
 8006954:	2105      	movs	r1, #5
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fcf9 	bl	800834e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 800695c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fd10 	bl	8008386 <HAL_NVIC_EnableIRQ>
	return true;
 8006966:	2301      	movs	r3, #1
}
 8006968:	4618      	mov	r0, r3
 800696a:	3730      	adds	r7, #48	@ 0x30
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40021000 	.word	0x40021000

08006974 <_ZN6CTimer5StartEv>:
void CTimer::Start()
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&HTim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	f003 fec6 	bl	800a710 <HAL_TIM_Base_Start_IT>
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	64da      	str	r2, [r3, #76]	@ 0x4c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
	...

080069a8 <_Z16IncializaSistemav>:
//TIM_HandleTypeDef htim2;
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;

void IncializaSistema()
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b095      	sub	sp, #84	@ 0x54
 80069ac:	af00      	add	r7, sp, #0
	CTimer timer;
 80069ae:	463b      	mov	r3, r7
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff ffeb 	bl	800698c <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	2028      	movs	r0, #40	@ 0x28
 80069bc:	f001 fcc7 	bl	800834e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069c0:	2028      	movs	r0, #40	@ 0x28
 80069c2:	f001 fce0 	bl	8008386 <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 80069c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80069ca:	f004 fe97 	bl	800b6fc <_Znwj>
 80069ce:	4603      	mov	r3, r0
 80069d0:	461c      	mov	r4, r3
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7fb f978 	bl	8001cc8 <_ZN16CestacionBaku601C1Ev>
 80069d8:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <_Z16IncializaSistemav+0x78>)
 80069da:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 80069dc:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 80069e0:	f004 fe8c 	bl	800b6fc <_Znwj>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461c      	mov	r4, r3
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7fe fe57 	bl	800569c <_ZN19CManejadorControlesC1Ev>
 80069ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006a24 <_Z16IncializaSistemav+0x7c>)
 80069f0:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 80069f2:	f7fe fab3 	bl	8004f5c <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80069f6:	2003      	movs	r0, #3
 80069f8:	f7fe fa52 	bl	8004ea0 <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(WHITE);
 80069fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006a00:	f7fe fc54 	bl	80052ac <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 8006a04:	4638      	mov	r0, r7
 8006a06:	231d      	movs	r3, #29
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4907      	ldr	r1, [pc, #28]	@ (8006a28 <_Z16IncializaSistemav+0x80>)
 8006a0c:	f7ff ff2e 	bl	800686c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>
	timer.Start();
 8006a10:	463b      	mov	r3, r7
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff ffae 	bl	8006974 <_ZN6CTimer5StartEv>

}
 8006a18:	bf00      	nop
 8006a1a:	3754      	adds	r7, #84	@ 0x54
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}
 8006a20:	200001f4 	.word	0x200001f4
 8006a24:	20000218 	.word	0x20000218
 8006a28:	40000400 	.word	0x40000400

08006a2c <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
	ManejadorPantallas.SetEstacion(estacion);
 8006a30:	4b0f      	ldr	r3, [pc, #60]	@ (8006a70 <_Z14EjecutaSistemav+0x44>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	480f      	ldr	r0, [pc, #60]	@ (8006a74 <_Z14EjecutaSistemav+0x48>)
 8006a38:	f7fc fd9a 	bl	8003570 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a78 <_Z14EjecutaSistemav+0x4c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4619      	mov	r1, r3
 8006a42:	480c      	ldr	r0, [pc, #48]	@ (8006a74 <_Z14EjecutaSistemav+0x48>)
 8006a44:	f7fc fe2c 	bl	80036a0 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	ManejadorPantallas.MuestraPantallaManual();
 8006a48:	480a      	ldr	r0, [pc, #40]	@ (8006a74 <_Z14EjecutaSistemav+0x48>)
 8006a4a:	f7fc fd9e 	bl	800358a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (1)
	{
		estacion->Procesa();
 8006a4e:	4b08      	ldr	r3, [pc, #32]	@ (8006a70 <_Z14EjecutaSistemav+0x44>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b07      	ldr	r3, [pc, #28]	@ (8006a70 <_Z14EjecutaSistemav+0x44>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3330      	adds	r3, #48	@ 0x30
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 8006a60:	4804      	ldr	r0, [pc, #16]	@ (8006a74 <_Z14EjecutaSistemav+0x48>)
 8006a62:	f7fc fdca 	bl	80035fa <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 8006a66:	2001      	movs	r0, #1
 8006a68:	f001 f850 	bl	8007b0c <HAL_Delay>
		estacion->Procesa();
 8006a6c:	bf00      	nop
 8006a6e:	e7ee      	b.n	8006a4e <_Z14EjecutaSistemav+0x22>
 8006a70:	200001f4 	.word	0x200001f4
 8006a74:	200001f8 	.word	0x200001f8
 8006a78:	20000218 	.word	0x20000218

08006a7c <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	80fb      	strh	r3, [r7, #6]
	estacion->GPIO_INTERRUPCION(GPIO_Pin);
 8006a86:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3354      	adds	r3, #84	@ 0x54
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	88f9      	ldrh	r1, [r7, #6]
 8006a96:	4610      	mov	r0, r2
 8006a98:	4798      	blx	r3
	ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 8006a9a:	4b08      	ldr	r3, [pc, #32]	@ (8006abc <HAL_GPIO_EXTI_Callback+0x40>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4b07      	ldr	r3, [pc, #28]	@ (8006abc <HAL_GPIO_EXTI_Callback+0x40>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3388      	adds	r3, #136	@ 0x88
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	88f9      	ldrh	r1, [r7, #6]
 8006aaa:	4610      	mov	r0, r2
 8006aac:	4798      	blx	r3
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200001f4 	.word	0x200001f4
 8006abc:	20000218 	.word	0x20000218

08006ac0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a07      	ldr	r2, [pc, #28]	@ (8006aec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d108      	bne.n	8006ae4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		estacion->TimerTick();
 8006ad2:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3340      	adds	r3, #64	@ 0x40
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4798      	blx	r3
	}
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40000400 	.word	0x40000400
 8006af0:	200001f4 	.word	0x200001f4

08006af4 <_Z41__static_initialization_and_destruction_0ii>:
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d102      	bne.n	8006b14 <_Z41__static_initialization_and_destruction_0ii+0x20>
CManejadorPantallas ManejadorPantallas;
 8006b0e:	4809      	ldr	r0, [pc, #36]	@ (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006b10:	f7fc fcf2 	bl	80034f8 <_ZN19CManejadorPantallasC1Ev>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d102      	bne.n	8006b2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006b24:	4803      	ldr	r0, [pc, #12]	@ (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006b26:	f7fc fd03 	bl	8003530 <_ZN19CManejadorPantallasD1Ev>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200001f8 	.word	0x200001f8

08006b38 <_GLOBAL__sub_I_estacion>:
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006b40:	2001      	movs	r0, #1
 8006b42:	f7ff ffd7 	bl	8006af4 <_Z41__static_initialization_and_destruction_0ii>
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <_GLOBAL__sub_D_estacion>:
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006b50:	2000      	movs	r0, #0
 8006b52:	f7ff ffcf 	bl	8006af4 <_Z41__static_initialization_and_destruction_0ii>
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	@ 0x28
 8006b5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b5e:	4b71      	ldr	r3, [pc, #452]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	4a70      	ldr	r2, [pc, #448]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b68:	6193      	str	r3, [r2, #24]
 8006b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b76:	4b6b      	ldr	r3, [pc, #428]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	4a6a      	ldr	r2, [pc, #424]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b7c:	f043 0310 	orr.w	r3, r3, #16
 8006b80:	6193      	str	r3, [r2, #24]
 8006b82:	4b68      	ldr	r3, [pc, #416]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b8e:	4b65      	ldr	r3, [pc, #404]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	4a64      	ldr	r2, [pc, #400]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b94:	f043 0304 	orr.w	r3, r3, #4
 8006b98:	6193      	str	r3, [r2, #24]
 8006b9a:	4b62      	ldr	r3, [pc, #392]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4a5e      	ldr	r2, [pc, #376]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006bac:	f043 0308 	orr.w	r3, r3, #8
 8006bb0:	6193      	str	r3, [r2, #24]
 8006bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bbe:	4b59      	ldr	r3, [pc, #356]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	4a58      	ldr	r2, [pc, #352]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006bc4:	f043 0320 	orr.w	r3, r3, #32
 8006bc8:	6193      	str	r3, [r2, #24]
 8006bca:	4b56      	ldr	r3, [pc, #344]	@ (8006d24 <MX_GPIO_Init+0x1cc>)
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8006be2:	f107 0318 	add.w	r3, r7, #24
 8006be6:	4619      	mov	r1, r3
 8006be8:	484f      	ldr	r0, [pc, #316]	@ (8006d28 <MX_GPIO_Init+0x1d0>)
 8006bea:	f001 fbe7 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8006bee:	2368      	movs	r3, #104	@ 0x68
 8006bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bfe:	f107 0318 	add.w	r3, r7, #24
 8006c02:	4619      	mov	r1, r3
 8006c04:	4848      	ldr	r0, [pc, #288]	@ (8006d28 <MX_GPIO_Init+0x1d0>)
 8006c06:	f001 fbd9 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8006c0a:	2310      	movs	r3, #16
 8006c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c12:	2301      	movs	r3, #1
 8006c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8006c16:	f107 0318 	add.w	r3, r7, #24
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4842      	ldr	r0, [pc, #264]	@ (8006d28 <MX_GPIO_Init+0x1d0>)
 8006c1e:	f001 fbcd 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8006c22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8006c30:	f107 0318 	add.w	r3, r7, #24
 8006c34:	4619      	mov	r1, r3
 8006c36:	483d      	ldr	r0, [pc, #244]	@ (8006d2c <MX_GPIO_Init+0x1d4>)
 8006c38:	f001 fbc0 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006c3c:	2332      	movs	r3, #50	@ 0x32
 8006c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c40:	2302      	movs	r3, #2
 8006c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c4c:	f107 0318 	add.w	r3, r7, #24
 8006c50:	4619      	mov	r1, r3
 8006c52:	4836      	ldr	r0, [pc, #216]	@ (8006d2c <MX_GPIO_Init+0x1d4>)
 8006c54:	f001 fbb2 	bl	80083bc <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c66:	2303      	movs	r3, #3
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006c6a:	f107 0318 	add.w	r3, r7, #24
 8006c6e:	4619      	mov	r1, r3
 8006c70:	482f      	ldr	r0, [pc, #188]	@ (8006d30 <MX_GPIO_Init+0x1d8>)
 8006c72:	f001 fba3 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006c76:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c84:	2302      	movs	r3, #2
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c88:	f107 0318 	add.w	r3, r7, #24
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4828      	ldr	r0, [pc, #160]	@ (8006d30 <MX_GPIO_Init+0x1d8>)
 8006c90:	f001 fb94 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006c94:	2340      	movs	r3, #64	@ 0x40
 8006c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006ca4:	2380      	movs	r3, #128	@ 0x80
 8006ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8006cb0:	2323      	movs	r3, #35	@ 0x23
 8006cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cc0:	f107 0318 	add.w	r3, r7, #24
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4819      	ldr	r0, [pc, #100]	@ (8006d2c <MX_GPIO_Init+0x1d4>)
 8006cc8:	f001 fb78 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006ccc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cde:	f107 0318 	add.w	r3, r7, #24
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4813      	ldr	r0, [pc, #76]	@ (8006d34 <MX_GPIO_Init+0x1dc>)
 8006ce6:	f001 fb69 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006cea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2168      	movs	r1, #104	@ 0x68
 8006d00:	4809      	ldr	r0, [pc, #36]	@ (8006d28 <MX_GPIO_Init+0x1d0>)
 8006d02:	f001 fcf6 	bl	80086f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006d06:	2200      	movs	r2, #0
 8006d08:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8006d0c:	4808      	ldr	r0, [pc, #32]	@ (8006d30 <MX_GPIO_Init+0x1d8>)
 8006d0e:	f001 fcf0 	bl	80086f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8006d12:	2200      	movs	r2, #0
 8006d14:	2123      	movs	r1, #35	@ 0x23
 8006d16:	4805      	ldr	r0, [pc, #20]	@ (8006d2c <MX_GPIO_Init+0x1d4>)
 8006d18:	f001 fceb 	bl	80086f2 <HAL_GPIO_WritePin>

}
 8006d1c:	bf00      	nop
 8006d1e:	3728      	adds	r7, #40	@ 0x28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40021000 	.word	0x40021000
 8006d28:	40011800 	.word	0x40011800
 8006d2c:	40011000 	.word	0x40011000
 8006d30:	40010c00 	.word	0x40010c00
 8006d34:	40010800 	.word	0x40010800

08006d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d3c:	f000 fe84 	bl	8007a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d40:	f000 f814 	bl	8006d6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d44:	f000 fa48 	bl	80071d8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8006d48:	f000 f8f2 	bl	8006f30 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8006d4c:	f000 fa16 	bl	800717c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8006d50:	f000 f872 	bl	8006e38 <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 8006d54:	f000 f928 	bl	8006fa8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8006d58:	f000 f9b4 	bl	80070c4 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8006d5c:	f000 f8b4 	bl	8006ec8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
	IncializaSistema();
 8006d60:	f7ff fe22 	bl	80069a8 <_Z16IncializaSistemav>
	EjecutaSistema();
 8006d64:	f7ff fe62 	bl	8006a2c <_Z14EjecutaSistemav>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <main+0x30>

08006d6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b094      	sub	sp, #80	@ 0x50
 8006d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d76:	2228      	movs	r2, #40	@ 0x28
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f005 fb21 	bl	800c3c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	60da      	str	r2, [r3, #12]
 8006d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d90:	1d3b      	adds	r3, r7, #4
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	605a      	str	r2, [r3, #4]
 8006d98:	609a      	str	r2, [r3, #8]
 8006d9a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006da0:	2301      	movs	r3, #1
 8006da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006da4:	2310      	movs	r3, #16
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006da8:	2302      	movs	r3, #2
 8006daa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8006dac:	2300      	movs	r3, #0
 8006dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8006db0:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8006db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006db6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 fd24 	bl	8009808 <HAL_RCC_OscConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2301      	movne	r3, #1
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8006dd0:	f000 faf2 	bl	80073b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dd4:	230f      	movs	r3, #15
 8006dd6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006de4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006de6:	2300      	movs	r3, #0
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006dea:	f107 0314 	add.w	r3, r7, #20
 8006dee:	2101      	movs	r1, #1
 8006df0:	4618      	mov	r0, r3
 8006df2:	f002 ff8b 	bl	8009d0c <HAL_RCC_ClockConfig>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bf14      	ite	ne
 8006dfc:	2301      	movne	r3, #1
 8006dfe:	2300      	moveq	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8006e06:	f000 fad7 	bl	80073b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f003 f907 	bl	800a028 <HAL_RCCEx_PeriphCLKConfig>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf14      	ite	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	2300      	moveq	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8006e2a:	f000 fac5 	bl	80073b8 <Error_Handler>
  }
}
 8006e2e:	bf00      	nop
 8006e30:	3750      	adds	r7, #80	@ 0x50
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006e48:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec4 <_ZL12MX_ADC1_Initv+0x8c>)
 8006e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006e54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006e5a:	4b19      	ldr	r3, [pc, #100]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e60:	4b17      	ldr	r3, [pc, #92]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8006e66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e68:	4b15      	ldr	r3, [pc, #84]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8006e6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e74:	4812      	ldr	r0, [pc, #72]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006e76:	f000 fe6d 	bl	8007b54 <HAL_ADC_Init>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf14      	ite	ne
 8006e80:	2301      	movne	r3, #1
 8006e82:	2300      	moveq	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8006e8a:	f000 fa95 	bl	80073b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e92:	2301      	movs	r3, #1
 8006e94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4808      	ldr	r0, [pc, #32]	@ (8006ec0 <_ZL12MX_ADC1_Initv+0x88>)
 8006ea0:	f000 ffea 	bl	8007e78 <HAL_ADC_ConfigChannel>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bf14      	ite	ne
 8006eaa:	2301      	movne	r3, #1
 8006eac:	2300      	moveq	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8006eb4:	f000 fa80 	bl	80073b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	2000021c 	.word	0x2000021c
 8006ec4:	40012400 	.word	0x40012400

08006ec8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ecc:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006ece:	4a16      	ldr	r2, [pc, #88]	@ (8006f28 <_ZL12MX_I2C1_Initv+0x60>)
 8006ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006ed2:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006ed4:	4a15      	ldr	r2, [pc, #84]	@ (8006f2c <_ZL12MX_I2C1_Initv+0x64>)
 8006ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ed8:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006ede:	4b11      	ldr	r3, [pc, #68]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006ee6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006eec:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006efe:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f04:	4807      	ldr	r0, [pc, #28]	@ (8006f24 <_ZL12MX_I2C1_Initv+0x5c>)
 8006f06:	f001 fc25 	bl	8008754 <HAL_I2C_Init>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8006f1a:	f000 fa4d 	bl	80073b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006f1e:	bf00      	nop
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	2000024c 	.word	0x2000024c
 8006f28:	40005400 	.word	0x40005400
 8006f2c:	000186a0 	.word	0x000186a0

08006f30 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006f34:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f36:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa4 <_ZL12MX_SPI1_Initv+0x74>)
 8006f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f3a:	4b19      	ldr	r3, [pc, #100]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f42:	4b17      	ldr	r3, [pc, #92]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f48:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f4e:	4b14      	ldr	r3, [pc, #80]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f54:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f5a:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f62:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f68:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f74:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006f7a:	4b09      	ldr	r3, [pc, #36]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f80:	4807      	ldr	r0, [pc, #28]	@ (8006fa0 <_ZL12MX_SPI1_Initv+0x70>)
 8006f82:	f003 f907 	bl	800a194 <HAL_SPI_Init>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf14      	ite	ne
 8006f8c:	2301      	movne	r3, #1
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8006f96:	f000 fa0f 	bl	80073b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f9a:	bf00      	nop
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200002a0 	.word	0x200002a0
 8006fa4:	40013000 	.word	0x40013000

08006fa8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08e      	sub	sp, #56	@ 0x38
 8006fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
 8006fb8:	609a      	str	r2, [r3, #8]
 8006fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fbc:	f107 0320 	add.w	r3, r7, #32
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006fc6:	1d3b      	adds	r3, r7, #4
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	605a      	str	r2, [r3, #4]
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	611a      	str	r2, [r3, #16]
 8006fd4:	615a      	str	r2, [r3, #20]
 8006fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006fd8:	4b39      	ldr	r3, [pc, #228]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8006fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006fde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006fe0:	4b37      	ldr	r3, [pc, #220]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fe6:	4b36      	ldr	r3, [pc, #216]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006fec:	4b34      	ldr	r3, [pc, #208]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8006fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ff4:	4b32      	ldr	r3, [pc, #200]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006ffa:	4b31      	ldr	r3, [pc, #196]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8006ffc:	2280      	movs	r2, #128	@ 0x80
 8006ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007000:	482f      	ldr	r0, [pc, #188]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8007002:	f003 fb35 	bl	800a670 <HAL_TIM_Base_Init>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	bf14      	ite	ne
 800700c:	2301      	movne	r3, #1
 800700e:	2300      	moveq	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8007016:	f000 f9cf 	bl	80073b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800701a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800701e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007020:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007024:	4619      	mov	r1, r3
 8007026:	4826      	ldr	r0, [pc, #152]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8007028:	f003 fe88 	bl	800ad3c <HAL_TIM_ConfigClockSource>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf14      	ite	ne
 8007032:	2301      	movne	r3, #1
 8007034:	2300      	moveq	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 800703c:	f000 f9bc 	bl	80073b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007040:	481f      	ldr	r0, [pc, #124]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 8007042:	f003 fbb7 	bl	800a7b4 <HAL_TIM_PWM_Init>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8007056:	f000 f9af 	bl	80073b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800705a:	2300      	movs	r3, #0
 800705c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800705e:	2300      	movs	r3, #0
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007062:	f107 0320 	add.w	r3, r7, #32
 8007066:	4619      	mov	r1, r3
 8007068:	4815      	ldr	r0, [pc, #84]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 800706a:	f004 f9f7 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800707e:	f000 f99b 	bl	80073b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007082:	2360      	movs	r3, #96	@ 0x60
 8007084:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	2200      	movs	r2, #0
 8007096:	4619      	mov	r1, r3
 8007098:	4809      	ldr	r0, [pc, #36]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 800709a:	f003 fd8d 	bl	800abb8 <HAL_TIM_PWM_ConfigChannel>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bf14      	ite	ne
 80070a4:	2301      	movne	r3, #1
 80070a6:	2300      	moveq	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80070ae:	f000 f983 	bl	80073b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80070b2:	4803      	ldr	r0, [pc, #12]	@ (80070c0 <_ZL12MX_TIM2_Initv+0x118>)
 80070b4:	f000 fae6 	bl	8007684 <HAL_TIM_MspPostInit>

}
 80070b8:	bf00      	nop
 80070ba:	3738      	adds	r7, #56	@ 0x38
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	200002f8 	.word	0x200002f8

080070c4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070ca:	f107 0308 	add.w	r3, r7, #8
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	605a      	str	r2, [r3, #4]
 80070d4:	609a      	str	r2, [r3, #8]
 80070d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070d8:	463b      	mov	r3, r7
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80070e0:	4b24      	ldr	r3, [pc, #144]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 80070e2:	4a25      	ldr	r2, [pc, #148]	@ (8007178 <_ZL12MX_TIM3_Initv+0xb4>)
 80070e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80070e6:	4b23      	ldr	r3, [pc, #140]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070ec:	4b21      	ldr	r3, [pc, #132]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80070f2:	4b20      	ldr	r3, [pc, #128]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 80070f4:	2264      	movs	r2, #100	@ 0x64
 80070f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 8007100:	2200      	movs	r2, #0
 8007102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007104:	481b      	ldr	r0, [pc, #108]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 8007106:	f003 fab3 	bl	800a670 <HAL_TIM_Base_Init>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <_ZL12MX_TIM3_Initv+0x5a>
  {
    Error_Handler();
 800711a:	f000 f94d 	bl	80073b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800711e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4619      	mov	r1, r3
 800712a:	4812      	ldr	r0, [pc, #72]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 800712c:	f003 fe06 	bl	800ad3c <HAL_TIM_ConfigClockSource>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <_ZL12MX_TIM3_Initv+0x80>
  {
    Error_Handler();
 8007140:	f000 f93a 	bl	80073b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007148:	2300      	movs	r3, #0
 800714a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800714c:	463b      	mov	r3, r7
 800714e:	4619      	mov	r1, r3
 8007150:	4808      	ldr	r0, [pc, #32]	@ (8007174 <_ZL12MX_TIM3_Initv+0xb0>)
 8007152:	f004 f983 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <_ZL12MX_TIM3_Initv+0xa6>
  {
    Error_Handler();
 8007166:	f000 f927 	bl	80073b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800716a:	bf00      	nop
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20000340 	.word	0x20000340
 8007178:	40000400 	.word	0x40000400

0800717c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007180:	4b13      	ldr	r3, [pc, #76]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007182:	4a14      	ldr	r2, [pc, #80]	@ (80071d4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8007184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007186:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800718c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800718e:	4b10      	ldr	r3, [pc, #64]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007190:	2200      	movs	r2, #0
 8007192:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007194:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007196:	2200      	movs	r2, #0
 8007198:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800719c:	2200      	movs	r2, #0
 800719e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80071a2:	220c      	movs	r2, #12
 80071a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071a6:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80071ac:	4b08      	ldr	r3, [pc, #32]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80071b2:	4807      	ldr	r0, [pc, #28]	@ (80071d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80071b4:	f004 f9c2 	bl	800b53c <HAL_UART_Init>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf14      	ite	ne
 80071be:	2301      	movne	r3, #1
 80071c0:	2300      	moveq	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80071c8:	f000 f8f6 	bl	80073b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80071cc:	bf00      	nop
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000388 	.word	0x20000388
 80071d4:	40013800 	.word	0x40013800

080071d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071de:	f107 0310 	add.w	r3, r7, #16
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	609a      	str	r2, [r3, #8]
 80071ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071ec:	4b6c      	ldr	r3, [pc, #432]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	4a6b      	ldr	r2, [pc, #428]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 80071f2:	f043 0310 	orr.w	r3, r3, #16
 80071f6:	6193      	str	r3, [r2, #24]
 80071f8:	4b69      	ldr	r3, [pc, #420]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007204:	4b66      	ldr	r3, [pc, #408]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	4a65      	ldr	r2, [pc, #404]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800720a:	f043 0320 	orr.w	r3, r3, #32
 800720e:	6193      	str	r3, [r2, #24]
 8007210:	4b63      	ldr	r3, [pc, #396]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800721c:	4b60      	ldr	r3, [pc, #384]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	4a5f      	ldr	r2, [pc, #380]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007222:	f043 0304 	orr.w	r3, r3, #4
 8007226:	6193      	str	r3, [r2, #24]
 8007228:	4b5d      	ldr	r3, [pc, #372]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007234:	4b5a      	ldr	r3, [pc, #360]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	4a59      	ldr	r2, [pc, #356]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800723a:	f043 0308 	orr.w	r3, r3, #8
 800723e:	6193      	str	r3, [r2, #24]
 8007240:	4b57      	ldr	r3, [pc, #348]	@ (80073a0 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800724c:	2200      	movs	r2, #0
 800724e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007252:	4854      	ldr	r0, [pc, #336]	@ (80073a4 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007254:	f001 fa4d 	bl	80086f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8007258:	2200      	movs	r2, #0
 800725a:	2106      	movs	r1, #6
 800725c:	4852      	ldr	r0, [pc, #328]	@ (80073a8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800725e:	f001 fa48 	bl	80086f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8007262:	2200      	movs	r2, #0
 8007264:	2123      	movs	r1, #35	@ 0x23
 8007266:	4851      	ldr	r0, [pc, #324]	@ (80073ac <_ZL12MX_GPIO_Initv+0x1d4>)
 8007268:	f001 fa43 	bl	80086f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800726c:	2201      	movs	r2, #1
 800726e:	2108      	movs	r1, #8
 8007270:	484e      	ldr	r0, [pc, #312]	@ (80073ac <_ZL12MX_GPIO_Initv+0x1d4>)
 8007272:	f001 fa3e 	bl	80086f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800727a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007280:	2300      	movs	r3, #0
 8007282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007284:	2302      	movs	r3, #2
 8007286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007288:	f107 0310 	add.w	r3, r7, #16
 800728c:	4619      	mov	r1, r3
 800728e:	4845      	ldr	r0, [pc, #276]	@ (80073a4 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007290:	f001 f894 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8007294:	f240 1301 	movw	r3, #257	@ 0x101
 8007298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	4619      	mov	r1, r3
 80072a8:	483f      	ldr	r0, [pc, #252]	@ (80073a8 <_ZL12MX_GPIO_Initv+0x1d0>)
 80072aa:	f001 f887 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80072ae:	2306      	movs	r3, #6
 80072b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ba:	2302      	movs	r3, #2
 80072bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072be:	f107 0310 	add.w	r3, r7, #16
 80072c2:	4619      	mov	r1, r3
 80072c4:	4838      	ldr	r0, [pc, #224]	@ (80073a8 <_ZL12MX_GPIO_Initv+0x1d0>)
 80072c6:	f001 f879 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80072ca:	2310      	movs	r3, #16
 80072cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072ce:	4b38      	ldr	r3, [pc, #224]	@ (80073b0 <_ZL12MX_GPIO_Initv+0x1d8>)
 80072d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072d6:	f107 0310 	add.w	r3, r7, #16
 80072da:	4619      	mov	r1, r3
 80072dc:	4832      	ldr	r0, [pc, #200]	@ (80073a8 <_ZL12MX_GPIO_Initv+0x1d0>)
 80072de:	f001 f86d 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80072e2:	2340      	movs	r3, #64	@ 0x40
 80072e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80072e6:	4b33      	ldr	r3, [pc, #204]	@ (80073b4 <_ZL12MX_GPIO_Initv+0x1dc>)
 80072e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ee:	f107 0310 	add.w	r3, r7, #16
 80072f2:	4619      	mov	r1, r3
 80072f4:	482c      	ldr	r0, [pc, #176]	@ (80073a8 <_ZL12MX_GPIO_Initv+0x1d0>)
 80072f6:	f001 f861 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5;
 80072fa:	2323      	movs	r3, #35	@ 0x23
 80072fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007302:	2301      	movs	r3, #1
 8007304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007306:	2302      	movs	r3, #2
 8007308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800730a:	f107 0310 	add.w	r3, r7, #16
 800730e:	4619      	mov	r1, r3
 8007310:	4826      	ldr	r0, [pc, #152]	@ (80073ac <_ZL12MX_GPIO_Initv+0x1d4>)
 8007312:	f001 f853 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_8;
 8007316:	f44f 430d 	mov.w	r3, #36096	@ 0x8d00
 800731a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800731c:	4b25      	ldr	r3, [pc, #148]	@ (80073b4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800731e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007324:	f107 0310 	add.w	r3, r7, #16
 8007328:	4619      	mov	r1, r3
 800732a:	4820      	ldr	r0, [pc, #128]	@ (80073ac <_ZL12MX_GPIO_Initv+0x1d4>)
 800732c:	f001 f846 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007330:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800733a:	2301      	movs	r3, #1
 800733c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800733e:	f107 0310 	add.w	r3, r7, #16
 8007342:	4619      	mov	r1, r3
 8007344:	4819      	ldr	r0, [pc, #100]	@ (80073ac <_ZL12MX_GPIO_Initv+0x1d4>)
 8007346:	f001 f839 	bl	80083bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800734a:	2308      	movs	r3, #8
 800734c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800734e:	2301      	movs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007352:	2300      	movs	r3, #0
 8007354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007356:	2302      	movs	r3, #2
 8007358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800735a:	f107 0310 	add.w	r3, r7, #16
 800735e:	4619      	mov	r1, r3
 8007360:	4812      	ldr	r0, [pc, #72]	@ (80073ac <_ZL12MX_GPIO_Initv+0x1d4>)
 8007362:	f001 f82b 	bl	80083bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	200a      	movs	r0, #10
 800736c:	f000 ffef 	bl	800834e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007370:	200a      	movs	r0, #10
 8007372:	f001 f808 	bl	8008386 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	2017      	movs	r0, #23
 800737c:	f000 ffe7 	bl	800834e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007380:	2017      	movs	r0, #23
 8007382:	f001 f800 	bl	8008386 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	2028      	movs	r0, #40	@ 0x28
 800738c:	f000 ffdf 	bl	800834e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007390:	2028      	movs	r0, #40	@ 0x28
 8007392:	f000 fff8 	bl	8008386 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007396:	bf00      	nop
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40021000 	.word	0x40021000
 80073a4:	40011000 	.word	0x40011000
 80073a8:	40010800 	.word	0x40010800
 80073ac:	40010c00 	.word	0x40010c00
 80073b0:	10110000 	.word	0x10110000
 80073b4:	10310000 	.word	0x10310000

080073b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073bc:	b672      	cpsid	i
}
 80073be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80073c0:	bf00      	nop
 80073c2:	e7fd      	b.n	80073c0 <Error_Handler+0x8>

080073c4 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 80073c8:	4b17      	ldr	r3, [pc, #92]	@ (8007428 <SPI1_Init+0x64>)
 80073ca:	4a18      	ldr	r2, [pc, #96]	@ (800742c <SPI1_Init+0x68>)
 80073cc:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 80073ce:	4b16      	ldr	r3, [pc, #88]	@ (8007428 <SPI1_Init+0x64>)
 80073d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80073d4:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80073d6:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <SPI1_Init+0x64>)
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80073dc:	4b12      	ldr	r3, [pc, #72]	@ (8007428 <SPI1_Init+0x64>)
 80073de:	2200      	movs	r2, #0
 80073e0:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073e2:	4b11      	ldr	r3, [pc, #68]	@ (8007428 <SPI1_Init+0x64>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007428 <SPI1_Init+0x64>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 80073ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <SPI1_Init+0x64>)
 80073f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073f4:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <SPI1_Init+0x64>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <SPI1_Init+0x64>)
 80073fe:	2200      	movs	r2, #0
 8007400:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <SPI1_Init+0x64>)
 8007404:	2200      	movs	r2, #0
 8007406:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007408:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <SPI1_Init+0x64>)
 800740a:	2200      	movs	r2, #0
 800740c:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 800740e:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <SPI1_Init+0x64>)
 8007410:	2207      	movs	r2, #7
 8007412:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 8007414:	4804      	ldr	r0, [pc, #16]	@ (8007428 <SPI1_Init+0x64>)
 8007416:	f002 febd 	bl	800a194 <HAL_SPI_Init>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <SPI1_Init+0x60>
  {
    Error_Handler();
 8007420:	f7ff ffca 	bl	80073b8 <Error_Handler>
  }

}
 8007424:	bf00      	nop
 8007426:	bd80      	pop	{r7, pc}
 8007428:	200003d0 	.word	0x200003d0
 800742c:	40013000 	.word	0x40013000

08007430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007436:	4b15      	ldr	r3, [pc, #84]	@ (800748c <HAL_MspInit+0x5c>)
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	4a14      	ldr	r2, [pc, #80]	@ (800748c <HAL_MspInit+0x5c>)
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	6193      	str	r3, [r2, #24]
 8007442:	4b12      	ldr	r3, [pc, #72]	@ (800748c <HAL_MspInit+0x5c>)
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	60bb      	str	r3, [r7, #8]
 800744c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800744e:	4b0f      	ldr	r3, [pc, #60]	@ (800748c <HAL_MspInit+0x5c>)
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	4a0e      	ldr	r2, [pc, #56]	@ (800748c <HAL_MspInit+0x5c>)
 8007454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007458:	61d3      	str	r3, [r2, #28]
 800745a:	4b0c      	ldr	r3, [pc, #48]	@ (800748c <HAL_MspInit+0x5c>)
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007466:	4b0a      	ldr	r3, [pc, #40]	@ (8007490 <HAL_MspInit+0x60>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	4a04      	ldr	r2, [pc, #16]	@ (8007490 <HAL_MspInit+0x60>)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr
 800748c:	40021000 	.word	0x40021000
 8007490:	40010000 	.word	0x40010000

08007494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749c:	f107 0310 	add.w	r3, r7, #16
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	605a      	str	r2, [r3, #4]
 80074a6:	609a      	str	r2, [r3, #8]
 80074a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a14      	ldr	r2, [pc, #80]	@ (8007500 <HAL_ADC_MspInit+0x6c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d121      	bne.n	80074f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80074b4:	4b13      	ldr	r3, [pc, #76]	@ (8007504 <HAL_ADC_MspInit+0x70>)
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	4a12      	ldr	r2, [pc, #72]	@ (8007504 <HAL_ADC_MspInit+0x70>)
 80074ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074be:	6193      	str	r3, [r2, #24]
 80074c0:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <HAL_ADC_MspInit+0x70>)
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <HAL_ADC_MspInit+0x70>)
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <HAL_ADC_MspInit+0x70>)
 80074d2:	f043 0304 	orr.w	r3, r3, #4
 80074d6:	6193      	str	r3, [r2, #24]
 80074d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007504 <HAL_ADC_MspInit+0x70>)
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074e4:	2308      	movs	r3, #8
 80074e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074e8:	2303      	movs	r3, #3
 80074ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ec:	f107 0310 	add.w	r3, r7, #16
 80074f0:	4619      	mov	r1, r3
 80074f2:	4805      	ldr	r0, [pc, #20]	@ (8007508 <HAL_ADC_MspInit+0x74>)
 80074f4:	f000 ff62 	bl	80083bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80074f8:	bf00      	nop
 80074fa:	3720      	adds	r7, #32
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40012400 	.word	0x40012400
 8007504:	40021000 	.word	0x40021000
 8007508:	40010800 	.word	0x40010800

0800750c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007514:	f107 0310 	add.w	r3, r7, #16
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a15      	ldr	r2, [pc, #84]	@ (800757c <HAL_I2C_MspInit+0x70>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d123      	bne.n	8007574 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800752c:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <HAL_I2C_MspInit+0x74>)
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	4a13      	ldr	r2, [pc, #76]	@ (8007580 <HAL_I2C_MspInit+0x74>)
 8007532:	f043 0308 	orr.w	r3, r3, #8
 8007536:	6193      	str	r3, [r2, #24]
 8007538:	4b11      	ldr	r3, [pc, #68]	@ (8007580 <HAL_I2C_MspInit+0x74>)
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007544:	23c0      	movs	r3, #192	@ 0xc0
 8007546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007548:	2312      	movs	r3, #18
 800754a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800754c:	2303      	movs	r3, #3
 800754e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007550:	f107 0310 	add.w	r3, r7, #16
 8007554:	4619      	mov	r1, r3
 8007556:	480b      	ldr	r0, [pc, #44]	@ (8007584 <HAL_I2C_MspInit+0x78>)
 8007558:	f000 ff30 	bl	80083bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800755c:	4b08      	ldr	r3, [pc, #32]	@ (8007580 <HAL_I2C_MspInit+0x74>)
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	4a07      	ldr	r2, [pc, #28]	@ (8007580 <HAL_I2C_MspInit+0x74>)
 8007562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007566:	61d3      	str	r3, [r2, #28]
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <HAL_I2C_MspInit+0x74>)
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007574:	bf00      	nop
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40005400 	.word	0x40005400
 8007580:	40021000 	.word	0x40021000
 8007584:	40010c00 	.word	0x40010c00

08007588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007590:	f107 0310 	add.w	r3, r7, #16
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	609a      	str	r2, [r3, #8]
 800759c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a15      	ldr	r2, [pc, #84]	@ (80075f8 <HAL_SPI_MspInit+0x70>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d123      	bne.n	80075f0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80075a8:	4b14      	ldr	r3, [pc, #80]	@ (80075fc <HAL_SPI_MspInit+0x74>)
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	4a13      	ldr	r2, [pc, #76]	@ (80075fc <HAL_SPI_MspInit+0x74>)
 80075ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075b2:	6193      	str	r3, [r2, #24]
 80075b4:	4b11      	ldr	r3, [pc, #68]	@ (80075fc <HAL_SPI_MspInit+0x74>)
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075c0:	4b0e      	ldr	r3, [pc, #56]	@ (80075fc <HAL_SPI_MspInit+0x74>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	4a0d      	ldr	r2, [pc, #52]	@ (80075fc <HAL_SPI_MspInit+0x74>)
 80075c6:	f043 0304 	orr.w	r3, r3, #4
 80075ca:	6193      	str	r3, [r2, #24]
 80075cc:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <HAL_SPI_MspInit+0x74>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80075d8:	23a0      	movs	r3, #160	@ 0xa0
 80075da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075dc:	2302      	movs	r3, #2
 80075de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075e0:	2303      	movs	r3, #3
 80075e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e4:	f107 0310 	add.w	r3, r7, #16
 80075e8:	4619      	mov	r1, r3
 80075ea:	4805      	ldr	r0, [pc, #20]	@ (8007600 <HAL_SPI_MspInit+0x78>)
 80075ec:	f000 fee6 	bl	80083bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80075f0:	bf00      	nop
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40013000 	.word	0x40013000
 80075fc:	40021000 	.word	0x40021000
 8007600:	40010800 	.word	0x40010800

08007604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007614:	d114      	bne.n	8007640 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007616:	4b19      	ldr	r3, [pc, #100]	@ (800767c <HAL_TIM_Base_MspInit+0x78>)
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	4a18      	ldr	r2, [pc, #96]	@ (800767c <HAL_TIM_Base_MspInit+0x78>)
 800761c:	f043 0301 	orr.w	r3, r3, #1
 8007620:	61d3      	str	r3, [r2, #28]
 8007622:	4b16      	ldr	r3, [pc, #88]	@ (800767c <HAL_TIM_Base_MspInit+0x78>)
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	201c      	movs	r0, #28
 8007634:	f000 fe8b 	bl	800834e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007638:	201c      	movs	r0, #28
 800763a:	f000 fea4 	bl	8008386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800763e:	e018      	b.n	8007672 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a0e      	ldr	r2, [pc, #56]	@ (8007680 <HAL_TIM_Base_MspInit+0x7c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d113      	bne.n	8007672 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800764a:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <HAL_TIM_Base_MspInit+0x78>)
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	4a0b      	ldr	r2, [pc, #44]	@ (800767c <HAL_TIM_Base_MspInit+0x78>)
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	61d3      	str	r3, [r2, #28]
 8007656:	4b09      	ldr	r3, [pc, #36]	@ (800767c <HAL_TIM_Base_MspInit+0x78>)
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	60bb      	str	r3, [r7, #8]
 8007660:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	201d      	movs	r0, #29
 8007668:	f000 fe71 	bl	800834e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800766c:	201d      	movs	r0, #29
 800766e:	f000 fe8a 	bl	8008386 <HAL_NVIC_EnableIRQ>
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40021000 	.word	0x40021000
 8007680:	40000400 	.word	0x40000400

08007684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a2:	d12a      	bne.n	80076fa <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a4:	4b17      	ldr	r3, [pc, #92]	@ (8007704 <HAL_TIM_MspPostInit+0x80>)
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	4a16      	ldr	r2, [pc, #88]	@ (8007704 <HAL_TIM_MspPostInit+0x80>)
 80076aa:	f043 0304 	orr.w	r3, r3, #4
 80076ae:	6193      	str	r3, [r2, #24]
 80076b0:	4b14      	ldr	r3, [pc, #80]	@ (8007704 <HAL_TIM_MspPostInit+0x80>)
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	60bb      	str	r3, [r7, #8]
 80076ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80076bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c2:	2302      	movs	r3, #2
 80076c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c6:	2302      	movs	r3, #2
 80076c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ca:	f107 030c 	add.w	r3, r7, #12
 80076ce:	4619      	mov	r1, r3
 80076d0:	480d      	ldr	r0, [pc, #52]	@ (8007708 <HAL_TIM_MspPostInit+0x84>)
 80076d2:	f000 fe73 	bl	80083bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80076d6:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <HAL_TIM_MspPostInit+0x88>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	4a05      	ldr	r2, [pc, #20]	@ (800770c <HAL_TIM_MspPostInit+0x88>)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80076fa:	bf00      	nop
 80076fc:	3720      	adds	r7, #32
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40021000 	.word	0x40021000
 8007708:	40010800 	.word	0x40010800
 800770c:	40010000 	.word	0x40010000

08007710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007718:	f107 0310 	add.w	r3, r7, #16
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <HAL_UART_MspInit+0x8c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d131      	bne.n	8007794 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007730:	4b1b      	ldr	r3, [pc, #108]	@ (80077a0 <HAL_UART_MspInit+0x90>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	4a1a      	ldr	r2, [pc, #104]	@ (80077a0 <HAL_UART_MspInit+0x90>)
 8007736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800773a:	6193      	str	r3, [r2, #24]
 800773c:	4b18      	ldr	r3, [pc, #96]	@ (80077a0 <HAL_UART_MspInit+0x90>)
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007748:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <HAL_UART_MspInit+0x90>)
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	4a14      	ldr	r2, [pc, #80]	@ (80077a0 <HAL_UART_MspInit+0x90>)
 800774e:	f043 0304 	orr.w	r3, r3, #4
 8007752:	6193      	str	r3, [r2, #24]
 8007754:	4b12      	ldr	r3, [pc, #72]	@ (80077a0 <HAL_UART_MspInit+0x90>)
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007766:	2302      	movs	r3, #2
 8007768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800776a:	2303      	movs	r3, #3
 800776c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800776e:	f107 0310 	add.w	r3, r7, #16
 8007772:	4619      	mov	r1, r3
 8007774:	480b      	ldr	r0, [pc, #44]	@ (80077a4 <HAL_UART_MspInit+0x94>)
 8007776:	f000 fe21 	bl	80083bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800777a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800777e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007788:	f107 0310 	add.w	r3, r7, #16
 800778c:	4619      	mov	r1, r3
 800778e:	4805      	ldr	r0, [pc, #20]	@ (80077a4 <HAL_UART_MspInit+0x94>)
 8007790:	f000 fe14 	bl	80083bc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007794:	bf00      	nop
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40013800 	.word	0x40013800
 80077a0:	40021000 	.word	0x40021000
 80077a4:	40010800 	.word	0x40010800

080077a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80077ac:	bf00      	nop
 80077ae:	e7fd      	b.n	80077ac <NMI_Handler+0x4>

080077b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <HardFault_Handler+0x4>

080077b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <MemManage_Handler+0x4>

080077c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <BusFault_Handler+0x4>

080077c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <UsageFault_Handler+0x4>

080077d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077f8:	f000 f96c 	bl	8007ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}

08007800 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007804:	2010      	movs	r0, #16
 8007806:	f000 ff8d 	bl	8008724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800780a:	bf00      	nop
 800780c:	bd80      	pop	{r7, pc}

0800780e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007812:	2040      	movs	r0, #64	@ 0x40
 8007814:	f000 ff86 	bl	8008724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007818:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800781c:	f000 ff82 	bl	8008724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007820:	bf00      	nop
 8007822:	bd80      	pop	{r7, pc}

08007824 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007828:	4802      	ldr	r0, [pc, #8]	@ (8007834 <TIM2_IRQHandler+0x10>)
 800782a:	f003 f8bd 	bl	800a9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800782e:	bf00      	nop
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	200002f8 	.word	0x200002f8

08007838 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800783c:	4802      	ldr	r0, [pc, #8]	@ (8007848 <TIM3_IRQHandler+0x10>)
 800783e:	f003 f8b3 	bl	800a9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000340 	.word	0x20000340

0800784c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007850:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007854:	f000 ff66 	bl	8008724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007858:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800785c:	f000 ff62 	bl	8008724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007860:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007864:	f000 ff5e 	bl	8008724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007868:	bf00      	nop
 800786a:	bd80      	pop	{r7, pc}

0800786c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  return 1;
 8007870:	2301      	movs	r3, #1
}
 8007872:	4618      	mov	r0, r3
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr

0800787a <_kill>:

int _kill(int pid, int sig)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007884:	f004 fe44 	bl	800c510 <__errno>
 8007888:	4603      	mov	r3, r0
 800788a:	2216      	movs	r2, #22
 800788c:	601a      	str	r2, [r3, #0]
  return -1;
 800788e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <_exit>:

void _exit (int status)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80078a2:	f04f 31ff 	mov.w	r1, #4294967295
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff ffe7 	bl	800787a <_kill>
  while (1) {}    /* Make sure we hang here */
 80078ac:	bf00      	nop
 80078ae:	e7fd      	b.n	80078ac <_exit+0x12>

080078b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e00a      	b.n	80078d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80078c2:	f3af 8000 	nop.w
 80078c6:	4601      	mov	r1, r0
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	60ba      	str	r2, [r7, #8]
 80078ce:	b2ca      	uxtb	r2, r1
 80078d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	3301      	adds	r3, #1
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	dbf0      	blt.n	80078c2 <_read+0x12>
  }

  return len;
 80078e0:	687b      	ldr	r3, [r7, #4]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b086      	sub	sp, #24
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e009      	b.n	8007910 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	60ba      	str	r2, [r7, #8]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	4618      	mov	r0, r3
 8007906:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	3301      	adds	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	dbf1      	blt.n	80078fc <_write+0x12>
  }
  return len;
 8007918:	687b      	ldr	r3, [r7, #4]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <_close>:

int _close(int file)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007948:	605a      	str	r2, [r3, #4]
  return 0;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr

08007956 <_isatty>:

int _isatty(int file)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800795e:	2301      	movs	r3, #1
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr

0800796a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
	...

08007984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800798c:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <_sbrk+0x5c>)
 800798e:	4b15      	ldr	r3, [pc, #84]	@ (80079e4 <_sbrk+0x60>)
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007998:	4b13      	ldr	r3, [pc, #76]	@ (80079e8 <_sbrk+0x64>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079a0:	4b11      	ldr	r3, [pc, #68]	@ (80079e8 <_sbrk+0x64>)
 80079a2:	4a12      	ldr	r2, [pc, #72]	@ (80079ec <_sbrk+0x68>)
 80079a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079a6:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <_sbrk+0x64>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d207      	bcs.n	80079c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079b4:	f004 fdac 	bl	800c510 <__errno>
 80079b8:	4603      	mov	r3, r0
 80079ba:	220c      	movs	r2, #12
 80079bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295
 80079c2:	e009      	b.n	80079d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079c4:	4b08      	ldr	r3, [pc, #32]	@ (80079e8 <_sbrk+0x64>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80079ca:	4b07      	ldr	r3, [pc, #28]	@ (80079e8 <_sbrk+0x64>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	4a05      	ldr	r2, [pc, #20]	@ (80079e8 <_sbrk+0x64>)
 80079d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80079d6:	68fb      	ldr	r3, [r7, #12]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20005000 	.word	0x20005000
 80079e4:	00000400 	.word	0x00000400
 80079e8:	20000428 	.word	0x20000428
 80079ec:	20000580 	.word	0x20000580

080079f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80079f4:	bf00      	nop
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80079fc:	f7ff fff8 	bl	80079f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a00:	480b      	ldr	r0, [pc, #44]	@ (8007a30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007a02:	490c      	ldr	r1, [pc, #48]	@ (8007a34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007a04:	4a0c      	ldr	r2, [pc, #48]	@ (8007a38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a08:	e002      	b.n	8007a10 <LoopCopyDataInit>

08007a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a0e:	3304      	adds	r3, #4

08007a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a14:	d3f9      	bcc.n	8007a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a16:	4a09      	ldr	r2, [pc, #36]	@ (8007a3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007a18:	4c09      	ldr	r4, [pc, #36]	@ (8007a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a1c:	e001      	b.n	8007a22 <LoopFillZerobss>

08007a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a20:	3204      	adds	r2, #4

08007a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a24:	d3fb      	bcc.n	8007a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007a26:	f004 fd79 	bl	800c51c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007a2a:	f7ff f985 	bl	8006d38 <main>
  bx lr
 8007a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8007a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a34:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8007a38:	0800f398 	.word	0x0800f398
  ldr r2, =_sbss
 8007a3c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8007a40:	20000580 	.word	0x20000580

08007a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a44:	e7fe      	b.n	8007a44 <ADC1_2_IRQHandler>
	...

08007a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a4c:	4b08      	ldr	r3, [pc, #32]	@ (8007a70 <HAL_Init+0x28>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a07      	ldr	r2, [pc, #28]	@ (8007a70 <HAL_Init+0x28>)
 8007a52:	f043 0310 	orr.w	r3, r3, #16
 8007a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a58:	2003      	movs	r0, #3
 8007a5a:	f000 fc6d 	bl	8008338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a5e:	200f      	movs	r0, #15
 8007a60:	f000 f808 	bl	8007a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a64:	f7ff fce4 	bl	8007430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40022000 	.word	0x40022000

08007a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a7c:	4b12      	ldr	r3, [pc, #72]	@ (8007ac8 <HAL_InitTick+0x54>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <HAL_InitTick+0x58>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fc85 	bl	80083a2 <HAL_SYSTICK_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e00e      	b.n	8007ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b0f      	cmp	r3, #15
 8007aa6:	d80a      	bhi.n	8007abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	f000 fc4d 	bl	800834e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ab4:	4a06      	ldr	r2, [pc, #24]	@ (8007ad0 <HAL_InitTick+0x5c>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000004 	.word	0x20000004
 8007acc:	2000000c 	.word	0x2000000c
 8007ad0:	20000008 	.word	0x20000008

08007ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <HAL_IncTick+0x1c>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <HAL_IncTick+0x20>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	4a03      	ldr	r2, [pc, #12]	@ (8007af4 <HAL_IncTick+0x20>)
 8007ae6:	6013      	str	r3, [r2, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr
 8007af0:	2000000c 	.word	0x2000000c
 8007af4:	2000042c 	.word	0x2000042c

08007af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  return uwTick;
 8007afc:	4b02      	ldr	r3, [pc, #8]	@ (8007b08 <HAL_GetTick+0x10>)
 8007afe:	681b      	ldr	r3, [r3, #0]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr
 8007b08:	2000042c 	.word	0x2000042c

08007b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b14:	f7ff fff0 	bl	8007af8 <HAL_GetTick>
 8007b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d005      	beq.n	8007b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b26:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <HAL_Delay+0x44>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b32:	bf00      	nop
 8007b34:	f7ff ffe0 	bl	8007af8 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d8f7      	bhi.n	8007b34 <HAL_Delay+0x28>
  {
  }
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000000c 	.word	0x2000000c

08007b54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e0be      	b.n	8007cf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fc7e 	bl	8007494 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fabf 	bl	800811c <ADC_ConversionStop_Disable>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f040 8099 	bne.w	8007ce2 <HAL_ADC_Init+0x18e>
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 8095 	bne.w	8007ce2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007bc0:	f023 0302 	bic.w	r3, r3, #2
 8007bc4:	f043 0202 	orr.w	r2, r3, #2
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007bd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7b1b      	ldrb	r3, [r3, #12]
 8007bda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007bdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bec:	d003      	beq.n	8007bf6 <HAL_ADC_Init+0xa2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d102      	bne.n	8007bfc <HAL_ADC_Init+0xa8>
 8007bf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007bfa:	e000      	b.n	8007bfe <HAL_ADC_Init+0xaa>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	7d1b      	ldrb	r3, [r3, #20]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d119      	bne.n	8007c40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7b1b      	ldrb	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	035a      	lsls	r2, r3, #13
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	e00b      	b.n	8007c40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	f043 0220 	orr.w	r2, r3, #32
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	4b28      	ldr	r3, [pc, #160]	@ (8007cfc <HAL_ADC_Init+0x1a8>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	430b      	orrs	r3, r1
 8007c66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c70:	d003      	beq.n	8007c7a <HAL_ADC_Init+0x126>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d104      	bne.n	8007c84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	051b      	lsls	r3, r3, #20
 8007c82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	4b18      	ldr	r3, [pc, #96]	@ (8007d00 <HAL_ADC_Init+0x1ac>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb2:	f023 0303 	bic.w	r3, r3, #3
 8007cb6:	f043 0201 	orr.w	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007cbe:	e018      	b.n	8007cf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	f023 0312 	bic.w	r3, r3, #18
 8007cc8:	f043 0210 	orr.w	r2, r3, #16
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	f043 0201 	orr.w	r2, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007ce0:	e007      	b.n	8007cf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce6:	f043 0210 	orr.w	r2, r3, #16
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	ffe1f7fd 	.word	0xffe1f7fd
 8007d00:	ff1f0efe 	.word	0xff1f0efe

08007d04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_ADC_Start+0x1a>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e098      	b.n	8007e50 <HAL_ADC_Start+0x14c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f99e 	bl	8008068 <ADC_Enable>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 8087 	bne.w	8007e46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a41      	ldr	r2, [pc, #260]	@ (8007e58 <HAL_ADC_Start+0x154>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d105      	bne.n	8007d62 <HAL_ADC_Start+0x5e>
 8007d56:	4b41      	ldr	r3, [pc, #260]	@ (8007e5c <HAL_ADC_Start+0x158>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d115      	bne.n	8007d8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d026      	beq.n	8007dca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007d84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007d8c:	e01d      	b.n	8007dca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e5c <HAL_ADC_Start+0x158>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_ADC_Start+0xaa>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e58 <HAL_ADC_Start+0x154>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10d      	bne.n	8007dca <HAL_ADC_Start+0xc6>
 8007dae:	4b2b      	ldr	r3, [pc, #172]	@ (8007e5c <HAL_ADC_Start+0x158>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007dc2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d006      	beq.n	8007de4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	f023 0206 	bic.w	r2, r3, #6
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007de2:	e002      	b.n	8007dea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0202 	mvn.w	r2, #2
 8007dfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8007e06:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8007e0a:	d113      	bne.n	8007e34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007e10:	4a11      	ldr	r2, [pc, #68]	@ (8007e58 <HAL_ADC_Start+0x154>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d105      	bne.n	8007e22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007e16:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <HAL_ADC_Start+0x158>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d108      	bne.n	8007e34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8007e30:	609a      	str	r2, [r3, #8]
 8007e32:	e00c      	b.n	8007e4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007e42:	609a      	str	r2, [r3, #8]
 8007e44:	e003      	b.n	8007e4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40012800 	.word	0x40012800
 8007e5c:	40012400 	.word	0x40012400

08007e60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr

08007e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_ADC_ConfigChannel+0x20>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e0dc      	b.n	8008052 <HAL_ADC_ConfigChannel+0x1da>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b06      	cmp	r3, #6
 8007ea6:	d81c      	bhi.n	8007ee2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3b05      	subs	r3, #5
 8007eba:	221f      	movs	r2, #31
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	4019      	ands	r1, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3b05      	subs	r3, #5
 8007ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ee0:	e03c      	b.n	8007f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b0c      	cmp	r3, #12
 8007ee8:	d81c      	bhi.n	8007f24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	3b23      	subs	r3, #35	@ 0x23
 8007efc:	221f      	movs	r2, #31
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	43db      	mvns	r3, r3
 8007f04:	4019      	ands	r1, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	3b23      	subs	r3, #35	@ 0x23
 8007f16:	fa00 f203 	lsl.w	r2, r0, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f22:	e01b      	b.n	8007f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	3b41      	subs	r3, #65	@ 0x41
 8007f36:	221f      	movs	r2, #31
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	4019      	ands	r1, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3b41      	subs	r3, #65	@ 0x41
 8007f50:	fa00 f203 	lsl.w	r2, r0, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d91c      	bls.n	8007f9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68d9      	ldr	r1, [r3, #12]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	4413      	add	r3, r2
 8007f74:	3b1e      	subs	r3, #30
 8007f76:	2207      	movs	r2, #7
 8007f78:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	4019      	ands	r1, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	6898      	ldr	r0, [r3, #8]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3b1e      	subs	r3, #30
 8007f90:	fa00 f203 	lsl.w	r2, r0, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	60da      	str	r2, [r3, #12]
 8007f9c:	e019      	b.n	8007fd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6919      	ldr	r1, [r3, #16]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	4413      	add	r3, r2
 8007fae:	2207      	movs	r2, #7
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	4019      	ands	r1, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	6898      	ldr	r0, [r3, #8]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d003      	beq.n	8007fe2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007fde:	2b11      	cmp	r3, #17
 8007fe0:	d132      	bne.n	8008048 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800805c <HAL_ADC_ConfigChannel+0x1e4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d125      	bne.n	8008038 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d126      	bne.n	8008048 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008008:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b10      	cmp	r3, #16
 8008010:	d11a      	bne.n	8008048 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008012:	4b13      	ldr	r3, [pc, #76]	@ (8008060 <HAL_ADC_ConfigChannel+0x1e8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a13      	ldr	r2, [pc, #76]	@ (8008064 <HAL_ADC_ConfigChannel+0x1ec>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	0c9a      	lsrs	r2, r3, #18
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008028:	e002      	b.n	8008030 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	3b01      	subs	r3, #1
 800802e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1f9      	bne.n	800802a <HAL_ADC_ConfigChannel+0x1b2>
 8008036:	e007      	b.n	8008048 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803c:	f043 0220 	orr.w	r2, r3, #32
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr
 800805c:	40012400 	.word	0x40012400
 8008060:	20000004 	.word	0x20000004
 8008064:	431bde83 	.word	0x431bde83

08008068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b01      	cmp	r3, #1
 8008084:	d040      	beq.n	8008108 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008096:	4b1f      	ldr	r3, [pc, #124]	@ (8008114 <ADC_Enable+0xac>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1f      	ldr	r2, [pc, #124]	@ (8008118 <ADC_Enable+0xb0>)
 800809c:	fba2 2303 	umull	r2, r3, r2, r3
 80080a0:	0c9b      	lsrs	r3, r3, #18
 80080a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80080a4:	e002      	b.n	80080ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f9      	bne.n	80080a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80080b2:	f7ff fd21 	bl	8007af8 <HAL_GetTick>
 80080b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80080b8:	e01f      	b.n	80080fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80080ba:	f7ff fd1d 	bl	8007af8 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d918      	bls.n	80080fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d011      	beq.n	80080fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080da:	f043 0210 	orr.w	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e6:	f043 0201 	orr.w	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e007      	b.n	800810a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b01      	cmp	r3, #1
 8008106:	d1d8      	bne.n	80080ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000004 	.word	0x20000004
 8008118:	431bde83 	.word	0x431bde83

0800811c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b01      	cmp	r3, #1
 8008134:	d12e      	bne.n	8008194 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0201 	bic.w	r2, r2, #1
 8008144:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008146:	f7ff fcd7 	bl	8007af8 <HAL_GetTick>
 800814a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800814c:	e01b      	b.n	8008186 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800814e:	f7ff fcd3 	bl	8007af8 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d914      	bls.n	8008186 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b01      	cmp	r3, #1
 8008168:	d10d      	bne.n	8008186 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	f043 0210 	orr.w	r2, r3, #16
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	f043 0201 	orr.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e007      	b.n	8008196 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b01      	cmp	r3, #1
 8008192:	d0dc      	beq.n	800814e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <__NVIC_SetPriorityGrouping+0x44>)
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80081bc:	4013      	ands	r3, r2
 80081be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80081c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80081cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80081d2:	4a04      	ldr	r2, [pc, #16]	@ (80081e4 <__NVIC_SetPriorityGrouping+0x44>)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	60d3      	str	r3, [r2, #12]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	e000ed00 	.word	0xe000ed00

080081e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081ec:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <__NVIC_GetPriorityGrouping+0x18>)
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	0a1b      	lsrs	r3, r3, #8
 80081f2:	f003 0307 	and.w	r3, r3, #7
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	e000ed00 	.word	0xe000ed00

08008204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800820e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008212:	2b00      	cmp	r3, #0
 8008214:	db0b      	blt.n	800822e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	f003 021f 	and.w	r2, r3, #31
 800821c:	4906      	ldr	r1, [pc, #24]	@ (8008238 <__NVIC_EnableIRQ+0x34>)
 800821e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	2001      	movs	r0, #1
 8008226:	fa00 f202 	lsl.w	r2, r0, r2
 800822a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr
 8008238:	e000e100 	.word	0xe000e100

0800823c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824c:	2b00      	cmp	r3, #0
 800824e:	db0a      	blt.n	8008266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	490c      	ldr	r1, [pc, #48]	@ (8008288 <__NVIC_SetPriority+0x4c>)
 8008256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800825a:	0112      	lsls	r2, r2, #4
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	440b      	add	r3, r1
 8008260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008264:	e00a      	b.n	800827c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4908      	ldr	r1, [pc, #32]	@ (800828c <__NVIC_SetPriority+0x50>)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	3b04      	subs	r3, #4
 8008274:	0112      	lsls	r2, r2, #4
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	440b      	add	r3, r1
 800827a:	761a      	strb	r2, [r3, #24]
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	e000e100 	.word	0xe000e100
 800828c:	e000ed00 	.word	0xe000ed00

08008290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	@ 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f1c3 0307 	rsb	r3, r3, #7
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	bf28      	it	cs
 80082ae:	2304      	movcs	r3, #4
 80082b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	3304      	adds	r3, #4
 80082b6:	2b06      	cmp	r3, #6
 80082b8:	d902      	bls.n	80082c0 <NVIC_EncodePriority+0x30>
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3b03      	subs	r3, #3
 80082be:	e000      	b.n	80082c2 <NVIC_EncodePriority+0x32>
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	43da      	mvns	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	401a      	ands	r2, r3
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082d8:	f04f 31ff 	mov.w	r1, #4294967295
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	fa01 f303 	lsl.w	r3, r1, r3
 80082e2:	43d9      	mvns	r1, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082e8:	4313      	orrs	r3, r2
         );
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3724      	adds	r7, #36	@ 0x24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3b01      	subs	r3, #1
 8008300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008304:	d301      	bcc.n	800830a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008306:	2301      	movs	r3, #1
 8008308:	e00f      	b.n	800832a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800830a:	4a0a      	ldr	r2, [pc, #40]	@ (8008334 <SysTick_Config+0x40>)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3b01      	subs	r3, #1
 8008310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008312:	210f      	movs	r1, #15
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	f7ff ff90 	bl	800823c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800831c:	4b05      	ldr	r3, [pc, #20]	@ (8008334 <SysTick_Config+0x40>)
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008322:	4b04      	ldr	r3, [pc, #16]	@ (8008334 <SysTick_Config+0x40>)
 8008324:	2207      	movs	r2, #7
 8008326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	e000e010 	.word	0xe000e010

08008338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ff2d 	bl	80081a0 <__NVIC_SetPriorityGrouping>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	4603      	mov	r3, r0
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008360:	f7ff ff42 	bl	80081e8 <__NVIC_GetPriorityGrouping>
 8008364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	6978      	ldr	r0, [r7, #20]
 800836c:	f7ff ff90 	bl	8008290 <NVIC_EncodePriority>
 8008370:	4602      	mov	r2, r0
 8008372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff ff5f 	bl	800823c <__NVIC_SetPriority>
}
 800837e:	bf00      	nop
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	4603      	mov	r3, r0
 800838e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff ff35 	bl	8008204 <__NVIC_EnableIRQ>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff ffa2 	bl	80082f4 <SysTick_Config>
 80083b0:	4603      	mov	r3, r0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083bc:	b480      	push	{r7}
 80083be:	b08b      	sub	sp, #44	@ 0x2c
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80083ca:	2300      	movs	r3, #0
 80083cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083ce:	e169      	b.n	80086a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80083d0:	2201      	movs	r2, #1
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	fa02 f303 	lsl.w	r3, r2, r3
 80083d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	4013      	ands	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	f040 8158 	bne.w	800869e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	4a9a      	ldr	r2, [pc, #616]	@ (800865c <HAL_GPIO_Init+0x2a0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d05e      	beq.n	80084b6 <HAL_GPIO_Init+0xfa>
 80083f8:	4a98      	ldr	r2, [pc, #608]	@ (800865c <HAL_GPIO_Init+0x2a0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d875      	bhi.n	80084ea <HAL_GPIO_Init+0x12e>
 80083fe:	4a98      	ldr	r2, [pc, #608]	@ (8008660 <HAL_GPIO_Init+0x2a4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d058      	beq.n	80084b6 <HAL_GPIO_Init+0xfa>
 8008404:	4a96      	ldr	r2, [pc, #600]	@ (8008660 <HAL_GPIO_Init+0x2a4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d86f      	bhi.n	80084ea <HAL_GPIO_Init+0x12e>
 800840a:	4a96      	ldr	r2, [pc, #600]	@ (8008664 <HAL_GPIO_Init+0x2a8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d052      	beq.n	80084b6 <HAL_GPIO_Init+0xfa>
 8008410:	4a94      	ldr	r2, [pc, #592]	@ (8008664 <HAL_GPIO_Init+0x2a8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d869      	bhi.n	80084ea <HAL_GPIO_Init+0x12e>
 8008416:	4a94      	ldr	r2, [pc, #592]	@ (8008668 <HAL_GPIO_Init+0x2ac>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d04c      	beq.n	80084b6 <HAL_GPIO_Init+0xfa>
 800841c:	4a92      	ldr	r2, [pc, #584]	@ (8008668 <HAL_GPIO_Init+0x2ac>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d863      	bhi.n	80084ea <HAL_GPIO_Init+0x12e>
 8008422:	4a92      	ldr	r2, [pc, #584]	@ (800866c <HAL_GPIO_Init+0x2b0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d046      	beq.n	80084b6 <HAL_GPIO_Init+0xfa>
 8008428:	4a90      	ldr	r2, [pc, #576]	@ (800866c <HAL_GPIO_Init+0x2b0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d85d      	bhi.n	80084ea <HAL_GPIO_Init+0x12e>
 800842e:	2b12      	cmp	r3, #18
 8008430:	d82a      	bhi.n	8008488 <HAL_GPIO_Init+0xcc>
 8008432:	2b12      	cmp	r3, #18
 8008434:	d859      	bhi.n	80084ea <HAL_GPIO_Init+0x12e>
 8008436:	a201      	add	r2, pc, #4	@ (adr r2, 800843c <HAL_GPIO_Init+0x80>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	080084b7 	.word	0x080084b7
 8008440:	08008491 	.word	0x08008491
 8008444:	080084a3 	.word	0x080084a3
 8008448:	080084e5 	.word	0x080084e5
 800844c:	080084eb 	.word	0x080084eb
 8008450:	080084eb 	.word	0x080084eb
 8008454:	080084eb 	.word	0x080084eb
 8008458:	080084eb 	.word	0x080084eb
 800845c:	080084eb 	.word	0x080084eb
 8008460:	080084eb 	.word	0x080084eb
 8008464:	080084eb 	.word	0x080084eb
 8008468:	080084eb 	.word	0x080084eb
 800846c:	080084eb 	.word	0x080084eb
 8008470:	080084eb 	.word	0x080084eb
 8008474:	080084eb 	.word	0x080084eb
 8008478:	080084eb 	.word	0x080084eb
 800847c:	080084eb 	.word	0x080084eb
 8008480:	08008499 	.word	0x08008499
 8008484:	080084ad 	.word	0x080084ad
 8008488:	4a79      	ldr	r2, [pc, #484]	@ (8008670 <HAL_GPIO_Init+0x2b4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d013      	beq.n	80084b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800848e:	e02c      	b.n	80084ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	623b      	str	r3, [r7, #32]
          break;
 8008496:	e029      	b.n	80084ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	3304      	adds	r3, #4
 800849e:	623b      	str	r3, [r7, #32]
          break;
 80084a0:	e024      	b.n	80084ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	3308      	adds	r3, #8
 80084a8:	623b      	str	r3, [r7, #32]
          break;
 80084aa:	e01f      	b.n	80084ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	330c      	adds	r3, #12
 80084b2:	623b      	str	r3, [r7, #32]
          break;
 80084b4:	e01a      	b.n	80084ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80084be:	2304      	movs	r3, #4
 80084c0:	623b      	str	r3, [r7, #32]
          break;
 80084c2:	e013      	b.n	80084ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084cc:	2308      	movs	r3, #8
 80084ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	611a      	str	r2, [r3, #16]
          break;
 80084d6:	e009      	b.n	80084ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084d8:	2308      	movs	r3, #8
 80084da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	615a      	str	r2, [r3, #20]
          break;
 80084e2:	e003      	b.n	80084ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80084e4:	2300      	movs	r3, #0
 80084e6:	623b      	str	r3, [r7, #32]
          break;
 80084e8:	e000      	b.n	80084ec <HAL_GPIO_Init+0x130>
          break;
 80084ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2bff      	cmp	r3, #255	@ 0xff
 80084f0:	d801      	bhi.n	80084f6 <HAL_GPIO_Init+0x13a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	e001      	b.n	80084fa <HAL_GPIO_Init+0x13e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3304      	adds	r3, #4
 80084fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2bff      	cmp	r3, #255	@ 0xff
 8008500:	d802      	bhi.n	8008508 <HAL_GPIO_Init+0x14c>
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	e002      	b.n	800850e <HAL_GPIO_Init+0x152>
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	3b08      	subs	r3, #8
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	210f      	movs	r1, #15
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	fa01 f303 	lsl.w	r3, r1, r3
 800851c:	43db      	mvns	r3, r3
 800851e:	401a      	ands	r2, r3
 8008520:	6a39      	ldr	r1, [r7, #32]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	fa01 f303 	lsl.w	r3, r1, r3
 8008528:	431a      	orrs	r2, r3
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80b1 	beq.w	800869e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800853c:	4b4d      	ldr	r3, [pc, #308]	@ (8008674 <HAL_GPIO_Init+0x2b8>)
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	4a4c      	ldr	r2, [pc, #304]	@ (8008674 <HAL_GPIO_Init+0x2b8>)
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	6193      	str	r3, [r2, #24]
 8008548:	4b4a      	ldr	r3, [pc, #296]	@ (8008674 <HAL_GPIO_Init+0x2b8>)
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008554:	4a48      	ldr	r2, [pc, #288]	@ (8008678 <HAL_GPIO_Init+0x2bc>)
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	089b      	lsrs	r3, r3, #2
 800855a:	3302      	adds	r3, #2
 800855c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	220f      	movs	r2, #15
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4013      	ands	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a40      	ldr	r2, [pc, #256]	@ (800867c <HAL_GPIO_Init+0x2c0>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <HAL_GPIO_Init+0x1ec>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a3f      	ldr	r2, [pc, #252]	@ (8008680 <HAL_GPIO_Init+0x2c4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00d      	beq.n	80085a4 <HAL_GPIO_Init+0x1e8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a3e      	ldr	r2, [pc, #248]	@ (8008684 <HAL_GPIO_Init+0x2c8>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <HAL_GPIO_Init+0x1e4>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a3d      	ldr	r2, [pc, #244]	@ (8008688 <HAL_GPIO_Init+0x2cc>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d101      	bne.n	800859c <HAL_GPIO_Init+0x1e0>
 8008598:	2303      	movs	r3, #3
 800859a:	e006      	b.n	80085aa <HAL_GPIO_Init+0x1ee>
 800859c:	2304      	movs	r3, #4
 800859e:	e004      	b.n	80085aa <HAL_GPIO_Init+0x1ee>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e002      	b.n	80085aa <HAL_GPIO_Init+0x1ee>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <HAL_GPIO_Init+0x1ee>
 80085a8:	2300      	movs	r3, #0
 80085aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ac:	f002 0203 	and.w	r2, r2, #3
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	4093      	lsls	r3, r2
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80085ba:	492f      	ldr	r1, [pc, #188]	@ (8008678 <HAL_GPIO_Init+0x2bc>)
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	089b      	lsrs	r3, r3, #2
 80085c0:	3302      	adds	r3, #2
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d006      	beq.n	80085e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80085d4:	4b2d      	ldr	r3, [pc, #180]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	492c      	ldr	r1, [pc, #176]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	4313      	orrs	r3, r2
 80085de:	608b      	str	r3, [r1, #8]
 80085e0:	e006      	b.n	80085f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80085e2:	4b2a      	ldr	r3, [pc, #168]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	43db      	mvns	r3, r3
 80085ea:	4928      	ldr	r1, [pc, #160]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80085fc:	4b23      	ldr	r3, [pc, #140]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	4922      	ldr	r1, [pc, #136]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	4313      	orrs	r3, r2
 8008606:	60cb      	str	r3, [r1, #12]
 8008608:	e006      	b.n	8008618 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800860a:	4b20      	ldr	r3, [pc, #128]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	43db      	mvns	r3, r3
 8008612:	491e      	ldr	r1, [pc, #120]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 8008614:	4013      	ands	r3, r2
 8008616:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008624:	4b19      	ldr	r3, [pc, #100]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	4918      	ldr	r1, [pc, #96]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	4313      	orrs	r3, r2
 800862e:	604b      	str	r3, [r1, #4]
 8008630:	e006      	b.n	8008640 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008632:	4b16      	ldr	r3, [pc, #88]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	43db      	mvns	r3, r3
 800863a:	4914      	ldr	r1, [pc, #80]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 800863c:	4013      	ands	r3, r2
 800863e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d021      	beq.n	8008690 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800864c:	4b0f      	ldr	r3, [pc, #60]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	490e      	ldr	r1, [pc, #56]	@ (800868c <HAL_GPIO_Init+0x2d0>)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	4313      	orrs	r3, r2
 8008656:	600b      	str	r3, [r1, #0]
 8008658:	e021      	b.n	800869e <HAL_GPIO_Init+0x2e2>
 800865a:	bf00      	nop
 800865c:	10320000 	.word	0x10320000
 8008660:	10310000 	.word	0x10310000
 8008664:	10220000 	.word	0x10220000
 8008668:	10210000 	.word	0x10210000
 800866c:	10120000 	.word	0x10120000
 8008670:	10110000 	.word	0x10110000
 8008674:	40021000 	.word	0x40021000
 8008678:	40010000 	.word	0x40010000
 800867c:	40010800 	.word	0x40010800
 8008680:	40010c00 	.word	0x40010c00
 8008684:	40011000 	.word	0x40011000
 8008688:	40011400 	.word	0x40011400
 800868c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008690:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <HAL_GPIO_Init+0x304>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	43db      	mvns	r3, r3
 8008698:	4909      	ldr	r1, [pc, #36]	@ (80086c0 <HAL_GPIO_Init+0x304>)
 800869a:	4013      	ands	r3, r2
 800869c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	3301      	adds	r3, #1
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086aa:	fa22 f303 	lsr.w	r3, r2, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f ae8e 	bne.w	80083d0 <HAL_GPIO_Init+0x14>
  }
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	372c      	adds	r7, #44	@ 0x2c
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr
 80086c0:	40010400 	.word	0x40010400

080086c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	887b      	ldrh	r3, [r7, #2]
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086dc:	2301      	movs	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	e001      	b.n	80086e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr

080086f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	807b      	strh	r3, [r7, #2]
 80086fe:	4613      	mov	r3, r2
 8008700:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008702:	787b      	ldrb	r3, [r7, #1]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008708:	887a      	ldrh	r2, [r7, #2]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800870e:	e003      	b.n	8008718 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008710:	887b      	ldrh	r3, [r7, #2]
 8008712:	041a      	lsls	r2, r3, #16
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	611a      	str	r2, [r3, #16]
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
	...

08008724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800872e:	4b08      	ldr	r3, [pc, #32]	@ (8008750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	4013      	ands	r3, r2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d006      	beq.n	8008748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800873a:	4a05      	ldr	r2, [pc, #20]	@ (8008750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe f99a 	bl	8006a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40010400 	.word	0x40010400

08008754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e12b      	b.n	80089be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d106      	bne.n	8008780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7fe fec6 	bl	800750c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2224      	movs	r2, #36	@ 0x24
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0201 	bic.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80087b8:	f001 fbf0 	bl	8009f9c <HAL_RCC_GetPCLK1Freq>
 80087bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	4a81      	ldr	r2, [pc, #516]	@ (80089c8 <HAL_I2C_Init+0x274>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d807      	bhi.n	80087d8 <HAL_I2C_Init+0x84>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4a80      	ldr	r2, [pc, #512]	@ (80089cc <HAL_I2C_Init+0x278>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	bf94      	ite	ls
 80087d0:	2301      	movls	r3, #1
 80087d2:	2300      	movhi	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	e006      	b.n	80087e6 <HAL_I2C_Init+0x92>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4a7d      	ldr	r2, [pc, #500]	@ (80089d0 <HAL_I2C_Init+0x27c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	bf94      	ite	ls
 80087e0:	2301      	movls	r3, #1
 80087e2:	2300      	movhi	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e0e7      	b.n	80089be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4a78      	ldr	r2, [pc, #480]	@ (80089d4 <HAL_I2C_Init+0x280>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	0c9b      	lsrs	r3, r3, #18
 80087f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	430a      	orrs	r2, r1
 800880c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a6a      	ldr	r2, [pc, #424]	@ (80089c8 <HAL_I2C_Init+0x274>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d802      	bhi.n	8008828 <HAL_I2C_Init+0xd4>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	3301      	adds	r3, #1
 8008826:	e009      	b.n	800883c <HAL_I2C_Init+0xe8>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	4a69      	ldr	r2, [pc, #420]	@ (80089d8 <HAL_I2C_Init+0x284>)
 8008834:	fba2 2303 	umull	r2, r3, r2, r3
 8008838:	099b      	lsrs	r3, r3, #6
 800883a:	3301      	adds	r3, #1
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	430b      	orrs	r3, r1
 8008842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800884e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	495c      	ldr	r1, [pc, #368]	@ (80089c8 <HAL_I2C_Init+0x274>)
 8008858:	428b      	cmp	r3, r1
 800885a:	d819      	bhi.n	8008890 <HAL_I2C_Init+0x13c>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	1e59      	subs	r1, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	fbb1 f3f3 	udiv	r3, r1, r3
 800886a:	1c59      	adds	r1, r3, #1
 800886c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008870:	400b      	ands	r3, r1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <HAL_I2C_Init+0x138>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	1e59      	subs	r1, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	fbb1 f3f3 	udiv	r3, r1, r3
 8008884:	3301      	adds	r3, #1
 8008886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800888a:	e051      	b.n	8008930 <HAL_I2C_Init+0x1dc>
 800888c:	2304      	movs	r3, #4
 800888e:	e04f      	b.n	8008930 <HAL_I2C_Init+0x1dc>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d111      	bne.n	80088bc <HAL_I2C_Init+0x168>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	1e58      	subs	r0, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	440b      	add	r3, r1
 80088a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80088aa:	3301      	adds	r3, #1
 80088ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bf0c      	ite	eq
 80088b4:	2301      	moveq	r3, #1
 80088b6:	2300      	movne	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	e012      	b.n	80088e2 <HAL_I2C_Init+0x18e>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	1e58      	subs	r0, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6859      	ldr	r1, [r3, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	0099      	lsls	r1, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80088d2:	3301      	adds	r3, #1
 80088d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bf0c      	ite	eq
 80088dc:	2301      	moveq	r3, #1
 80088de:	2300      	movne	r3, #0
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <HAL_I2C_Init+0x196>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e022      	b.n	8008930 <HAL_I2C_Init+0x1dc>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10e      	bne.n	8008910 <HAL_I2C_Init+0x1bc>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1e58      	subs	r0, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6859      	ldr	r1, [r3, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	440b      	add	r3, r1
 8008900:	fbb0 f3f3 	udiv	r3, r0, r3
 8008904:	3301      	adds	r3, #1
 8008906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800890a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800890e:	e00f      	b.n	8008930 <HAL_I2C_Init+0x1dc>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	1e58      	subs	r0, r3, #1
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6859      	ldr	r1, [r3, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	0099      	lsls	r1, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	fbb0 f3f3 	udiv	r3, r0, r3
 8008926:	3301      	adds	r3, #1
 8008928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800892c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	6809      	ldr	r1, [r1, #0]
 8008934:	4313      	orrs	r3, r2
 8008936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69da      	ldr	r2, [r3, #28]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	431a      	orrs	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800895e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6911      	ldr	r1, [r2, #16]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	68d2      	ldr	r2, [r2, #12]
 800896a:	4311      	orrs	r1, r2
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	430b      	orrs	r3, r1
 8008972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695a      	ldr	r2, [r3, #20]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	431a      	orrs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0201 	orr.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	000186a0 	.word	0x000186a0
 80089cc:	001e847f 	.word	0x001e847f
 80089d0:	003d08ff 	.word	0x003d08ff
 80089d4:	431bde83 	.word	0x431bde83
 80089d8:	10624dd3 	.word	0x10624dd3

080089dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	817b      	strh	r3, [r7, #10]
 80089ee:	460b      	mov	r3, r1
 80089f0:	813b      	strh	r3, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089f6:	f7ff f87f 	bl	8007af8 <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	f040 80d9 	bne.w	8008bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2319      	movs	r3, #25
 8008a10:	2201      	movs	r2, #1
 8008a12:	496d      	ldr	r1, [pc, #436]	@ (8008bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fcc1 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
 8008a22:	e0cc      	b.n	8008bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_I2C_Mem_Write+0x56>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e0c5      	b.n	8008bbe <HAL_I2C_Mem_Write+0x1e2>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d007      	beq.n	8008a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2221      	movs	r2, #33	@ 0x21
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2240      	movs	r2, #64	@ 0x40
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a3a      	ldr	r2, [r7, #32]
 8008a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a4d      	ldr	r2, [pc, #308]	@ (8008bcc <HAL_I2C_Mem_Write+0x1f0>)
 8008a98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a9a:	88f8      	ldrh	r0, [r7, #6]
 8008a9c:	893a      	ldrh	r2, [r7, #8]
 8008a9e:	8979      	ldrh	r1, [r7, #10]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 faf8 	bl	80090a0 <I2C_RequestMemoryWrite>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d052      	beq.n	8008b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e081      	b.n	8008bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fd86 	bl	80095d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00d      	beq.n	8008ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d107      	bne.n	8008ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e06b      	b.n	8008bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aea:	781a      	ldrb	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d11b      	bne.n	8008b5c <HAL_I2C_Mem_Write+0x180>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d017      	beq.n	8008b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1aa      	bne.n	8008aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fd79 	bl	8009660 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00d      	beq.n	8008b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d107      	bne.n	8008b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e016      	b.n	8008bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e000      	b.n	8008bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	00100002 	.word	0x00100002
 8008bcc:	ffff0000 	.word	0xffff0000

08008bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08c      	sub	sp, #48	@ 0x30
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	4608      	mov	r0, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	817b      	strh	r3, [r7, #10]
 8008be2:	460b      	mov	r3, r1
 8008be4:	813b      	strh	r3, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bee:	f7fe ff83 	bl	8007af8 <HAL_GetTick>
 8008bf2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	f040 8244 	bne.w	800908a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	2319      	movs	r3, #25
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4982      	ldr	r1, [pc, #520]	@ (8008e14 <HAL_I2C_Mem_Read+0x244>)
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fbc5 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e237      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <HAL_I2C_Mem_Read+0x5a>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e230      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d007      	beq.n	8008c50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2222      	movs	r2, #34	@ 0x22
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2240      	movs	r2, #64	@ 0x40
 8008c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a62      	ldr	r2, [pc, #392]	@ (8008e18 <HAL_I2C_Mem_Read+0x248>)
 8008c90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c92:	88f8      	ldrh	r0, [r7, #6]
 8008c94:	893a      	ldrh	r2, [r7, #8]
 8008c96:	8979      	ldrh	r1, [r7, #10]
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fa92 	bl	80091cc <I2C_RequestMemoryRead>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e1ec      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d113      	bne.n	8008ce2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	61fb      	str	r3, [r7, #28]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e1c0      	b.n	8009064 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d11e      	bne.n	8008d28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cfa:	b672      	cpsid	i
}
 8008cfc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d24:	b662      	cpsie	i
}
 8008d26:	e035      	b.n	8008d94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d11e      	bne.n	8008d6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d40:	b672      	cpsid	i
}
 8008d42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d44:	2300      	movs	r3, #0
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d6a:	b662      	cpsie	i
}
 8008d6c:	e012      	b.n	8008d94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	613b      	str	r3, [r7, #16]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008d94:	e166      	b.n	8009064 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	f200 811f 	bhi.w	8008fde <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d123      	bne.n	8008df0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008daa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 fc9f 	bl	80096f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e167      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	3b01      	subs	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008dee:	e139      	b.n	8009064 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d152      	bne.n	8008e9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4906      	ldr	r1, [pc, #24]	@ (8008e1c <HAL_I2C_Mem_Read+0x24c>)
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 faca 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d008      	beq.n	8008e20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e13c      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
 8008e12:	bf00      	nop
 8008e14:	00100002 	.word	0x00100002
 8008e18:	ffff0000 	.word	0xffff0000
 8008e1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008e20:	b672      	cpsid	i
}
 8008e22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008e66:	b662      	cpsie	i
}
 8008e68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e9c:	e0e2      	b.n	8009064 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	497b      	ldr	r1, [pc, #492]	@ (8009094 <HAL_I2C_Mem_Read+0x4c4>)
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fa77 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0e9      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ec6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ec8:	b672      	cpsid	i
}
 8008eca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691a      	ldr	r2, [r3, #16]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008efe:	4b66      	ldr	r3, [pc, #408]	@ (8009098 <HAL_I2C_Mem_Read+0x4c8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	08db      	lsrs	r3, r3, #3
 8008f04:	4a65      	ldr	r2, [pc, #404]	@ (800909c <HAL_I2C_Mem_Read+0x4cc>)
 8008f06:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0a:	0a1a      	lsrs	r2, r3, #8
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	00da      	lsls	r2, r3, #3
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d118      	bne.n	8008f56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3e:	f043 0220 	orr.w	r2, r3, #32
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008f46:	b662      	cpsie	i
}
 8008f48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e09a      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d1d9      	bne.n	8008f18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691a      	ldr	r2, [r3, #16]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008fa6:	b662      	cpsie	i
}
 8008fa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	b2d2      	uxtb	r2, r2
 8008fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008fdc:	e042      	b.n	8009064 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fb84 	bl	80096f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e04c      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	2b04      	cmp	r3, #4
 8009030:	d118      	bne.n	8009064 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800904e:	3b01      	subs	r3, #1
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009068:	2b00      	cmp	r3, #0
 800906a:	f47f ae94 	bne.w	8008d96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2220      	movs	r2, #32
 8009072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	e000      	b.n	800908c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800908a:	2302      	movs	r3, #2
  }
}
 800908c:	4618      	mov	r0, r3
 800908e:	3728      	adds	r7, #40	@ 0x28
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	00010004 	.word	0x00010004
 8009098:	20000004 	.word	0x20000004
 800909c:	14f8b589 	.word	0x14f8b589

080090a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	4608      	mov	r0, r1
 80090aa:	4611      	mov	r1, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	817b      	strh	r3, [r7, #10]
 80090b2:	460b      	mov	r3, r1
 80090b4:	813b      	strh	r3, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f960 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00d      	beq.n	80090fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f0:	d103      	bne.n	80090fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e05f      	b.n	80091be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800910c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	6a3a      	ldr	r2, [r7, #32]
 8009112:	492d      	ldr	r1, [pc, #180]	@ (80091c8 <I2C_RequestMemoryWrite+0x128>)
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f9bb 	bl	8009490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e04c      	b.n	80091be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800913a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800913c:	6a39      	ldr	r1, [r7, #32]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 fa46 	bl	80095d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00d      	beq.n	8009166 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914e:	2b04      	cmp	r3, #4
 8009150:	d107      	bne.n	8009162 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e02b      	b.n	80091be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d105      	bne.n	8009178 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800916c:	893b      	ldrh	r3, [r7, #8]
 800916e:	b2da      	uxtb	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	611a      	str	r2, [r3, #16]
 8009176:	e021      	b.n	80091bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009178:	893b      	ldrh	r3, [r7, #8]
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	b29b      	uxth	r3, r3
 800917e:	b2da      	uxtb	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009188:	6a39      	ldr	r1, [r7, #32]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fa20 	bl	80095d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919a:	2b04      	cmp	r3, #4
 800919c:	d107      	bne.n	80091ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e005      	b.n	80091be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091b2:	893b      	ldrh	r3, [r7, #8]
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	00010002 	.word	0x00010002

080091cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b088      	sub	sp, #32
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	461a      	mov	r2, r3
 80091da:	4603      	mov	r3, r0
 80091dc:	817b      	strh	r3, [r7, #10]
 80091de:	460b      	mov	r3, r1
 80091e0:	813b      	strh	r3, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	2200      	movs	r2, #0
 800920e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f8c2 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00d      	beq.n	800923a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800922c:	d103      	bne.n	8009236 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009234:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e0aa      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800923a:	897b      	ldrh	r3, [r7, #10]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	6a3a      	ldr	r2, [r7, #32]
 800924e:	4952      	ldr	r1, [pc, #328]	@ (8009398 <I2C_RequestMemoryRead+0x1cc>)
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 f91d 	bl	8009490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e097      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009278:	6a39      	ldr	r1, [r7, #32]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f9a8 	bl	80095d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00d      	beq.n	80092a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928a:	2b04      	cmp	r3, #4
 800928c:	d107      	bne.n	800929e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800929c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e076      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d105      	bne.n	80092b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092a8:	893b      	ldrh	r3, [r7, #8]
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	611a      	str	r2, [r3, #16]
 80092b2:	e021      	b.n	80092f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80092b4:	893b      	ldrh	r3, [r7, #8]
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c4:	6a39      	ldr	r1, [r7, #32]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 f982 	bl	80095d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00d      	beq.n	80092ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d107      	bne.n	80092ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e050      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092ee:	893b      	ldrh	r3, [r7, #8]
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092fa:	6a39      	ldr	r1, [r7, #32]
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f967 	bl	80095d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00d      	beq.n	8009324 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930c:	2b04      	cmp	r3, #4
 800930e:	d107      	bne.n	8009320 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800931e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e035      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009332:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	2200      	movs	r2, #0
 800933c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f82b 	bl	800939c <I2C_WaitOnFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00d      	beq.n	8009368 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800935a:	d103      	bne.n	8009364 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009362:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e013      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009368:	897b      	ldrh	r3, [r7, #10]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	f043 0301 	orr.w	r3, r3, #1
 8009370:	b2da      	uxtb	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	6a3a      	ldr	r2, [r7, #32]
 800937c:	4906      	ldr	r1, [pc, #24]	@ (8009398 <I2C_RequestMemoryRead+0x1cc>)
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f886 	bl	8009490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	00010002 	.word	0x00010002

0800939c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	4613      	mov	r3, r2
 80093aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093ac:	e048      	b.n	8009440 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b4:	d044      	beq.n	8009440 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b6:	f7fe fb9f 	bl	8007af8 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d139      	bne.n	8009440 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	0c1b      	lsrs	r3, r3, #16
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d10d      	bne.n	80093f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	43da      	mvns	r2, r3
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	4013      	ands	r3, r2
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bf0c      	ite	eq
 80093e8:	2301      	moveq	r3, #1
 80093ea:	2300      	movne	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	e00c      	b.n	800940c <I2C_WaitOnFlagUntilTimeout+0x70>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	43da      	mvns	r2, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	4013      	ands	r3, r2
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	bf0c      	ite	eq
 8009404:	2301      	moveq	r3, #1
 8009406:	2300      	movne	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	461a      	mov	r2, r3
 800940c:	79fb      	ldrb	r3, [r7, #7]
 800940e:	429a      	cmp	r2, r3
 8009410:	d116      	bne.n	8009440 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2220      	movs	r2, #32
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942c:	f043 0220 	orr.w	r2, r3, #32
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e023      	b.n	8009488 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b01      	cmp	r3, #1
 8009448:	d10d      	bne.n	8009466 <I2C_WaitOnFlagUntilTimeout+0xca>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	43da      	mvns	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4013      	ands	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	e00c      	b.n	8009480 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	43da      	mvns	r2, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	4013      	ands	r3, r2
 8009472:	b29b      	uxth	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	bf0c      	ite	eq
 8009478:	2301      	moveq	r3, #1
 800947a:	2300      	movne	r3, #0
 800947c:	b2db      	uxtb	r3, r3
 800947e:	461a      	mov	r2, r3
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	429a      	cmp	r2, r3
 8009484:	d093      	beq.n	80093ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800949e:	e071      	b.n	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ae:	d123      	bne.n	80094f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80094c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e4:	f043 0204 	orr.w	r2, r3, #4
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e067      	b.n	80095c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fe:	d041      	beq.n	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009500:	f7fe fafa 	bl	8007af8 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d302      	bcc.n	8009516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d136      	bne.n	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	0c1b      	lsrs	r3, r3, #16
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b01      	cmp	r3, #1
 800951e:	d10c      	bne.n	800953a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	43da      	mvns	r2, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4013      	ands	r3, r2
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	bf14      	ite	ne
 8009532:	2301      	movne	r3, #1
 8009534:	2300      	moveq	r3, #0
 8009536:	b2db      	uxtb	r3, r3
 8009538:	e00b      	b.n	8009552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	43da      	mvns	r2, r3
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4013      	ands	r3, r2
 8009546:	b29b      	uxth	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	bf14      	ite	ne
 800954c:	2301      	movne	r3, #1
 800954e:	2300      	moveq	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d016      	beq.n	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	f043 0220 	orr.w	r2, r3, #32
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e021      	b.n	80095c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	0c1b      	lsrs	r3, r3, #16
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b01      	cmp	r3, #1
 800958c:	d10c      	bne.n	80095a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	43da      	mvns	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4013      	ands	r3, r2
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	e00b      	b.n	80095c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	43da      	mvns	r2, r3
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4013      	ands	r3, r2
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bf14      	ite	ne
 80095ba:	2301      	movne	r3, #1
 80095bc:	2300      	moveq	r3, #0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f47f af6d 	bne.w	80094a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095dc:	e034      	b.n	8009648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f8e3 	bl	80097aa <I2C_IsAcknowledgeFailed>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e034      	b.n	8009658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f4:	d028      	beq.n	8009648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f6:	f7fe fa7f 	bl	8007af8 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d11d      	bne.n	8009648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009616:	2b80      	cmp	r3, #128	@ 0x80
 8009618:	d016      	beq.n	8009648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009634:	f043 0220 	orr.w	r2, r3, #32
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e007      	b.n	8009658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009652:	2b80      	cmp	r3, #128	@ 0x80
 8009654:	d1c3      	bne.n	80095de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800966c:	e034      	b.n	80096d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f89b 	bl	80097aa <I2C_IsAcknowledgeFailed>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e034      	b.n	80096e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d028      	beq.n	80096d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009686:	f7fe fa37 	bl	8007af8 <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	429a      	cmp	r2, r3
 8009694:	d302      	bcc.n	800969c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d11d      	bne.n	80096d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d016      	beq.n	80096d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c4:	f043 0220 	orr.w	r2, r3, #32
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e007      	b.n	80096e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d1c3      	bne.n	800966e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096fc:	e049      	b.n	8009792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b10      	cmp	r3, #16
 800970a:	d119      	bne.n	8009740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f06f 0210 	mvn.w	r2, #16
 8009714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2220      	movs	r2, #32
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e030      	b.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009740:	f7fe f9da 	bl	8007af8 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	429a      	cmp	r2, r3
 800974e:	d302      	bcc.n	8009756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d11d      	bne.n	8009792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009760:	2b40      	cmp	r3, #64	@ 0x40
 8009762:	d016      	beq.n	8009792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977e:	f043 0220 	orr.w	r2, r3, #32
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e007      	b.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800979c:	2b40      	cmp	r3, #64	@ 0x40
 800979e:	d1ae      	bne.n	80096fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097c0:	d11b      	bne.n	80097fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e6:	f043 0204 	orr.w	r2, r3, #4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr
	...

08009808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e272      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 8087 	beq.w	8009936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009828:	4b92      	ldr	r3, [pc, #584]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f003 030c 	and.w	r3, r3, #12
 8009830:	2b04      	cmp	r3, #4
 8009832:	d00c      	beq.n	800984e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009834:	4b8f      	ldr	r3, [pc, #572]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f003 030c 	and.w	r3, r3, #12
 800983c:	2b08      	cmp	r3, #8
 800983e:	d112      	bne.n	8009866 <HAL_RCC_OscConfig+0x5e>
 8009840:	4b8c      	ldr	r3, [pc, #560]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800984c:	d10b      	bne.n	8009866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800984e:	4b89      	ldr	r3, [pc, #548]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d06c      	beq.n	8009934 <HAL_RCC_OscConfig+0x12c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d168      	bne.n	8009934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e24c      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800986e:	d106      	bne.n	800987e <HAL_RCC_OscConfig+0x76>
 8009870:	4b80      	ldr	r3, [pc, #512]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a7f      	ldr	r2, [pc, #508]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	e02e      	b.n	80098dc <HAL_RCC_OscConfig+0xd4>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10c      	bne.n	80098a0 <HAL_RCC_OscConfig+0x98>
 8009886:	4b7b      	ldr	r3, [pc, #492]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a7a      	ldr	r2, [pc, #488]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 800988c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	4b78      	ldr	r3, [pc, #480]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a77      	ldr	r2, [pc, #476]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	e01d      	b.n	80098dc <HAL_RCC_OscConfig+0xd4>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098a8:	d10c      	bne.n	80098c4 <HAL_RCC_OscConfig+0xbc>
 80098aa:	4b72      	ldr	r3, [pc, #456]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a71      	ldr	r2, [pc, #452]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b6f      	ldr	r3, [pc, #444]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a6e      	ldr	r2, [pc, #440]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e00b      	b.n	80098dc <HAL_RCC_OscConfig+0xd4>
 80098c4:	4b6b      	ldr	r3, [pc, #428]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a6a      	ldr	r2, [pc, #424]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	4b68      	ldr	r3, [pc, #416]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a67      	ldr	r2, [pc, #412]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80098d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d013      	beq.n	800990c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e4:	f7fe f908 	bl	8007af8 <HAL_GetTick>
 80098e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098ec:	f7fe f904 	bl	8007af8 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b64      	cmp	r3, #100	@ 0x64
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e200      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0f0      	beq.n	80098ec <HAL_RCC_OscConfig+0xe4>
 800990a:	e014      	b.n	8009936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800990c:	f7fe f8f4 	bl	8007af8 <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009914:	f7fe f8f0 	bl	8007af8 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b64      	cmp	r3, #100	@ 0x64
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e1ec      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009926:	4b53      	ldr	r3, [pc, #332]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f0      	bne.n	8009914 <HAL_RCC_OscConfig+0x10c>
 8009932:	e000      	b.n	8009936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d063      	beq.n	8009a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009942:	4b4c      	ldr	r3, [pc, #304]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f003 030c 	and.w	r3, r3, #12
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800994e:	4b49      	ldr	r3, [pc, #292]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f003 030c 	and.w	r3, r3, #12
 8009956:	2b08      	cmp	r3, #8
 8009958:	d11c      	bne.n	8009994 <HAL_RCC_OscConfig+0x18c>
 800995a:	4b46      	ldr	r3, [pc, #280]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d116      	bne.n	8009994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009966:	4b43      	ldr	r3, [pc, #268]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_RCC_OscConfig+0x176>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d001      	beq.n	800997e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e1c0      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997e:	4b3d      	ldr	r3, [pc, #244]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	4939      	ldr	r1, [pc, #228]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 800998e:	4313      	orrs	r3, r2
 8009990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009992:	e03a      	b.n	8009a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800999c:	4b36      	ldr	r3, [pc, #216]	@ (8009a78 <HAL_RCC_OscConfig+0x270>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099a2:	f7fe f8a9 	bl	8007af8 <HAL_GetTick>
 80099a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099a8:	e008      	b.n	80099bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099aa:	f7fe f8a5 	bl	8007af8 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e1a1      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0f0      	beq.n	80099aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4927      	ldr	r1, [pc, #156]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	600b      	str	r3, [r1, #0]
 80099dc:	e015      	b.n	8009a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099de:	4b26      	ldr	r3, [pc, #152]	@ (8009a78 <HAL_RCC_OscConfig+0x270>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e4:	f7fe f888 	bl	8007af8 <HAL_GetTick>
 80099e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099ea:	e008      	b.n	80099fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ec:	f7fe f884 	bl	8007af8 <HAL_GetTick>
 80099f0:	4602      	mov	r2, r0
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d901      	bls.n	80099fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e180      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f0      	bne.n	80099ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d03a      	beq.n	8009a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d019      	beq.n	8009a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a1e:	4b17      	ldr	r3, [pc, #92]	@ (8009a7c <HAL_RCC_OscConfig+0x274>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a24:	f7fe f868 	bl	8007af8 <HAL_GetTick>
 8009a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a2c:	f7fe f864 	bl	8007af8 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e160      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <HAL_RCC_OscConfig+0x26c>)
 8009a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f0      	beq.n	8009a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	f000 face 	bl	8009fec <RCC_Delay>
 8009a50:	e01c      	b.n	8009a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <HAL_RCC_OscConfig+0x274>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a58:	f7fe f84e 	bl	8007af8 <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a5e:	e00f      	b.n	8009a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a60:	f7fe f84a 	bl	8007af8 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d908      	bls.n	8009a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e146      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
 8009a72:	bf00      	nop
 8009a74:	40021000 	.word	0x40021000
 8009a78:	42420000 	.word	0x42420000
 8009a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a80:	4b92      	ldr	r3, [pc, #584]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e9      	bne.n	8009a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0304 	and.w	r3, r3, #4
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 80a6 	beq.w	8009be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10d      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aaa:	4b88      	ldr	r3, [pc, #544]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	4a87      	ldr	r2, [pc, #540]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ab4:	61d3      	str	r3, [r2, #28]
 8009ab6:	4b85      	ldr	r3, [pc, #532]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009abe:	60bb      	str	r3, [r7, #8]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ac6:	4b82      	ldr	r3, [pc, #520]	@ (8009cd0 <HAL_RCC_OscConfig+0x4c8>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d118      	bne.n	8009b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8009cd0 <HAL_RCC_OscConfig+0x4c8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8009cd0 <HAL_RCC_OscConfig+0x4c8>)
 8009ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ade:	f7fe f80b 	bl	8007af8 <HAL_GetTick>
 8009ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae6:	f7fe f807 	bl	8007af8 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b64      	cmp	r3, #100	@ 0x64
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e103      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009af8:	4b75      	ldr	r3, [pc, #468]	@ (8009cd0 <HAL_RCC_OscConfig+0x4c8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d106      	bne.n	8009b1a <HAL_RCC_OscConfig+0x312>
 8009b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	4a6e      	ldr	r2, [pc, #440]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b12:	f043 0301 	orr.w	r3, r3, #1
 8009b16:	6213      	str	r3, [r2, #32]
 8009b18:	e02d      	b.n	8009b76 <HAL_RCC_OscConfig+0x36e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10c      	bne.n	8009b3c <HAL_RCC_OscConfig+0x334>
 8009b22:	4b6a      	ldr	r3, [pc, #424]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	4a69      	ldr	r2, [pc, #420]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b28:	f023 0301 	bic.w	r3, r3, #1
 8009b2c:	6213      	str	r3, [r2, #32]
 8009b2e:	4b67      	ldr	r3, [pc, #412]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	4a66      	ldr	r2, [pc, #408]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b34:	f023 0304 	bic.w	r3, r3, #4
 8009b38:	6213      	str	r3, [r2, #32]
 8009b3a:	e01c      	b.n	8009b76 <HAL_RCC_OscConfig+0x36e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b05      	cmp	r3, #5
 8009b42:	d10c      	bne.n	8009b5e <HAL_RCC_OscConfig+0x356>
 8009b44:	4b61      	ldr	r3, [pc, #388]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	4a60      	ldr	r2, [pc, #384]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b4a:	f043 0304 	orr.w	r3, r3, #4
 8009b4e:	6213      	str	r3, [r2, #32]
 8009b50:	4b5e      	ldr	r3, [pc, #376]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	4a5d      	ldr	r2, [pc, #372]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	6213      	str	r3, [r2, #32]
 8009b5c:	e00b      	b.n	8009b76 <HAL_RCC_OscConfig+0x36e>
 8009b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	4a5a      	ldr	r2, [pc, #360]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b64:	f023 0301 	bic.w	r3, r3, #1
 8009b68:	6213      	str	r3, [r2, #32]
 8009b6a:	4b58      	ldr	r3, [pc, #352]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	4a57      	ldr	r2, [pc, #348]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b70:	f023 0304 	bic.w	r3, r3, #4
 8009b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d015      	beq.n	8009baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b7e:	f7fd ffbb 	bl	8007af8 <HAL_GetTick>
 8009b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b84:	e00a      	b.n	8009b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b86:	f7fd ffb7 	bl	8007af8 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d901      	bls.n	8009b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e0b1      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0ee      	beq.n	8009b86 <HAL_RCC_OscConfig+0x37e>
 8009ba8:	e014      	b.n	8009bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009baa:	f7fd ffa5 	bl	8007af8 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bb0:	e00a      	b.n	8009bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb2:	f7fd ffa1 	bl	8007af8 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e09b      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bc8:	4b40      	ldr	r3, [pc, #256]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1ee      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d105      	bne.n	8009be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bda:	4b3c      	ldr	r3, [pc, #240]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	4a3b      	ldr	r2, [pc, #236]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 8087 	beq.w	8009cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bf0:	4b36      	ldr	r3, [pc, #216]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f003 030c 	and.w	r3, r3, #12
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d061      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d146      	bne.n	8009c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c04:	4b33      	ldr	r3, [pc, #204]	@ (8009cd4 <HAL_RCC_OscConfig+0x4cc>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c0a:	f7fd ff75 	bl	8007af8 <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c10:	e008      	b.n	8009c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c12:	f7fd ff71 	bl	8007af8 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e06d      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c24:	4b29      	ldr	r3, [pc, #164]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1f0      	bne.n	8009c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c38:	d108      	bne.n	8009c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009c3a:	4b24      	ldr	r3, [pc, #144]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	4921      	ldr	r1, [pc, #132]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a19      	ldr	r1, [r3, #32]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	491b      	ldr	r1, [pc, #108]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c64:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd4 <HAL_RCC_OscConfig+0x4cc>)
 8009c66:	2201      	movs	r2, #1
 8009c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c6a:	f7fd ff45 	bl	8007af8 <HAL_GetTick>
 8009c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c70:	e008      	b.n	8009c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c72:	f7fd ff41 	bl	8007af8 <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d901      	bls.n	8009c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e03d      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c84:	4b11      	ldr	r3, [pc, #68]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0f0      	beq.n	8009c72 <HAL_RCC_OscConfig+0x46a>
 8009c90:	e035      	b.n	8009cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c92:	4b10      	ldr	r3, [pc, #64]	@ (8009cd4 <HAL_RCC_OscConfig+0x4cc>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c98:	f7fd ff2e 	bl	8007af8 <HAL_GetTick>
 8009c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca0:	f7fd ff2a 	bl	8007af8 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e026      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009cb2:	4b06      	ldr	r3, [pc, #24]	@ (8009ccc <HAL_RCC_OscConfig+0x4c4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f0      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x498>
 8009cbe:	e01e      	b.n	8009cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d107      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e019      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
 8009ccc:	40021000 	.word	0x40021000
 8009cd0:	40007000 	.word	0x40007000
 8009cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009d08 <HAL_RCC_OscConfig+0x500>)
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d106      	bne.n	8009cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d001      	beq.n	8009cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	40021000 	.word	0x40021000

08009d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e0d0      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d20:	4b6a      	ldr	r3, [pc, #424]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0307 	and.w	r3, r3, #7
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d910      	bls.n	8009d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d2e:	4b67      	ldr	r3, [pc, #412]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f023 0207 	bic.w	r2, r3, #7
 8009d36:	4965      	ldr	r1, [pc, #404]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3e:	4b63      	ldr	r3, [pc, #396]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d001      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e0b8      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d020      	beq.n	8009d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d68:	4b59      	ldr	r3, [pc, #356]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	4a58      	ldr	r2, [pc, #352]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009d6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d80:	4b53      	ldr	r3, [pc, #332]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4a52      	ldr	r2, [pc, #328]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009d86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8009d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d8c:	4b50      	ldr	r3, [pc, #320]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	494d      	ldr	r1, [pc, #308]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d040      	beq.n	8009e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d107      	bne.n	8009dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009db2:	4b47      	ldr	r3, [pc, #284]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d115      	bne.n	8009dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e07f      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d107      	bne.n	8009dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dca:	4b41      	ldr	r3, [pc, #260]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e073      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dda:	4b3d      	ldr	r3, [pc, #244]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e06b      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009dea:	4b39      	ldr	r3, [pc, #228]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f023 0203 	bic.w	r2, r3, #3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4936      	ldr	r1, [pc, #216]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009dfc:	f7fd fe7c 	bl	8007af8 <HAL_GetTick>
 8009e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e02:	e00a      	b.n	8009e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e04:	f7fd fe78 	bl	8007af8 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d901      	bls.n	8009e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e053      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f003 020c 	and.w	r2, r3, #12
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d1eb      	bne.n	8009e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e2c:	4b27      	ldr	r3, [pc, #156]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d210      	bcs.n	8009e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e3a:	4b24      	ldr	r3, [pc, #144]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f023 0207 	bic.w	r2, r3, #7
 8009e42:	4922      	ldr	r1, [pc, #136]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e4a:	4b20      	ldr	r3, [pc, #128]	@ (8009ecc <HAL_RCC_ClockConfig+0x1c0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0307 	and.w	r3, r3, #7
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d001      	beq.n	8009e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e032      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d008      	beq.n	8009e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e68:	4b19      	ldr	r3, [pc, #100]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	4916      	ldr	r1, [pc, #88]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009e86:	4b12      	ldr	r3, [pc, #72]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	490e      	ldr	r1, [pc, #56]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009e9a:	f000 f821 	bl	8009ee0 <HAL_RCC_GetSysClockFreq>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	091b      	lsrs	r3, r3, #4
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	490a      	ldr	r1, [pc, #40]	@ (8009ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8009eac:	5ccb      	ldrb	r3, [r1, r3]
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	4a09      	ldr	r2, [pc, #36]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8009eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009eb6:	4b09      	ldr	r3, [pc, #36]	@ (8009edc <HAL_RCC_ClockConfig+0x1d0>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fd fdda 	bl	8007a74 <HAL_InitTick>

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	40022000 	.word	0x40022000
 8009ed0:	40021000 	.word	0x40021000
 8009ed4:	0800efe8 	.word	0x0800efe8
 8009ed8:	20000004 	.word	0x20000004
 8009edc:	20000008 	.word	0x20000008

08009ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	2300      	movs	r3, #0
 8009eec:	60bb      	str	r3, [r7, #8]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009efa:	4b1e      	ldr	r3, [pc, #120]	@ (8009f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f003 030c 	and.w	r3, r3, #12
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d002      	beq.n	8009f10 <HAL_RCC_GetSysClockFreq+0x30>
 8009f0a:	2b08      	cmp	r3, #8
 8009f0c:	d003      	beq.n	8009f16 <HAL_RCC_GetSysClockFreq+0x36>
 8009f0e:	e027      	b.n	8009f60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009f10:	4b19      	ldr	r3, [pc, #100]	@ (8009f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8009f12:	613b      	str	r3, [r7, #16]
      break;
 8009f14:	e027      	b.n	8009f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	0c9b      	lsrs	r3, r3, #18
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	4a17      	ldr	r2, [pc, #92]	@ (8009f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8009f20:	5cd3      	ldrb	r3, [r2, r3]
 8009f22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d010      	beq.n	8009f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009f2e:	4b11      	ldr	r3, [pc, #68]	@ (8009f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	0c5b      	lsrs	r3, r3, #17
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	4a11      	ldr	r2, [pc, #68]	@ (8009f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009f3a:	5cd3      	ldrb	r3, [r2, r3]
 8009f3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a0d      	ldr	r2, [pc, #52]	@ (8009f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8009f42:	fb03 f202 	mul.w	r2, r3, r2
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4c:	617b      	str	r3, [r7, #20]
 8009f4e:	e004      	b.n	8009f5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a0c      	ldr	r2, [pc, #48]	@ (8009f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009f54:	fb02 f303 	mul.w	r3, r2, r3
 8009f58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	613b      	str	r3, [r7, #16]
      break;
 8009f5e:	e002      	b.n	8009f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009f60:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8009f62:	613b      	str	r3, [r7, #16]
      break;
 8009f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f66:	693b      	ldr	r3, [r7, #16]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40021000 	.word	0x40021000
 8009f78:	007a1200 	.word	0x007a1200
 8009f7c:	0800f000 	.word	0x0800f000
 8009f80:	0800f010 	.word	0x0800f010
 8009f84:	003d0900 	.word	0x003d0900

08009f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f8c:	4b02      	ldr	r3, [pc, #8]	@ (8009f98 <HAL_RCC_GetHCLKFreq+0x10>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr
 8009f98:	20000004 	.word	0x20000004

08009f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009fa0:	f7ff fff2 	bl	8009f88 <HAL_RCC_GetHCLKFreq>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	4b05      	ldr	r3, [pc, #20]	@ (8009fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	4903      	ldr	r1, [pc, #12]	@ (8009fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fb2:	5ccb      	ldrb	r3, [r1, r3]
 8009fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	40021000 	.word	0x40021000
 8009fc0:	0800eff8 	.word	0x0800eff8

08009fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009fc8:	f7ff ffde 	bl	8009f88 <HAL_RCC_GetHCLKFreq>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	0adb      	lsrs	r3, r3, #11
 8009fd4:	f003 0307 	and.w	r3, r3, #7
 8009fd8:	4903      	ldr	r1, [pc, #12]	@ (8009fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009fda:	5ccb      	ldrb	r3, [r1, r3]
 8009fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	40021000 	.word	0x40021000
 8009fe8:	0800eff8 	.word	0x0800eff8

08009fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	@ (800a020 <RCC_Delay+0x34>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a0a      	ldr	r2, [pc, #40]	@ (800a024 <RCC_Delay+0x38>)
 8009ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffe:	0a5b      	lsrs	r3, r3, #9
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	fb02 f303 	mul.w	r3, r2, r3
 800a006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a008:	bf00      	nop
  }
  while (Delay --);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	60fa      	str	r2, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1f9      	bne.n	800a008 <RCC_Delay+0x1c>
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bc80      	pop	{r7}
 800a01e:	4770      	bx	lr
 800a020:	20000004 	.word	0x20000004
 800a024:	10624dd3 	.word	0x10624dd3

0800a028 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	613b      	str	r3, [r7, #16]
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d07d      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a048:	4b4f      	ldr	r3, [pc, #316]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10d      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a054:	4b4c      	ldr	r3, [pc, #304]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	4a4b      	ldr	r2, [pc, #300]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a05a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a05e:	61d3      	str	r3, [r2, #28]
 800a060:	4b49      	ldr	r3, [pc, #292]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a068:	60bb      	str	r3, [r7, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a06c:	2301      	movs	r3, #1
 800a06e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a070:	4b46      	ldr	r3, [pc, #280]	@ (800a18c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d118      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a07c:	4b43      	ldr	r3, [pc, #268]	@ (800a18c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a42      	ldr	r2, [pc, #264]	@ (800a18c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a088:	f7fd fd36 	bl	8007af8 <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a08e:	e008      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a090:	f7fd fd32 	bl	8007af8 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b64      	cmp	r3, #100	@ 0x64
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e06d      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0a2:	4b3a      	ldr	r3, [pc, #232]	@ (800a18c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0f0      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a0ae:	4b36      	ldr	r3, [pc, #216]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d02e      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d027      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a0cc:	4b2e      	ldr	r3, [pc, #184]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a0d6:	4b2e      	ldr	r3, [pc, #184]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a0d8:	2201      	movs	r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a0dc:	4b2c      	ldr	r3, [pc, #176]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a0e2:	4a29      	ldr	r2, [pc, #164]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d014      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0f2:	f7fd fd01 	bl	8007af8 <HAL_GetTick>
 800a0f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0f8:	e00a      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0fa:	f7fd fcfd 	bl	8007af8 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a108:	4293      	cmp	r3, r2
 800a10a:	d901      	bls.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e036      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a110:	4b1d      	ldr	r3, [pc, #116]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0ee      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a11c:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4917      	ldr	r1, [pc, #92]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d105      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a134:	4b14      	ldr	r3, [pc, #80]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	4a13      	ldr	r2, [pc, #76]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a13a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a13e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0302 	and.w	r3, r3, #2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d008      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a14c:	4b0e      	ldr	r3, [pc, #56]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	490b      	ldr	r1, [pc, #44]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0310 	and.w	r3, r3, #16
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a16a:	4b07      	ldr	r3, [pc, #28]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	4904      	ldr	r1, [pc, #16]	@ (800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	40021000 	.word	0x40021000
 800a18c:	40007000 	.word	0x40007000
 800a190:	42420440 	.word	0x42420440

0800a194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e076      	b.n	800a294 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d108      	bne.n	800a1c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1b6:	d009      	beq.n	800a1cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	61da      	str	r2, [r3, #28]
 800a1be:	e005      	b.n	800a1cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7fd f9ce 	bl	8007588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	f003 0302 	and.w	r3, r3, #2
 800a228:	431a      	orrs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a23c:	431a      	orrs	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a250:	ea42 0103 	orr.w	r1, r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a258:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	0c1a      	lsrs	r2, r3, #16
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f002 0204 	and.w	r2, r2, #4
 800a272:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	69da      	ldr	r2, [r3, #28]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a282:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d101      	bne.n	800a2be <HAL_SPI_Transmit+0x22>
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e12d      	b.n	800a51a <HAL_SPI_Transmit+0x27e>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2c6:	f7fd fc17 	bl	8007af8 <HAL_GetTick>
 800a2ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d002      	beq.n	800a2e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2e0:	e116      	b.n	800a510 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <HAL_SPI_Transmit+0x52>
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2f2:	e10d      	b.n	800a510 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	88fa      	ldrh	r2, [r7, #6]
 800a30c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	88fa      	ldrh	r2, [r7, #6]
 800a312:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a33a:	d10f      	bne.n	800a35c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a34a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a35a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a366:	2b40      	cmp	r3, #64	@ 0x40
 800a368:	d007      	beq.n	800a37a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a382:	d14f      	bne.n	800a424 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <HAL_SPI_Transmit+0xf6>
 800a38c:	8afb      	ldrh	r3, [r7, #22]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d142      	bne.n	800a418 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a396:	881a      	ldrh	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a2:	1c9a      	adds	r2, r3, #2
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a3b6:	e02f      	b.n	800a418 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d112      	bne.n	800a3ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	881a      	ldrh	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d6:	1c9a      	adds	r2, r3, #2
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a3ea:	e015      	b.n	800a418 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3ec:	f7fd fb84 	bl	8007af8 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d803      	bhi.n	800a404 <HAL_SPI_Transmit+0x168>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d102      	bne.n	800a40a <HAL_SPI_Transmit+0x16e>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800a416:	e07b      	b.n	800a510 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1ca      	bne.n	800a3b8 <HAL_SPI_Transmit+0x11c>
 800a422:	e050      	b.n	800a4c6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <HAL_SPI_Transmit+0x196>
 800a42c:	8afb      	ldrh	r3, [r7, #22]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d144      	bne.n	800a4bc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	330c      	adds	r3, #12
 800a43c:	7812      	ldrb	r2, [r2, #0]
 800a43e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a44e:	b29b      	uxth	r3, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	b29a      	uxth	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a458:	e030      	b.n	800a4bc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b02      	cmp	r3, #2
 800a466:	d113      	bne.n	800a490 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	330c      	adds	r3, #12
 800a472:	7812      	ldrb	r2, [r2, #0]
 800a474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a484:	b29b      	uxth	r3, r3
 800a486:	3b01      	subs	r3, #1
 800a488:	b29a      	uxth	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a48e:	e015      	b.n	800a4bc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a490:	f7fd fb32 	bl	8007af8 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d803      	bhi.n	800a4a8 <HAL_SPI_Transmit+0x20c>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d102      	bne.n	800a4ae <HAL_SPI_Transmit+0x212>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800a4ba:	e029      	b.n	800a510 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1c9      	bne.n	800a45a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f8b2 	bl	800a634 <SPI_EndRxTxTransaction>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2220      	movs	r2, #32
 800a4da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	77fb      	strb	r3, [r7, #31]
 800a506:	e003      	b.n	800a510 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a518:	7ffb      	ldrb	r3, [r7, #31]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3720      	adds	r7, #32
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	603b      	str	r3, [r7, #0]
 800a530:	4613      	mov	r3, r2
 800a532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a534:	f7fd fae0 	bl	8007af8 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53c:	1a9b      	subs	r3, r3, r2
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	4413      	add	r3, r2
 800a542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a544:	f7fd fad8 	bl	8007af8 <HAL_GetTick>
 800a548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a54a:	4b39      	ldr	r3, [pc, #228]	@ (800a630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	015b      	lsls	r3, r3, #5
 800a550:	0d1b      	lsrs	r3, r3, #20
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	fb02 f303 	mul.w	r3, r2, r3
 800a558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a55a:	e054      	b.n	800a606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a562:	d050      	beq.n	800a606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a564:	f7fd fac8 	bl	8007af8 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	429a      	cmp	r2, r3
 800a572:	d902      	bls.n	800a57a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d13d      	bne.n	800a5f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a592:	d111      	bne.n	800a5b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a59c:	d004      	beq.n	800a5a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5a6:	d107      	bne.n	800a5b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5c0:	d10f      	bne.n	800a5e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e017      	b.n	800a626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	3b01      	subs	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4013      	ands	r3, r2
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	429a      	cmp	r2, r3
 800a614:	bf0c      	ite	eq
 800a616:	2301      	moveq	r3, #1
 800a618:	2300      	movne	r3, #0
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	461a      	mov	r2, r3
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	429a      	cmp	r2, r3
 800a622:	d19b      	bne.n	800a55c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000004 	.word	0x20000004

0800a634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af02      	add	r7, sp, #8
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2200      	movs	r2, #0
 800a648:	2180      	movs	r1, #128	@ 0x80
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff ff6a 	bl	800a524 <SPI_WaitFlagStateUntilTimeout>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65a:	f043 0220 	orr.w	r2, r3, #32
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e000      	b.n	800a668 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e041      	b.n	800a706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7fc ffb4 	bl	8007604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f000 fc30 	bl	800af14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e03a      	b.n	800a79e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a18      	ldr	r2, [pc, #96]	@ (800a7a8 <HAL_TIM_Base_Start_IT+0x98>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00e      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x58>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a752:	d009      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x58>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a14      	ldr	r2, [pc, #80]	@ (800a7ac <HAL_TIM_Base_Start_IT+0x9c>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x58>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a13      	ldr	r2, [pc, #76]	@ (800a7b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d111      	bne.n	800a78c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f003 0307 	and.w	r3, r3, #7
 800a772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b06      	cmp	r3, #6
 800a778:	d010      	beq.n	800a79c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f042 0201 	orr.w	r2, r2, #1
 800a788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a78a:	e007      	b.n	800a79c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f042 0201 	orr.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bc80      	pop	{r7}
 800a7a6:	4770      	bx	lr
 800a7a8:	40012c00 	.word	0x40012c00
 800a7ac:	40000400 	.word	0x40000400
 800a7b0:	40000800 	.word	0x40000800

0800a7b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e041      	b.n	800a84a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d106      	bne.n	800a7e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f839 	bl	800a852 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f000 fb8e 	bl	800af14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr

0800a864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d109      	bne.n	800a888 <HAL_TIM_PWM_Start+0x24>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	bf14      	ite	ne
 800a880:	2301      	movne	r3, #1
 800a882:	2300      	moveq	r3, #0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	e022      	b.n	800a8ce <HAL_TIM_PWM_Start+0x6a>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d109      	bne.n	800a8a2 <HAL_TIM_PWM_Start+0x3e>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b01      	cmp	r3, #1
 800a898:	bf14      	ite	ne
 800a89a:	2301      	movne	r3, #1
 800a89c:	2300      	moveq	r3, #0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	e015      	b.n	800a8ce <HAL_TIM_PWM_Start+0x6a>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b08      	cmp	r3, #8
 800a8a6:	d109      	bne.n	800a8bc <HAL_TIM_PWM_Start+0x58>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	bf14      	ite	ne
 800a8b4:	2301      	movne	r3, #1
 800a8b6:	2300      	moveq	r3, #0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	e008      	b.n	800a8ce <HAL_TIM_PWM_Start+0x6a>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	bf14      	ite	ne
 800a8c8:	2301      	movne	r3, #1
 800a8ca:	2300      	moveq	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e05e      	b.n	800a994 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <HAL_TIM_PWM_Start+0x82>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8e4:	e013      	b.n	800a90e <HAL_TIM_PWM_Start+0xaa>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d104      	bne.n	800a8f6 <HAL_TIM_PWM_Start+0x92>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8f4:	e00b      	b.n	800a90e <HAL_TIM_PWM_Start+0xaa>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b08      	cmp	r3, #8
 800a8fa:	d104      	bne.n	800a906 <HAL_TIM_PWM_Start+0xa2>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a904:	e003      	b.n	800a90e <HAL_TIM_PWM_Start+0xaa>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2202      	movs	r2, #2
 800a90a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2201      	movs	r2, #1
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	4618      	mov	r0, r3
 800a918:	f000 fd7c 	bl	800b414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1e      	ldr	r2, [pc, #120]	@ (800a99c <HAL_TIM_PWM_Start+0x138>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d107      	bne.n	800a936 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a18      	ldr	r2, [pc, #96]	@ (800a99c <HAL_TIM_PWM_Start+0x138>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d00e      	beq.n	800a95e <HAL_TIM_PWM_Start+0xfa>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a948:	d009      	beq.n	800a95e <HAL_TIM_PWM_Start+0xfa>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a14      	ldr	r2, [pc, #80]	@ (800a9a0 <HAL_TIM_PWM_Start+0x13c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d004      	beq.n	800a95e <HAL_TIM_PWM_Start+0xfa>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a12      	ldr	r2, [pc, #72]	@ (800a9a4 <HAL_TIM_PWM_Start+0x140>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d111      	bne.n	800a982 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b06      	cmp	r3, #6
 800a96e:	d010      	beq.n	800a992 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f042 0201 	orr.w	r2, r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a980:	e007      	b.n	800a992 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0201 	orr.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	40012c00 	.word	0x40012c00
 800a9a0:	40000400 	.word	0x40000400
 800a9a4:	40000800 	.word	0x40000800

0800a9a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d122      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f003 0302 	and.w	r3, r3, #2
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d11b      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0202 	mvn.w	r2, #2
 800a9d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fa76 	bl	800aedc <HAL_TIM_IC_CaptureCallback>
 800a9f0:	e005      	b.n	800a9fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa69 	bl	800aeca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fa78 	bl	800aeee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d122      	bne.n	800aa58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d11b      	bne.n	800aa58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f06f 0204 	mvn.w	r2, #4
 800aa28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa4c 	bl	800aedc <HAL_TIM_IC_CaptureCallback>
 800aa44:	e005      	b.n	800aa52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fa3f 	bl	800aeca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa4e 	bl	800aeee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f003 0308 	and.w	r3, r3, #8
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d122      	bne.n	800aaac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 0308 	and.w	r3, r3, #8
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d11b      	bne.n	800aaac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f06f 0208 	mvn.w	r2, #8
 800aa7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2204      	movs	r2, #4
 800aa82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa22 	bl	800aedc <HAL_TIM_IC_CaptureCallback>
 800aa98:	e005      	b.n	800aaa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa15 	bl	800aeca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 fa24 	bl	800aeee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	f003 0310 	and.w	r3, r3, #16
 800aab6:	2b10      	cmp	r3, #16
 800aab8:	d122      	bne.n	800ab00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f003 0310 	and.w	r3, r3, #16
 800aac4:	2b10      	cmp	r3, #16
 800aac6:	d11b      	bne.n	800ab00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f06f 0210 	mvn.w	r2, #16
 800aad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2208      	movs	r2, #8
 800aad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9f8 	bl	800aedc <HAL_TIM_IC_CaptureCallback>
 800aaec:	e005      	b.n	800aafa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f9eb 	bl	800aeca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f9fa 	bl	800aeee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d10e      	bne.n	800ab2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d107      	bne.n	800ab2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f06f 0201 	mvn.w	r2, #1
 800ab24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7fb ffca 	bl	8006ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab36:	2b80      	cmp	r3, #128	@ 0x80
 800ab38:	d10e      	bne.n	800ab58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab44:	2b80      	cmp	r3, #128	@ 0x80
 800ab46:	d107      	bne.n	800ab58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ab50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fce9 	bl	800b52a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab62:	2b40      	cmp	r3, #64	@ 0x40
 800ab64:	d10e      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab70:	2b40      	cmp	r3, #64	@ 0x40
 800ab72:	d107      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f9be 	bl	800af00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d10e      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d107      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0220 	mvn.w	r2, #32
 800aba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fcb4 	bl	800b518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e0ae      	b.n	800ad34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b0c      	cmp	r3, #12
 800abe2:	f200 809f 	bhi.w	800ad24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800abe6:	a201      	add	r2, pc, #4	@ (adr r2, 800abec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac21 	.word	0x0800ac21
 800abf0:	0800ad25 	.word	0x0800ad25
 800abf4:	0800ad25 	.word	0x0800ad25
 800abf8:	0800ad25 	.word	0x0800ad25
 800abfc:	0800ac61 	.word	0x0800ac61
 800ac00:	0800ad25 	.word	0x0800ad25
 800ac04:	0800ad25 	.word	0x0800ad25
 800ac08:	0800ad25 	.word	0x0800ad25
 800ac0c:	0800aca3 	.word	0x0800aca3
 800ac10:	0800ad25 	.word	0x0800ad25
 800ac14:	0800ad25 	.word	0x0800ad25
 800ac18:	0800ad25 	.word	0x0800ad25
 800ac1c:	0800ace3 	.word	0x0800ace3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 f9d6 	bl	800afd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	699a      	ldr	r2, [r3, #24]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f042 0208 	orr.w	r2, r2, #8
 800ac3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 0204 	bic.w	r2, r2, #4
 800ac4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6999      	ldr	r1, [r3, #24]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	691a      	ldr	r2, [r3, #16]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	619a      	str	r2, [r3, #24]
      break;
 800ac5e:	e064      	b.n	800ad2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 fa1c 	bl	800b0a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6999      	ldr	r1, [r3, #24]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	021a      	lsls	r2, r3, #8
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	619a      	str	r2, [r3, #24]
      break;
 800aca0:	e043      	b.n	800ad2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fa65 	bl	800b178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69da      	ldr	r2, [r3, #28]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f042 0208 	orr.w	r2, r2, #8
 800acbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69da      	ldr	r2, [r3, #28]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f022 0204 	bic.w	r2, r2, #4
 800accc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69d9      	ldr	r1, [r3, #28]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	61da      	str	r2, [r3, #28]
      break;
 800ace0:	e023      	b.n	800ad2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 faaf 	bl	800b24c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800acfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	69da      	ldr	r2, [r3, #28]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	69d9      	ldr	r1, [r3, #28]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	021a      	lsls	r2, r3, #8
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	61da      	str	r2, [r3, #28]
      break;
 800ad22:	e002      	b.n	800ad2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	75fb      	strb	r3, [r7, #23]
      break;
 800ad28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <HAL_TIM_ConfigClockSource+0x1c>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e0b4      	b.n	800aec2 <HAL_TIM_ConfigClockSource+0x186>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ad76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad90:	d03e      	beq.n	800ae10 <HAL_TIM_ConfigClockSource+0xd4>
 800ad92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad96:	f200 8087 	bhi.w	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800ad9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad9e:	f000 8086 	beq.w	800aeae <HAL_TIM_ConfigClockSource+0x172>
 800ada2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ada6:	d87f      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800ada8:	2b70      	cmp	r3, #112	@ 0x70
 800adaa:	d01a      	beq.n	800ade2 <HAL_TIM_ConfigClockSource+0xa6>
 800adac:	2b70      	cmp	r3, #112	@ 0x70
 800adae:	d87b      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800adb0:	2b60      	cmp	r3, #96	@ 0x60
 800adb2:	d050      	beq.n	800ae56 <HAL_TIM_ConfigClockSource+0x11a>
 800adb4:	2b60      	cmp	r3, #96	@ 0x60
 800adb6:	d877      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800adb8:	2b50      	cmp	r3, #80	@ 0x50
 800adba:	d03c      	beq.n	800ae36 <HAL_TIM_ConfigClockSource+0xfa>
 800adbc:	2b50      	cmp	r3, #80	@ 0x50
 800adbe:	d873      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800adc0:	2b40      	cmp	r3, #64	@ 0x40
 800adc2:	d058      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x13a>
 800adc4:	2b40      	cmp	r3, #64	@ 0x40
 800adc6:	d86f      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800adc8:	2b30      	cmp	r3, #48	@ 0x30
 800adca:	d064      	beq.n	800ae96 <HAL_TIM_ConfigClockSource+0x15a>
 800adcc:	2b30      	cmp	r3, #48	@ 0x30
 800adce:	d86b      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800add0:	2b20      	cmp	r3, #32
 800add2:	d060      	beq.n	800ae96 <HAL_TIM_ConfigClockSource+0x15a>
 800add4:	2b20      	cmp	r3, #32
 800add6:	d867      	bhi.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d05c      	beq.n	800ae96 <HAL_TIM_ConfigClockSource+0x15a>
 800addc:	2b10      	cmp	r3, #16
 800adde:	d05a      	beq.n	800ae96 <HAL_TIM_ConfigClockSource+0x15a>
 800ade0:	e062      	b.n	800aea8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adf2:	f000 faf0 	bl	800b3d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	609a      	str	r2, [r3, #8]
      break;
 800ae0e:	e04f      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae20:	f000 fad9 	bl	800b3d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae32:	609a      	str	r2, [r3, #8]
      break;
 800ae34:	e03c      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae42:	461a      	mov	r2, r3
 800ae44:	f000 fa50 	bl	800b2e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2150      	movs	r1, #80	@ 0x50
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 faa7 	bl	800b3a2 <TIM_ITRx_SetConfig>
      break;
 800ae54:	e02c      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae62:	461a      	mov	r2, r3
 800ae64:	f000 fa6e 	bl	800b344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2160      	movs	r1, #96	@ 0x60
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 fa97 	bl	800b3a2 <TIM_ITRx_SetConfig>
      break;
 800ae74:	e01c      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae82:	461a      	mov	r2, r3
 800ae84:	f000 fa30 	bl	800b2e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2140      	movs	r1, #64	@ 0x40
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fa87 	bl	800b3a2 <TIM_ITRx_SetConfig>
      break;
 800ae94:	e00c      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f000 fa7e 	bl	800b3a2 <TIM_ITRx_SetConfig>
      break;
 800aea6:	e003      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aeac:	e000      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aeae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr

0800aedc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr

0800aeee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bc80      	pop	{r7}
 800af10:	4770      	bx	lr
	...

0800af14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a29      	ldr	r2, [pc, #164]	@ (800afcc <TIM_Base_SetConfig+0xb8>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d00b      	beq.n	800af44 <TIM_Base_SetConfig+0x30>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af32:	d007      	beq.n	800af44 <TIM_Base_SetConfig+0x30>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a26      	ldr	r2, [pc, #152]	@ (800afd0 <TIM_Base_SetConfig+0xbc>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d003      	beq.n	800af44 <TIM_Base_SetConfig+0x30>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a25      	ldr	r2, [pc, #148]	@ (800afd4 <TIM_Base_SetConfig+0xc0>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d108      	bne.n	800af56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	4313      	orrs	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a1c      	ldr	r2, [pc, #112]	@ (800afcc <TIM_Base_SetConfig+0xb8>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d00b      	beq.n	800af76 <TIM_Base_SetConfig+0x62>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af64:	d007      	beq.n	800af76 <TIM_Base_SetConfig+0x62>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a19      	ldr	r2, [pc, #100]	@ (800afd0 <TIM_Base_SetConfig+0xbc>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d003      	beq.n	800af76 <TIM_Base_SetConfig+0x62>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a18      	ldr	r2, [pc, #96]	@ (800afd4 <TIM_Base_SetConfig+0xc0>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d108      	bne.n	800af88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	4313      	orrs	r3, r2
 800af94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a07      	ldr	r2, [pc, #28]	@ (800afcc <TIM_Base_SetConfig+0xb8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d103      	bne.n	800afbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	615a      	str	r2, [r3, #20]
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bc80      	pop	{r7}
 800afca:	4770      	bx	lr
 800afcc:	40012c00 	.word	0x40012c00
 800afd0:	40000400 	.word	0x40000400
 800afd4:	40000800 	.word	0x40000800

0800afd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	f023 0201 	bic.w	r2, r3, #1
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 0303 	bic.w	r3, r3, #3
 800b00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	4313      	orrs	r3, r2
 800b018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f023 0302 	bic.w	r3, r3, #2
 800b020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	4313      	orrs	r3, r2
 800b02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a1c      	ldr	r2, [pc, #112]	@ (800b0a0 <TIM_OC1_SetConfig+0xc8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d10c      	bne.n	800b04e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f023 0308 	bic.w	r3, r3, #8
 800b03a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4313      	orrs	r3, r2
 800b044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f023 0304 	bic.w	r3, r3, #4
 800b04c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a13      	ldr	r2, [pc, #76]	@ (800b0a0 <TIM_OC1_SetConfig+0xc8>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d111      	bne.n	800b07a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b05c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	4313      	orrs	r3, r2
 800b078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	621a      	str	r2, [r3, #32]
}
 800b094:	bf00      	nop
 800b096:	371c      	adds	r7, #28
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	40012c00 	.word	0x40012c00

0800b0a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	f023 0210 	bic.w	r2, r3, #16
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	021b      	lsls	r3, r3, #8
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f023 0320 	bic.w	r3, r3, #32
 800b0ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	011b      	lsls	r3, r3, #4
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a1d      	ldr	r2, [pc, #116]	@ (800b174 <TIM_OC2_SetConfig+0xd0>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d10d      	bne.n	800b120 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	011b      	lsls	r3, r3, #4
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	4313      	orrs	r3, r2
 800b116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b11e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a14      	ldr	r2, [pc, #80]	@ (800b174 <TIM_OC2_SetConfig+0xd0>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d113      	bne.n	800b150 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b12e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	4313      	orrs	r3, r2
 800b142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	621a      	str	r2, [r3, #32]
}
 800b16a:	bf00      	nop
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	bc80      	pop	{r7}
 800b172:	4770      	bx	lr
 800b174:	40012c00 	.word	0x40012c00

0800b178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 0303 	bic.w	r3, r3, #3
 800b1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b1c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b248 <TIM_OC3_SetConfig+0xd0>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d10d      	bne.n	800b1f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	021b      	lsls	r3, r3, #8
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a14      	ldr	r2, [pc, #80]	@ (800b248 <TIM_OC3_SetConfig+0xd0>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d113      	bne.n	800b222 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	011b      	lsls	r3, r3, #4
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	4313      	orrs	r3, r2
 800b214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4313      	orrs	r3, r2
 800b220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	621a      	str	r2, [r3, #32]
}
 800b23c:	bf00      	nop
 800b23e:	371c      	adds	r7, #28
 800b240:	46bd      	mov	sp, r7
 800b242:	bc80      	pop	{r7}
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	40012c00 	.word	0x40012c00

0800b24c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	021b      	lsls	r3, r3, #8
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	031b      	lsls	r3, r3, #12
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b2e4 <TIM_OC4_SetConfig+0x98>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d109      	bne.n	800b2c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	019b      	lsls	r3, r3, #6
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	621a      	str	r2, [r3, #32]
}
 800b2da:	bf00      	nop
 800b2dc:	371c      	adds	r7, #28
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bc80      	pop	{r7}
 800b2e2:	4770      	bx	lr
 800b2e4:	40012c00 	.word	0x40012c00

0800b2e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	f023 0201 	bic.w	r2, r3, #1
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f023 030a 	bic.w	r3, r3, #10
 800b324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	621a      	str	r2, [r3, #32]
}
 800b33a:	bf00      	nop
 800b33c:	371c      	adds	r7, #28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bc80      	pop	{r7}
 800b342:	4770      	bx	lr

0800b344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	f023 0210 	bic.w	r2, r3, #16
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	031b      	lsls	r3, r3, #12
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4313      	orrs	r3, r2
 800b378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b380:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	011b      	lsls	r3, r3, #4
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4313      	orrs	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	621a      	str	r2, [r3, #32]
}
 800b398:	bf00      	nop
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	f043 0307 	orr.w	r3, r3, #7
 800b3c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	609a      	str	r2, [r3, #8]
}
 800b3cc:	bf00      	nop
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bc80      	pop	{r7}
 800b3d4:	4770      	bx	lr

0800b3d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b087      	sub	sp, #28
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	60b9      	str	r1, [r7, #8]
 800b3e0:	607a      	str	r2, [r7, #4]
 800b3e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	021a      	lsls	r2, r3, #8
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	4313      	orrs	r3, r2
 800b402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	609a      	str	r2, [r3, #8]
}
 800b40a:	bf00      	nop
 800b40c:	371c      	adds	r7, #28
 800b40e:	46bd      	mov	sp, r7
 800b410:	bc80      	pop	{r7}
 800b412:	4770      	bx	lr

0800b414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b414:	b480      	push	{r7}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f003 031f 	and.w	r3, r3, #31
 800b426:	2201      	movs	r2, #1
 800b428:	fa02 f303 	lsl.w	r3, r2, r3
 800b42c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a1a      	ldr	r2, [r3, #32]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	43db      	mvns	r3, r3
 800b436:	401a      	ands	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6a1a      	ldr	r2, [r3, #32]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f003 031f 	and.w	r3, r3, #31
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	fa01 f303 	lsl.w	r3, r1, r3
 800b44c:	431a      	orrs	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	621a      	str	r2, [r3, #32]
}
 800b452:	bf00      	nop
 800b454:	371c      	adds	r7, #28
 800b456:	46bd      	mov	sp, r7
 800b458:	bc80      	pop	{r7}
 800b45a:	4770      	bx	lr

0800b45c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d101      	bne.n	800b474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b470:	2302      	movs	r3, #2
 800b472:	e046      	b.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b49a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a16      	ldr	r2, [pc, #88]	@ (800b50c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00e      	beq.n	800b4d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c0:	d009      	beq.n	800b4d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a12      	ldr	r2, [pc, #72]	@ (800b510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d004      	beq.n	800b4d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a10      	ldr	r2, [pc, #64]	@ (800b514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d10c      	bne.n	800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr
 800b50c:	40012c00 	.word	0x40012c00
 800b510:	40000400 	.word	0x40000400
 800b514:	40000800 	.word	0x40000800

0800b518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	bc80      	pop	{r7}
 800b528:	4770      	bx	lr

0800b52a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b52a:	b480      	push	{r7}
 800b52c:	b083      	sub	sp, #12
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b532:	bf00      	nop
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr

0800b53c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e042      	b.n	800b5d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7fc f8d4 	bl	8007710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2224      	movs	r2, #36	@ 0x24
 800b56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b57e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f82b 	bl	800b5dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691a      	ldr	r2, [r3, #16]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	695a      	ldr	r2, [r3, #20]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b5a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b5b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	431a      	orrs	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	4313      	orrs	r3, r2
 800b60a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800b616:	f023 030c 	bic.w	r3, r3, #12
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6812      	ldr	r2, [r2, #0]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	430b      	orrs	r3, r1
 800b622:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	699a      	ldr	r2, [r3, #24]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a2c      	ldr	r2, [pc, #176]	@ (800b6f0 <UART_SetConfig+0x114>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d103      	bne.n	800b64c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b644:	f7fe fcbe 	bl	8009fc4 <HAL_RCC_GetPCLK2Freq>
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	e002      	b.n	800b652 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b64c:	f7fe fca6 	bl	8009f9c <HAL_RCC_GetPCLK1Freq>
 800b650:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	4613      	mov	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	009a      	lsls	r2, r3, #2
 800b65c:	441a      	add	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	fbb2 f3f3 	udiv	r3, r2, r3
 800b668:	4a22      	ldr	r2, [pc, #136]	@ (800b6f4 <UART_SetConfig+0x118>)
 800b66a:	fba2 2303 	umull	r2, r3, r2, r3
 800b66e:	095b      	lsrs	r3, r3, #5
 800b670:	0119      	lsls	r1, r3, #4
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009a      	lsls	r2, r3, #2
 800b67c:	441a      	add	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	fbb2 f2f3 	udiv	r2, r2, r3
 800b688:	4b1a      	ldr	r3, [pc, #104]	@ (800b6f4 <UART_SetConfig+0x118>)
 800b68a:	fba3 0302 	umull	r0, r3, r3, r2
 800b68e:	095b      	lsrs	r3, r3, #5
 800b690:	2064      	movs	r0, #100	@ 0x64
 800b692:	fb00 f303 	mul.w	r3, r0, r3
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	3332      	adds	r3, #50	@ 0x32
 800b69c:	4a15      	ldr	r2, [pc, #84]	@ (800b6f4 <UART_SetConfig+0x118>)
 800b69e:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a2:	095b      	lsrs	r3, r3, #5
 800b6a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6a8:	4419      	add	r1, r3
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	009a      	lsls	r2, r3, #2
 800b6b4:	441a      	add	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f4 <UART_SetConfig+0x118>)
 800b6c2:	fba3 0302 	umull	r0, r3, r3, r2
 800b6c6:	095b      	lsrs	r3, r3, #5
 800b6c8:	2064      	movs	r0, #100	@ 0x64
 800b6ca:	fb00 f303 	mul.w	r3, r0, r3
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	011b      	lsls	r3, r3, #4
 800b6d2:	3332      	adds	r3, #50	@ 0x32
 800b6d4:	4a07      	ldr	r2, [pc, #28]	@ (800b6f4 <UART_SetConfig+0x118>)
 800b6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6da:	095b      	lsrs	r3, r3, #5
 800b6dc:	f003 020f 	and.w	r2, r3, #15
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	440a      	add	r2, r1
 800b6e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b6e8:	bf00      	nop
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	40013800 	.word	0x40013800
 800b6f4:	51eb851f 	.word	0x51eb851f

0800b6f8 <_ZdlPvj>:
 800b6f8:	f000 b811 	b.w	800b71e <_ZdlPv>

0800b6fc <_Znwj>:
 800b6fc:	2801      	cmp	r0, #1
 800b6fe:	bf38      	it	cc
 800b700:	2001      	movcc	r0, #1
 800b702:	b510      	push	{r4, lr}
 800b704:	4604      	mov	r4, r0
 800b706:	4620      	mov	r0, r4
 800b708:	f000 f81c 	bl	800b744 <malloc>
 800b70c:	b100      	cbz	r0, 800b710 <_Znwj+0x14>
 800b70e:	bd10      	pop	{r4, pc}
 800b710:	f000 f808 	bl	800b724 <_ZSt15get_new_handlerv>
 800b714:	b908      	cbnz	r0, 800b71a <_Znwj+0x1e>
 800b716:	f000 f80d 	bl	800b734 <abort>
 800b71a:	4780      	blx	r0
 800b71c:	e7f3      	b.n	800b706 <_Znwj+0xa>

0800b71e <_ZdlPv>:
 800b71e:	f000 b819 	b.w	800b754 <free>
	...

0800b724 <_ZSt15get_new_handlerv>:
 800b724:	4b02      	ldr	r3, [pc, #8]	@ (800b730 <_ZSt15get_new_handlerv+0xc>)
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	f3bf 8f5b 	dmb	ish
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	20000430 	.word	0x20000430

0800b734 <abort>:
 800b734:	2006      	movs	r0, #6
 800b736:	b508      	push	{r3, lr}
 800b738:	f000 fe74 	bl	800c424 <raise>
 800b73c:	2001      	movs	r0, #1
 800b73e:	f7fc f8ac 	bl	800789a <_exit>
	...

0800b744 <malloc>:
 800b744:	4b02      	ldr	r3, [pc, #8]	@ (800b750 <malloc+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f000 b82d 	b.w	800b7a8 <_malloc_r>
 800b74e:	bf00      	nop
 800b750:	2000001c 	.word	0x2000001c

0800b754 <free>:
 800b754:	4b02      	ldr	r3, [pc, #8]	@ (800b760 <free+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f001 bd6d 	b.w	800d238 <_free_r>
 800b75e:	bf00      	nop
 800b760:	2000001c 	.word	0x2000001c

0800b764 <sbrk_aligned>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	4e0f      	ldr	r6, [pc, #60]	@ (800b7a4 <sbrk_aligned+0x40>)
 800b768:	460c      	mov	r4, r1
 800b76a:	6831      	ldr	r1, [r6, #0]
 800b76c:	4605      	mov	r5, r0
 800b76e:	b911      	cbnz	r1, 800b776 <sbrk_aligned+0x12>
 800b770:	f000 feac 	bl	800c4cc <_sbrk_r>
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f000 fea7 	bl	800c4cc <_sbrk_r>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d103      	bne.n	800b78a <sbrk_aligned+0x26>
 800b782:	f04f 34ff 	mov.w	r4, #4294967295
 800b786:	4620      	mov	r0, r4
 800b788:	bd70      	pop	{r4, r5, r6, pc}
 800b78a:	1cc4      	adds	r4, r0, #3
 800b78c:	f024 0403 	bic.w	r4, r4, #3
 800b790:	42a0      	cmp	r0, r4
 800b792:	d0f8      	beq.n	800b786 <sbrk_aligned+0x22>
 800b794:	1a21      	subs	r1, r4, r0
 800b796:	4628      	mov	r0, r5
 800b798:	f000 fe98 	bl	800c4cc <_sbrk_r>
 800b79c:	3001      	adds	r0, #1
 800b79e:	d1f2      	bne.n	800b786 <sbrk_aligned+0x22>
 800b7a0:	e7ef      	b.n	800b782 <sbrk_aligned+0x1e>
 800b7a2:	bf00      	nop
 800b7a4:	20000434 	.word	0x20000434

0800b7a8 <_malloc_r>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	1ccd      	adds	r5, r1, #3
 800b7ae:	f025 0503 	bic.w	r5, r5, #3
 800b7b2:	3508      	adds	r5, #8
 800b7b4:	2d0c      	cmp	r5, #12
 800b7b6:	bf38      	it	cc
 800b7b8:	250c      	movcc	r5, #12
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	4606      	mov	r6, r0
 800b7be:	db01      	blt.n	800b7c4 <_malloc_r+0x1c>
 800b7c0:	42a9      	cmp	r1, r5
 800b7c2:	d904      	bls.n	800b7ce <_malloc_r+0x26>
 800b7c4:	230c      	movs	r3, #12
 800b7c6:	6033      	str	r3, [r6, #0]
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8a4 <_malloc_r+0xfc>
 800b7d2:	f000 f869 	bl	800b8a8 <__malloc_lock>
 800b7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7da:	461c      	mov	r4, r3
 800b7dc:	bb44      	cbnz	r4, 800b830 <_malloc_r+0x88>
 800b7de:	4629      	mov	r1, r5
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7ff ffbf 	bl	800b764 <sbrk_aligned>
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	d158      	bne.n	800b89e <_malloc_r+0xf6>
 800b7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800b7f0:	4627      	mov	r7, r4
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	d143      	bne.n	800b87e <_malloc_r+0xd6>
 800b7f6:	2c00      	cmp	r4, #0
 800b7f8:	d04b      	beq.n	800b892 <_malloc_r+0xea>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	4630      	mov	r0, r6
 800b800:	eb04 0903 	add.w	r9, r4, r3
 800b804:	f000 fe62 	bl	800c4cc <_sbrk_r>
 800b808:	4581      	cmp	r9, r0
 800b80a:	d142      	bne.n	800b892 <_malloc_r+0xea>
 800b80c:	6821      	ldr	r1, [r4, #0]
 800b80e:	4630      	mov	r0, r6
 800b810:	1a6d      	subs	r5, r5, r1
 800b812:	4629      	mov	r1, r5
 800b814:	f7ff ffa6 	bl	800b764 <sbrk_aligned>
 800b818:	3001      	adds	r0, #1
 800b81a:	d03a      	beq.n	800b892 <_malloc_r+0xea>
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	442b      	add	r3, r5
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	f8d8 3000 	ldr.w	r3, [r8]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	bb62      	cbnz	r2, 800b884 <_malloc_r+0xdc>
 800b82a:	f8c8 7000 	str.w	r7, [r8]
 800b82e:	e00f      	b.n	800b850 <_malloc_r+0xa8>
 800b830:	6822      	ldr	r2, [r4, #0]
 800b832:	1b52      	subs	r2, r2, r5
 800b834:	d420      	bmi.n	800b878 <_malloc_r+0xd0>
 800b836:	2a0b      	cmp	r2, #11
 800b838:	d917      	bls.n	800b86a <_malloc_r+0xc2>
 800b83a:	1961      	adds	r1, r4, r5
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	6025      	str	r5, [r4, #0]
 800b840:	bf18      	it	ne
 800b842:	6059      	strne	r1, [r3, #4]
 800b844:	6863      	ldr	r3, [r4, #4]
 800b846:	bf08      	it	eq
 800b848:	f8c8 1000 	streq.w	r1, [r8]
 800b84c:	5162      	str	r2, [r4, r5]
 800b84e:	604b      	str	r3, [r1, #4]
 800b850:	4630      	mov	r0, r6
 800b852:	f000 f82f 	bl	800b8b4 <__malloc_unlock>
 800b856:	f104 000b 	add.w	r0, r4, #11
 800b85a:	1d23      	adds	r3, r4, #4
 800b85c:	f020 0007 	bic.w	r0, r0, #7
 800b860:	1ac2      	subs	r2, r0, r3
 800b862:	bf1c      	itt	ne
 800b864:	1a1b      	subne	r3, r3, r0
 800b866:	50a3      	strne	r3, [r4, r2]
 800b868:	e7af      	b.n	800b7ca <_malloc_r+0x22>
 800b86a:	6862      	ldr	r2, [r4, #4]
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	bf0c      	ite	eq
 800b870:	f8c8 2000 	streq.w	r2, [r8]
 800b874:	605a      	strne	r2, [r3, #4]
 800b876:	e7eb      	b.n	800b850 <_malloc_r+0xa8>
 800b878:	4623      	mov	r3, r4
 800b87a:	6864      	ldr	r4, [r4, #4]
 800b87c:	e7ae      	b.n	800b7dc <_malloc_r+0x34>
 800b87e:	463c      	mov	r4, r7
 800b880:	687f      	ldr	r7, [r7, #4]
 800b882:	e7b6      	b.n	800b7f2 <_malloc_r+0x4a>
 800b884:	461a      	mov	r2, r3
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	42a3      	cmp	r3, r4
 800b88a:	d1fb      	bne.n	800b884 <_malloc_r+0xdc>
 800b88c:	2300      	movs	r3, #0
 800b88e:	6053      	str	r3, [r2, #4]
 800b890:	e7de      	b.n	800b850 <_malloc_r+0xa8>
 800b892:	230c      	movs	r3, #12
 800b894:	4630      	mov	r0, r6
 800b896:	6033      	str	r3, [r6, #0]
 800b898:	f000 f80c 	bl	800b8b4 <__malloc_unlock>
 800b89c:	e794      	b.n	800b7c8 <_malloc_r+0x20>
 800b89e:	6005      	str	r5, [r0, #0]
 800b8a0:	e7d6      	b.n	800b850 <_malloc_r+0xa8>
 800b8a2:	bf00      	nop
 800b8a4:	20000438 	.word	0x20000438

0800b8a8 <__malloc_lock>:
 800b8a8:	4801      	ldr	r0, [pc, #4]	@ (800b8b0 <__malloc_lock+0x8>)
 800b8aa:	f000 be5c 	b.w	800c566 <__retarget_lock_acquire_recursive>
 800b8ae:	bf00      	nop
 800b8b0:	2000057c 	.word	0x2000057c

0800b8b4 <__malloc_unlock>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	@ (800b8bc <__malloc_unlock+0x8>)
 800b8b6:	f000 be57 	b.w	800c568 <__retarget_lock_release_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	2000057c 	.word	0x2000057c

0800b8c0 <__cvt>:
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c6:	461d      	mov	r5, r3
 800b8c8:	bfbb      	ittet	lt
 800b8ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b8ce:	461d      	movlt	r5, r3
 800b8d0:	2300      	movge	r3, #0
 800b8d2:	232d      	movlt	r3, #45	@ 0x2d
 800b8d4:	b088      	sub	sp, #32
 800b8d6:	4614      	mov	r4, r2
 800b8d8:	bfb8      	it	lt
 800b8da:	4614      	movlt	r4, r2
 800b8dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b8de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b8e0:	7013      	strb	r3, [r2, #0]
 800b8e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b8e8:	f023 0820 	bic.w	r8, r3, #32
 800b8ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8f0:	d005      	beq.n	800b8fe <__cvt+0x3e>
 800b8f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8f6:	d100      	bne.n	800b8fa <__cvt+0x3a>
 800b8f8:	3601      	adds	r6, #1
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	e000      	b.n	800b900 <__cvt+0x40>
 800b8fe:	2303      	movs	r3, #3
 800b900:	aa07      	add	r2, sp, #28
 800b902:	9204      	str	r2, [sp, #16]
 800b904:	aa06      	add	r2, sp, #24
 800b906:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b90a:	e9cd 3600 	strd	r3, r6, [sp]
 800b90e:	4622      	mov	r2, r4
 800b910:	462b      	mov	r3, r5
 800b912:	f000 fec9 	bl	800c6a8 <_dtoa_r>
 800b916:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b91a:	4607      	mov	r7, r0
 800b91c:	d119      	bne.n	800b952 <__cvt+0x92>
 800b91e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b920:	07db      	lsls	r3, r3, #31
 800b922:	d50e      	bpl.n	800b942 <__cvt+0x82>
 800b924:	eb00 0906 	add.w	r9, r0, r6
 800b928:	2200      	movs	r2, #0
 800b92a:	2300      	movs	r3, #0
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f5 f83a 	bl	80009a8 <__aeabi_dcmpeq>
 800b934:	b108      	cbz	r0, 800b93a <__cvt+0x7a>
 800b936:	f8cd 901c 	str.w	r9, [sp, #28]
 800b93a:	2230      	movs	r2, #48	@ 0x30
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	454b      	cmp	r3, r9
 800b940:	d31e      	bcc.n	800b980 <__cvt+0xc0>
 800b942:	4638      	mov	r0, r7
 800b944:	9b07      	ldr	r3, [sp, #28]
 800b946:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b948:	1bdb      	subs	r3, r3, r7
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	b008      	add	sp, #32
 800b94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b952:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b956:	eb00 0906 	add.w	r9, r0, r6
 800b95a:	d1e5      	bne.n	800b928 <__cvt+0x68>
 800b95c:	7803      	ldrb	r3, [r0, #0]
 800b95e:	2b30      	cmp	r3, #48	@ 0x30
 800b960:	d10a      	bne.n	800b978 <__cvt+0xb8>
 800b962:	2200      	movs	r2, #0
 800b964:	2300      	movs	r3, #0
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f5 f81d 	bl	80009a8 <__aeabi_dcmpeq>
 800b96e:	b918      	cbnz	r0, 800b978 <__cvt+0xb8>
 800b970:	f1c6 0601 	rsb	r6, r6, #1
 800b974:	f8ca 6000 	str.w	r6, [sl]
 800b978:	f8da 3000 	ldr.w	r3, [sl]
 800b97c:	4499      	add	r9, r3
 800b97e:	e7d3      	b.n	800b928 <__cvt+0x68>
 800b980:	1c59      	adds	r1, r3, #1
 800b982:	9107      	str	r1, [sp, #28]
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	e7d9      	b.n	800b93c <__cvt+0x7c>

0800b988 <__exponent>:
 800b988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b98a:	2900      	cmp	r1, #0
 800b98c:	bfb6      	itet	lt
 800b98e:	232d      	movlt	r3, #45	@ 0x2d
 800b990:	232b      	movge	r3, #43	@ 0x2b
 800b992:	4249      	neglt	r1, r1
 800b994:	2909      	cmp	r1, #9
 800b996:	7002      	strb	r2, [r0, #0]
 800b998:	7043      	strb	r3, [r0, #1]
 800b99a:	dd29      	ble.n	800b9f0 <__exponent+0x68>
 800b99c:	f10d 0307 	add.w	r3, sp, #7
 800b9a0:	461d      	mov	r5, r3
 800b9a2:	270a      	movs	r7, #10
 800b9a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	fb07 1416 	mls	r4, r7, r6, r1
 800b9ae:	3430      	adds	r4, #48	@ 0x30
 800b9b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	2c63      	cmp	r4, #99	@ 0x63
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9be:	dcf1      	bgt.n	800b9a4 <__exponent+0x1c>
 800b9c0:	3130      	adds	r1, #48	@ 0x30
 800b9c2:	1e94      	subs	r4, r2, #2
 800b9c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	1c41      	adds	r1, r0, #1
 800b9cc:	42ab      	cmp	r3, r5
 800b9ce:	d30a      	bcc.n	800b9e6 <__exponent+0x5e>
 800b9d0:	f10d 0309 	add.w	r3, sp, #9
 800b9d4:	1a9b      	subs	r3, r3, r2
 800b9d6:	42ac      	cmp	r4, r5
 800b9d8:	bf88      	it	hi
 800b9da:	2300      	movhi	r3, #0
 800b9dc:	3302      	adds	r3, #2
 800b9de:	4403      	add	r3, r0
 800b9e0:	1a18      	subs	r0, r3, r0
 800b9e2:	b003      	add	sp, #12
 800b9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9ee:	e7ed      	b.n	800b9cc <__exponent+0x44>
 800b9f0:	2330      	movs	r3, #48	@ 0x30
 800b9f2:	3130      	adds	r1, #48	@ 0x30
 800b9f4:	7083      	strb	r3, [r0, #2]
 800b9f6:	70c1      	strb	r1, [r0, #3]
 800b9f8:	1d03      	adds	r3, r0, #4
 800b9fa:	e7f1      	b.n	800b9e0 <__exponent+0x58>

0800b9fc <_printf_float>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	b091      	sub	sp, #68	@ 0x44
 800ba02:	460c      	mov	r4, r1
 800ba04:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800ba08:	4616      	mov	r6, r2
 800ba0a:	461f      	mov	r7, r3
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	f000 fd11 	bl	800c434 <_localeconv_r>
 800ba12:	6803      	ldr	r3, [r0, #0]
 800ba14:	4618      	mov	r0, r3
 800ba16:	9308      	str	r3, [sp, #32]
 800ba18:	f7f4 fb9a 	bl	8000150 <strlen>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba20:	f8d8 3000 	ldr.w	r3, [r8]
 800ba24:	9009      	str	r0, [sp, #36]	@ 0x24
 800ba26:	3307      	adds	r3, #7
 800ba28:	f023 0307 	bic.w	r3, r3, #7
 800ba2c:	f103 0208 	add.w	r2, r3, #8
 800ba30:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba34:	f8d4 b000 	ldr.w	fp, [r4]
 800ba38:	f8c8 2000 	str.w	r2, [r8]
 800ba3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba46:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ba4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba56:	4b9c      	ldr	r3, [pc, #624]	@ (800bcc8 <_printf_float+0x2cc>)
 800ba58:	f7f4 ffd8 	bl	8000a0c <__aeabi_dcmpun>
 800ba5c:	bb70      	cbnz	r0, 800babc <_printf_float+0xc0>
 800ba5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba62:	f04f 32ff 	mov.w	r2, #4294967295
 800ba66:	4b98      	ldr	r3, [pc, #608]	@ (800bcc8 <_printf_float+0x2cc>)
 800ba68:	f7f4 ffb2 	bl	80009d0 <__aeabi_dcmple>
 800ba6c:	bb30      	cbnz	r0, 800babc <_printf_float+0xc0>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2300      	movs	r3, #0
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f7f4 ffa1 	bl	80009bc <__aeabi_dcmplt>
 800ba7a:	b110      	cbz	r0, 800ba82 <_printf_float+0x86>
 800ba7c:	232d      	movs	r3, #45	@ 0x2d
 800ba7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba82:	4a92      	ldr	r2, [pc, #584]	@ (800bccc <_printf_float+0x2d0>)
 800ba84:	4b92      	ldr	r3, [pc, #584]	@ (800bcd0 <_printf_float+0x2d4>)
 800ba86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba8a:	bf94      	ite	ls
 800ba8c:	4690      	movls	r8, r2
 800ba8e:	4698      	movhi	r8, r3
 800ba90:	2303      	movs	r3, #3
 800ba92:	f04f 0900 	mov.w	r9, #0
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	f02b 0304 	bic.w	r3, fp, #4
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	4633      	mov	r3, r6
 800baa0:	4621      	mov	r1, r4
 800baa2:	4628      	mov	r0, r5
 800baa4:	9700      	str	r7, [sp, #0]
 800baa6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800baa8:	f000 f9d4 	bl	800be54 <_printf_common>
 800baac:	3001      	adds	r0, #1
 800baae:	f040 8090 	bne.w	800bbd2 <_printf_float+0x1d6>
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	b011      	add	sp, #68	@ 0x44
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babc:	4642      	mov	r2, r8
 800babe:	464b      	mov	r3, r9
 800bac0:	4640      	mov	r0, r8
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7f4 ffa2 	bl	8000a0c <__aeabi_dcmpun>
 800bac8:	b148      	cbz	r0, 800bade <_printf_float+0xe2>
 800baca:	464b      	mov	r3, r9
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bfb8      	it	lt
 800bad0:	232d      	movlt	r3, #45	@ 0x2d
 800bad2:	4a80      	ldr	r2, [pc, #512]	@ (800bcd4 <_printf_float+0x2d8>)
 800bad4:	bfb8      	it	lt
 800bad6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bada:	4b7f      	ldr	r3, [pc, #508]	@ (800bcd8 <_printf_float+0x2dc>)
 800badc:	e7d3      	b.n	800ba86 <_printf_float+0x8a>
 800bade:	6863      	ldr	r3, [r4, #4]
 800bae0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	d13f      	bne.n	800bb68 <_printf_float+0x16c>
 800bae8:	2306      	movs	r3, #6
 800baea:	6063      	str	r3, [r4, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	9206      	str	r2, [sp, #24]
 800baf6:	aa0e      	add	r2, sp, #56	@ 0x38
 800baf8:	e9cd a204 	strd	sl, r2, [sp, #16]
 800bafc:	aa0d      	add	r2, sp, #52	@ 0x34
 800bafe:	9203      	str	r2, [sp, #12]
 800bb00:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800bb04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb08:	6863      	ldr	r3, [r4, #4]
 800bb0a:	4642      	mov	r2, r8
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	4628      	mov	r0, r5
 800bb10:	464b      	mov	r3, r9
 800bb12:	910a      	str	r1, [sp, #40]	@ 0x28
 800bb14:	f7ff fed4 	bl	800b8c0 <__cvt>
 800bb18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	2947      	cmp	r1, #71	@ 0x47
 800bb1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bb20:	d128      	bne.n	800bb74 <_printf_float+0x178>
 800bb22:	1cc8      	adds	r0, r1, #3
 800bb24:	db02      	blt.n	800bb2c <_printf_float+0x130>
 800bb26:	6863      	ldr	r3, [r4, #4]
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	dd40      	ble.n	800bbae <_printf_float+0x1b2>
 800bb2c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb30:	fa5f fa8a 	uxtb.w	sl, sl
 800bb34:	4652      	mov	r2, sl
 800bb36:	3901      	subs	r1, #1
 800bb38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb3c:	910d      	str	r1, [sp, #52]	@ 0x34
 800bb3e:	f7ff ff23 	bl	800b988 <__exponent>
 800bb42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb44:	4681      	mov	r9, r0
 800bb46:	1813      	adds	r3, r2, r0
 800bb48:	2a01      	cmp	r2, #1
 800bb4a:	6123      	str	r3, [r4, #16]
 800bb4c:	dc02      	bgt.n	800bb54 <_printf_float+0x158>
 800bb4e:	6822      	ldr	r2, [r4, #0]
 800bb50:	07d2      	lsls	r2, r2, #31
 800bb52:	d501      	bpl.n	800bb58 <_printf_float+0x15c>
 800bb54:	3301      	adds	r3, #1
 800bb56:	6123      	str	r3, [r4, #16]
 800bb58:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d09e      	beq.n	800ba9e <_printf_float+0xa2>
 800bb60:	232d      	movs	r3, #45	@ 0x2d
 800bb62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb66:	e79a      	b.n	800ba9e <_printf_float+0xa2>
 800bb68:	2947      	cmp	r1, #71	@ 0x47
 800bb6a:	d1bf      	bne.n	800baec <_printf_float+0xf0>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1bd      	bne.n	800baec <_printf_float+0xf0>
 800bb70:	2301      	movs	r3, #1
 800bb72:	e7ba      	b.n	800baea <_printf_float+0xee>
 800bb74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb78:	d9dc      	bls.n	800bb34 <_printf_float+0x138>
 800bb7a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb7e:	d118      	bne.n	800bbb2 <_printf_float+0x1b6>
 800bb80:	2900      	cmp	r1, #0
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	dd0b      	ble.n	800bb9e <_printf_float+0x1a2>
 800bb86:	6121      	str	r1, [r4, #16]
 800bb88:	b913      	cbnz	r3, 800bb90 <_printf_float+0x194>
 800bb8a:	6822      	ldr	r2, [r4, #0]
 800bb8c:	07d0      	lsls	r0, r2, #31
 800bb8e:	d502      	bpl.n	800bb96 <_printf_float+0x19a>
 800bb90:	3301      	adds	r3, #1
 800bb92:	440b      	add	r3, r1
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	f04f 0900 	mov.w	r9, #0
 800bb9a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb9c:	e7dc      	b.n	800bb58 <_printf_float+0x15c>
 800bb9e:	b913      	cbnz	r3, 800bba6 <_printf_float+0x1aa>
 800bba0:	6822      	ldr	r2, [r4, #0]
 800bba2:	07d2      	lsls	r2, r2, #31
 800bba4:	d501      	bpl.n	800bbaa <_printf_float+0x1ae>
 800bba6:	3302      	adds	r3, #2
 800bba8:	e7f4      	b.n	800bb94 <_printf_float+0x198>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e7f2      	b.n	800bb94 <_printf_float+0x198>
 800bbae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	db05      	blt.n	800bbc4 <_printf_float+0x1c8>
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	6121      	str	r1, [r4, #16]
 800bbbc:	07d8      	lsls	r0, r3, #31
 800bbbe:	d5ea      	bpl.n	800bb96 <_printf_float+0x19a>
 800bbc0:	1c4b      	adds	r3, r1, #1
 800bbc2:	e7e7      	b.n	800bb94 <_printf_float+0x198>
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	bfcc      	ite	gt
 800bbc8:	2201      	movgt	r2, #1
 800bbca:	f1c1 0202 	rsble	r2, r1, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	e7e0      	b.n	800bb94 <_printf_float+0x198>
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	055a      	lsls	r2, r3, #21
 800bbd6:	d407      	bmi.n	800bbe8 <_printf_float+0x1ec>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	4642      	mov	r2, r8
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4628      	mov	r0, r5
 800bbe0:	47b8      	blx	r7
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	d12b      	bne.n	800bc3e <_printf_float+0x242>
 800bbe6:	e764      	b.n	800bab2 <_printf_float+0xb6>
 800bbe8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbec:	f240 80dc 	bls.w	800bda8 <_printf_float+0x3ac>
 800bbf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f7f4 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d033      	beq.n	800bc68 <_printf_float+0x26c>
 800bc00:	2301      	movs	r3, #1
 800bc02:	4631      	mov	r1, r6
 800bc04:	4628      	mov	r0, r5
 800bc06:	4a35      	ldr	r2, [pc, #212]	@ (800bcdc <_printf_float+0x2e0>)
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	f43f af51 	beq.w	800bab2 <_printf_float+0xb6>
 800bc10:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800bc14:	4543      	cmp	r3, r8
 800bc16:	db02      	blt.n	800bc1e <_printf_float+0x222>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	07d8      	lsls	r0, r3, #31
 800bc1c:	d50f      	bpl.n	800bc3e <_printf_float+0x242>
 800bc1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc22:	4631      	mov	r1, r6
 800bc24:	4628      	mov	r0, r5
 800bc26:	47b8      	blx	r7
 800bc28:	3001      	adds	r0, #1
 800bc2a:	f43f af42 	beq.w	800bab2 <_printf_float+0xb6>
 800bc2e:	f04f 0900 	mov.w	r9, #0
 800bc32:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc36:	f104 0a1a 	add.w	sl, r4, #26
 800bc3a:	45c8      	cmp	r8, r9
 800bc3c:	dc09      	bgt.n	800bc52 <_printf_float+0x256>
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	079b      	lsls	r3, r3, #30
 800bc42:	f100 8102 	bmi.w	800be4a <_printf_float+0x44e>
 800bc46:	68e0      	ldr	r0, [r4, #12]
 800bc48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc4a:	4298      	cmp	r0, r3
 800bc4c:	bfb8      	it	lt
 800bc4e:	4618      	movlt	r0, r3
 800bc50:	e731      	b.n	800bab6 <_printf_float+0xba>
 800bc52:	2301      	movs	r3, #1
 800bc54:	4652      	mov	r2, sl
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	f43f af28 	beq.w	800bab2 <_printf_float+0xb6>
 800bc62:	f109 0901 	add.w	r9, r9, #1
 800bc66:	e7e8      	b.n	800bc3a <_printf_float+0x23e>
 800bc68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	dc38      	bgt.n	800bce0 <_printf_float+0x2e4>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	4631      	mov	r1, r6
 800bc72:	4628      	mov	r0, r5
 800bc74:	4a19      	ldr	r2, [pc, #100]	@ (800bcdc <_printf_float+0x2e0>)
 800bc76:	47b8      	blx	r7
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f43f af1a 	beq.w	800bab2 <_printf_float+0xb6>
 800bc7e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800bc82:	ea59 0303 	orrs.w	r3, r9, r3
 800bc86:	d102      	bne.n	800bc8e <_printf_float+0x292>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	07d9      	lsls	r1, r3, #31
 800bc8c:	d5d7      	bpl.n	800bc3e <_printf_float+0x242>
 800bc8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc92:	4631      	mov	r1, r6
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b8      	blx	r7
 800bc98:	3001      	adds	r0, #1
 800bc9a:	f43f af0a 	beq.w	800bab2 <_printf_float+0xb6>
 800bc9e:	f04f 0a00 	mov.w	sl, #0
 800bca2:	f104 0b1a 	add.w	fp, r4, #26
 800bca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bca8:	425b      	negs	r3, r3
 800bcaa:	4553      	cmp	r3, sl
 800bcac:	dc01      	bgt.n	800bcb2 <_printf_float+0x2b6>
 800bcae:	464b      	mov	r3, r9
 800bcb0:	e793      	b.n	800bbda <_printf_float+0x1de>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	465a      	mov	r2, fp
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b8      	blx	r7
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	f43f aef8 	beq.w	800bab2 <_printf_float+0xb6>
 800bcc2:	f10a 0a01 	add.w	sl, sl, #1
 800bcc6:	e7ee      	b.n	800bca6 <_printf_float+0x2aa>
 800bcc8:	7fefffff 	.word	0x7fefffff
 800bccc:	0800f012 	.word	0x0800f012
 800bcd0:	0800f016 	.word	0x0800f016
 800bcd4:	0800f01a 	.word	0x0800f01a
 800bcd8:	0800f01e 	.word	0x0800f01e
 800bcdc:	0800f022 	.word	0x0800f022
 800bce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bce2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bce6:	4553      	cmp	r3, sl
 800bce8:	bfa8      	it	ge
 800bcea:	4653      	movge	r3, sl
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	4699      	mov	r9, r3
 800bcf0:	dc36      	bgt.n	800bd60 <_printf_float+0x364>
 800bcf2:	f04f 0b00 	mov.w	fp, #0
 800bcf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcfa:	f104 021a 	add.w	r2, r4, #26
 800bcfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd00:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd02:	eba3 0309 	sub.w	r3, r3, r9
 800bd06:	455b      	cmp	r3, fp
 800bd08:	dc31      	bgt.n	800bd6e <_printf_float+0x372>
 800bd0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd0c:	459a      	cmp	sl, r3
 800bd0e:	dc3a      	bgt.n	800bd86 <_printf_float+0x38a>
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	07da      	lsls	r2, r3, #31
 800bd14:	d437      	bmi.n	800bd86 <_printf_float+0x38a>
 800bd16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd18:	ebaa 0903 	sub.w	r9, sl, r3
 800bd1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd1e:	ebaa 0303 	sub.w	r3, sl, r3
 800bd22:	4599      	cmp	r9, r3
 800bd24:	bfa8      	it	ge
 800bd26:	4699      	movge	r9, r3
 800bd28:	f1b9 0f00 	cmp.w	r9, #0
 800bd2c:	dc33      	bgt.n	800bd96 <_printf_float+0x39a>
 800bd2e:	f04f 0800 	mov.w	r8, #0
 800bd32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd36:	f104 0b1a 	add.w	fp, r4, #26
 800bd3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd3c:	ebaa 0303 	sub.w	r3, sl, r3
 800bd40:	eba3 0309 	sub.w	r3, r3, r9
 800bd44:	4543      	cmp	r3, r8
 800bd46:	f77f af7a 	ble.w	800bc3e <_printf_float+0x242>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	465a      	mov	r2, fp
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	f43f aeac 	beq.w	800bab2 <_printf_float+0xb6>
 800bd5a:	f108 0801 	add.w	r8, r8, #1
 800bd5e:	e7ec      	b.n	800bd3a <_printf_float+0x33e>
 800bd60:	4642      	mov	r2, r8
 800bd62:	4631      	mov	r1, r6
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d1c2      	bne.n	800bcf2 <_printf_float+0x2f6>
 800bd6c:	e6a1      	b.n	800bab2 <_printf_float+0xb6>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4631      	mov	r1, r6
 800bd72:	4628      	mov	r0, r5
 800bd74:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd76:	47b8      	blx	r7
 800bd78:	3001      	adds	r0, #1
 800bd7a:	f43f ae9a 	beq.w	800bab2 <_printf_float+0xb6>
 800bd7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd80:	f10b 0b01 	add.w	fp, fp, #1
 800bd84:	e7bb      	b.n	800bcfe <_printf_float+0x302>
 800bd86:	4631      	mov	r1, r6
 800bd88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	d1c0      	bne.n	800bd16 <_printf_float+0x31a>
 800bd94:	e68d      	b.n	800bab2 <_printf_float+0xb6>
 800bd96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd98:	464b      	mov	r3, r9
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	4442      	add	r2, r8
 800bda0:	47b8      	blx	r7
 800bda2:	3001      	adds	r0, #1
 800bda4:	d1c3      	bne.n	800bd2e <_printf_float+0x332>
 800bda6:	e684      	b.n	800bab2 <_printf_float+0xb6>
 800bda8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bdac:	f1ba 0f01 	cmp.w	sl, #1
 800bdb0:	dc01      	bgt.n	800bdb6 <_printf_float+0x3ba>
 800bdb2:	07db      	lsls	r3, r3, #31
 800bdb4:	d536      	bpl.n	800be24 <_printf_float+0x428>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4642      	mov	r2, r8
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	f43f ae76 	beq.w	800bab2 <_printf_float+0xb6>
 800bdc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f43f ae6e 	beq.w	800bab2 <_printf_float+0xb6>
 800bdd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdda:	2200      	movs	r2, #0
 800bddc:	2300      	movs	r3, #0
 800bdde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bde2:	f7f4 fde1 	bl	80009a8 <__aeabi_dcmpeq>
 800bde6:	b9c0      	cbnz	r0, 800be1a <_printf_float+0x41e>
 800bde8:	4653      	mov	r3, sl
 800bdea:	f108 0201 	add.w	r2, r8, #1
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	47b8      	blx	r7
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d10c      	bne.n	800be12 <_printf_float+0x416>
 800bdf8:	e65b      	b.n	800bab2 <_printf_float+0xb6>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	465a      	mov	r2, fp
 800bdfe:	4631      	mov	r1, r6
 800be00:	4628      	mov	r0, r5
 800be02:	47b8      	blx	r7
 800be04:	3001      	adds	r0, #1
 800be06:	f43f ae54 	beq.w	800bab2 <_printf_float+0xb6>
 800be0a:	f108 0801 	add.w	r8, r8, #1
 800be0e:	45d0      	cmp	r8, sl
 800be10:	dbf3      	blt.n	800bdfa <_printf_float+0x3fe>
 800be12:	464b      	mov	r3, r9
 800be14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be18:	e6e0      	b.n	800bbdc <_printf_float+0x1e0>
 800be1a:	f04f 0800 	mov.w	r8, #0
 800be1e:	f104 0b1a 	add.w	fp, r4, #26
 800be22:	e7f4      	b.n	800be0e <_printf_float+0x412>
 800be24:	2301      	movs	r3, #1
 800be26:	4642      	mov	r2, r8
 800be28:	e7e1      	b.n	800bdee <_printf_float+0x3f2>
 800be2a:	2301      	movs	r3, #1
 800be2c:	464a      	mov	r2, r9
 800be2e:	4631      	mov	r1, r6
 800be30:	4628      	mov	r0, r5
 800be32:	47b8      	blx	r7
 800be34:	3001      	adds	r0, #1
 800be36:	f43f ae3c 	beq.w	800bab2 <_printf_float+0xb6>
 800be3a:	f108 0801 	add.w	r8, r8, #1
 800be3e:	68e3      	ldr	r3, [r4, #12]
 800be40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800be42:	1a5b      	subs	r3, r3, r1
 800be44:	4543      	cmp	r3, r8
 800be46:	dcf0      	bgt.n	800be2a <_printf_float+0x42e>
 800be48:	e6fd      	b.n	800bc46 <_printf_float+0x24a>
 800be4a:	f04f 0800 	mov.w	r8, #0
 800be4e:	f104 0919 	add.w	r9, r4, #25
 800be52:	e7f4      	b.n	800be3e <_printf_float+0x442>

0800be54 <_printf_common>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	4616      	mov	r6, r2
 800be5a:	4698      	mov	r8, r3
 800be5c:	688a      	ldr	r2, [r1, #8]
 800be5e:	690b      	ldr	r3, [r1, #16]
 800be60:	4607      	mov	r7, r0
 800be62:	4293      	cmp	r3, r2
 800be64:	bfb8      	it	lt
 800be66:	4613      	movlt	r3, r2
 800be68:	6033      	str	r3, [r6, #0]
 800be6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be6e:	460c      	mov	r4, r1
 800be70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be74:	b10a      	cbz	r2, 800be7a <_printf_common+0x26>
 800be76:	3301      	adds	r3, #1
 800be78:	6033      	str	r3, [r6, #0]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	0699      	lsls	r1, r3, #26
 800be7e:	bf42      	ittt	mi
 800be80:	6833      	ldrmi	r3, [r6, #0]
 800be82:	3302      	addmi	r3, #2
 800be84:	6033      	strmi	r3, [r6, #0]
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	f015 0506 	ands.w	r5, r5, #6
 800be8c:	d106      	bne.n	800be9c <_printf_common+0x48>
 800be8e:	f104 0a19 	add.w	sl, r4, #25
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	6832      	ldr	r2, [r6, #0]
 800be96:	1a9b      	subs	r3, r3, r2
 800be98:	42ab      	cmp	r3, r5
 800be9a:	dc2b      	bgt.n	800bef4 <_printf_common+0xa0>
 800be9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bea0:	6822      	ldr	r2, [r4, #0]
 800bea2:	3b00      	subs	r3, #0
 800bea4:	bf18      	it	ne
 800bea6:	2301      	movne	r3, #1
 800bea8:	0692      	lsls	r2, r2, #26
 800beaa:	d430      	bmi.n	800bf0e <_printf_common+0xba>
 800beac:	4641      	mov	r1, r8
 800beae:	4638      	mov	r0, r7
 800beb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800beb4:	47c8      	blx	r9
 800beb6:	3001      	adds	r0, #1
 800beb8:	d023      	beq.n	800bf02 <_printf_common+0xae>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	f003 0306 	and.w	r3, r3, #6
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	bf14      	ite	ne
 800bec6:	2500      	movne	r5, #0
 800bec8:	6833      	ldreq	r3, [r6, #0]
 800beca:	f04f 0600 	mov.w	r6, #0
 800bece:	bf08      	it	eq
 800bed0:	68e5      	ldreq	r5, [r4, #12]
 800bed2:	f104 041a 	add.w	r4, r4, #26
 800bed6:	bf08      	it	eq
 800bed8:	1aed      	subeq	r5, r5, r3
 800beda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bede:	bf08      	it	eq
 800bee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee4:	4293      	cmp	r3, r2
 800bee6:	bfc4      	itt	gt
 800bee8:	1a9b      	subgt	r3, r3, r2
 800beea:	18ed      	addgt	r5, r5, r3
 800beec:	42b5      	cmp	r5, r6
 800beee:	d11a      	bne.n	800bf26 <_printf_common+0xd2>
 800bef0:	2000      	movs	r0, #0
 800bef2:	e008      	b.n	800bf06 <_printf_common+0xb2>
 800bef4:	2301      	movs	r3, #1
 800bef6:	4652      	mov	r2, sl
 800bef8:	4641      	mov	r1, r8
 800befa:	4638      	mov	r0, r7
 800befc:	47c8      	blx	r9
 800befe:	3001      	adds	r0, #1
 800bf00:	d103      	bne.n	800bf0a <_printf_common+0xb6>
 800bf02:	f04f 30ff 	mov.w	r0, #4294967295
 800bf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0a:	3501      	adds	r5, #1
 800bf0c:	e7c1      	b.n	800be92 <_printf_common+0x3e>
 800bf0e:	2030      	movs	r0, #48	@ 0x30
 800bf10:	18e1      	adds	r1, r4, r3
 800bf12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf1c:	4422      	add	r2, r4
 800bf1e:	3302      	adds	r3, #2
 800bf20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf24:	e7c2      	b.n	800beac <_printf_common+0x58>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4622      	mov	r2, r4
 800bf2a:	4641      	mov	r1, r8
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	47c8      	blx	r9
 800bf30:	3001      	adds	r0, #1
 800bf32:	d0e6      	beq.n	800bf02 <_printf_common+0xae>
 800bf34:	3601      	adds	r6, #1
 800bf36:	e7d9      	b.n	800beec <_printf_common+0x98>

0800bf38 <_printf_i>:
 800bf38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	7e0f      	ldrb	r7, [r1, #24]
 800bf3e:	4691      	mov	r9, r2
 800bf40:	2f78      	cmp	r7, #120	@ 0x78
 800bf42:	4680      	mov	r8, r0
 800bf44:	460c      	mov	r4, r1
 800bf46:	469a      	mov	sl, r3
 800bf48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf4e:	d807      	bhi.n	800bf60 <_printf_i+0x28>
 800bf50:	2f62      	cmp	r7, #98	@ 0x62
 800bf52:	d80a      	bhi.n	800bf6a <_printf_i+0x32>
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	f000 80d3 	beq.w	800c100 <_printf_i+0x1c8>
 800bf5a:	2f58      	cmp	r7, #88	@ 0x58
 800bf5c:	f000 80ba 	beq.w	800c0d4 <_printf_i+0x19c>
 800bf60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf68:	e03a      	b.n	800bfe0 <_printf_i+0xa8>
 800bf6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf6e:	2b15      	cmp	r3, #21
 800bf70:	d8f6      	bhi.n	800bf60 <_printf_i+0x28>
 800bf72:	a101      	add	r1, pc, #4	@ (adr r1, 800bf78 <_printf_i+0x40>)
 800bf74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf78:	0800bfd1 	.word	0x0800bfd1
 800bf7c:	0800bfe5 	.word	0x0800bfe5
 800bf80:	0800bf61 	.word	0x0800bf61
 800bf84:	0800bf61 	.word	0x0800bf61
 800bf88:	0800bf61 	.word	0x0800bf61
 800bf8c:	0800bf61 	.word	0x0800bf61
 800bf90:	0800bfe5 	.word	0x0800bfe5
 800bf94:	0800bf61 	.word	0x0800bf61
 800bf98:	0800bf61 	.word	0x0800bf61
 800bf9c:	0800bf61 	.word	0x0800bf61
 800bfa0:	0800bf61 	.word	0x0800bf61
 800bfa4:	0800c0e7 	.word	0x0800c0e7
 800bfa8:	0800c00f 	.word	0x0800c00f
 800bfac:	0800c0a1 	.word	0x0800c0a1
 800bfb0:	0800bf61 	.word	0x0800bf61
 800bfb4:	0800bf61 	.word	0x0800bf61
 800bfb8:	0800c109 	.word	0x0800c109
 800bfbc:	0800bf61 	.word	0x0800bf61
 800bfc0:	0800c00f 	.word	0x0800c00f
 800bfc4:	0800bf61 	.word	0x0800bf61
 800bfc8:	0800bf61 	.word	0x0800bf61
 800bfcc:	0800c0a9 	.word	0x0800c0a9
 800bfd0:	6833      	ldr	r3, [r6, #0]
 800bfd2:	1d1a      	adds	r2, r3, #4
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6032      	str	r2, [r6, #0]
 800bfd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e09e      	b.n	800c122 <_printf_i+0x1ea>
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	6820      	ldr	r0, [r4, #0]
 800bfe8:	1d19      	adds	r1, r3, #4
 800bfea:	6031      	str	r1, [r6, #0]
 800bfec:	0606      	lsls	r6, r0, #24
 800bfee:	d501      	bpl.n	800bff4 <_printf_i+0xbc>
 800bff0:	681d      	ldr	r5, [r3, #0]
 800bff2:	e003      	b.n	800bffc <_printf_i+0xc4>
 800bff4:	0645      	lsls	r5, r0, #25
 800bff6:	d5fb      	bpl.n	800bff0 <_printf_i+0xb8>
 800bff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bffc:	2d00      	cmp	r5, #0
 800bffe:	da03      	bge.n	800c008 <_printf_i+0xd0>
 800c000:	232d      	movs	r3, #45	@ 0x2d
 800c002:	426d      	negs	r5, r5
 800c004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c008:	230a      	movs	r3, #10
 800c00a:	4859      	ldr	r0, [pc, #356]	@ (800c170 <_printf_i+0x238>)
 800c00c:	e011      	b.n	800c032 <_printf_i+0xfa>
 800c00e:	6821      	ldr	r1, [r4, #0]
 800c010:	6833      	ldr	r3, [r6, #0]
 800c012:	0608      	lsls	r0, r1, #24
 800c014:	f853 5b04 	ldr.w	r5, [r3], #4
 800c018:	d402      	bmi.n	800c020 <_printf_i+0xe8>
 800c01a:	0649      	lsls	r1, r1, #25
 800c01c:	bf48      	it	mi
 800c01e:	b2ad      	uxthmi	r5, r5
 800c020:	2f6f      	cmp	r7, #111	@ 0x6f
 800c022:	6033      	str	r3, [r6, #0]
 800c024:	bf14      	ite	ne
 800c026:	230a      	movne	r3, #10
 800c028:	2308      	moveq	r3, #8
 800c02a:	4851      	ldr	r0, [pc, #324]	@ (800c170 <_printf_i+0x238>)
 800c02c:	2100      	movs	r1, #0
 800c02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c032:	6866      	ldr	r6, [r4, #4]
 800c034:	2e00      	cmp	r6, #0
 800c036:	bfa8      	it	ge
 800c038:	6821      	ldrge	r1, [r4, #0]
 800c03a:	60a6      	str	r6, [r4, #8]
 800c03c:	bfa4      	itt	ge
 800c03e:	f021 0104 	bicge.w	r1, r1, #4
 800c042:	6021      	strge	r1, [r4, #0]
 800c044:	b90d      	cbnz	r5, 800c04a <_printf_i+0x112>
 800c046:	2e00      	cmp	r6, #0
 800c048:	d04b      	beq.n	800c0e2 <_printf_i+0x1aa>
 800c04a:	4616      	mov	r6, r2
 800c04c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c050:	fb03 5711 	mls	r7, r3, r1, r5
 800c054:	5dc7      	ldrb	r7, [r0, r7]
 800c056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c05a:	462f      	mov	r7, r5
 800c05c:	42bb      	cmp	r3, r7
 800c05e:	460d      	mov	r5, r1
 800c060:	d9f4      	bls.n	800c04c <_printf_i+0x114>
 800c062:	2b08      	cmp	r3, #8
 800c064:	d10b      	bne.n	800c07e <_printf_i+0x146>
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	07df      	lsls	r7, r3, #31
 800c06a:	d508      	bpl.n	800c07e <_printf_i+0x146>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	6861      	ldr	r1, [r4, #4]
 800c070:	4299      	cmp	r1, r3
 800c072:	bfde      	ittt	le
 800c074:	2330      	movle	r3, #48	@ 0x30
 800c076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c07a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c07e:	1b92      	subs	r2, r2, r6
 800c080:	6122      	str	r2, [r4, #16]
 800c082:	464b      	mov	r3, r9
 800c084:	4621      	mov	r1, r4
 800c086:	4640      	mov	r0, r8
 800c088:	f8cd a000 	str.w	sl, [sp]
 800c08c:	aa03      	add	r2, sp, #12
 800c08e:	f7ff fee1 	bl	800be54 <_printf_common>
 800c092:	3001      	adds	r0, #1
 800c094:	d14a      	bne.n	800c12c <_printf_i+0x1f4>
 800c096:	f04f 30ff 	mov.w	r0, #4294967295
 800c09a:	b004      	add	sp, #16
 800c09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	f043 0320 	orr.w	r3, r3, #32
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	2778      	movs	r7, #120	@ 0x78
 800c0aa:	4832      	ldr	r0, [pc, #200]	@ (800c174 <_printf_i+0x23c>)
 800c0ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	6831      	ldr	r1, [r6, #0]
 800c0b4:	061f      	lsls	r7, r3, #24
 800c0b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0ba:	d402      	bmi.n	800c0c2 <_printf_i+0x18a>
 800c0bc:	065f      	lsls	r7, r3, #25
 800c0be:	bf48      	it	mi
 800c0c0:	b2ad      	uxthmi	r5, r5
 800c0c2:	6031      	str	r1, [r6, #0]
 800c0c4:	07d9      	lsls	r1, r3, #31
 800c0c6:	bf44      	itt	mi
 800c0c8:	f043 0320 	orrmi.w	r3, r3, #32
 800c0cc:	6023      	strmi	r3, [r4, #0]
 800c0ce:	b11d      	cbz	r5, 800c0d8 <_printf_i+0x1a0>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	e7ab      	b.n	800c02c <_printf_i+0xf4>
 800c0d4:	4826      	ldr	r0, [pc, #152]	@ (800c170 <_printf_i+0x238>)
 800c0d6:	e7e9      	b.n	800c0ac <_printf_i+0x174>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	f023 0320 	bic.w	r3, r3, #32
 800c0de:	6023      	str	r3, [r4, #0]
 800c0e0:	e7f6      	b.n	800c0d0 <_printf_i+0x198>
 800c0e2:	4616      	mov	r6, r2
 800c0e4:	e7bd      	b.n	800c062 <_printf_i+0x12a>
 800c0e6:	6833      	ldr	r3, [r6, #0]
 800c0e8:	6825      	ldr	r5, [r4, #0]
 800c0ea:	1d18      	adds	r0, r3, #4
 800c0ec:	6961      	ldr	r1, [r4, #20]
 800c0ee:	6030      	str	r0, [r6, #0]
 800c0f0:	062e      	lsls	r6, r5, #24
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	d501      	bpl.n	800c0fa <_printf_i+0x1c2>
 800c0f6:	6019      	str	r1, [r3, #0]
 800c0f8:	e002      	b.n	800c100 <_printf_i+0x1c8>
 800c0fa:	0668      	lsls	r0, r5, #25
 800c0fc:	d5fb      	bpl.n	800c0f6 <_printf_i+0x1be>
 800c0fe:	8019      	strh	r1, [r3, #0]
 800c100:	2300      	movs	r3, #0
 800c102:	4616      	mov	r6, r2
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	e7bc      	b.n	800c082 <_printf_i+0x14a>
 800c108:	6833      	ldr	r3, [r6, #0]
 800c10a:	2100      	movs	r1, #0
 800c10c:	1d1a      	adds	r2, r3, #4
 800c10e:	6032      	str	r2, [r6, #0]
 800c110:	681e      	ldr	r6, [r3, #0]
 800c112:	6862      	ldr	r2, [r4, #4]
 800c114:	4630      	mov	r0, r6
 800c116:	f000 fa30 	bl	800c57a <memchr>
 800c11a:	b108      	cbz	r0, 800c120 <_printf_i+0x1e8>
 800c11c:	1b80      	subs	r0, r0, r6
 800c11e:	6060      	str	r0, [r4, #4]
 800c120:	6863      	ldr	r3, [r4, #4]
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	2300      	movs	r3, #0
 800c126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c12a:	e7aa      	b.n	800c082 <_printf_i+0x14a>
 800c12c:	4632      	mov	r2, r6
 800c12e:	4649      	mov	r1, r9
 800c130:	4640      	mov	r0, r8
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	47d0      	blx	sl
 800c136:	3001      	adds	r0, #1
 800c138:	d0ad      	beq.n	800c096 <_printf_i+0x15e>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	079b      	lsls	r3, r3, #30
 800c13e:	d413      	bmi.n	800c168 <_printf_i+0x230>
 800c140:	68e0      	ldr	r0, [r4, #12]
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	4298      	cmp	r0, r3
 800c146:	bfb8      	it	lt
 800c148:	4618      	movlt	r0, r3
 800c14a:	e7a6      	b.n	800c09a <_printf_i+0x162>
 800c14c:	2301      	movs	r3, #1
 800c14e:	4632      	mov	r2, r6
 800c150:	4649      	mov	r1, r9
 800c152:	4640      	mov	r0, r8
 800c154:	47d0      	blx	sl
 800c156:	3001      	adds	r0, #1
 800c158:	d09d      	beq.n	800c096 <_printf_i+0x15e>
 800c15a:	3501      	adds	r5, #1
 800c15c:	68e3      	ldr	r3, [r4, #12]
 800c15e:	9903      	ldr	r1, [sp, #12]
 800c160:	1a5b      	subs	r3, r3, r1
 800c162:	42ab      	cmp	r3, r5
 800c164:	dcf2      	bgt.n	800c14c <_printf_i+0x214>
 800c166:	e7eb      	b.n	800c140 <_printf_i+0x208>
 800c168:	2500      	movs	r5, #0
 800c16a:	f104 0619 	add.w	r6, r4, #25
 800c16e:	e7f5      	b.n	800c15c <_printf_i+0x224>
 800c170:	0800f024 	.word	0x0800f024
 800c174:	0800f035 	.word	0x0800f035

0800c178 <std>:
 800c178:	2300      	movs	r3, #0
 800c17a:	b510      	push	{r4, lr}
 800c17c:	4604      	mov	r4, r0
 800c17e:	e9c0 3300 	strd	r3, r3, [r0]
 800c182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c186:	6083      	str	r3, [r0, #8]
 800c188:	8181      	strh	r1, [r0, #12]
 800c18a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c18c:	81c2      	strh	r2, [r0, #14]
 800c18e:	6183      	str	r3, [r0, #24]
 800c190:	4619      	mov	r1, r3
 800c192:	2208      	movs	r2, #8
 800c194:	305c      	adds	r0, #92	@ 0x5c
 800c196:	f000 f914 	bl	800c3c2 <memset>
 800c19a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d0 <std+0x58>)
 800c19c:	6224      	str	r4, [r4, #32]
 800c19e:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d4 <std+0x5c>)
 800c1a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d8 <std+0x60>)
 800c1a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c1dc <std+0x64>)
 800c1aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e0 <std+0x68>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d006      	beq.n	800c1c0 <std+0x48>
 800c1b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1b6:	4294      	cmp	r4, r2
 800c1b8:	d002      	beq.n	800c1c0 <std+0x48>
 800c1ba:	33d0      	adds	r3, #208	@ 0xd0
 800c1bc:	429c      	cmp	r4, r3
 800c1be:	d105      	bne.n	800c1cc <std+0x54>
 800c1c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c8:	f000 b9cc 	b.w	800c564 <__retarget_lock_init_recursive>
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	bf00      	nop
 800c1d0:	0800c33d 	.word	0x0800c33d
 800c1d4:	0800c35f 	.word	0x0800c35f
 800c1d8:	0800c397 	.word	0x0800c397
 800c1dc:	0800c3bb 	.word	0x0800c3bb
 800c1e0:	2000043c 	.word	0x2000043c

0800c1e4 <stdio_exit_handler>:
 800c1e4:	4a02      	ldr	r2, [pc, #8]	@ (800c1f0 <stdio_exit_handler+0xc>)
 800c1e6:	4903      	ldr	r1, [pc, #12]	@ (800c1f4 <stdio_exit_handler+0x10>)
 800c1e8:	4803      	ldr	r0, [pc, #12]	@ (800c1f8 <stdio_exit_handler+0x14>)
 800c1ea:	f000 b869 	b.w	800c2c0 <_fwalk_sglue>
 800c1ee:	bf00      	nop
 800c1f0:	20000010 	.word	0x20000010
 800c1f4:	0800dd79 	.word	0x0800dd79
 800c1f8:	20000020 	.word	0x20000020

0800c1fc <cleanup_stdio>:
 800c1fc:	6841      	ldr	r1, [r0, #4]
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c230 <cleanup_stdio+0x34>)
 800c200:	b510      	push	{r4, lr}
 800c202:	4299      	cmp	r1, r3
 800c204:	4604      	mov	r4, r0
 800c206:	d001      	beq.n	800c20c <cleanup_stdio+0x10>
 800c208:	f001 fdb6 	bl	800dd78 <_fflush_r>
 800c20c:	68a1      	ldr	r1, [r4, #8]
 800c20e:	4b09      	ldr	r3, [pc, #36]	@ (800c234 <cleanup_stdio+0x38>)
 800c210:	4299      	cmp	r1, r3
 800c212:	d002      	beq.n	800c21a <cleanup_stdio+0x1e>
 800c214:	4620      	mov	r0, r4
 800c216:	f001 fdaf 	bl	800dd78 <_fflush_r>
 800c21a:	68e1      	ldr	r1, [r4, #12]
 800c21c:	4b06      	ldr	r3, [pc, #24]	@ (800c238 <cleanup_stdio+0x3c>)
 800c21e:	4299      	cmp	r1, r3
 800c220:	d004      	beq.n	800c22c <cleanup_stdio+0x30>
 800c222:	4620      	mov	r0, r4
 800c224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c228:	f001 bda6 	b.w	800dd78 <_fflush_r>
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	bf00      	nop
 800c230:	2000043c 	.word	0x2000043c
 800c234:	200004a4 	.word	0x200004a4
 800c238:	2000050c 	.word	0x2000050c

0800c23c <global_stdio_init.part.0>:
 800c23c:	b510      	push	{r4, lr}
 800c23e:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <global_stdio_init.part.0+0x30>)
 800c240:	4c0b      	ldr	r4, [pc, #44]	@ (800c270 <global_stdio_init.part.0+0x34>)
 800c242:	4a0c      	ldr	r2, [pc, #48]	@ (800c274 <global_stdio_init.part.0+0x38>)
 800c244:	4620      	mov	r0, r4
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	2104      	movs	r1, #4
 800c24a:	2200      	movs	r2, #0
 800c24c:	f7ff ff94 	bl	800c178 <std>
 800c250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c254:	2201      	movs	r2, #1
 800c256:	2109      	movs	r1, #9
 800c258:	f7ff ff8e 	bl	800c178 <std>
 800c25c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c260:	2202      	movs	r2, #2
 800c262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c266:	2112      	movs	r1, #18
 800c268:	f7ff bf86 	b.w	800c178 <std>
 800c26c:	20000574 	.word	0x20000574
 800c270:	2000043c 	.word	0x2000043c
 800c274:	0800c1e5 	.word	0x0800c1e5

0800c278 <__sfp_lock_acquire>:
 800c278:	4801      	ldr	r0, [pc, #4]	@ (800c280 <__sfp_lock_acquire+0x8>)
 800c27a:	f000 b974 	b.w	800c566 <__retarget_lock_acquire_recursive>
 800c27e:	bf00      	nop
 800c280:	2000057d 	.word	0x2000057d

0800c284 <__sfp_lock_release>:
 800c284:	4801      	ldr	r0, [pc, #4]	@ (800c28c <__sfp_lock_release+0x8>)
 800c286:	f000 b96f 	b.w	800c568 <__retarget_lock_release_recursive>
 800c28a:	bf00      	nop
 800c28c:	2000057d 	.word	0x2000057d

0800c290 <__sinit>:
 800c290:	b510      	push	{r4, lr}
 800c292:	4604      	mov	r4, r0
 800c294:	f7ff fff0 	bl	800c278 <__sfp_lock_acquire>
 800c298:	6a23      	ldr	r3, [r4, #32]
 800c29a:	b11b      	cbz	r3, 800c2a4 <__sinit+0x14>
 800c29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a0:	f7ff bff0 	b.w	800c284 <__sfp_lock_release>
 800c2a4:	4b04      	ldr	r3, [pc, #16]	@ (800c2b8 <__sinit+0x28>)
 800c2a6:	6223      	str	r3, [r4, #32]
 800c2a8:	4b04      	ldr	r3, [pc, #16]	@ (800c2bc <__sinit+0x2c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1f5      	bne.n	800c29c <__sinit+0xc>
 800c2b0:	f7ff ffc4 	bl	800c23c <global_stdio_init.part.0>
 800c2b4:	e7f2      	b.n	800c29c <__sinit+0xc>
 800c2b6:	bf00      	nop
 800c2b8:	0800c1fd 	.word	0x0800c1fd
 800c2bc:	20000574 	.word	0x20000574

0800c2c0 <_fwalk_sglue>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	4688      	mov	r8, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	2600      	movs	r6, #0
 800c2cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2d0:	f1b9 0901 	subs.w	r9, r9, #1
 800c2d4:	d505      	bpl.n	800c2e2 <_fwalk_sglue+0x22>
 800c2d6:	6824      	ldr	r4, [r4, #0]
 800c2d8:	2c00      	cmp	r4, #0
 800c2da:	d1f7      	bne.n	800c2cc <_fwalk_sglue+0xc>
 800c2dc:	4630      	mov	r0, r6
 800c2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d907      	bls.n	800c2f8 <_fwalk_sglue+0x38>
 800c2e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	d003      	beq.n	800c2f8 <_fwalk_sglue+0x38>
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	47c0      	blx	r8
 800c2f6:	4306      	orrs	r6, r0
 800c2f8:	3568      	adds	r5, #104	@ 0x68
 800c2fa:	e7e9      	b.n	800c2d0 <_fwalk_sglue+0x10>

0800c2fc <siprintf>:
 800c2fc:	b40e      	push	{r1, r2, r3}
 800c2fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c302:	b500      	push	{lr}
 800c304:	b09c      	sub	sp, #112	@ 0x70
 800c306:	ab1d      	add	r3, sp, #116	@ 0x74
 800c308:	9002      	str	r0, [sp, #8]
 800c30a:	9006      	str	r0, [sp, #24]
 800c30c:	9107      	str	r1, [sp, #28]
 800c30e:	9104      	str	r1, [sp, #16]
 800c310:	4808      	ldr	r0, [pc, #32]	@ (800c334 <siprintf+0x38>)
 800c312:	4909      	ldr	r1, [pc, #36]	@ (800c338 <siprintf+0x3c>)
 800c314:	f853 2b04 	ldr.w	r2, [r3], #4
 800c318:	9105      	str	r1, [sp, #20]
 800c31a:	6800      	ldr	r0, [r0, #0]
 800c31c:	a902      	add	r1, sp, #8
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	f001 fbae 	bl	800da80 <_svfiprintf_r>
 800c324:	2200      	movs	r2, #0
 800c326:	9b02      	ldr	r3, [sp, #8]
 800c328:	701a      	strb	r2, [r3, #0]
 800c32a:	b01c      	add	sp, #112	@ 0x70
 800c32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c330:	b003      	add	sp, #12
 800c332:	4770      	bx	lr
 800c334:	2000001c 	.word	0x2000001c
 800c338:	ffff0208 	.word	0xffff0208

0800c33c <__sread>:
 800c33c:	b510      	push	{r4, lr}
 800c33e:	460c      	mov	r4, r1
 800c340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c344:	f000 f89c 	bl	800c480 <_read_r>
 800c348:	2800      	cmp	r0, #0
 800c34a:	bfab      	itete	ge
 800c34c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c34e:	89a3      	ldrhlt	r3, [r4, #12]
 800c350:	181b      	addge	r3, r3, r0
 800c352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c356:	bfac      	ite	ge
 800c358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c35a:	81a3      	strhlt	r3, [r4, #12]
 800c35c:	bd10      	pop	{r4, pc}

0800c35e <__swrite>:
 800c35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c362:	461f      	mov	r7, r3
 800c364:	898b      	ldrh	r3, [r1, #12]
 800c366:	4605      	mov	r5, r0
 800c368:	05db      	lsls	r3, r3, #23
 800c36a:	460c      	mov	r4, r1
 800c36c:	4616      	mov	r6, r2
 800c36e:	d505      	bpl.n	800c37c <__swrite+0x1e>
 800c370:	2302      	movs	r3, #2
 800c372:	2200      	movs	r2, #0
 800c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c378:	f000 f870 	bl	800c45c <_lseek_r>
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	4632      	mov	r2, r6
 800c380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	4628      	mov	r0, r5
 800c388:	463b      	mov	r3, r7
 800c38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c392:	f000 b8ab 	b.w	800c4ec <_write_r>

0800c396 <__sseek>:
 800c396:	b510      	push	{r4, lr}
 800c398:	460c      	mov	r4, r1
 800c39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39e:	f000 f85d 	bl	800c45c <_lseek_r>
 800c3a2:	1c43      	adds	r3, r0, #1
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	bf15      	itete	ne
 800c3a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3b2:	81a3      	strheq	r3, [r4, #12]
 800c3b4:	bf18      	it	ne
 800c3b6:	81a3      	strhne	r3, [r4, #12]
 800c3b8:	bd10      	pop	{r4, pc}

0800c3ba <__sclose>:
 800c3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3be:	f000 b83d 	b.w	800c43c <_close_r>

0800c3c2 <memset>:
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	4402      	add	r2, r0
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d100      	bne.n	800c3cc <memset+0xa>
 800c3ca:	4770      	bx	lr
 800c3cc:	f803 1b01 	strb.w	r1, [r3], #1
 800c3d0:	e7f9      	b.n	800c3c6 <memset+0x4>

0800c3d2 <_raise_r>:
 800c3d2:	291f      	cmp	r1, #31
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	460c      	mov	r4, r1
 800c3da:	d904      	bls.n	800c3e6 <_raise_r+0x14>
 800c3dc:	2316      	movs	r3, #22
 800c3de:	6003      	str	r3, [r0, #0]
 800c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e4:	bd38      	pop	{r3, r4, r5, pc}
 800c3e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3e8:	b112      	cbz	r2, 800c3f0 <_raise_r+0x1e>
 800c3ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3ee:	b94b      	cbnz	r3, 800c404 <_raise_r+0x32>
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f000 f869 	bl	800c4c8 <_getpid_r>
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c400:	f000 b850 	b.w	800c4a4 <_kill_r>
 800c404:	2b01      	cmp	r3, #1
 800c406:	d00a      	beq.n	800c41e <_raise_r+0x4c>
 800c408:	1c59      	adds	r1, r3, #1
 800c40a:	d103      	bne.n	800c414 <_raise_r+0x42>
 800c40c:	2316      	movs	r3, #22
 800c40e:	6003      	str	r3, [r0, #0]
 800c410:	2001      	movs	r0, #1
 800c412:	e7e7      	b.n	800c3e4 <_raise_r+0x12>
 800c414:	2100      	movs	r1, #0
 800c416:	4620      	mov	r0, r4
 800c418:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c41c:	4798      	blx	r3
 800c41e:	2000      	movs	r0, #0
 800c420:	e7e0      	b.n	800c3e4 <_raise_r+0x12>
	...

0800c424 <raise>:
 800c424:	4b02      	ldr	r3, [pc, #8]	@ (800c430 <raise+0xc>)
 800c426:	4601      	mov	r1, r0
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	f7ff bfd2 	b.w	800c3d2 <_raise_r>
 800c42e:	bf00      	nop
 800c430:	2000001c 	.word	0x2000001c

0800c434 <_localeconv_r>:
 800c434:	4800      	ldr	r0, [pc, #0]	@ (800c438 <_localeconv_r+0x4>)
 800c436:	4770      	bx	lr
 800c438:	2000015c 	.word	0x2000015c

0800c43c <_close_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	2300      	movs	r3, #0
 800c440:	4d05      	ldr	r5, [pc, #20]	@ (800c458 <_close_r+0x1c>)
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	f7fb fa6b 	bl	8007922 <_close>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	d102      	bne.n	800c456 <_close_r+0x1a>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	b103      	cbz	r3, 800c456 <_close_r+0x1a>
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	bd38      	pop	{r3, r4, r5, pc}
 800c458:	20000578 	.word	0x20000578

0800c45c <_lseek_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	4611      	mov	r1, r2
 800c464:	2200      	movs	r2, #0
 800c466:	4d05      	ldr	r5, [pc, #20]	@ (800c47c <_lseek_r+0x20>)
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f7fb fa7d 	bl	800796a <_lseek>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_lseek_r+0x1e>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_lseek_r+0x1e>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	20000578 	.word	0x20000578

0800c480 <_read_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4604      	mov	r4, r0
 800c484:	4608      	mov	r0, r1
 800c486:	4611      	mov	r1, r2
 800c488:	2200      	movs	r2, #0
 800c48a:	4d05      	ldr	r5, [pc, #20]	@ (800c4a0 <_read_r+0x20>)
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	f7fb fa0e 	bl	80078b0 <_read>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_read_r+0x1e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_read_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	20000578 	.word	0x20000578

0800c4a4 <_kill_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	4d06      	ldr	r5, [pc, #24]	@ (800c4c4 <_kill_r+0x20>)
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	f7fb f9e2 	bl	800787a <_kill>
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	d102      	bne.n	800c4c0 <_kill_r+0x1c>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	b103      	cbz	r3, 800c4c0 <_kill_r+0x1c>
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	bd38      	pop	{r3, r4, r5, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20000578 	.word	0x20000578

0800c4c8 <_getpid_r>:
 800c4c8:	f7fb b9d0 	b.w	800786c <_getpid>

0800c4cc <_sbrk_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4d05      	ldr	r5, [pc, #20]	@ (800c4e8 <_sbrk_r+0x1c>)
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	602b      	str	r3, [r5, #0]
 800c4d8:	f7fb fa54 	bl	8007984 <_sbrk>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d102      	bne.n	800c4e6 <_sbrk_r+0x1a>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b103      	cbz	r3, 800c4e6 <_sbrk_r+0x1a>
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	20000578 	.word	0x20000578

0800c4ec <_write_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	4d05      	ldr	r5, [pc, #20]	@ (800c50c <_write_r+0x20>)
 800c4f8:	602a      	str	r2, [r5, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f7fb f9f5 	bl	80078ea <_write>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_write_r+0x1e>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_write_r+0x1e>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	20000578 	.word	0x20000578

0800c510 <__errno>:
 800c510:	4b01      	ldr	r3, [pc, #4]	@ (800c518 <__errno+0x8>)
 800c512:	6818      	ldr	r0, [r3, #0]
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	2000001c 	.word	0x2000001c

0800c51c <__libc_init_array>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	2600      	movs	r6, #0
 800c520:	4d0c      	ldr	r5, [pc, #48]	@ (800c554 <__libc_init_array+0x38>)
 800c522:	4c0d      	ldr	r4, [pc, #52]	@ (800c558 <__libc_init_array+0x3c>)
 800c524:	1b64      	subs	r4, r4, r5
 800c526:	10a4      	asrs	r4, r4, #2
 800c528:	42a6      	cmp	r6, r4
 800c52a:	d109      	bne.n	800c540 <__libc_init_array+0x24>
 800c52c:	f001 ff66 	bl	800e3fc <_init>
 800c530:	2600      	movs	r6, #0
 800c532:	4d0a      	ldr	r5, [pc, #40]	@ (800c55c <__libc_init_array+0x40>)
 800c534:	4c0a      	ldr	r4, [pc, #40]	@ (800c560 <__libc_init_array+0x44>)
 800c536:	1b64      	subs	r4, r4, r5
 800c538:	10a4      	asrs	r4, r4, #2
 800c53a:	42a6      	cmp	r6, r4
 800c53c:	d105      	bne.n	800c54a <__libc_init_array+0x2e>
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	f855 3b04 	ldr.w	r3, [r5], #4
 800c544:	4798      	blx	r3
 800c546:	3601      	adds	r6, #1
 800c548:	e7ee      	b.n	800c528 <__libc_init_array+0xc>
 800c54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c54e:	4798      	blx	r3
 800c550:	3601      	adds	r6, #1
 800c552:	e7f2      	b.n	800c53a <__libc_init_array+0x1e>
 800c554:	0800f388 	.word	0x0800f388
 800c558:	0800f388 	.word	0x0800f388
 800c55c:	0800f388 	.word	0x0800f388
 800c560:	0800f390 	.word	0x0800f390

0800c564 <__retarget_lock_init_recursive>:
 800c564:	4770      	bx	lr

0800c566 <__retarget_lock_acquire_recursive>:
 800c566:	4770      	bx	lr

0800c568 <__retarget_lock_release_recursive>:
 800c568:	4770      	bx	lr

0800c56a <strcpy>:
 800c56a:	4603      	mov	r3, r0
 800c56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c570:	f803 2b01 	strb.w	r2, [r3], #1
 800c574:	2a00      	cmp	r2, #0
 800c576:	d1f9      	bne.n	800c56c <strcpy+0x2>
 800c578:	4770      	bx	lr

0800c57a <memchr>:
 800c57a:	4603      	mov	r3, r0
 800c57c:	b510      	push	{r4, lr}
 800c57e:	b2c9      	uxtb	r1, r1
 800c580:	4402      	add	r2, r0
 800c582:	4293      	cmp	r3, r2
 800c584:	4618      	mov	r0, r3
 800c586:	d101      	bne.n	800c58c <memchr+0x12>
 800c588:	2000      	movs	r0, #0
 800c58a:	e003      	b.n	800c594 <memchr+0x1a>
 800c58c:	7804      	ldrb	r4, [r0, #0]
 800c58e:	3301      	adds	r3, #1
 800c590:	428c      	cmp	r4, r1
 800c592:	d1f6      	bne.n	800c582 <memchr+0x8>
 800c594:	bd10      	pop	{r4, pc}

0800c596 <quorem>:
 800c596:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59a:	6903      	ldr	r3, [r0, #16]
 800c59c:	690c      	ldr	r4, [r1, #16]
 800c59e:	4607      	mov	r7, r0
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	db7e      	blt.n	800c6a2 <quorem+0x10c>
 800c5a4:	3c01      	subs	r4, #1
 800c5a6:	00a3      	lsls	r3, r4, #2
 800c5a8:	f100 0514 	add.w	r5, r0, #20
 800c5ac:	f101 0814 	add.w	r8, r1, #20
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5cc:	d32e      	bcc.n	800c62c <quorem+0x96>
 800c5ce:	f04f 0a00 	mov.w	sl, #0
 800c5d2:	46c4      	mov	ip, r8
 800c5d4:	46ae      	mov	lr, r5
 800c5d6:	46d3      	mov	fp, sl
 800c5d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5dc:	b298      	uxth	r0, r3
 800c5de:	fb06 a000 	mla	r0, r6, r0, sl
 800c5e2:	0c1b      	lsrs	r3, r3, #16
 800c5e4:	0c02      	lsrs	r2, r0, #16
 800c5e6:	fb06 2303 	mla	r3, r6, r3, r2
 800c5ea:	f8de 2000 	ldr.w	r2, [lr]
 800c5ee:	b280      	uxth	r0, r0
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	1a12      	subs	r2, r2, r0
 800c5f4:	445a      	add	r2, fp
 800c5f6:	f8de 0000 	ldr.w	r0, [lr]
 800c5fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c604:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c608:	b292      	uxth	r2, r2
 800c60a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c60e:	45e1      	cmp	r9, ip
 800c610:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c614:	f84e 2b04 	str.w	r2, [lr], #4
 800c618:	d2de      	bcs.n	800c5d8 <quorem+0x42>
 800c61a:	9b00      	ldr	r3, [sp, #0]
 800c61c:	58eb      	ldr	r3, [r5, r3]
 800c61e:	b92b      	cbnz	r3, 800c62c <quorem+0x96>
 800c620:	9b01      	ldr	r3, [sp, #4]
 800c622:	3b04      	subs	r3, #4
 800c624:	429d      	cmp	r5, r3
 800c626:	461a      	mov	r2, r3
 800c628:	d32f      	bcc.n	800c68a <quorem+0xf4>
 800c62a:	613c      	str	r4, [r7, #16]
 800c62c:	4638      	mov	r0, r7
 800c62e:	f001 f8c3 	bl	800d7b8 <__mcmp>
 800c632:	2800      	cmp	r0, #0
 800c634:	db25      	blt.n	800c682 <quorem+0xec>
 800c636:	4629      	mov	r1, r5
 800c638:	2000      	movs	r0, #0
 800c63a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c63e:	f8d1 c000 	ldr.w	ip, [r1]
 800c642:	fa1f fe82 	uxth.w	lr, r2
 800c646:	fa1f f38c 	uxth.w	r3, ip
 800c64a:	eba3 030e 	sub.w	r3, r3, lr
 800c64e:	4403      	add	r3, r0
 800c650:	0c12      	lsrs	r2, r2, #16
 800c652:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c656:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c660:	45c1      	cmp	r9, r8
 800c662:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c666:	f841 3b04 	str.w	r3, [r1], #4
 800c66a:	d2e6      	bcs.n	800c63a <quorem+0xa4>
 800c66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c674:	b922      	cbnz	r2, 800c680 <quorem+0xea>
 800c676:	3b04      	subs	r3, #4
 800c678:	429d      	cmp	r5, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	d30b      	bcc.n	800c696 <quorem+0x100>
 800c67e:	613c      	str	r4, [r7, #16]
 800c680:	3601      	adds	r6, #1
 800c682:	4630      	mov	r0, r6
 800c684:	b003      	add	sp, #12
 800c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68a:	6812      	ldr	r2, [r2, #0]
 800c68c:	3b04      	subs	r3, #4
 800c68e:	2a00      	cmp	r2, #0
 800c690:	d1cb      	bne.n	800c62a <quorem+0x94>
 800c692:	3c01      	subs	r4, #1
 800c694:	e7c6      	b.n	800c624 <quorem+0x8e>
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	3b04      	subs	r3, #4
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	d1ef      	bne.n	800c67e <quorem+0xe8>
 800c69e:	3c01      	subs	r4, #1
 800c6a0:	e7ea      	b.n	800c678 <quorem+0xe2>
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	e7ee      	b.n	800c684 <quorem+0xee>
	...

0800c6a8 <_dtoa_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	4614      	mov	r4, r2
 800c6ae:	461d      	mov	r5, r3
 800c6b0:	69c7      	ldr	r7, [r0, #28]
 800c6b2:	b097      	sub	sp, #92	@ 0x5c
 800c6b4:	4683      	mov	fp, r0
 800c6b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c6ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c6bc:	b97f      	cbnz	r7, 800c6de <_dtoa_r+0x36>
 800c6be:	2010      	movs	r0, #16
 800c6c0:	f7ff f840 	bl	800b744 <malloc>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	f8cb 001c 	str.w	r0, [fp, #28]
 800c6ca:	b920      	cbnz	r0, 800c6d6 <_dtoa_r+0x2e>
 800c6cc:	21ef      	movs	r1, #239	@ 0xef
 800c6ce:	4ba8      	ldr	r3, [pc, #672]	@ (800c970 <_dtoa_r+0x2c8>)
 800c6d0:	48a8      	ldr	r0, [pc, #672]	@ (800c974 <_dtoa_r+0x2cc>)
 800c6d2:	f001 fba1 	bl	800de18 <__assert_func>
 800c6d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c6da:	6007      	str	r7, [r0, #0]
 800c6dc:	60c7      	str	r7, [r0, #12]
 800c6de:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	b159      	cbz	r1, 800c6fe <_dtoa_r+0x56>
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	4093      	lsls	r3, r2
 800c6ec:	604a      	str	r2, [r1, #4]
 800c6ee:	608b      	str	r3, [r1, #8]
 800c6f0:	4658      	mov	r0, fp
 800c6f2:	f000 fe29 	bl	800d348 <_Bfree>
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	1e2b      	subs	r3, r5, #0
 800c700:	bfaf      	iteee	ge
 800c702:	2300      	movge	r3, #0
 800c704:	2201      	movlt	r2, #1
 800c706:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c70a:	9303      	strlt	r3, [sp, #12]
 800c70c:	bfa8      	it	ge
 800c70e:	6033      	strge	r3, [r6, #0]
 800c710:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c714:	4b98      	ldr	r3, [pc, #608]	@ (800c978 <_dtoa_r+0x2d0>)
 800c716:	bfb8      	it	lt
 800c718:	6032      	strlt	r2, [r6, #0]
 800c71a:	ea33 0308 	bics.w	r3, r3, r8
 800c71e:	d112      	bne.n	800c746 <_dtoa_r+0x9e>
 800c720:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c724:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c72c:	4323      	orrs	r3, r4
 800c72e:	f000 8550 	beq.w	800d1d2 <_dtoa_r+0xb2a>
 800c732:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c734:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c97c <_dtoa_r+0x2d4>
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 8552 	beq.w	800d1e2 <_dtoa_r+0xb3a>
 800c73e:	f10a 0303 	add.w	r3, sl, #3
 800c742:	f000 bd4c 	b.w	800d1de <_dtoa_r+0xb36>
 800c746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c74a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c74e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c752:	2200      	movs	r2, #0
 800c754:	2300      	movs	r3, #0
 800c756:	f7f4 f927 	bl	80009a8 <__aeabi_dcmpeq>
 800c75a:	4607      	mov	r7, r0
 800c75c:	b158      	cbz	r0, 800c776 <_dtoa_r+0xce>
 800c75e:	2301      	movs	r3, #1
 800c760:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c762:	6013      	str	r3, [r2, #0]
 800c764:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c766:	b113      	cbz	r3, 800c76e <_dtoa_r+0xc6>
 800c768:	4b85      	ldr	r3, [pc, #532]	@ (800c980 <_dtoa_r+0x2d8>)
 800c76a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c984 <_dtoa_r+0x2dc>
 800c772:	f000 bd36 	b.w	800d1e2 <_dtoa_r+0xb3a>
 800c776:	ab14      	add	r3, sp, #80	@ 0x50
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	ab15      	add	r3, sp, #84	@ 0x54
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	4658      	mov	r0, fp
 800c780:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c784:	f001 f8c8 	bl	800d918 <__d2b>
 800c788:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c78c:	4681      	mov	r9, r0
 800c78e:	2e00      	cmp	r6, #0
 800c790:	d077      	beq.n	800c882 <_dtoa_r+0x1da>
 800c792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c798:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c79c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c7a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7a8:	9712      	str	r7, [sp, #72]	@ 0x48
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4b76      	ldr	r3, [pc, #472]	@ (800c988 <_dtoa_r+0x2e0>)
 800c7b0:	f7f3 fcda 	bl	8000168 <__aeabi_dsub>
 800c7b4:	a368      	add	r3, pc, #416	@ (adr r3, 800c958 <_dtoa_r+0x2b0>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	f7f3 fe8d 	bl	80004d8 <__aeabi_dmul>
 800c7be:	a368      	add	r3, pc, #416	@ (adr r3, 800c960 <_dtoa_r+0x2b8>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f3 fcd2 	bl	800016c <__adddf3>
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	460d      	mov	r5, r1
 800c7ce:	f7f3 fe19 	bl	8000404 <__aeabi_i2d>
 800c7d2:	a365      	add	r3, pc, #404	@ (adr r3, 800c968 <_dtoa_r+0x2c0>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f3 fe7e 	bl	80004d8 <__aeabi_dmul>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 fcc2 	bl	800016c <__adddf3>
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	f7f4 f924 	bl	8000a38 <__aeabi_d2iz>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7f4 f8df 	bl	80009bc <__aeabi_dcmplt>
 800c7fe:	b140      	cbz	r0, 800c812 <_dtoa_r+0x16a>
 800c800:	4638      	mov	r0, r7
 800c802:	f7f3 fdff 	bl	8000404 <__aeabi_i2d>
 800c806:	4622      	mov	r2, r4
 800c808:	462b      	mov	r3, r5
 800c80a:	f7f4 f8cd 	bl	80009a8 <__aeabi_dcmpeq>
 800c80e:	b900      	cbnz	r0, 800c812 <_dtoa_r+0x16a>
 800c810:	3f01      	subs	r7, #1
 800c812:	2f16      	cmp	r7, #22
 800c814:	d853      	bhi.n	800c8be <_dtoa_r+0x216>
 800c816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c81a:	4b5c      	ldr	r3, [pc, #368]	@ (800c98c <_dtoa_r+0x2e4>)
 800c81c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f7f4 f8ca 	bl	80009bc <__aeabi_dcmplt>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d04a      	beq.n	800c8c2 <_dtoa_r+0x21a>
 800c82c:	2300      	movs	r3, #0
 800c82e:	3f01      	subs	r7, #1
 800c830:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c832:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c834:	1b9b      	subs	r3, r3, r6
 800c836:	1e5a      	subs	r2, r3, #1
 800c838:	bf46      	itte	mi
 800c83a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c83e:	2300      	movmi	r3, #0
 800c840:	f04f 0800 	movpl.w	r8, #0
 800c844:	9209      	str	r2, [sp, #36]	@ 0x24
 800c846:	bf48      	it	mi
 800c848:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c84a:	2f00      	cmp	r7, #0
 800c84c:	db3b      	blt.n	800c8c6 <_dtoa_r+0x21e>
 800c84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c850:	970e      	str	r7, [sp, #56]	@ 0x38
 800c852:	443b      	add	r3, r7
 800c854:	9309      	str	r3, [sp, #36]	@ 0x24
 800c856:	2300      	movs	r3, #0
 800c858:	930a      	str	r3, [sp, #40]	@ 0x28
 800c85a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c85c:	2b09      	cmp	r3, #9
 800c85e:	d866      	bhi.n	800c92e <_dtoa_r+0x286>
 800c860:	2b05      	cmp	r3, #5
 800c862:	bfc4      	itt	gt
 800c864:	3b04      	subgt	r3, #4
 800c866:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c868:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c86a:	bfc8      	it	gt
 800c86c:	2400      	movgt	r4, #0
 800c86e:	f1a3 0302 	sub.w	r3, r3, #2
 800c872:	bfd8      	it	le
 800c874:	2401      	movle	r4, #1
 800c876:	2b03      	cmp	r3, #3
 800c878:	d864      	bhi.n	800c944 <_dtoa_r+0x29c>
 800c87a:	e8df f003 	tbb	[pc, r3]
 800c87e:	382b      	.short	0x382b
 800c880:	5636      	.short	0x5636
 800c882:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c886:	441e      	add	r6, r3
 800c888:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c88c:	2b20      	cmp	r3, #32
 800c88e:	bfc1      	itttt	gt
 800c890:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c894:	fa08 f803 	lslgt.w	r8, r8, r3
 800c898:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c89c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c8a0:	bfd6      	itet	le
 800c8a2:	f1c3 0320 	rsble	r3, r3, #32
 800c8a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c8aa:	fa04 f003 	lslle.w	r0, r4, r3
 800c8ae:	f7f3 fd99 	bl	80003e4 <__aeabi_ui2d>
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8b8:	3e01      	subs	r6, #1
 800c8ba:	9212      	str	r2, [sp, #72]	@ 0x48
 800c8bc:	e775      	b.n	800c7aa <_dtoa_r+0x102>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e7b6      	b.n	800c830 <_dtoa_r+0x188>
 800c8c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c8c4:	e7b5      	b.n	800c832 <_dtoa_r+0x18a>
 800c8c6:	427b      	negs	r3, r7
 800c8c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	eba8 0807 	sub.w	r8, r8, r7
 800c8d0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c8d2:	e7c2      	b.n	800c85a <_dtoa_r+0x1b2>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	dc35      	bgt.n	800c94a <_dtoa_r+0x2a2>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c8e6:	9221      	str	r2, [sp, #132]	@ 0x84
 800c8e8:	e00b      	b.n	800c902 <_dtoa_r+0x25a>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e7f3      	b.n	800c8d6 <_dtoa_r+0x22e>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8f4:	18fb      	adds	r3, r7, r3
 800c8f6:	9308      	str	r3, [sp, #32]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	9307      	str	r3, [sp, #28]
 800c8fe:	bfb8      	it	lt
 800c900:	2301      	movlt	r3, #1
 800c902:	2100      	movs	r1, #0
 800c904:	2204      	movs	r2, #4
 800c906:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c90a:	f102 0514 	add.w	r5, r2, #20
 800c90e:	429d      	cmp	r5, r3
 800c910:	d91f      	bls.n	800c952 <_dtoa_r+0x2aa>
 800c912:	6041      	str	r1, [r0, #4]
 800c914:	4658      	mov	r0, fp
 800c916:	f000 fcd7 	bl	800d2c8 <_Balloc>
 800c91a:	4682      	mov	sl, r0
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d139      	bne.n	800c994 <_dtoa_r+0x2ec>
 800c920:	4602      	mov	r2, r0
 800c922:	f240 11af 	movw	r1, #431	@ 0x1af
 800c926:	4b1a      	ldr	r3, [pc, #104]	@ (800c990 <_dtoa_r+0x2e8>)
 800c928:	e6d2      	b.n	800c6d0 <_dtoa_r+0x28>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e7e0      	b.n	800c8f0 <_dtoa_r+0x248>
 800c92e:	2401      	movs	r4, #1
 800c930:	2300      	movs	r3, #0
 800c932:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c934:	9320      	str	r3, [sp, #128]	@ 0x80
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	2200      	movs	r2, #0
 800c93c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c940:	2312      	movs	r3, #18
 800c942:	e7d0      	b.n	800c8e6 <_dtoa_r+0x23e>
 800c944:	2301      	movs	r3, #1
 800c946:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c948:	e7f5      	b.n	800c936 <_dtoa_r+0x28e>
 800c94a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c94c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c950:	e7d7      	b.n	800c902 <_dtoa_r+0x25a>
 800c952:	3101      	adds	r1, #1
 800c954:	0052      	lsls	r2, r2, #1
 800c956:	e7d8      	b.n	800c90a <_dtoa_r+0x262>
 800c958:	636f4361 	.word	0x636f4361
 800c95c:	3fd287a7 	.word	0x3fd287a7
 800c960:	8b60c8b3 	.word	0x8b60c8b3
 800c964:	3fc68a28 	.word	0x3fc68a28
 800c968:	509f79fb 	.word	0x509f79fb
 800c96c:	3fd34413 	.word	0x3fd34413
 800c970:	0800f053 	.word	0x0800f053
 800c974:	0800f06a 	.word	0x0800f06a
 800c978:	7ff00000 	.word	0x7ff00000
 800c97c:	0800f04f 	.word	0x0800f04f
 800c980:	0800f023 	.word	0x0800f023
 800c984:	0800f022 	.word	0x0800f022
 800c988:	3ff80000 	.word	0x3ff80000
 800c98c:	0800f160 	.word	0x0800f160
 800c990:	0800f0c2 	.word	0x0800f0c2
 800c994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c998:	6018      	str	r0, [r3, #0]
 800c99a:	9b07      	ldr	r3, [sp, #28]
 800c99c:	2b0e      	cmp	r3, #14
 800c99e:	f200 80a4 	bhi.w	800caea <_dtoa_r+0x442>
 800c9a2:	2c00      	cmp	r4, #0
 800c9a4:	f000 80a1 	beq.w	800caea <_dtoa_r+0x442>
 800c9a8:	2f00      	cmp	r7, #0
 800c9aa:	dd33      	ble.n	800ca14 <_dtoa_r+0x36c>
 800c9ac:	4b86      	ldr	r3, [pc, #536]	@ (800cbc8 <_dtoa_r+0x520>)
 800c9ae:	f007 020f 	and.w	r2, r7, #15
 800c9b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9b6:	05f8      	lsls	r0, r7, #23
 800c9b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c9c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9c4:	d516      	bpl.n	800c9f4 <_dtoa_r+0x34c>
 800c9c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9ca:	4b80      	ldr	r3, [pc, #512]	@ (800cbcc <_dtoa_r+0x524>)
 800c9cc:	2603      	movs	r6, #3
 800c9ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9d2:	f7f3 feab 	bl	800072c <__aeabi_ddiv>
 800c9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9da:	f004 040f 	and.w	r4, r4, #15
 800c9de:	4d7b      	ldr	r5, [pc, #492]	@ (800cbcc <_dtoa_r+0x524>)
 800c9e0:	b954      	cbnz	r4, 800c9f8 <_dtoa_r+0x350>
 800c9e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ea:	f7f3 fe9f 	bl	800072c <__aeabi_ddiv>
 800c9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9f2:	e028      	b.n	800ca46 <_dtoa_r+0x39e>
 800c9f4:	2602      	movs	r6, #2
 800c9f6:	e7f2      	b.n	800c9de <_dtoa_r+0x336>
 800c9f8:	07e1      	lsls	r1, r4, #31
 800c9fa:	d508      	bpl.n	800ca0e <_dtoa_r+0x366>
 800c9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca04:	f7f3 fd68 	bl	80004d8 <__aeabi_dmul>
 800ca08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca0c:	3601      	adds	r6, #1
 800ca0e:	1064      	asrs	r4, r4, #1
 800ca10:	3508      	adds	r5, #8
 800ca12:	e7e5      	b.n	800c9e0 <_dtoa_r+0x338>
 800ca14:	f000 80d2 	beq.w	800cbbc <_dtoa_r+0x514>
 800ca18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca1c:	427c      	negs	r4, r7
 800ca1e:	4b6a      	ldr	r3, [pc, #424]	@ (800cbc8 <_dtoa_r+0x520>)
 800ca20:	f004 020f 	and.w	r2, r4, #15
 800ca24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	f7f3 fd54 	bl	80004d8 <__aeabi_dmul>
 800ca30:	2602      	movs	r6, #2
 800ca32:	2300      	movs	r3, #0
 800ca34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca38:	4d64      	ldr	r5, [pc, #400]	@ (800cbcc <_dtoa_r+0x524>)
 800ca3a:	1124      	asrs	r4, r4, #4
 800ca3c:	2c00      	cmp	r4, #0
 800ca3e:	f040 80b2 	bne.w	800cba6 <_dtoa_r+0x4fe>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1d3      	bne.n	800c9ee <_dtoa_r+0x346>
 800ca46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 80b7 	beq.w	800cbc0 <_dtoa_r+0x518>
 800ca52:	2200      	movs	r2, #0
 800ca54:	4620      	mov	r0, r4
 800ca56:	4629      	mov	r1, r5
 800ca58:	4b5d      	ldr	r3, [pc, #372]	@ (800cbd0 <_dtoa_r+0x528>)
 800ca5a:	f7f3 ffaf 	bl	80009bc <__aeabi_dcmplt>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f000 80ae 	beq.w	800cbc0 <_dtoa_r+0x518>
 800ca64:	9b07      	ldr	r3, [sp, #28]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 80aa 	beq.w	800cbc0 <_dtoa_r+0x518>
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dd37      	ble.n	800cae2 <_dtoa_r+0x43a>
 800ca72:	1e7b      	subs	r3, r7, #1
 800ca74:	4620      	mov	r0, r4
 800ca76:	9304      	str	r3, [sp, #16]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4b55      	ldr	r3, [pc, #340]	@ (800cbd4 <_dtoa_r+0x52c>)
 800ca7e:	f7f3 fd2b 	bl	80004d8 <__aeabi_dmul>
 800ca82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca86:	9c08      	ldr	r4, [sp, #32]
 800ca88:	3601      	adds	r6, #1
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7f3 fcba 	bl	8000404 <__aeabi_i2d>
 800ca90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca94:	f7f3 fd20 	bl	80004d8 <__aeabi_dmul>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	4b4f      	ldr	r3, [pc, #316]	@ (800cbd8 <_dtoa_r+0x530>)
 800ca9c:	f7f3 fb66 	bl	800016c <__adddf3>
 800caa0:	4605      	mov	r5, r0
 800caa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800caa6:	2c00      	cmp	r4, #0
 800caa8:	f040 809a 	bne.w	800cbe0 <_dtoa_r+0x538>
 800caac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cab0:	2200      	movs	r2, #0
 800cab2:	4b4a      	ldr	r3, [pc, #296]	@ (800cbdc <_dtoa_r+0x534>)
 800cab4:	f7f3 fb58 	bl	8000168 <__aeabi_dsub>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cac0:	462a      	mov	r2, r5
 800cac2:	4633      	mov	r3, r6
 800cac4:	f7f3 ff98 	bl	80009f8 <__aeabi_dcmpgt>
 800cac8:	2800      	cmp	r0, #0
 800caca:	f040 828e 	bne.w	800cfea <_dtoa_r+0x942>
 800cace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cad2:	462a      	mov	r2, r5
 800cad4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cad8:	f7f3 ff70 	bl	80009bc <__aeabi_dcmplt>
 800cadc:	2800      	cmp	r0, #0
 800cade:	f040 8127 	bne.w	800cd30 <_dtoa_r+0x688>
 800cae2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cae6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800caea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800caec:	2b00      	cmp	r3, #0
 800caee:	f2c0 8163 	blt.w	800cdb8 <_dtoa_r+0x710>
 800caf2:	2f0e      	cmp	r7, #14
 800caf4:	f300 8160 	bgt.w	800cdb8 <_dtoa_r+0x710>
 800caf8:	4b33      	ldr	r3, [pc, #204]	@ (800cbc8 <_dtoa_r+0x520>)
 800cafa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cafe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	da03      	bge.n	800cb14 <_dtoa_r+0x46c>
 800cb0c:	9b07      	ldr	r3, [sp, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f340 8100 	ble.w	800cd14 <_dtoa_r+0x66c>
 800cb14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb18:	4656      	mov	r6, sl
 800cb1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	4629      	mov	r1, r5
 800cb22:	f7f3 fe03 	bl	800072c <__aeabi_ddiv>
 800cb26:	f7f3 ff87 	bl	8000a38 <__aeabi_d2iz>
 800cb2a:	4680      	mov	r8, r0
 800cb2c:	f7f3 fc6a 	bl	8000404 <__aeabi_i2d>
 800cb30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb34:	f7f3 fcd0 	bl	80004d8 <__aeabi_dmul>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	4629      	mov	r1, r5
 800cb40:	f7f3 fb12 	bl	8000168 <__aeabi_dsub>
 800cb44:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb48:	9d07      	ldr	r5, [sp, #28]
 800cb4a:	f806 4b01 	strb.w	r4, [r6], #1
 800cb4e:	eba6 040a 	sub.w	r4, r6, sl
 800cb52:	42a5      	cmp	r5, r4
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	f040 8116 	bne.w	800cd88 <_dtoa_r+0x6e0>
 800cb5c:	f7f3 fb06 	bl	800016c <__adddf3>
 800cb60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb64:	4604      	mov	r4, r0
 800cb66:	460d      	mov	r5, r1
 800cb68:	f7f3 ff46 	bl	80009f8 <__aeabi_dcmpgt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	f040 80f8 	bne.w	800cd62 <_dtoa_r+0x6ba>
 800cb72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb76:	4620      	mov	r0, r4
 800cb78:	4629      	mov	r1, r5
 800cb7a:	f7f3 ff15 	bl	80009a8 <__aeabi_dcmpeq>
 800cb7e:	b118      	cbz	r0, 800cb88 <_dtoa_r+0x4e0>
 800cb80:	f018 0f01 	tst.w	r8, #1
 800cb84:	f040 80ed 	bne.w	800cd62 <_dtoa_r+0x6ba>
 800cb88:	4649      	mov	r1, r9
 800cb8a:	4658      	mov	r0, fp
 800cb8c:	f000 fbdc 	bl	800d348 <_Bfree>
 800cb90:	2300      	movs	r3, #0
 800cb92:	7033      	strb	r3, [r6, #0]
 800cb94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cb96:	3701      	adds	r7, #1
 800cb98:	601f      	str	r7, [r3, #0]
 800cb9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8320 	beq.w	800d1e2 <_dtoa_r+0xb3a>
 800cba2:	601e      	str	r6, [r3, #0]
 800cba4:	e31d      	b.n	800d1e2 <_dtoa_r+0xb3a>
 800cba6:	07e2      	lsls	r2, r4, #31
 800cba8:	d505      	bpl.n	800cbb6 <_dtoa_r+0x50e>
 800cbaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbae:	f7f3 fc93 	bl	80004d8 <__aeabi_dmul>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	3601      	adds	r6, #1
 800cbb6:	1064      	asrs	r4, r4, #1
 800cbb8:	3508      	adds	r5, #8
 800cbba:	e73f      	b.n	800ca3c <_dtoa_r+0x394>
 800cbbc:	2602      	movs	r6, #2
 800cbbe:	e742      	b.n	800ca46 <_dtoa_r+0x39e>
 800cbc0:	9c07      	ldr	r4, [sp, #28]
 800cbc2:	9704      	str	r7, [sp, #16]
 800cbc4:	e761      	b.n	800ca8a <_dtoa_r+0x3e2>
 800cbc6:	bf00      	nop
 800cbc8:	0800f160 	.word	0x0800f160
 800cbcc:	0800f138 	.word	0x0800f138
 800cbd0:	3ff00000 	.word	0x3ff00000
 800cbd4:	40240000 	.word	0x40240000
 800cbd8:	401c0000 	.word	0x401c0000
 800cbdc:	40140000 	.word	0x40140000
 800cbe0:	4b70      	ldr	r3, [pc, #448]	@ (800cda4 <_dtoa_r+0x6fc>)
 800cbe2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbec:	4454      	add	r4, sl
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	d045      	beq.n	800cc7e <_dtoa_r+0x5d6>
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	496c      	ldr	r1, [pc, #432]	@ (800cda8 <_dtoa_r+0x700>)
 800cbf6:	f7f3 fd99 	bl	800072c <__aeabi_ddiv>
 800cbfa:	4633      	mov	r3, r6
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	f7f3 fab3 	bl	8000168 <__aeabi_dsub>
 800cc02:	4656      	mov	r6, sl
 800cc04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc0c:	f7f3 ff14 	bl	8000a38 <__aeabi_d2iz>
 800cc10:	4605      	mov	r5, r0
 800cc12:	f7f3 fbf7 	bl	8000404 <__aeabi_i2d>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc1e:	f7f3 faa3 	bl	8000168 <__aeabi_dsub>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	3530      	adds	r5, #48	@ 0x30
 800cc28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc30:	f806 5b01 	strb.w	r5, [r6], #1
 800cc34:	f7f3 fec2 	bl	80009bc <__aeabi_dcmplt>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d163      	bne.n	800cd04 <_dtoa_r+0x65c>
 800cc3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc40:	2000      	movs	r0, #0
 800cc42:	495a      	ldr	r1, [pc, #360]	@ (800cdac <_dtoa_r+0x704>)
 800cc44:	f7f3 fa90 	bl	8000168 <__aeabi_dsub>
 800cc48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc4c:	f7f3 feb6 	bl	80009bc <__aeabi_dcmplt>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	f040 8087 	bne.w	800cd64 <_dtoa_r+0x6bc>
 800cc56:	42a6      	cmp	r6, r4
 800cc58:	f43f af43 	beq.w	800cae2 <_dtoa_r+0x43a>
 800cc5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc60:	2200      	movs	r2, #0
 800cc62:	4b53      	ldr	r3, [pc, #332]	@ (800cdb0 <_dtoa_r+0x708>)
 800cc64:	f7f3 fc38 	bl	80004d8 <__aeabi_dmul>
 800cc68:	2200      	movs	r2, #0
 800cc6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc72:	4b4f      	ldr	r3, [pc, #316]	@ (800cdb0 <_dtoa_r+0x708>)
 800cc74:	f7f3 fc30 	bl	80004d8 <__aeabi_dmul>
 800cc78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc7c:	e7c4      	b.n	800cc08 <_dtoa_r+0x560>
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7f3 fc29 	bl	80004d8 <__aeabi_dmul>
 800cc86:	4656      	mov	r6, sl
 800cc88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc8c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc92:	f7f3 fed1 	bl	8000a38 <__aeabi_d2iz>
 800cc96:	4605      	mov	r5, r0
 800cc98:	f7f3 fbb4 	bl	8000404 <__aeabi_i2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cca4:	f7f3 fa60 	bl	8000168 <__aeabi_dsub>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	3530      	adds	r5, #48	@ 0x30
 800ccae:	f806 5b01 	strb.w	r5, [r6], #1
 800ccb2:	42a6      	cmp	r6, r4
 800ccb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccb8:	f04f 0200 	mov.w	r2, #0
 800ccbc:	d124      	bne.n	800cd08 <_dtoa_r+0x660>
 800ccbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccc2:	4b39      	ldr	r3, [pc, #228]	@ (800cda8 <_dtoa_r+0x700>)
 800ccc4:	f7f3 fa52 	bl	800016c <__adddf3>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccd0:	f7f3 fe92 	bl	80009f8 <__aeabi_dcmpgt>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d145      	bne.n	800cd64 <_dtoa_r+0x6bc>
 800ccd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ccdc:	2000      	movs	r0, #0
 800ccde:	4932      	ldr	r1, [pc, #200]	@ (800cda8 <_dtoa_r+0x700>)
 800cce0:	f7f3 fa42 	bl	8000168 <__aeabi_dsub>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccec:	f7f3 fe66 	bl	80009bc <__aeabi_dcmplt>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	f43f aef6 	beq.w	800cae2 <_dtoa_r+0x43a>
 800ccf6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ccf8:	1e73      	subs	r3, r6, #1
 800ccfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd00:	2b30      	cmp	r3, #48	@ 0x30
 800cd02:	d0f8      	beq.n	800ccf6 <_dtoa_r+0x64e>
 800cd04:	9f04      	ldr	r7, [sp, #16]
 800cd06:	e73f      	b.n	800cb88 <_dtoa_r+0x4e0>
 800cd08:	4b29      	ldr	r3, [pc, #164]	@ (800cdb0 <_dtoa_r+0x708>)
 800cd0a:	f7f3 fbe5 	bl	80004d8 <__aeabi_dmul>
 800cd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd12:	e7bc      	b.n	800cc8e <_dtoa_r+0x5e6>
 800cd14:	d10c      	bne.n	800cd30 <_dtoa_r+0x688>
 800cd16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	4b25      	ldr	r3, [pc, #148]	@ (800cdb4 <_dtoa_r+0x70c>)
 800cd1e:	f7f3 fbdb 	bl	80004d8 <__aeabi_dmul>
 800cd22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd26:	f7f3 fe5d 	bl	80009e4 <__aeabi_dcmpge>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	f000 815b 	beq.w	800cfe6 <_dtoa_r+0x93e>
 800cd30:	2400      	movs	r4, #0
 800cd32:	4625      	mov	r5, r4
 800cd34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd36:	4656      	mov	r6, sl
 800cd38:	43db      	mvns	r3, r3
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	2700      	movs	r7, #0
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4658      	mov	r0, fp
 800cd42:	f000 fb01 	bl	800d348 <_Bfree>
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	d0dc      	beq.n	800cd04 <_dtoa_r+0x65c>
 800cd4a:	b12f      	cbz	r7, 800cd58 <_dtoa_r+0x6b0>
 800cd4c:	42af      	cmp	r7, r5
 800cd4e:	d003      	beq.n	800cd58 <_dtoa_r+0x6b0>
 800cd50:	4639      	mov	r1, r7
 800cd52:	4658      	mov	r0, fp
 800cd54:	f000 faf8 	bl	800d348 <_Bfree>
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4658      	mov	r0, fp
 800cd5c:	f000 faf4 	bl	800d348 <_Bfree>
 800cd60:	e7d0      	b.n	800cd04 <_dtoa_r+0x65c>
 800cd62:	9704      	str	r7, [sp, #16]
 800cd64:	4633      	mov	r3, r6
 800cd66:	461e      	mov	r6, r3
 800cd68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd6c:	2a39      	cmp	r2, #57	@ 0x39
 800cd6e:	d107      	bne.n	800cd80 <_dtoa_r+0x6d8>
 800cd70:	459a      	cmp	sl, r3
 800cd72:	d1f8      	bne.n	800cd66 <_dtoa_r+0x6be>
 800cd74:	9a04      	ldr	r2, [sp, #16]
 800cd76:	3201      	adds	r2, #1
 800cd78:	9204      	str	r2, [sp, #16]
 800cd7a:	2230      	movs	r2, #48	@ 0x30
 800cd7c:	f88a 2000 	strb.w	r2, [sl]
 800cd80:	781a      	ldrb	r2, [r3, #0]
 800cd82:	3201      	adds	r2, #1
 800cd84:	701a      	strb	r2, [r3, #0]
 800cd86:	e7bd      	b.n	800cd04 <_dtoa_r+0x65c>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4b09      	ldr	r3, [pc, #36]	@ (800cdb0 <_dtoa_r+0x708>)
 800cd8c:	f7f3 fba4 	bl	80004d8 <__aeabi_dmul>
 800cd90:	2200      	movs	r2, #0
 800cd92:	2300      	movs	r3, #0
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	f7f3 fe06 	bl	80009a8 <__aeabi_dcmpeq>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	f43f aebc 	beq.w	800cb1a <_dtoa_r+0x472>
 800cda2:	e6f1      	b.n	800cb88 <_dtoa_r+0x4e0>
 800cda4:	0800f160 	.word	0x0800f160
 800cda8:	3fe00000 	.word	0x3fe00000
 800cdac:	3ff00000 	.word	0x3ff00000
 800cdb0:	40240000 	.word	0x40240000
 800cdb4:	40140000 	.word	0x40140000
 800cdb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	f000 80db 	beq.w	800cf76 <_dtoa_r+0x8ce>
 800cdc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdc2:	2a01      	cmp	r2, #1
 800cdc4:	f300 80bf 	bgt.w	800cf46 <_dtoa_r+0x89e>
 800cdc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	f000 80b7 	beq.w	800cf3e <_dtoa_r+0x896>
 800cdd0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cdd4:	4646      	mov	r6, r8
 800cdd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdda:	2101      	movs	r1, #1
 800cddc:	441a      	add	r2, r3
 800cdde:	4658      	mov	r0, fp
 800cde0:	4498      	add	r8, r3
 800cde2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cde4:	f000 fb64 	bl	800d4b0 <__i2b>
 800cde8:	4605      	mov	r5, r0
 800cdea:	b15e      	cbz	r6, 800ce04 <_dtoa_r+0x75c>
 800cdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	dd08      	ble.n	800ce04 <_dtoa_r+0x75c>
 800cdf2:	42b3      	cmp	r3, r6
 800cdf4:	bfa8      	it	ge
 800cdf6:	4633      	movge	r3, r6
 800cdf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdfa:	eba8 0803 	sub.w	r8, r8, r3
 800cdfe:	1af6      	subs	r6, r6, r3
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce06:	b1f3      	cbz	r3, 800ce46 <_dtoa_r+0x79e>
 800ce08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 80b7 	beq.w	800cf7e <_dtoa_r+0x8d6>
 800ce10:	b18c      	cbz	r4, 800ce36 <_dtoa_r+0x78e>
 800ce12:	4629      	mov	r1, r5
 800ce14:	4622      	mov	r2, r4
 800ce16:	4658      	mov	r0, fp
 800ce18:	f000 fc08 	bl	800d62c <__pow5mult>
 800ce1c:	464a      	mov	r2, r9
 800ce1e:	4601      	mov	r1, r0
 800ce20:	4605      	mov	r5, r0
 800ce22:	4658      	mov	r0, fp
 800ce24:	f000 fb5a 	bl	800d4dc <__multiply>
 800ce28:	4649      	mov	r1, r9
 800ce2a:	9004      	str	r0, [sp, #16]
 800ce2c:	4658      	mov	r0, fp
 800ce2e:	f000 fa8b 	bl	800d348 <_Bfree>
 800ce32:	9b04      	ldr	r3, [sp, #16]
 800ce34:	4699      	mov	r9, r3
 800ce36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce38:	1b1a      	subs	r2, r3, r4
 800ce3a:	d004      	beq.n	800ce46 <_dtoa_r+0x79e>
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	4658      	mov	r0, fp
 800ce40:	f000 fbf4 	bl	800d62c <__pow5mult>
 800ce44:	4681      	mov	r9, r0
 800ce46:	2101      	movs	r1, #1
 800ce48:	4658      	mov	r0, fp
 800ce4a:	f000 fb31 	bl	800d4b0 <__i2b>
 800ce4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce50:	4604      	mov	r4, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 81c9 	beq.w	800d1ea <_dtoa_r+0xb42>
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	4658      	mov	r0, fp
 800ce5e:	f000 fbe5 	bl	800d62c <__pow5mult>
 800ce62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce64:	4604      	mov	r4, r0
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	f300 808f 	bgt.w	800cf8a <_dtoa_r+0x8e2>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f040 8087 	bne.w	800cf82 <_dtoa_r+0x8da>
 800ce74:	9b03      	ldr	r3, [sp, #12]
 800ce76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f040 8083 	bne.w	800cf86 <_dtoa_r+0x8de>
 800ce80:	9b03      	ldr	r3, [sp, #12]
 800ce82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce86:	0d1b      	lsrs	r3, r3, #20
 800ce88:	051b      	lsls	r3, r3, #20
 800ce8a:	b12b      	cbz	r3, 800ce98 <_dtoa_r+0x7f0>
 800ce8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8e:	f108 0801 	add.w	r8, r8, #1
 800ce92:	3301      	adds	r3, #1
 800ce94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce96:	2301      	movs	r3, #1
 800ce98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 81aa 	beq.w	800d1f6 <_dtoa_r+0xb4e>
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cea8:	6918      	ldr	r0, [r3, #16]
 800ceaa:	f000 fab5 	bl	800d418 <__hi0bits>
 800ceae:	f1c0 0020 	rsb	r0, r0, #32
 800ceb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb4:	4418      	add	r0, r3
 800ceb6:	f010 001f 	ands.w	r0, r0, #31
 800ceba:	d071      	beq.n	800cfa0 <_dtoa_r+0x8f8>
 800cebc:	f1c0 0320 	rsb	r3, r0, #32
 800cec0:	2b04      	cmp	r3, #4
 800cec2:	dd65      	ble.n	800cf90 <_dtoa_r+0x8e8>
 800cec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec6:	f1c0 001c 	rsb	r0, r0, #28
 800ceca:	4403      	add	r3, r0
 800cecc:	4480      	add	r8, r0
 800cece:	4406      	add	r6, r0
 800ced0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced2:	f1b8 0f00 	cmp.w	r8, #0
 800ced6:	dd05      	ble.n	800cee4 <_dtoa_r+0x83c>
 800ced8:	4649      	mov	r1, r9
 800ceda:	4642      	mov	r2, r8
 800cedc:	4658      	mov	r0, fp
 800cede:	f000 fbff 	bl	800d6e0 <__lshift>
 800cee2:	4681      	mov	r9, r0
 800cee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	dd05      	ble.n	800cef6 <_dtoa_r+0x84e>
 800ceea:	4621      	mov	r1, r4
 800ceec:	461a      	mov	r2, r3
 800ceee:	4658      	mov	r0, fp
 800cef0:	f000 fbf6 	bl	800d6e0 <__lshift>
 800cef4:	4604      	mov	r4, r0
 800cef6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d053      	beq.n	800cfa4 <_dtoa_r+0x8fc>
 800cefc:	4621      	mov	r1, r4
 800cefe:	4648      	mov	r0, r9
 800cf00:	f000 fc5a 	bl	800d7b8 <__mcmp>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	da4d      	bge.n	800cfa4 <_dtoa_r+0x8fc>
 800cf08:	1e7b      	subs	r3, r7, #1
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	220a      	movs	r2, #10
 800cf10:	2300      	movs	r3, #0
 800cf12:	4658      	mov	r0, fp
 800cf14:	f000 fa3a 	bl	800d38c <__multadd>
 800cf18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf1a:	4681      	mov	r9, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 816c 	beq.w	800d1fa <_dtoa_r+0xb52>
 800cf22:	2300      	movs	r3, #0
 800cf24:	4629      	mov	r1, r5
 800cf26:	220a      	movs	r2, #10
 800cf28:	4658      	mov	r0, fp
 800cf2a:	f000 fa2f 	bl	800d38c <__multadd>
 800cf2e:	9b08      	ldr	r3, [sp, #32]
 800cf30:	4605      	mov	r5, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dc61      	bgt.n	800cffa <_dtoa_r+0x952>
 800cf36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	dc3b      	bgt.n	800cfb4 <_dtoa_r+0x90c>
 800cf3c:	e05d      	b.n	800cffa <_dtoa_r+0x952>
 800cf3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf40:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf44:	e746      	b.n	800cdd4 <_dtoa_r+0x72c>
 800cf46:	9b07      	ldr	r3, [sp, #28]
 800cf48:	1e5c      	subs	r4, r3, #1
 800cf4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	bfbf      	itttt	lt
 800cf50:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cf52:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cf54:	1ae3      	sublt	r3, r4, r3
 800cf56:	18d2      	addlt	r2, r2, r3
 800cf58:	bfa8      	it	ge
 800cf5a:	1b1c      	subge	r4, r3, r4
 800cf5c:	9b07      	ldr	r3, [sp, #28]
 800cf5e:	bfbe      	ittt	lt
 800cf60:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cf62:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cf64:	2400      	movlt	r4, #0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfb5      	itete	lt
 800cf6a:	eba8 0603 	sublt.w	r6, r8, r3
 800cf6e:	4646      	movge	r6, r8
 800cf70:	2300      	movlt	r3, #0
 800cf72:	9b07      	ldrge	r3, [sp, #28]
 800cf74:	e730      	b.n	800cdd8 <_dtoa_r+0x730>
 800cf76:	4646      	mov	r6, r8
 800cf78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cf7c:	e735      	b.n	800cdea <_dtoa_r+0x742>
 800cf7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf80:	e75c      	b.n	800ce3c <_dtoa_r+0x794>
 800cf82:	2300      	movs	r3, #0
 800cf84:	e788      	b.n	800ce98 <_dtoa_r+0x7f0>
 800cf86:	9b02      	ldr	r3, [sp, #8]
 800cf88:	e786      	b.n	800ce98 <_dtoa_r+0x7f0>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf8e:	e788      	b.n	800cea2 <_dtoa_r+0x7fa>
 800cf90:	d09f      	beq.n	800ced2 <_dtoa_r+0x82a>
 800cf92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf94:	331c      	adds	r3, #28
 800cf96:	441a      	add	r2, r3
 800cf98:	4498      	add	r8, r3
 800cf9a:	441e      	add	r6, r3
 800cf9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf9e:	e798      	b.n	800ced2 <_dtoa_r+0x82a>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	e7f6      	b.n	800cf92 <_dtoa_r+0x8ea>
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	9704      	str	r7, [sp, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	dc20      	bgt.n	800cfee <_dtoa_r+0x946>
 800cfac:	9308      	str	r3, [sp, #32]
 800cfae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	dd1e      	ble.n	800cff2 <_dtoa_r+0x94a>
 800cfb4:	9b08      	ldr	r3, [sp, #32]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f47f aebc 	bne.w	800cd34 <_dtoa_r+0x68c>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	2205      	movs	r2, #5
 800cfc0:	4658      	mov	r0, fp
 800cfc2:	f000 f9e3 	bl	800d38c <__multadd>
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	4604      	mov	r4, r0
 800cfca:	4648      	mov	r0, r9
 800cfcc:	f000 fbf4 	bl	800d7b8 <__mcmp>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	f77f aeaf 	ble.w	800cd34 <_dtoa_r+0x68c>
 800cfd6:	2331      	movs	r3, #49	@ 0x31
 800cfd8:	4656      	mov	r6, sl
 800cfda:	f806 3b01 	strb.w	r3, [r6], #1
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	9304      	str	r3, [sp, #16]
 800cfe4:	e6aa      	b.n	800cd3c <_dtoa_r+0x694>
 800cfe6:	9c07      	ldr	r4, [sp, #28]
 800cfe8:	9704      	str	r7, [sp, #16]
 800cfea:	4625      	mov	r5, r4
 800cfec:	e7f3      	b.n	800cfd6 <_dtoa_r+0x92e>
 800cfee:	9b07      	ldr	r3, [sp, #28]
 800cff0:	9308      	str	r3, [sp, #32]
 800cff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 8104 	beq.w	800d202 <_dtoa_r+0xb5a>
 800cffa:	2e00      	cmp	r6, #0
 800cffc:	dd05      	ble.n	800d00a <_dtoa_r+0x962>
 800cffe:	4629      	mov	r1, r5
 800d000:	4632      	mov	r2, r6
 800d002:	4658      	mov	r0, fp
 800d004:	f000 fb6c 	bl	800d6e0 <__lshift>
 800d008:	4605      	mov	r5, r0
 800d00a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d05a      	beq.n	800d0c6 <_dtoa_r+0xa1e>
 800d010:	4658      	mov	r0, fp
 800d012:	6869      	ldr	r1, [r5, #4]
 800d014:	f000 f958 	bl	800d2c8 <_Balloc>
 800d018:	4606      	mov	r6, r0
 800d01a:	b928      	cbnz	r0, 800d028 <_dtoa_r+0x980>
 800d01c:	4602      	mov	r2, r0
 800d01e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d022:	4b83      	ldr	r3, [pc, #524]	@ (800d230 <_dtoa_r+0xb88>)
 800d024:	f7ff bb54 	b.w	800c6d0 <_dtoa_r+0x28>
 800d028:	692a      	ldr	r2, [r5, #16]
 800d02a:	f105 010c 	add.w	r1, r5, #12
 800d02e:	3202      	adds	r2, #2
 800d030:	0092      	lsls	r2, r2, #2
 800d032:	300c      	adds	r0, #12
 800d034:	f000 fee2 	bl	800ddfc <memcpy>
 800d038:	2201      	movs	r2, #1
 800d03a:	4631      	mov	r1, r6
 800d03c:	4658      	mov	r0, fp
 800d03e:	f000 fb4f 	bl	800d6e0 <__lshift>
 800d042:	462f      	mov	r7, r5
 800d044:	4605      	mov	r5, r0
 800d046:	f10a 0301 	add.w	r3, sl, #1
 800d04a:	9307      	str	r3, [sp, #28]
 800d04c:	9b08      	ldr	r3, [sp, #32]
 800d04e:	4453      	add	r3, sl
 800d050:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	930a      	str	r3, [sp, #40]	@ 0x28
 800d05a:	9b07      	ldr	r3, [sp, #28]
 800d05c:	4621      	mov	r1, r4
 800d05e:	3b01      	subs	r3, #1
 800d060:	4648      	mov	r0, r9
 800d062:	9302      	str	r3, [sp, #8]
 800d064:	f7ff fa97 	bl	800c596 <quorem>
 800d068:	4639      	mov	r1, r7
 800d06a:	9008      	str	r0, [sp, #32]
 800d06c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d070:	4648      	mov	r0, r9
 800d072:	f000 fba1 	bl	800d7b8 <__mcmp>
 800d076:	462a      	mov	r2, r5
 800d078:	9009      	str	r0, [sp, #36]	@ 0x24
 800d07a:	4621      	mov	r1, r4
 800d07c:	4658      	mov	r0, fp
 800d07e:	f000 fbb7 	bl	800d7f0 <__mdiff>
 800d082:	68c2      	ldr	r2, [r0, #12]
 800d084:	4606      	mov	r6, r0
 800d086:	bb02      	cbnz	r2, 800d0ca <_dtoa_r+0xa22>
 800d088:	4601      	mov	r1, r0
 800d08a:	4648      	mov	r0, r9
 800d08c:	f000 fb94 	bl	800d7b8 <__mcmp>
 800d090:	4602      	mov	r2, r0
 800d092:	4631      	mov	r1, r6
 800d094:	4658      	mov	r0, fp
 800d096:	920c      	str	r2, [sp, #48]	@ 0x30
 800d098:	f000 f956 	bl	800d348 <_Bfree>
 800d09c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d09e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0a0:	9e07      	ldr	r6, [sp, #28]
 800d0a2:	ea43 0102 	orr.w	r1, r3, r2
 800d0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0a8:	4319      	orrs	r1, r3
 800d0aa:	d110      	bne.n	800d0ce <_dtoa_r+0xa26>
 800d0ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0b0:	d029      	beq.n	800d106 <_dtoa_r+0xa5e>
 800d0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dd02      	ble.n	800d0be <_dtoa_r+0xa16>
 800d0b8:	9b08      	ldr	r3, [sp, #32]
 800d0ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d0be:	9b02      	ldr	r3, [sp, #8]
 800d0c0:	f883 8000 	strb.w	r8, [r3]
 800d0c4:	e63b      	b.n	800cd3e <_dtoa_r+0x696>
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	e7bb      	b.n	800d042 <_dtoa_r+0x99a>
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	e7e1      	b.n	800d092 <_dtoa_r+0x9ea>
 800d0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	db04      	blt.n	800d0de <_dtoa_r+0xa36>
 800d0d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d0d6:	430b      	orrs	r3, r1
 800d0d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0da:	430b      	orrs	r3, r1
 800d0dc:	d120      	bne.n	800d120 <_dtoa_r+0xa78>
 800d0de:	2a00      	cmp	r2, #0
 800d0e0:	dded      	ble.n	800d0be <_dtoa_r+0xa16>
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	f000 fafa 	bl	800d6e0 <__lshift>
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	4681      	mov	r9, r0
 800d0f0:	f000 fb62 	bl	800d7b8 <__mcmp>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	dc03      	bgt.n	800d100 <_dtoa_r+0xa58>
 800d0f8:	d1e1      	bne.n	800d0be <_dtoa_r+0xa16>
 800d0fa:	f018 0f01 	tst.w	r8, #1
 800d0fe:	d0de      	beq.n	800d0be <_dtoa_r+0xa16>
 800d100:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d104:	d1d8      	bne.n	800d0b8 <_dtoa_r+0xa10>
 800d106:	2339      	movs	r3, #57	@ 0x39
 800d108:	9a02      	ldr	r2, [sp, #8]
 800d10a:	7013      	strb	r3, [r2, #0]
 800d10c:	4633      	mov	r3, r6
 800d10e:	461e      	mov	r6, r3
 800d110:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d114:	3b01      	subs	r3, #1
 800d116:	2a39      	cmp	r2, #57	@ 0x39
 800d118:	d052      	beq.n	800d1c0 <_dtoa_r+0xb18>
 800d11a:	3201      	adds	r2, #1
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	e60e      	b.n	800cd3e <_dtoa_r+0x696>
 800d120:	2a00      	cmp	r2, #0
 800d122:	dd07      	ble.n	800d134 <_dtoa_r+0xa8c>
 800d124:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d128:	d0ed      	beq.n	800d106 <_dtoa_r+0xa5e>
 800d12a:	9a02      	ldr	r2, [sp, #8]
 800d12c:	f108 0301 	add.w	r3, r8, #1
 800d130:	7013      	strb	r3, [r2, #0]
 800d132:	e604      	b.n	800cd3e <_dtoa_r+0x696>
 800d134:	9b07      	ldr	r3, [sp, #28]
 800d136:	9a07      	ldr	r2, [sp, #28]
 800d138:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d13c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d13e:	4293      	cmp	r3, r2
 800d140:	d028      	beq.n	800d194 <_dtoa_r+0xaec>
 800d142:	4649      	mov	r1, r9
 800d144:	2300      	movs	r3, #0
 800d146:	220a      	movs	r2, #10
 800d148:	4658      	mov	r0, fp
 800d14a:	f000 f91f 	bl	800d38c <__multadd>
 800d14e:	42af      	cmp	r7, r5
 800d150:	4681      	mov	r9, r0
 800d152:	f04f 0300 	mov.w	r3, #0
 800d156:	f04f 020a 	mov.w	r2, #10
 800d15a:	4639      	mov	r1, r7
 800d15c:	4658      	mov	r0, fp
 800d15e:	d107      	bne.n	800d170 <_dtoa_r+0xac8>
 800d160:	f000 f914 	bl	800d38c <__multadd>
 800d164:	4607      	mov	r7, r0
 800d166:	4605      	mov	r5, r0
 800d168:	9b07      	ldr	r3, [sp, #28]
 800d16a:	3301      	adds	r3, #1
 800d16c:	9307      	str	r3, [sp, #28]
 800d16e:	e774      	b.n	800d05a <_dtoa_r+0x9b2>
 800d170:	f000 f90c 	bl	800d38c <__multadd>
 800d174:	4629      	mov	r1, r5
 800d176:	4607      	mov	r7, r0
 800d178:	2300      	movs	r3, #0
 800d17a:	220a      	movs	r2, #10
 800d17c:	4658      	mov	r0, fp
 800d17e:	f000 f905 	bl	800d38c <__multadd>
 800d182:	4605      	mov	r5, r0
 800d184:	e7f0      	b.n	800d168 <_dtoa_r+0xac0>
 800d186:	9b08      	ldr	r3, [sp, #32]
 800d188:	2700      	movs	r7, #0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	bfcc      	ite	gt
 800d18e:	461e      	movgt	r6, r3
 800d190:	2601      	movle	r6, #1
 800d192:	4456      	add	r6, sl
 800d194:	4649      	mov	r1, r9
 800d196:	2201      	movs	r2, #1
 800d198:	4658      	mov	r0, fp
 800d19a:	f000 faa1 	bl	800d6e0 <__lshift>
 800d19e:	4621      	mov	r1, r4
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	f000 fb09 	bl	800d7b8 <__mcmp>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	dcb0      	bgt.n	800d10c <_dtoa_r+0xa64>
 800d1aa:	d102      	bne.n	800d1b2 <_dtoa_r+0xb0a>
 800d1ac:	f018 0f01 	tst.w	r8, #1
 800d1b0:	d1ac      	bne.n	800d10c <_dtoa_r+0xa64>
 800d1b2:	4633      	mov	r3, r6
 800d1b4:	461e      	mov	r6, r3
 800d1b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ba:	2a30      	cmp	r2, #48	@ 0x30
 800d1bc:	d0fa      	beq.n	800d1b4 <_dtoa_r+0xb0c>
 800d1be:	e5be      	b.n	800cd3e <_dtoa_r+0x696>
 800d1c0:	459a      	cmp	sl, r3
 800d1c2:	d1a4      	bne.n	800d10e <_dtoa_r+0xa66>
 800d1c4:	9b04      	ldr	r3, [sp, #16]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	2331      	movs	r3, #49	@ 0x31
 800d1cc:	f88a 3000 	strb.w	r3, [sl]
 800d1d0:	e5b5      	b.n	800cd3e <_dtoa_r+0x696>
 800d1d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d1d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d234 <_dtoa_r+0xb8c>
 800d1d8:	b11b      	cbz	r3, 800d1e2 <_dtoa_r+0xb3a>
 800d1da:	f10a 0308 	add.w	r3, sl, #8
 800d1de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	4650      	mov	r0, sl
 800d1e4:	b017      	add	sp, #92	@ 0x5c
 800d1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	f77f ae3d 	ble.w	800ce6c <_dtoa_r+0x7c4>
 800d1f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	e65b      	b.n	800ceb2 <_dtoa_r+0x80a>
 800d1fa:	9b08      	ldr	r3, [sp, #32]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f77f aed6 	ble.w	800cfae <_dtoa_r+0x906>
 800d202:	4656      	mov	r6, sl
 800d204:	4621      	mov	r1, r4
 800d206:	4648      	mov	r0, r9
 800d208:	f7ff f9c5 	bl	800c596 <quorem>
 800d20c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d210:	9b08      	ldr	r3, [sp, #32]
 800d212:	f806 8b01 	strb.w	r8, [r6], #1
 800d216:	eba6 020a 	sub.w	r2, r6, sl
 800d21a:	4293      	cmp	r3, r2
 800d21c:	ddb3      	ble.n	800d186 <_dtoa_r+0xade>
 800d21e:	4649      	mov	r1, r9
 800d220:	2300      	movs	r3, #0
 800d222:	220a      	movs	r2, #10
 800d224:	4658      	mov	r0, fp
 800d226:	f000 f8b1 	bl	800d38c <__multadd>
 800d22a:	4681      	mov	r9, r0
 800d22c:	e7ea      	b.n	800d204 <_dtoa_r+0xb5c>
 800d22e:	bf00      	nop
 800d230:	0800f0c2 	.word	0x0800f0c2
 800d234:	0800f046 	.word	0x0800f046

0800d238 <_free_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	4605      	mov	r5, r0
 800d23c:	2900      	cmp	r1, #0
 800d23e:	d040      	beq.n	800d2c2 <_free_r+0x8a>
 800d240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d244:	1f0c      	subs	r4, r1, #4
 800d246:	2b00      	cmp	r3, #0
 800d248:	bfb8      	it	lt
 800d24a:	18e4      	addlt	r4, r4, r3
 800d24c:	f7fe fb2c 	bl	800b8a8 <__malloc_lock>
 800d250:	4a1c      	ldr	r2, [pc, #112]	@ (800d2c4 <_free_r+0x8c>)
 800d252:	6813      	ldr	r3, [r2, #0]
 800d254:	b933      	cbnz	r3, 800d264 <_free_r+0x2c>
 800d256:	6063      	str	r3, [r4, #4]
 800d258:	6014      	str	r4, [r2, #0]
 800d25a:	4628      	mov	r0, r5
 800d25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d260:	f7fe bb28 	b.w	800b8b4 <__malloc_unlock>
 800d264:	42a3      	cmp	r3, r4
 800d266:	d908      	bls.n	800d27a <_free_r+0x42>
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	1821      	adds	r1, r4, r0
 800d26c:	428b      	cmp	r3, r1
 800d26e:	bf01      	itttt	eq
 800d270:	6819      	ldreq	r1, [r3, #0]
 800d272:	685b      	ldreq	r3, [r3, #4]
 800d274:	1809      	addeq	r1, r1, r0
 800d276:	6021      	streq	r1, [r4, #0]
 800d278:	e7ed      	b.n	800d256 <_free_r+0x1e>
 800d27a:	461a      	mov	r2, r3
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	b10b      	cbz	r3, 800d284 <_free_r+0x4c>
 800d280:	42a3      	cmp	r3, r4
 800d282:	d9fa      	bls.n	800d27a <_free_r+0x42>
 800d284:	6811      	ldr	r1, [r2, #0]
 800d286:	1850      	adds	r0, r2, r1
 800d288:	42a0      	cmp	r0, r4
 800d28a:	d10b      	bne.n	800d2a4 <_free_r+0x6c>
 800d28c:	6820      	ldr	r0, [r4, #0]
 800d28e:	4401      	add	r1, r0
 800d290:	1850      	adds	r0, r2, r1
 800d292:	4283      	cmp	r3, r0
 800d294:	6011      	str	r1, [r2, #0]
 800d296:	d1e0      	bne.n	800d25a <_free_r+0x22>
 800d298:	6818      	ldr	r0, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	4408      	add	r0, r1
 800d29e:	6010      	str	r0, [r2, #0]
 800d2a0:	6053      	str	r3, [r2, #4]
 800d2a2:	e7da      	b.n	800d25a <_free_r+0x22>
 800d2a4:	d902      	bls.n	800d2ac <_free_r+0x74>
 800d2a6:	230c      	movs	r3, #12
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	e7d6      	b.n	800d25a <_free_r+0x22>
 800d2ac:	6820      	ldr	r0, [r4, #0]
 800d2ae:	1821      	adds	r1, r4, r0
 800d2b0:	428b      	cmp	r3, r1
 800d2b2:	bf01      	itttt	eq
 800d2b4:	6819      	ldreq	r1, [r3, #0]
 800d2b6:	685b      	ldreq	r3, [r3, #4]
 800d2b8:	1809      	addeq	r1, r1, r0
 800d2ba:	6021      	streq	r1, [r4, #0]
 800d2bc:	6063      	str	r3, [r4, #4]
 800d2be:	6054      	str	r4, [r2, #4]
 800d2c0:	e7cb      	b.n	800d25a <_free_r+0x22>
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20000438 	.word	0x20000438

0800d2c8 <_Balloc>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	69c6      	ldr	r6, [r0, #28]
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	460d      	mov	r5, r1
 800d2d0:	b976      	cbnz	r6, 800d2f0 <_Balloc+0x28>
 800d2d2:	2010      	movs	r0, #16
 800d2d4:	f7fe fa36 	bl	800b744 <malloc>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	61e0      	str	r0, [r4, #28]
 800d2dc:	b920      	cbnz	r0, 800d2e8 <_Balloc+0x20>
 800d2de:	216b      	movs	r1, #107	@ 0x6b
 800d2e0:	4b17      	ldr	r3, [pc, #92]	@ (800d340 <_Balloc+0x78>)
 800d2e2:	4818      	ldr	r0, [pc, #96]	@ (800d344 <_Balloc+0x7c>)
 800d2e4:	f000 fd98 	bl	800de18 <__assert_func>
 800d2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2ec:	6006      	str	r6, [r0, #0]
 800d2ee:	60c6      	str	r6, [r0, #12]
 800d2f0:	69e6      	ldr	r6, [r4, #28]
 800d2f2:	68f3      	ldr	r3, [r6, #12]
 800d2f4:	b183      	cbz	r3, 800d318 <_Balloc+0x50>
 800d2f6:	69e3      	ldr	r3, [r4, #28]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2fe:	b9b8      	cbnz	r0, 800d330 <_Balloc+0x68>
 800d300:	2101      	movs	r1, #1
 800d302:	fa01 f605 	lsl.w	r6, r1, r5
 800d306:	1d72      	adds	r2, r6, #5
 800d308:	4620      	mov	r0, r4
 800d30a:	0092      	lsls	r2, r2, #2
 800d30c:	f000 fda2 	bl	800de54 <_calloc_r>
 800d310:	b160      	cbz	r0, 800d32c <_Balloc+0x64>
 800d312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d316:	e00e      	b.n	800d336 <_Balloc+0x6e>
 800d318:	2221      	movs	r2, #33	@ 0x21
 800d31a:	2104      	movs	r1, #4
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 fd99 	bl	800de54 <_calloc_r>
 800d322:	69e3      	ldr	r3, [r4, #28]
 800d324:	60f0      	str	r0, [r6, #12]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1e4      	bne.n	800d2f6 <_Balloc+0x2e>
 800d32c:	2000      	movs	r0, #0
 800d32e:	bd70      	pop	{r4, r5, r6, pc}
 800d330:	6802      	ldr	r2, [r0, #0]
 800d332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d336:	2300      	movs	r3, #0
 800d338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d33c:	e7f7      	b.n	800d32e <_Balloc+0x66>
 800d33e:	bf00      	nop
 800d340:	0800f053 	.word	0x0800f053
 800d344:	0800f0d3 	.word	0x0800f0d3

0800d348 <_Bfree>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	69c6      	ldr	r6, [r0, #28]
 800d34c:	4605      	mov	r5, r0
 800d34e:	460c      	mov	r4, r1
 800d350:	b976      	cbnz	r6, 800d370 <_Bfree+0x28>
 800d352:	2010      	movs	r0, #16
 800d354:	f7fe f9f6 	bl	800b744 <malloc>
 800d358:	4602      	mov	r2, r0
 800d35a:	61e8      	str	r0, [r5, #28]
 800d35c:	b920      	cbnz	r0, 800d368 <_Bfree+0x20>
 800d35e:	218f      	movs	r1, #143	@ 0x8f
 800d360:	4b08      	ldr	r3, [pc, #32]	@ (800d384 <_Bfree+0x3c>)
 800d362:	4809      	ldr	r0, [pc, #36]	@ (800d388 <_Bfree+0x40>)
 800d364:	f000 fd58 	bl	800de18 <__assert_func>
 800d368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d36c:	6006      	str	r6, [r0, #0]
 800d36e:	60c6      	str	r6, [r0, #12]
 800d370:	b13c      	cbz	r4, 800d382 <_Bfree+0x3a>
 800d372:	69eb      	ldr	r3, [r5, #28]
 800d374:	6862      	ldr	r2, [r4, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d37c:	6021      	str	r1, [r4, #0]
 800d37e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d382:	bd70      	pop	{r4, r5, r6, pc}
 800d384:	0800f053 	.word	0x0800f053
 800d388:	0800f0d3 	.word	0x0800f0d3

0800d38c <__multadd>:
 800d38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d390:	4607      	mov	r7, r0
 800d392:	460c      	mov	r4, r1
 800d394:	461e      	mov	r6, r3
 800d396:	2000      	movs	r0, #0
 800d398:	690d      	ldr	r5, [r1, #16]
 800d39a:	f101 0c14 	add.w	ip, r1, #20
 800d39e:	f8dc 3000 	ldr.w	r3, [ip]
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	b299      	uxth	r1, r3
 800d3a6:	fb02 6101 	mla	r1, r2, r1, r6
 800d3aa:	0c1e      	lsrs	r6, r3, #16
 800d3ac:	0c0b      	lsrs	r3, r1, #16
 800d3ae:	fb02 3306 	mla	r3, r2, r6, r3
 800d3b2:	b289      	uxth	r1, r1
 800d3b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3b8:	4285      	cmp	r5, r0
 800d3ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3be:	f84c 1b04 	str.w	r1, [ip], #4
 800d3c2:	dcec      	bgt.n	800d39e <__multadd+0x12>
 800d3c4:	b30e      	cbz	r6, 800d40a <__multadd+0x7e>
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	42ab      	cmp	r3, r5
 800d3ca:	dc19      	bgt.n	800d400 <__multadd+0x74>
 800d3cc:	6861      	ldr	r1, [r4, #4]
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	3101      	adds	r1, #1
 800d3d2:	f7ff ff79 	bl	800d2c8 <_Balloc>
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	b928      	cbnz	r0, 800d3e6 <__multadd+0x5a>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	21ba      	movs	r1, #186	@ 0xba
 800d3de:	4b0c      	ldr	r3, [pc, #48]	@ (800d410 <__multadd+0x84>)
 800d3e0:	480c      	ldr	r0, [pc, #48]	@ (800d414 <__multadd+0x88>)
 800d3e2:	f000 fd19 	bl	800de18 <__assert_func>
 800d3e6:	6922      	ldr	r2, [r4, #16]
 800d3e8:	f104 010c 	add.w	r1, r4, #12
 800d3ec:	3202      	adds	r2, #2
 800d3ee:	0092      	lsls	r2, r2, #2
 800d3f0:	300c      	adds	r0, #12
 800d3f2:	f000 fd03 	bl	800ddfc <memcpy>
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	f7ff ffa5 	bl	800d348 <_Bfree>
 800d3fe:	4644      	mov	r4, r8
 800d400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d404:	3501      	adds	r5, #1
 800d406:	615e      	str	r6, [r3, #20]
 800d408:	6125      	str	r5, [r4, #16]
 800d40a:	4620      	mov	r0, r4
 800d40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d410:	0800f0c2 	.word	0x0800f0c2
 800d414:	0800f0d3 	.word	0x0800f0d3

0800d418 <__hi0bits>:
 800d418:	4603      	mov	r3, r0
 800d41a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d41e:	bf3a      	itte	cc
 800d420:	0403      	lslcc	r3, r0, #16
 800d422:	2010      	movcc	r0, #16
 800d424:	2000      	movcs	r0, #0
 800d426:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d42a:	bf3c      	itt	cc
 800d42c:	021b      	lslcc	r3, r3, #8
 800d42e:	3008      	addcc	r0, #8
 800d430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d434:	bf3c      	itt	cc
 800d436:	011b      	lslcc	r3, r3, #4
 800d438:	3004      	addcc	r0, #4
 800d43a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d43e:	bf3c      	itt	cc
 800d440:	009b      	lslcc	r3, r3, #2
 800d442:	3002      	addcc	r0, #2
 800d444:	2b00      	cmp	r3, #0
 800d446:	db05      	blt.n	800d454 <__hi0bits+0x3c>
 800d448:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d44c:	f100 0001 	add.w	r0, r0, #1
 800d450:	bf08      	it	eq
 800d452:	2020      	moveq	r0, #32
 800d454:	4770      	bx	lr

0800d456 <__lo0bits>:
 800d456:	6803      	ldr	r3, [r0, #0]
 800d458:	4602      	mov	r2, r0
 800d45a:	f013 0007 	ands.w	r0, r3, #7
 800d45e:	d00b      	beq.n	800d478 <__lo0bits+0x22>
 800d460:	07d9      	lsls	r1, r3, #31
 800d462:	d421      	bmi.n	800d4a8 <__lo0bits+0x52>
 800d464:	0798      	lsls	r0, r3, #30
 800d466:	bf49      	itett	mi
 800d468:	085b      	lsrmi	r3, r3, #1
 800d46a:	089b      	lsrpl	r3, r3, #2
 800d46c:	2001      	movmi	r0, #1
 800d46e:	6013      	strmi	r3, [r2, #0]
 800d470:	bf5c      	itt	pl
 800d472:	2002      	movpl	r0, #2
 800d474:	6013      	strpl	r3, [r2, #0]
 800d476:	4770      	bx	lr
 800d478:	b299      	uxth	r1, r3
 800d47a:	b909      	cbnz	r1, 800d480 <__lo0bits+0x2a>
 800d47c:	2010      	movs	r0, #16
 800d47e:	0c1b      	lsrs	r3, r3, #16
 800d480:	b2d9      	uxtb	r1, r3
 800d482:	b909      	cbnz	r1, 800d488 <__lo0bits+0x32>
 800d484:	3008      	adds	r0, #8
 800d486:	0a1b      	lsrs	r3, r3, #8
 800d488:	0719      	lsls	r1, r3, #28
 800d48a:	bf04      	itt	eq
 800d48c:	091b      	lsreq	r3, r3, #4
 800d48e:	3004      	addeq	r0, #4
 800d490:	0799      	lsls	r1, r3, #30
 800d492:	bf04      	itt	eq
 800d494:	089b      	lsreq	r3, r3, #2
 800d496:	3002      	addeq	r0, #2
 800d498:	07d9      	lsls	r1, r3, #31
 800d49a:	d403      	bmi.n	800d4a4 <__lo0bits+0x4e>
 800d49c:	085b      	lsrs	r3, r3, #1
 800d49e:	f100 0001 	add.w	r0, r0, #1
 800d4a2:	d003      	beq.n	800d4ac <__lo0bits+0x56>
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	4770      	bx	lr
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	4770      	bx	lr
 800d4ac:	2020      	movs	r0, #32
 800d4ae:	4770      	bx	lr

0800d4b0 <__i2b>:
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	f7ff ff07 	bl	800d2c8 <_Balloc>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	b928      	cbnz	r0, 800d4ca <__i2b+0x1a>
 800d4be:	f240 1145 	movw	r1, #325	@ 0x145
 800d4c2:	4b04      	ldr	r3, [pc, #16]	@ (800d4d4 <__i2b+0x24>)
 800d4c4:	4804      	ldr	r0, [pc, #16]	@ (800d4d8 <__i2b+0x28>)
 800d4c6:	f000 fca7 	bl	800de18 <__assert_func>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	6144      	str	r4, [r0, #20]
 800d4ce:	6103      	str	r3, [r0, #16]
 800d4d0:	bd10      	pop	{r4, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0800f0c2 	.word	0x0800f0c2
 800d4d8:	0800f0d3 	.word	0x0800f0d3

0800d4dc <__multiply>:
 800d4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e0:	4614      	mov	r4, r2
 800d4e2:	690a      	ldr	r2, [r1, #16]
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	460f      	mov	r7, r1
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	bfa2      	ittt	ge
 800d4ec:	4623      	movge	r3, r4
 800d4ee:	460c      	movge	r4, r1
 800d4f0:	461f      	movge	r7, r3
 800d4f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d4f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d4fa:	68a3      	ldr	r3, [r4, #8]
 800d4fc:	6861      	ldr	r1, [r4, #4]
 800d4fe:	eb0a 0609 	add.w	r6, sl, r9
 800d502:	42b3      	cmp	r3, r6
 800d504:	b085      	sub	sp, #20
 800d506:	bfb8      	it	lt
 800d508:	3101      	addlt	r1, #1
 800d50a:	f7ff fedd 	bl	800d2c8 <_Balloc>
 800d50e:	b930      	cbnz	r0, 800d51e <__multiply+0x42>
 800d510:	4602      	mov	r2, r0
 800d512:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d516:	4b43      	ldr	r3, [pc, #268]	@ (800d624 <__multiply+0x148>)
 800d518:	4843      	ldr	r0, [pc, #268]	@ (800d628 <__multiply+0x14c>)
 800d51a:	f000 fc7d 	bl	800de18 <__assert_func>
 800d51e:	f100 0514 	add.w	r5, r0, #20
 800d522:	462b      	mov	r3, r5
 800d524:	2200      	movs	r2, #0
 800d526:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d52a:	4543      	cmp	r3, r8
 800d52c:	d321      	bcc.n	800d572 <__multiply+0x96>
 800d52e:	f107 0114 	add.w	r1, r7, #20
 800d532:	f104 0214 	add.w	r2, r4, #20
 800d536:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d53a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d53e:	9302      	str	r3, [sp, #8]
 800d540:	1b13      	subs	r3, r2, r4
 800d542:	3b15      	subs	r3, #21
 800d544:	f023 0303 	bic.w	r3, r3, #3
 800d548:	3304      	adds	r3, #4
 800d54a:	f104 0715 	add.w	r7, r4, #21
 800d54e:	42ba      	cmp	r2, r7
 800d550:	bf38      	it	cc
 800d552:	2304      	movcc	r3, #4
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	9b02      	ldr	r3, [sp, #8]
 800d558:	9103      	str	r1, [sp, #12]
 800d55a:	428b      	cmp	r3, r1
 800d55c:	d80c      	bhi.n	800d578 <__multiply+0x9c>
 800d55e:	2e00      	cmp	r6, #0
 800d560:	dd03      	ble.n	800d56a <__multiply+0x8e>
 800d562:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d566:	2b00      	cmp	r3, #0
 800d568:	d05a      	beq.n	800d620 <__multiply+0x144>
 800d56a:	6106      	str	r6, [r0, #16]
 800d56c:	b005      	add	sp, #20
 800d56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d572:	f843 2b04 	str.w	r2, [r3], #4
 800d576:	e7d8      	b.n	800d52a <__multiply+0x4e>
 800d578:	f8b1 a000 	ldrh.w	sl, [r1]
 800d57c:	f1ba 0f00 	cmp.w	sl, #0
 800d580:	d023      	beq.n	800d5ca <__multiply+0xee>
 800d582:	46a9      	mov	r9, r5
 800d584:	f04f 0c00 	mov.w	ip, #0
 800d588:	f104 0e14 	add.w	lr, r4, #20
 800d58c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d590:	f8d9 3000 	ldr.w	r3, [r9]
 800d594:	fa1f fb87 	uxth.w	fp, r7
 800d598:	b29b      	uxth	r3, r3
 800d59a:	fb0a 330b 	mla	r3, sl, fp, r3
 800d59e:	4463      	add	r3, ip
 800d5a0:	f8d9 c000 	ldr.w	ip, [r9]
 800d5a4:	0c3f      	lsrs	r7, r7, #16
 800d5a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d5aa:	fb0a c707 	mla	r7, sl, r7, ip
 800d5ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d5b8:	4572      	cmp	r2, lr
 800d5ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d5be:	f849 3b04 	str.w	r3, [r9], #4
 800d5c2:	d8e3      	bhi.n	800d58c <__multiply+0xb0>
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	f845 c003 	str.w	ip, [r5, r3]
 800d5ca:	9b03      	ldr	r3, [sp, #12]
 800d5cc:	3104      	adds	r1, #4
 800d5ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d5d2:	f1b9 0f00 	cmp.w	r9, #0
 800d5d6:	d021      	beq.n	800d61c <__multiply+0x140>
 800d5d8:	46ae      	mov	lr, r5
 800d5da:	f04f 0a00 	mov.w	sl, #0
 800d5de:	682b      	ldr	r3, [r5, #0]
 800d5e0:	f104 0c14 	add.w	ip, r4, #20
 800d5e4:	f8bc b000 	ldrh.w	fp, [ip]
 800d5e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	fb09 770b 	mla	r7, r9, fp, r7
 800d5f2:	4457      	add	r7, sl
 800d5f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d5f8:	f84e 3b04 	str.w	r3, [lr], #4
 800d5fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d600:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d604:	f8be 3000 	ldrh.w	r3, [lr]
 800d608:	4562      	cmp	r2, ip
 800d60a:	fb09 330a 	mla	r3, r9, sl, r3
 800d60e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d616:	d8e5      	bhi.n	800d5e4 <__multiply+0x108>
 800d618:	9f01      	ldr	r7, [sp, #4]
 800d61a:	51eb      	str	r3, [r5, r7]
 800d61c:	3504      	adds	r5, #4
 800d61e:	e79a      	b.n	800d556 <__multiply+0x7a>
 800d620:	3e01      	subs	r6, #1
 800d622:	e79c      	b.n	800d55e <__multiply+0x82>
 800d624:	0800f0c2 	.word	0x0800f0c2
 800d628:	0800f0d3 	.word	0x0800f0d3

0800d62c <__pow5mult>:
 800d62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d630:	4615      	mov	r5, r2
 800d632:	f012 0203 	ands.w	r2, r2, #3
 800d636:	4607      	mov	r7, r0
 800d638:	460e      	mov	r6, r1
 800d63a:	d007      	beq.n	800d64c <__pow5mult+0x20>
 800d63c:	4c25      	ldr	r4, [pc, #148]	@ (800d6d4 <__pow5mult+0xa8>)
 800d63e:	3a01      	subs	r2, #1
 800d640:	2300      	movs	r3, #0
 800d642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d646:	f7ff fea1 	bl	800d38c <__multadd>
 800d64a:	4606      	mov	r6, r0
 800d64c:	10ad      	asrs	r5, r5, #2
 800d64e:	d03d      	beq.n	800d6cc <__pow5mult+0xa0>
 800d650:	69fc      	ldr	r4, [r7, #28]
 800d652:	b97c      	cbnz	r4, 800d674 <__pow5mult+0x48>
 800d654:	2010      	movs	r0, #16
 800d656:	f7fe f875 	bl	800b744 <malloc>
 800d65a:	4602      	mov	r2, r0
 800d65c:	61f8      	str	r0, [r7, #28]
 800d65e:	b928      	cbnz	r0, 800d66c <__pow5mult+0x40>
 800d660:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d664:	4b1c      	ldr	r3, [pc, #112]	@ (800d6d8 <__pow5mult+0xac>)
 800d666:	481d      	ldr	r0, [pc, #116]	@ (800d6dc <__pow5mult+0xb0>)
 800d668:	f000 fbd6 	bl	800de18 <__assert_func>
 800d66c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d670:	6004      	str	r4, [r0, #0]
 800d672:	60c4      	str	r4, [r0, #12]
 800d674:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d67c:	b94c      	cbnz	r4, 800d692 <__pow5mult+0x66>
 800d67e:	f240 2171 	movw	r1, #625	@ 0x271
 800d682:	4638      	mov	r0, r7
 800d684:	f7ff ff14 	bl	800d4b0 <__i2b>
 800d688:	2300      	movs	r3, #0
 800d68a:	4604      	mov	r4, r0
 800d68c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d690:	6003      	str	r3, [r0, #0]
 800d692:	f04f 0900 	mov.w	r9, #0
 800d696:	07eb      	lsls	r3, r5, #31
 800d698:	d50a      	bpl.n	800d6b0 <__pow5mult+0x84>
 800d69a:	4631      	mov	r1, r6
 800d69c:	4622      	mov	r2, r4
 800d69e:	4638      	mov	r0, r7
 800d6a0:	f7ff ff1c 	bl	800d4dc <__multiply>
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f7ff fe4d 	bl	800d348 <_Bfree>
 800d6ae:	4646      	mov	r6, r8
 800d6b0:	106d      	asrs	r5, r5, #1
 800d6b2:	d00b      	beq.n	800d6cc <__pow5mult+0xa0>
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	b938      	cbnz	r0, 800d6c8 <__pow5mult+0x9c>
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	4638      	mov	r0, r7
 800d6be:	f7ff ff0d 	bl	800d4dc <__multiply>
 800d6c2:	6020      	str	r0, [r4, #0]
 800d6c4:	f8c0 9000 	str.w	r9, [r0]
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	e7e4      	b.n	800d696 <__pow5mult+0x6a>
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6d2:	bf00      	nop
 800d6d4:	0800f12c 	.word	0x0800f12c
 800d6d8:	0800f053 	.word	0x0800f053
 800d6dc:	0800f0d3 	.word	0x0800f0d3

0800d6e0 <__lshift>:
 800d6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	4691      	mov	r9, r2
 800d6ea:	6923      	ldr	r3, [r4, #16]
 800d6ec:	6849      	ldr	r1, [r1, #4]
 800d6ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6f2:	68a3      	ldr	r3, [r4, #8]
 800d6f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6f8:	f108 0601 	add.w	r6, r8, #1
 800d6fc:	42b3      	cmp	r3, r6
 800d6fe:	db0b      	blt.n	800d718 <__lshift+0x38>
 800d700:	4638      	mov	r0, r7
 800d702:	f7ff fde1 	bl	800d2c8 <_Balloc>
 800d706:	4605      	mov	r5, r0
 800d708:	b948      	cbnz	r0, 800d71e <__lshift+0x3e>
 800d70a:	4602      	mov	r2, r0
 800d70c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d710:	4b27      	ldr	r3, [pc, #156]	@ (800d7b0 <__lshift+0xd0>)
 800d712:	4828      	ldr	r0, [pc, #160]	@ (800d7b4 <__lshift+0xd4>)
 800d714:	f000 fb80 	bl	800de18 <__assert_func>
 800d718:	3101      	adds	r1, #1
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	e7ee      	b.n	800d6fc <__lshift+0x1c>
 800d71e:	2300      	movs	r3, #0
 800d720:	f100 0114 	add.w	r1, r0, #20
 800d724:	f100 0210 	add.w	r2, r0, #16
 800d728:	4618      	mov	r0, r3
 800d72a:	4553      	cmp	r3, sl
 800d72c:	db33      	blt.n	800d796 <__lshift+0xb6>
 800d72e:	6920      	ldr	r0, [r4, #16]
 800d730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d734:	f104 0314 	add.w	r3, r4, #20
 800d738:	f019 091f 	ands.w	r9, r9, #31
 800d73c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d744:	d02b      	beq.n	800d79e <__lshift+0xbe>
 800d746:	468a      	mov	sl, r1
 800d748:	2200      	movs	r2, #0
 800d74a:	f1c9 0e20 	rsb	lr, r9, #32
 800d74e:	6818      	ldr	r0, [r3, #0]
 800d750:	fa00 f009 	lsl.w	r0, r0, r9
 800d754:	4310      	orrs	r0, r2
 800d756:	f84a 0b04 	str.w	r0, [sl], #4
 800d75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d75e:	459c      	cmp	ip, r3
 800d760:	fa22 f20e 	lsr.w	r2, r2, lr
 800d764:	d8f3      	bhi.n	800d74e <__lshift+0x6e>
 800d766:	ebac 0304 	sub.w	r3, ip, r4
 800d76a:	3b15      	subs	r3, #21
 800d76c:	f023 0303 	bic.w	r3, r3, #3
 800d770:	3304      	adds	r3, #4
 800d772:	f104 0015 	add.w	r0, r4, #21
 800d776:	4584      	cmp	ip, r0
 800d778:	bf38      	it	cc
 800d77a:	2304      	movcc	r3, #4
 800d77c:	50ca      	str	r2, [r1, r3]
 800d77e:	b10a      	cbz	r2, 800d784 <__lshift+0xa4>
 800d780:	f108 0602 	add.w	r6, r8, #2
 800d784:	3e01      	subs	r6, #1
 800d786:	4638      	mov	r0, r7
 800d788:	4621      	mov	r1, r4
 800d78a:	612e      	str	r6, [r5, #16]
 800d78c:	f7ff fddc 	bl	800d348 <_Bfree>
 800d790:	4628      	mov	r0, r5
 800d792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d796:	f842 0f04 	str.w	r0, [r2, #4]!
 800d79a:	3301      	adds	r3, #1
 800d79c:	e7c5      	b.n	800d72a <__lshift+0x4a>
 800d79e:	3904      	subs	r1, #4
 800d7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a4:	459c      	cmp	ip, r3
 800d7a6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7aa:	d8f9      	bhi.n	800d7a0 <__lshift+0xc0>
 800d7ac:	e7ea      	b.n	800d784 <__lshift+0xa4>
 800d7ae:	bf00      	nop
 800d7b0:	0800f0c2 	.word	0x0800f0c2
 800d7b4:	0800f0d3 	.word	0x0800f0d3

0800d7b8 <__mcmp>:
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	690a      	ldr	r2, [r1, #16]
 800d7bc:	6900      	ldr	r0, [r0, #16]
 800d7be:	b530      	push	{r4, r5, lr}
 800d7c0:	1a80      	subs	r0, r0, r2
 800d7c2:	d10e      	bne.n	800d7e2 <__mcmp+0x2a>
 800d7c4:	3314      	adds	r3, #20
 800d7c6:	3114      	adds	r1, #20
 800d7c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d7d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d7d8:	4295      	cmp	r5, r2
 800d7da:	d003      	beq.n	800d7e4 <__mcmp+0x2c>
 800d7dc:	d205      	bcs.n	800d7ea <__mcmp+0x32>
 800d7de:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e2:	bd30      	pop	{r4, r5, pc}
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	d3f3      	bcc.n	800d7d0 <__mcmp+0x18>
 800d7e8:	e7fb      	b.n	800d7e2 <__mcmp+0x2a>
 800d7ea:	2001      	movs	r0, #1
 800d7ec:	e7f9      	b.n	800d7e2 <__mcmp+0x2a>
	...

0800d7f0 <__mdiff>:
 800d7f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	4689      	mov	r9, r1
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	4648      	mov	r0, r9
 800d7fc:	4614      	mov	r4, r2
 800d7fe:	f7ff ffdb 	bl	800d7b8 <__mcmp>
 800d802:	1e05      	subs	r5, r0, #0
 800d804:	d112      	bne.n	800d82c <__mdiff+0x3c>
 800d806:	4629      	mov	r1, r5
 800d808:	4630      	mov	r0, r6
 800d80a:	f7ff fd5d 	bl	800d2c8 <_Balloc>
 800d80e:	4602      	mov	r2, r0
 800d810:	b928      	cbnz	r0, 800d81e <__mdiff+0x2e>
 800d812:	f240 2137 	movw	r1, #567	@ 0x237
 800d816:	4b3e      	ldr	r3, [pc, #248]	@ (800d910 <__mdiff+0x120>)
 800d818:	483e      	ldr	r0, [pc, #248]	@ (800d914 <__mdiff+0x124>)
 800d81a:	f000 fafd 	bl	800de18 <__assert_func>
 800d81e:	2301      	movs	r3, #1
 800d820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d824:	4610      	mov	r0, r2
 800d826:	b003      	add	sp, #12
 800d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82c:	bfbc      	itt	lt
 800d82e:	464b      	movlt	r3, r9
 800d830:	46a1      	movlt	r9, r4
 800d832:	4630      	mov	r0, r6
 800d834:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d838:	bfba      	itte	lt
 800d83a:	461c      	movlt	r4, r3
 800d83c:	2501      	movlt	r5, #1
 800d83e:	2500      	movge	r5, #0
 800d840:	f7ff fd42 	bl	800d2c8 <_Balloc>
 800d844:	4602      	mov	r2, r0
 800d846:	b918      	cbnz	r0, 800d850 <__mdiff+0x60>
 800d848:	f240 2145 	movw	r1, #581	@ 0x245
 800d84c:	4b30      	ldr	r3, [pc, #192]	@ (800d910 <__mdiff+0x120>)
 800d84e:	e7e3      	b.n	800d818 <__mdiff+0x28>
 800d850:	f100 0b14 	add.w	fp, r0, #20
 800d854:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d858:	f109 0310 	add.w	r3, r9, #16
 800d85c:	60c5      	str	r5, [r0, #12]
 800d85e:	f04f 0c00 	mov.w	ip, #0
 800d862:	f109 0514 	add.w	r5, r9, #20
 800d866:	46d9      	mov	r9, fp
 800d868:	6926      	ldr	r6, [r4, #16]
 800d86a:	f104 0e14 	add.w	lr, r4, #20
 800d86e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d872:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d876:	9301      	str	r3, [sp, #4]
 800d878:	9b01      	ldr	r3, [sp, #4]
 800d87a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d87e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d882:	b281      	uxth	r1, r0
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	fa1f f38a 	uxth.w	r3, sl
 800d88a:	1a5b      	subs	r3, r3, r1
 800d88c:	0c00      	lsrs	r0, r0, #16
 800d88e:	4463      	add	r3, ip
 800d890:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d894:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d898:	b29b      	uxth	r3, r3
 800d89a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d89e:	4576      	cmp	r6, lr
 800d8a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8a4:	f849 3b04 	str.w	r3, [r9], #4
 800d8a8:	d8e6      	bhi.n	800d878 <__mdiff+0x88>
 800d8aa:	1b33      	subs	r3, r6, r4
 800d8ac:	3b15      	subs	r3, #21
 800d8ae:	f023 0303 	bic.w	r3, r3, #3
 800d8b2:	3415      	adds	r4, #21
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	42a6      	cmp	r6, r4
 800d8b8:	bf38      	it	cc
 800d8ba:	2304      	movcc	r3, #4
 800d8bc:	441d      	add	r5, r3
 800d8be:	445b      	add	r3, fp
 800d8c0:	461e      	mov	r6, r3
 800d8c2:	462c      	mov	r4, r5
 800d8c4:	4544      	cmp	r4, r8
 800d8c6:	d30e      	bcc.n	800d8e6 <__mdiff+0xf6>
 800d8c8:	f108 0103 	add.w	r1, r8, #3
 800d8cc:	1b49      	subs	r1, r1, r5
 800d8ce:	f021 0103 	bic.w	r1, r1, #3
 800d8d2:	3d03      	subs	r5, #3
 800d8d4:	45a8      	cmp	r8, r5
 800d8d6:	bf38      	it	cc
 800d8d8:	2100      	movcc	r1, #0
 800d8da:	440b      	add	r3, r1
 800d8dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8e0:	b199      	cbz	r1, 800d90a <__mdiff+0x11a>
 800d8e2:	6117      	str	r7, [r2, #16]
 800d8e4:	e79e      	b.n	800d824 <__mdiff+0x34>
 800d8e6:	46e6      	mov	lr, ip
 800d8e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d8ec:	fa1f fc81 	uxth.w	ip, r1
 800d8f0:	44f4      	add	ip, lr
 800d8f2:	0c08      	lsrs	r0, r1, #16
 800d8f4:	4471      	add	r1, lr
 800d8f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d8fa:	b289      	uxth	r1, r1
 800d8fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d900:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d904:	f846 1b04 	str.w	r1, [r6], #4
 800d908:	e7dc      	b.n	800d8c4 <__mdiff+0xd4>
 800d90a:	3f01      	subs	r7, #1
 800d90c:	e7e6      	b.n	800d8dc <__mdiff+0xec>
 800d90e:	bf00      	nop
 800d910:	0800f0c2 	.word	0x0800f0c2
 800d914:	0800f0d3 	.word	0x0800f0d3

0800d918 <__d2b>:
 800d918:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d91c:	2101      	movs	r1, #1
 800d91e:	4690      	mov	r8, r2
 800d920:	4699      	mov	r9, r3
 800d922:	9e08      	ldr	r6, [sp, #32]
 800d924:	f7ff fcd0 	bl	800d2c8 <_Balloc>
 800d928:	4604      	mov	r4, r0
 800d92a:	b930      	cbnz	r0, 800d93a <__d2b+0x22>
 800d92c:	4602      	mov	r2, r0
 800d92e:	f240 310f 	movw	r1, #783	@ 0x30f
 800d932:	4b23      	ldr	r3, [pc, #140]	@ (800d9c0 <__d2b+0xa8>)
 800d934:	4823      	ldr	r0, [pc, #140]	@ (800d9c4 <__d2b+0xac>)
 800d936:	f000 fa6f 	bl	800de18 <__assert_func>
 800d93a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d93e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d942:	b10d      	cbz	r5, 800d948 <__d2b+0x30>
 800d944:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	f1b8 0300 	subs.w	r3, r8, #0
 800d94e:	d024      	beq.n	800d99a <__d2b+0x82>
 800d950:	4668      	mov	r0, sp
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	f7ff fd7f 	bl	800d456 <__lo0bits>
 800d958:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d95c:	b1d8      	cbz	r0, 800d996 <__d2b+0x7e>
 800d95e:	f1c0 0320 	rsb	r3, r0, #32
 800d962:	fa02 f303 	lsl.w	r3, r2, r3
 800d966:	430b      	orrs	r3, r1
 800d968:	40c2      	lsrs	r2, r0
 800d96a:	6163      	str	r3, [r4, #20]
 800d96c:	9201      	str	r2, [sp, #4]
 800d96e:	9b01      	ldr	r3, [sp, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	bf0c      	ite	eq
 800d974:	2201      	moveq	r2, #1
 800d976:	2202      	movne	r2, #2
 800d978:	61a3      	str	r3, [r4, #24]
 800d97a:	6122      	str	r2, [r4, #16]
 800d97c:	b1ad      	cbz	r5, 800d9aa <__d2b+0x92>
 800d97e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d982:	4405      	add	r5, r0
 800d984:	6035      	str	r5, [r6, #0]
 800d986:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d98c:	6018      	str	r0, [r3, #0]
 800d98e:	4620      	mov	r0, r4
 800d990:	b002      	add	sp, #8
 800d992:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d996:	6161      	str	r1, [r4, #20]
 800d998:	e7e9      	b.n	800d96e <__d2b+0x56>
 800d99a:	a801      	add	r0, sp, #4
 800d99c:	f7ff fd5b 	bl	800d456 <__lo0bits>
 800d9a0:	9b01      	ldr	r3, [sp, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	6163      	str	r3, [r4, #20]
 800d9a6:	3020      	adds	r0, #32
 800d9a8:	e7e7      	b.n	800d97a <__d2b+0x62>
 800d9aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9b2:	6030      	str	r0, [r6, #0]
 800d9b4:	6918      	ldr	r0, [r3, #16]
 800d9b6:	f7ff fd2f 	bl	800d418 <__hi0bits>
 800d9ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9be:	e7e4      	b.n	800d98a <__d2b+0x72>
 800d9c0:	0800f0c2 	.word	0x0800f0c2
 800d9c4:	0800f0d3 	.word	0x0800f0d3

0800d9c8 <__ssputs_r>:
 800d9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9cc:	461f      	mov	r7, r3
 800d9ce:	688e      	ldr	r6, [r1, #8]
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	42be      	cmp	r6, r7
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	4690      	mov	r8, r2
 800d9d8:	680b      	ldr	r3, [r1, #0]
 800d9da:	d82d      	bhi.n	800da38 <__ssputs_r+0x70>
 800d9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9e4:	d026      	beq.n	800da34 <__ssputs_r+0x6c>
 800d9e6:	6965      	ldr	r5, [r4, #20]
 800d9e8:	6909      	ldr	r1, [r1, #16]
 800d9ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9ee:	eba3 0901 	sub.w	r9, r3, r1
 800d9f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9f6:	1c7b      	adds	r3, r7, #1
 800d9f8:	444b      	add	r3, r9
 800d9fa:	106d      	asrs	r5, r5, #1
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	bf38      	it	cc
 800da00:	461d      	movcc	r5, r3
 800da02:	0553      	lsls	r3, r2, #21
 800da04:	d527      	bpl.n	800da56 <__ssputs_r+0x8e>
 800da06:	4629      	mov	r1, r5
 800da08:	f7fd fece 	bl	800b7a8 <_malloc_r>
 800da0c:	4606      	mov	r6, r0
 800da0e:	b360      	cbz	r0, 800da6a <__ssputs_r+0xa2>
 800da10:	464a      	mov	r2, r9
 800da12:	6921      	ldr	r1, [r4, #16]
 800da14:	f000 f9f2 	bl	800ddfc <memcpy>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da22:	81a3      	strh	r3, [r4, #12]
 800da24:	6126      	str	r6, [r4, #16]
 800da26:	444e      	add	r6, r9
 800da28:	6026      	str	r6, [r4, #0]
 800da2a:	463e      	mov	r6, r7
 800da2c:	6165      	str	r5, [r4, #20]
 800da2e:	eba5 0509 	sub.w	r5, r5, r9
 800da32:	60a5      	str	r5, [r4, #8]
 800da34:	42be      	cmp	r6, r7
 800da36:	d900      	bls.n	800da3a <__ssputs_r+0x72>
 800da38:	463e      	mov	r6, r7
 800da3a:	4632      	mov	r2, r6
 800da3c:	4641      	mov	r1, r8
 800da3e:	6820      	ldr	r0, [r4, #0]
 800da40:	f000 f9c2 	bl	800ddc8 <memmove>
 800da44:	2000      	movs	r0, #0
 800da46:	68a3      	ldr	r3, [r4, #8]
 800da48:	1b9b      	subs	r3, r3, r6
 800da4a:	60a3      	str	r3, [r4, #8]
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	4433      	add	r3, r6
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da56:	462a      	mov	r2, r5
 800da58:	f000 fa22 	bl	800dea0 <_realloc_r>
 800da5c:	4606      	mov	r6, r0
 800da5e:	2800      	cmp	r0, #0
 800da60:	d1e0      	bne.n	800da24 <__ssputs_r+0x5c>
 800da62:	4650      	mov	r0, sl
 800da64:	6921      	ldr	r1, [r4, #16]
 800da66:	f7ff fbe7 	bl	800d238 <_free_r>
 800da6a:	230c      	movs	r3, #12
 800da6c:	f8ca 3000 	str.w	r3, [sl]
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f04f 30ff 	mov.w	r0, #4294967295
 800da76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	e7e9      	b.n	800da52 <__ssputs_r+0x8a>
	...

0800da80 <_svfiprintf_r>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	4698      	mov	r8, r3
 800da86:	898b      	ldrh	r3, [r1, #12]
 800da88:	4607      	mov	r7, r0
 800da8a:	061b      	lsls	r3, r3, #24
 800da8c:	460d      	mov	r5, r1
 800da8e:	4614      	mov	r4, r2
 800da90:	b09d      	sub	sp, #116	@ 0x74
 800da92:	d510      	bpl.n	800dab6 <_svfiprintf_r+0x36>
 800da94:	690b      	ldr	r3, [r1, #16]
 800da96:	b973      	cbnz	r3, 800dab6 <_svfiprintf_r+0x36>
 800da98:	2140      	movs	r1, #64	@ 0x40
 800da9a:	f7fd fe85 	bl	800b7a8 <_malloc_r>
 800da9e:	6028      	str	r0, [r5, #0]
 800daa0:	6128      	str	r0, [r5, #16]
 800daa2:	b930      	cbnz	r0, 800dab2 <_svfiprintf_r+0x32>
 800daa4:	230c      	movs	r3, #12
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	f04f 30ff 	mov.w	r0, #4294967295
 800daac:	b01d      	add	sp, #116	@ 0x74
 800daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab2:	2340      	movs	r3, #64	@ 0x40
 800dab4:	616b      	str	r3, [r5, #20]
 800dab6:	2300      	movs	r3, #0
 800dab8:	9309      	str	r3, [sp, #36]	@ 0x24
 800daba:	2320      	movs	r3, #32
 800dabc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dac0:	2330      	movs	r3, #48	@ 0x30
 800dac2:	f04f 0901 	mov.w	r9, #1
 800dac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dc64 <_svfiprintf_r+0x1e4>
 800dace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dad2:	4623      	mov	r3, r4
 800dad4:	469a      	mov	sl, r3
 800dad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dada:	b10a      	cbz	r2, 800dae0 <_svfiprintf_r+0x60>
 800dadc:	2a25      	cmp	r2, #37	@ 0x25
 800dade:	d1f9      	bne.n	800dad4 <_svfiprintf_r+0x54>
 800dae0:	ebba 0b04 	subs.w	fp, sl, r4
 800dae4:	d00b      	beq.n	800dafe <_svfiprintf_r+0x7e>
 800dae6:	465b      	mov	r3, fp
 800dae8:	4622      	mov	r2, r4
 800daea:	4629      	mov	r1, r5
 800daec:	4638      	mov	r0, r7
 800daee:	f7ff ff6b 	bl	800d9c8 <__ssputs_r>
 800daf2:	3001      	adds	r0, #1
 800daf4:	f000 80a7 	beq.w	800dc46 <_svfiprintf_r+0x1c6>
 800daf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dafa:	445a      	add	r2, fp
 800dafc:	9209      	str	r2, [sp, #36]	@ 0x24
 800dafe:	f89a 3000 	ldrb.w	r3, [sl]
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 809f 	beq.w	800dc46 <_svfiprintf_r+0x1c6>
 800db08:	2300      	movs	r3, #0
 800db0a:	f04f 32ff 	mov.w	r2, #4294967295
 800db0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db12:	f10a 0a01 	add.w	sl, sl, #1
 800db16:	9304      	str	r3, [sp, #16]
 800db18:	9307      	str	r3, [sp, #28]
 800db1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800db20:	4654      	mov	r4, sl
 800db22:	2205      	movs	r2, #5
 800db24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db28:	484e      	ldr	r0, [pc, #312]	@ (800dc64 <_svfiprintf_r+0x1e4>)
 800db2a:	f7fe fd26 	bl	800c57a <memchr>
 800db2e:	9a04      	ldr	r2, [sp, #16]
 800db30:	b9d8      	cbnz	r0, 800db6a <_svfiprintf_r+0xea>
 800db32:	06d0      	lsls	r0, r2, #27
 800db34:	bf44      	itt	mi
 800db36:	2320      	movmi	r3, #32
 800db38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db3c:	0711      	lsls	r1, r2, #28
 800db3e:	bf44      	itt	mi
 800db40:	232b      	movmi	r3, #43	@ 0x2b
 800db42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db46:	f89a 3000 	ldrb.w	r3, [sl]
 800db4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800db4c:	d015      	beq.n	800db7a <_svfiprintf_r+0xfa>
 800db4e:	4654      	mov	r4, sl
 800db50:	2000      	movs	r0, #0
 800db52:	f04f 0c0a 	mov.w	ip, #10
 800db56:	9a07      	ldr	r2, [sp, #28]
 800db58:	4621      	mov	r1, r4
 800db5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db5e:	3b30      	subs	r3, #48	@ 0x30
 800db60:	2b09      	cmp	r3, #9
 800db62:	d94b      	bls.n	800dbfc <_svfiprintf_r+0x17c>
 800db64:	b1b0      	cbz	r0, 800db94 <_svfiprintf_r+0x114>
 800db66:	9207      	str	r2, [sp, #28]
 800db68:	e014      	b.n	800db94 <_svfiprintf_r+0x114>
 800db6a:	eba0 0308 	sub.w	r3, r0, r8
 800db6e:	fa09 f303 	lsl.w	r3, r9, r3
 800db72:	4313      	orrs	r3, r2
 800db74:	46a2      	mov	sl, r4
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	e7d2      	b.n	800db20 <_svfiprintf_r+0xa0>
 800db7a:	9b03      	ldr	r3, [sp, #12]
 800db7c:	1d19      	adds	r1, r3, #4
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	9103      	str	r1, [sp, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	bfbb      	ittet	lt
 800db86:	425b      	neglt	r3, r3
 800db88:	f042 0202 	orrlt.w	r2, r2, #2
 800db8c:	9307      	strge	r3, [sp, #28]
 800db8e:	9307      	strlt	r3, [sp, #28]
 800db90:	bfb8      	it	lt
 800db92:	9204      	strlt	r2, [sp, #16]
 800db94:	7823      	ldrb	r3, [r4, #0]
 800db96:	2b2e      	cmp	r3, #46	@ 0x2e
 800db98:	d10a      	bne.n	800dbb0 <_svfiprintf_r+0x130>
 800db9a:	7863      	ldrb	r3, [r4, #1]
 800db9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800db9e:	d132      	bne.n	800dc06 <_svfiprintf_r+0x186>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	3402      	adds	r4, #2
 800dba4:	1d1a      	adds	r2, r3, #4
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	9203      	str	r2, [sp, #12]
 800dbaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbae:	9305      	str	r3, [sp, #20]
 800dbb0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dc68 <_svfiprintf_r+0x1e8>
 800dbb4:	2203      	movs	r2, #3
 800dbb6:	4650      	mov	r0, sl
 800dbb8:	7821      	ldrb	r1, [r4, #0]
 800dbba:	f7fe fcde 	bl	800c57a <memchr>
 800dbbe:	b138      	cbz	r0, 800dbd0 <_svfiprintf_r+0x150>
 800dbc0:	2240      	movs	r2, #64	@ 0x40
 800dbc2:	9b04      	ldr	r3, [sp, #16]
 800dbc4:	eba0 000a 	sub.w	r0, r0, sl
 800dbc8:	4082      	lsls	r2, r0
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	3401      	adds	r4, #1
 800dbce:	9304      	str	r3, [sp, #16]
 800dbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd4:	2206      	movs	r2, #6
 800dbd6:	4825      	ldr	r0, [pc, #148]	@ (800dc6c <_svfiprintf_r+0x1ec>)
 800dbd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbdc:	f7fe fccd 	bl	800c57a <memchr>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d036      	beq.n	800dc52 <_svfiprintf_r+0x1d2>
 800dbe4:	4b22      	ldr	r3, [pc, #136]	@ (800dc70 <_svfiprintf_r+0x1f0>)
 800dbe6:	bb1b      	cbnz	r3, 800dc30 <_svfiprintf_r+0x1b0>
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	3307      	adds	r3, #7
 800dbec:	f023 0307 	bic.w	r3, r3, #7
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	9303      	str	r3, [sp, #12]
 800dbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf6:	4433      	add	r3, r6
 800dbf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbfa:	e76a      	b.n	800dad2 <_svfiprintf_r+0x52>
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	2001      	movs	r0, #1
 800dc00:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc04:	e7a8      	b.n	800db58 <_svfiprintf_r+0xd8>
 800dc06:	2300      	movs	r3, #0
 800dc08:	f04f 0c0a 	mov.w	ip, #10
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	3401      	adds	r4, #1
 800dc10:	9305      	str	r3, [sp, #20]
 800dc12:	4620      	mov	r0, r4
 800dc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc18:	3a30      	subs	r2, #48	@ 0x30
 800dc1a:	2a09      	cmp	r2, #9
 800dc1c:	d903      	bls.n	800dc26 <_svfiprintf_r+0x1a6>
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0c6      	beq.n	800dbb0 <_svfiprintf_r+0x130>
 800dc22:	9105      	str	r1, [sp, #20]
 800dc24:	e7c4      	b.n	800dbb0 <_svfiprintf_r+0x130>
 800dc26:	4604      	mov	r4, r0
 800dc28:	2301      	movs	r3, #1
 800dc2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc2e:	e7f0      	b.n	800dc12 <_svfiprintf_r+0x192>
 800dc30:	ab03      	add	r3, sp, #12
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	462a      	mov	r2, r5
 800dc36:	4638      	mov	r0, r7
 800dc38:	4b0e      	ldr	r3, [pc, #56]	@ (800dc74 <_svfiprintf_r+0x1f4>)
 800dc3a:	a904      	add	r1, sp, #16
 800dc3c:	f7fd fede 	bl	800b9fc <_printf_float>
 800dc40:	1c42      	adds	r2, r0, #1
 800dc42:	4606      	mov	r6, r0
 800dc44:	d1d6      	bne.n	800dbf4 <_svfiprintf_r+0x174>
 800dc46:	89ab      	ldrh	r3, [r5, #12]
 800dc48:	065b      	lsls	r3, r3, #25
 800dc4a:	f53f af2d 	bmi.w	800daa8 <_svfiprintf_r+0x28>
 800dc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc50:	e72c      	b.n	800daac <_svfiprintf_r+0x2c>
 800dc52:	ab03      	add	r3, sp, #12
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	462a      	mov	r2, r5
 800dc58:	4638      	mov	r0, r7
 800dc5a:	4b06      	ldr	r3, [pc, #24]	@ (800dc74 <_svfiprintf_r+0x1f4>)
 800dc5c:	a904      	add	r1, sp, #16
 800dc5e:	f7fe f96b 	bl	800bf38 <_printf_i>
 800dc62:	e7ed      	b.n	800dc40 <_svfiprintf_r+0x1c0>
 800dc64:	0800f228 	.word	0x0800f228
 800dc68:	0800f22e 	.word	0x0800f22e
 800dc6c:	0800f232 	.word	0x0800f232
 800dc70:	0800b9fd 	.word	0x0800b9fd
 800dc74:	0800d9c9 	.word	0x0800d9c9

0800dc78 <__sflush_r>:
 800dc78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	0716      	lsls	r6, r2, #28
 800dc80:	4605      	mov	r5, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	d454      	bmi.n	800dd30 <__sflush_r+0xb8>
 800dc86:	684b      	ldr	r3, [r1, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	dc02      	bgt.n	800dc92 <__sflush_r+0x1a>
 800dc8c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	dd48      	ble.n	800dd24 <__sflush_r+0xac>
 800dc92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	d045      	beq.n	800dd24 <__sflush_r+0xac>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc9e:	682f      	ldr	r7, [r5, #0]
 800dca0:	6a21      	ldr	r1, [r4, #32]
 800dca2:	602b      	str	r3, [r5, #0]
 800dca4:	d030      	beq.n	800dd08 <__sflush_r+0x90>
 800dca6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	0759      	lsls	r1, r3, #29
 800dcac:	d505      	bpl.n	800dcba <__sflush_r+0x42>
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	1ad2      	subs	r2, r2, r3
 800dcb2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcb4:	b10b      	cbz	r3, 800dcba <__sflush_r+0x42>
 800dcb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcb8:	1ad2      	subs	r2, r2, r3
 800dcba:	2300      	movs	r3, #0
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcc0:	6a21      	ldr	r1, [r4, #32]
 800dcc2:	47b0      	blx	r6
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	d106      	bne.n	800dcd8 <__sflush_r+0x60>
 800dcca:	6829      	ldr	r1, [r5, #0]
 800dccc:	291d      	cmp	r1, #29
 800dcce:	d82b      	bhi.n	800dd28 <__sflush_r+0xb0>
 800dcd0:	4a28      	ldr	r2, [pc, #160]	@ (800dd74 <__sflush_r+0xfc>)
 800dcd2:	410a      	asrs	r2, r1
 800dcd4:	07d6      	lsls	r6, r2, #31
 800dcd6:	d427      	bmi.n	800dd28 <__sflush_r+0xb0>
 800dcd8:	2200      	movs	r2, #0
 800dcda:	6062      	str	r2, [r4, #4]
 800dcdc:	6922      	ldr	r2, [r4, #16]
 800dcde:	04d9      	lsls	r1, r3, #19
 800dce0:	6022      	str	r2, [r4, #0]
 800dce2:	d504      	bpl.n	800dcee <__sflush_r+0x76>
 800dce4:	1c42      	adds	r2, r0, #1
 800dce6:	d101      	bne.n	800dcec <__sflush_r+0x74>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b903      	cbnz	r3, 800dcee <__sflush_r+0x76>
 800dcec:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcf0:	602f      	str	r7, [r5, #0]
 800dcf2:	b1b9      	cbz	r1, 800dd24 <__sflush_r+0xac>
 800dcf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcf8:	4299      	cmp	r1, r3
 800dcfa:	d002      	beq.n	800dd02 <__sflush_r+0x8a>
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f7ff fa9b 	bl	800d238 <_free_r>
 800dd02:	2300      	movs	r3, #0
 800dd04:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd06:	e00d      	b.n	800dd24 <__sflush_r+0xac>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	47b0      	blx	r6
 800dd0e:	4602      	mov	r2, r0
 800dd10:	1c50      	adds	r0, r2, #1
 800dd12:	d1c9      	bne.n	800dca8 <__sflush_r+0x30>
 800dd14:	682b      	ldr	r3, [r5, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0c6      	beq.n	800dca8 <__sflush_r+0x30>
 800dd1a:	2b1d      	cmp	r3, #29
 800dd1c:	d001      	beq.n	800dd22 <__sflush_r+0xaa>
 800dd1e:	2b16      	cmp	r3, #22
 800dd20:	d11d      	bne.n	800dd5e <__sflush_r+0xe6>
 800dd22:	602f      	str	r7, [r5, #0]
 800dd24:	2000      	movs	r0, #0
 800dd26:	e021      	b.n	800dd6c <__sflush_r+0xf4>
 800dd28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd2c:	b21b      	sxth	r3, r3
 800dd2e:	e01a      	b.n	800dd66 <__sflush_r+0xee>
 800dd30:	690f      	ldr	r7, [r1, #16]
 800dd32:	2f00      	cmp	r7, #0
 800dd34:	d0f6      	beq.n	800dd24 <__sflush_r+0xac>
 800dd36:	0793      	lsls	r3, r2, #30
 800dd38:	bf18      	it	ne
 800dd3a:	2300      	movne	r3, #0
 800dd3c:	680e      	ldr	r6, [r1, #0]
 800dd3e:	bf08      	it	eq
 800dd40:	694b      	ldreq	r3, [r1, #20]
 800dd42:	1bf6      	subs	r6, r6, r7
 800dd44:	600f      	str	r7, [r1, #0]
 800dd46:	608b      	str	r3, [r1, #8]
 800dd48:	2e00      	cmp	r6, #0
 800dd4a:	ddeb      	ble.n	800dd24 <__sflush_r+0xac>
 800dd4c:	4633      	mov	r3, r6
 800dd4e:	463a      	mov	r2, r7
 800dd50:	4628      	mov	r0, r5
 800dd52:	6a21      	ldr	r1, [r4, #32]
 800dd54:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dd58:	47e0      	blx	ip
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	dc07      	bgt.n	800dd6e <__sflush_r+0xf6>
 800dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd66:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6e:	4407      	add	r7, r0
 800dd70:	1a36      	subs	r6, r6, r0
 800dd72:	e7e9      	b.n	800dd48 <__sflush_r+0xd0>
 800dd74:	dfbffffe 	.word	0xdfbffffe

0800dd78 <_fflush_r>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	690b      	ldr	r3, [r1, #16]
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	460c      	mov	r4, r1
 800dd80:	b913      	cbnz	r3, 800dd88 <_fflush_r+0x10>
 800dd82:	2500      	movs	r5, #0
 800dd84:	4628      	mov	r0, r5
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	b118      	cbz	r0, 800dd92 <_fflush_r+0x1a>
 800dd8a:	6a03      	ldr	r3, [r0, #32]
 800dd8c:	b90b      	cbnz	r3, 800dd92 <_fflush_r+0x1a>
 800dd8e:	f7fe fa7f 	bl	800c290 <__sinit>
 800dd92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d0f3      	beq.n	800dd82 <_fflush_r+0xa>
 800dd9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd9c:	07d0      	lsls	r0, r2, #31
 800dd9e:	d404      	bmi.n	800ddaa <_fflush_r+0x32>
 800dda0:	0599      	lsls	r1, r3, #22
 800dda2:	d402      	bmi.n	800ddaa <_fflush_r+0x32>
 800dda4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dda6:	f7fe fbde 	bl	800c566 <__retarget_lock_acquire_recursive>
 800ddaa:	4628      	mov	r0, r5
 800ddac:	4621      	mov	r1, r4
 800ddae:	f7ff ff63 	bl	800dc78 <__sflush_r>
 800ddb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	07da      	lsls	r2, r3, #31
 800ddb8:	d4e4      	bmi.n	800dd84 <_fflush_r+0xc>
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	059b      	lsls	r3, r3, #22
 800ddbe:	d4e1      	bmi.n	800dd84 <_fflush_r+0xc>
 800ddc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddc2:	f7fe fbd1 	bl	800c568 <__retarget_lock_release_recursive>
 800ddc6:	e7dd      	b.n	800dd84 <_fflush_r+0xc>

0800ddc8 <memmove>:
 800ddc8:	4288      	cmp	r0, r1
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	eb01 0402 	add.w	r4, r1, r2
 800ddd0:	d902      	bls.n	800ddd8 <memmove+0x10>
 800ddd2:	4284      	cmp	r4, r0
 800ddd4:	4623      	mov	r3, r4
 800ddd6:	d807      	bhi.n	800dde8 <memmove+0x20>
 800ddd8:	1e43      	subs	r3, r0, #1
 800ddda:	42a1      	cmp	r1, r4
 800dddc:	d008      	beq.n	800ddf0 <memmove+0x28>
 800ddde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dde2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dde6:	e7f8      	b.n	800ddda <memmove+0x12>
 800dde8:	4601      	mov	r1, r0
 800ddea:	4402      	add	r2, r0
 800ddec:	428a      	cmp	r2, r1
 800ddee:	d100      	bne.n	800ddf2 <memmove+0x2a>
 800ddf0:	bd10      	pop	{r4, pc}
 800ddf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddfa:	e7f7      	b.n	800ddec <memmove+0x24>

0800ddfc <memcpy>:
 800ddfc:	440a      	add	r2, r1
 800ddfe:	4291      	cmp	r1, r2
 800de00:	f100 33ff 	add.w	r3, r0, #4294967295
 800de04:	d100      	bne.n	800de08 <memcpy+0xc>
 800de06:	4770      	bx	lr
 800de08:	b510      	push	{r4, lr}
 800de0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de0e:	4291      	cmp	r1, r2
 800de10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de14:	d1f9      	bne.n	800de0a <memcpy+0xe>
 800de16:	bd10      	pop	{r4, pc}

0800de18 <__assert_func>:
 800de18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de1a:	4614      	mov	r4, r2
 800de1c:	461a      	mov	r2, r3
 800de1e:	4b09      	ldr	r3, [pc, #36]	@ (800de44 <__assert_func+0x2c>)
 800de20:	4605      	mov	r5, r0
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68d8      	ldr	r0, [r3, #12]
 800de26:	b954      	cbnz	r4, 800de3e <__assert_func+0x26>
 800de28:	4b07      	ldr	r3, [pc, #28]	@ (800de48 <__assert_func+0x30>)
 800de2a:	461c      	mov	r4, r3
 800de2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de30:	9100      	str	r1, [sp, #0]
 800de32:	462b      	mov	r3, r5
 800de34:	4905      	ldr	r1, [pc, #20]	@ (800de4c <__assert_func+0x34>)
 800de36:	f000 f86f 	bl	800df18 <fiprintf>
 800de3a:	f7fd fc7b 	bl	800b734 <abort>
 800de3e:	4b04      	ldr	r3, [pc, #16]	@ (800de50 <__assert_func+0x38>)
 800de40:	e7f4      	b.n	800de2c <__assert_func+0x14>
 800de42:	bf00      	nop
 800de44:	2000001c 	.word	0x2000001c
 800de48:	0800f27e 	.word	0x0800f27e
 800de4c:	0800f250 	.word	0x0800f250
 800de50:	0800f243 	.word	0x0800f243

0800de54 <_calloc_r>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	fba1 5402 	umull	r5, r4, r1, r2
 800de5a:	b93c      	cbnz	r4, 800de6c <_calloc_r+0x18>
 800de5c:	4629      	mov	r1, r5
 800de5e:	f7fd fca3 	bl	800b7a8 <_malloc_r>
 800de62:	4606      	mov	r6, r0
 800de64:	b928      	cbnz	r0, 800de72 <_calloc_r+0x1e>
 800de66:	2600      	movs	r6, #0
 800de68:	4630      	mov	r0, r6
 800de6a:	bd70      	pop	{r4, r5, r6, pc}
 800de6c:	220c      	movs	r2, #12
 800de6e:	6002      	str	r2, [r0, #0]
 800de70:	e7f9      	b.n	800de66 <_calloc_r+0x12>
 800de72:	462a      	mov	r2, r5
 800de74:	4621      	mov	r1, r4
 800de76:	f7fe faa4 	bl	800c3c2 <memset>
 800de7a:	e7f5      	b.n	800de68 <_calloc_r+0x14>

0800de7c <__ascii_mbtowc>:
 800de7c:	b082      	sub	sp, #8
 800de7e:	b901      	cbnz	r1, 800de82 <__ascii_mbtowc+0x6>
 800de80:	a901      	add	r1, sp, #4
 800de82:	b142      	cbz	r2, 800de96 <__ascii_mbtowc+0x1a>
 800de84:	b14b      	cbz	r3, 800de9a <__ascii_mbtowc+0x1e>
 800de86:	7813      	ldrb	r3, [r2, #0]
 800de88:	600b      	str	r3, [r1, #0]
 800de8a:	7812      	ldrb	r2, [r2, #0]
 800de8c:	1e10      	subs	r0, r2, #0
 800de8e:	bf18      	it	ne
 800de90:	2001      	movne	r0, #1
 800de92:	b002      	add	sp, #8
 800de94:	4770      	bx	lr
 800de96:	4610      	mov	r0, r2
 800de98:	e7fb      	b.n	800de92 <__ascii_mbtowc+0x16>
 800de9a:	f06f 0001 	mvn.w	r0, #1
 800de9e:	e7f8      	b.n	800de92 <__ascii_mbtowc+0x16>

0800dea0 <_realloc_r>:
 800dea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea4:	4680      	mov	r8, r0
 800dea6:	4615      	mov	r5, r2
 800dea8:	460c      	mov	r4, r1
 800deaa:	b921      	cbnz	r1, 800deb6 <_realloc_r+0x16>
 800deac:	4611      	mov	r1, r2
 800deae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deb2:	f7fd bc79 	b.w	800b7a8 <_malloc_r>
 800deb6:	b92a      	cbnz	r2, 800dec4 <_realloc_r+0x24>
 800deb8:	f7ff f9be 	bl	800d238 <_free_r>
 800debc:	2400      	movs	r4, #0
 800debe:	4620      	mov	r0, r4
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	f000 f83a 	bl	800df3c <_malloc_usable_size_r>
 800dec8:	4285      	cmp	r5, r0
 800deca:	4606      	mov	r6, r0
 800decc:	d802      	bhi.n	800ded4 <_realloc_r+0x34>
 800dece:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ded2:	d8f4      	bhi.n	800debe <_realloc_r+0x1e>
 800ded4:	4629      	mov	r1, r5
 800ded6:	4640      	mov	r0, r8
 800ded8:	f7fd fc66 	bl	800b7a8 <_malloc_r>
 800dedc:	4607      	mov	r7, r0
 800dede:	2800      	cmp	r0, #0
 800dee0:	d0ec      	beq.n	800debc <_realloc_r+0x1c>
 800dee2:	42b5      	cmp	r5, r6
 800dee4:	462a      	mov	r2, r5
 800dee6:	4621      	mov	r1, r4
 800dee8:	bf28      	it	cs
 800deea:	4632      	movcs	r2, r6
 800deec:	f7ff ff86 	bl	800ddfc <memcpy>
 800def0:	4621      	mov	r1, r4
 800def2:	4640      	mov	r0, r8
 800def4:	f7ff f9a0 	bl	800d238 <_free_r>
 800def8:	463c      	mov	r4, r7
 800defa:	e7e0      	b.n	800debe <_realloc_r+0x1e>

0800defc <__ascii_wctomb>:
 800defc:	4603      	mov	r3, r0
 800defe:	4608      	mov	r0, r1
 800df00:	b141      	cbz	r1, 800df14 <__ascii_wctomb+0x18>
 800df02:	2aff      	cmp	r2, #255	@ 0xff
 800df04:	d904      	bls.n	800df10 <__ascii_wctomb+0x14>
 800df06:	228a      	movs	r2, #138	@ 0x8a
 800df08:	f04f 30ff 	mov.w	r0, #4294967295
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	4770      	bx	lr
 800df10:	2001      	movs	r0, #1
 800df12:	700a      	strb	r2, [r1, #0]
 800df14:	4770      	bx	lr
	...

0800df18 <fiprintf>:
 800df18:	b40e      	push	{r1, r2, r3}
 800df1a:	b503      	push	{r0, r1, lr}
 800df1c:	4601      	mov	r1, r0
 800df1e:	ab03      	add	r3, sp, #12
 800df20:	4805      	ldr	r0, [pc, #20]	@ (800df38 <fiprintf+0x20>)
 800df22:	f853 2b04 	ldr.w	r2, [r3], #4
 800df26:	6800      	ldr	r0, [r0, #0]
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f000 f837 	bl	800df9c <_vfiprintf_r>
 800df2e:	b002      	add	sp, #8
 800df30:	f85d eb04 	ldr.w	lr, [sp], #4
 800df34:	b003      	add	sp, #12
 800df36:	4770      	bx	lr
 800df38:	2000001c 	.word	0x2000001c

0800df3c <_malloc_usable_size_r>:
 800df3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df40:	1f18      	subs	r0, r3, #4
 800df42:	2b00      	cmp	r3, #0
 800df44:	bfbc      	itt	lt
 800df46:	580b      	ldrlt	r3, [r1, r0]
 800df48:	18c0      	addlt	r0, r0, r3
 800df4a:	4770      	bx	lr

0800df4c <__sfputc_r>:
 800df4c:	6893      	ldr	r3, [r2, #8]
 800df4e:	b410      	push	{r4}
 800df50:	3b01      	subs	r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	6093      	str	r3, [r2, #8]
 800df56:	da07      	bge.n	800df68 <__sfputc_r+0x1c>
 800df58:	6994      	ldr	r4, [r2, #24]
 800df5a:	42a3      	cmp	r3, r4
 800df5c:	db01      	blt.n	800df62 <__sfputc_r+0x16>
 800df5e:	290a      	cmp	r1, #10
 800df60:	d102      	bne.n	800df68 <__sfputc_r+0x1c>
 800df62:	bc10      	pop	{r4}
 800df64:	f000 b932 	b.w	800e1cc <__swbuf_r>
 800df68:	6813      	ldr	r3, [r2, #0]
 800df6a:	1c58      	adds	r0, r3, #1
 800df6c:	6010      	str	r0, [r2, #0]
 800df6e:	7019      	strb	r1, [r3, #0]
 800df70:	4608      	mov	r0, r1
 800df72:	bc10      	pop	{r4}
 800df74:	4770      	bx	lr

0800df76 <__sfputs_r>:
 800df76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df78:	4606      	mov	r6, r0
 800df7a:	460f      	mov	r7, r1
 800df7c:	4614      	mov	r4, r2
 800df7e:	18d5      	adds	r5, r2, r3
 800df80:	42ac      	cmp	r4, r5
 800df82:	d101      	bne.n	800df88 <__sfputs_r+0x12>
 800df84:	2000      	movs	r0, #0
 800df86:	e007      	b.n	800df98 <__sfputs_r+0x22>
 800df88:	463a      	mov	r2, r7
 800df8a:	4630      	mov	r0, r6
 800df8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df90:	f7ff ffdc 	bl	800df4c <__sfputc_r>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d1f3      	bne.n	800df80 <__sfputs_r+0xa>
 800df98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df9c <_vfiprintf_r>:
 800df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	4614      	mov	r4, r2
 800dfa4:	4698      	mov	r8, r3
 800dfa6:	4606      	mov	r6, r0
 800dfa8:	b09d      	sub	sp, #116	@ 0x74
 800dfaa:	b118      	cbz	r0, 800dfb4 <_vfiprintf_r+0x18>
 800dfac:	6a03      	ldr	r3, [r0, #32]
 800dfae:	b90b      	cbnz	r3, 800dfb4 <_vfiprintf_r+0x18>
 800dfb0:	f7fe f96e 	bl	800c290 <__sinit>
 800dfb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfb6:	07d9      	lsls	r1, r3, #31
 800dfb8:	d405      	bmi.n	800dfc6 <_vfiprintf_r+0x2a>
 800dfba:	89ab      	ldrh	r3, [r5, #12]
 800dfbc:	059a      	lsls	r2, r3, #22
 800dfbe:	d402      	bmi.n	800dfc6 <_vfiprintf_r+0x2a>
 800dfc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfc2:	f7fe fad0 	bl	800c566 <__retarget_lock_acquire_recursive>
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	071b      	lsls	r3, r3, #28
 800dfca:	d501      	bpl.n	800dfd0 <_vfiprintf_r+0x34>
 800dfcc:	692b      	ldr	r3, [r5, #16]
 800dfce:	b99b      	cbnz	r3, 800dff8 <_vfiprintf_r+0x5c>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f000 f938 	bl	800e248 <__swsetup_r>
 800dfd8:	b170      	cbz	r0, 800dff8 <_vfiprintf_r+0x5c>
 800dfda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfdc:	07dc      	lsls	r4, r3, #31
 800dfde:	d504      	bpl.n	800dfea <_vfiprintf_r+0x4e>
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe4:	b01d      	add	sp, #116	@ 0x74
 800dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfea:	89ab      	ldrh	r3, [r5, #12]
 800dfec:	0598      	lsls	r0, r3, #22
 800dfee:	d4f7      	bmi.n	800dfe0 <_vfiprintf_r+0x44>
 800dff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dff2:	f7fe fab9 	bl	800c568 <__retarget_lock_release_recursive>
 800dff6:	e7f3      	b.n	800dfe0 <_vfiprintf_r+0x44>
 800dff8:	2300      	movs	r3, #0
 800dffa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffc:	2320      	movs	r3, #32
 800dffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e002:	2330      	movs	r3, #48	@ 0x30
 800e004:	f04f 0901 	mov.w	r9, #1
 800e008:	f8cd 800c 	str.w	r8, [sp, #12]
 800e00c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e1b8 <_vfiprintf_r+0x21c>
 800e010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e014:	4623      	mov	r3, r4
 800e016:	469a      	mov	sl, r3
 800e018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01c:	b10a      	cbz	r2, 800e022 <_vfiprintf_r+0x86>
 800e01e:	2a25      	cmp	r2, #37	@ 0x25
 800e020:	d1f9      	bne.n	800e016 <_vfiprintf_r+0x7a>
 800e022:	ebba 0b04 	subs.w	fp, sl, r4
 800e026:	d00b      	beq.n	800e040 <_vfiprintf_r+0xa4>
 800e028:	465b      	mov	r3, fp
 800e02a:	4622      	mov	r2, r4
 800e02c:	4629      	mov	r1, r5
 800e02e:	4630      	mov	r0, r6
 800e030:	f7ff ffa1 	bl	800df76 <__sfputs_r>
 800e034:	3001      	adds	r0, #1
 800e036:	f000 80a7 	beq.w	800e188 <_vfiprintf_r+0x1ec>
 800e03a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e03c:	445a      	add	r2, fp
 800e03e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e040:	f89a 3000 	ldrb.w	r3, [sl]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f000 809f 	beq.w	800e188 <_vfiprintf_r+0x1ec>
 800e04a:	2300      	movs	r3, #0
 800e04c:	f04f 32ff 	mov.w	r2, #4294967295
 800e050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e054:	f10a 0a01 	add.w	sl, sl, #1
 800e058:	9304      	str	r3, [sp, #16]
 800e05a:	9307      	str	r3, [sp, #28]
 800e05c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e060:	931a      	str	r3, [sp, #104]	@ 0x68
 800e062:	4654      	mov	r4, sl
 800e064:	2205      	movs	r2, #5
 800e066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06a:	4853      	ldr	r0, [pc, #332]	@ (800e1b8 <_vfiprintf_r+0x21c>)
 800e06c:	f7fe fa85 	bl	800c57a <memchr>
 800e070:	9a04      	ldr	r2, [sp, #16]
 800e072:	b9d8      	cbnz	r0, 800e0ac <_vfiprintf_r+0x110>
 800e074:	06d1      	lsls	r1, r2, #27
 800e076:	bf44      	itt	mi
 800e078:	2320      	movmi	r3, #32
 800e07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e07e:	0713      	lsls	r3, r2, #28
 800e080:	bf44      	itt	mi
 800e082:	232b      	movmi	r3, #43	@ 0x2b
 800e084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e088:	f89a 3000 	ldrb.w	r3, [sl]
 800e08c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e08e:	d015      	beq.n	800e0bc <_vfiprintf_r+0x120>
 800e090:	4654      	mov	r4, sl
 800e092:	2000      	movs	r0, #0
 800e094:	f04f 0c0a 	mov.w	ip, #10
 800e098:	9a07      	ldr	r2, [sp, #28]
 800e09a:	4621      	mov	r1, r4
 800e09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a0:	3b30      	subs	r3, #48	@ 0x30
 800e0a2:	2b09      	cmp	r3, #9
 800e0a4:	d94b      	bls.n	800e13e <_vfiprintf_r+0x1a2>
 800e0a6:	b1b0      	cbz	r0, 800e0d6 <_vfiprintf_r+0x13a>
 800e0a8:	9207      	str	r2, [sp, #28]
 800e0aa:	e014      	b.n	800e0d6 <_vfiprintf_r+0x13a>
 800e0ac:	eba0 0308 	sub.w	r3, r0, r8
 800e0b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	46a2      	mov	sl, r4
 800e0b8:	9304      	str	r3, [sp, #16]
 800e0ba:	e7d2      	b.n	800e062 <_vfiprintf_r+0xc6>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	1d19      	adds	r1, r3, #4
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	9103      	str	r1, [sp, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	bfbb      	ittet	lt
 800e0c8:	425b      	neglt	r3, r3
 800e0ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ce:	9307      	strge	r3, [sp, #28]
 800e0d0:	9307      	strlt	r3, [sp, #28]
 800e0d2:	bfb8      	it	lt
 800e0d4:	9204      	strlt	r2, [sp, #16]
 800e0d6:	7823      	ldrb	r3, [r4, #0]
 800e0d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0da:	d10a      	bne.n	800e0f2 <_vfiprintf_r+0x156>
 800e0dc:	7863      	ldrb	r3, [r4, #1]
 800e0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0e0:	d132      	bne.n	800e148 <_vfiprintf_r+0x1ac>
 800e0e2:	9b03      	ldr	r3, [sp, #12]
 800e0e4:	3402      	adds	r4, #2
 800e0e6:	1d1a      	adds	r2, r3, #4
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	9203      	str	r2, [sp, #12]
 800e0ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0f0:	9305      	str	r3, [sp, #20]
 800e0f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e1bc <_vfiprintf_r+0x220>
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	4650      	mov	r0, sl
 800e0fa:	7821      	ldrb	r1, [r4, #0]
 800e0fc:	f7fe fa3d 	bl	800c57a <memchr>
 800e100:	b138      	cbz	r0, 800e112 <_vfiprintf_r+0x176>
 800e102:	2240      	movs	r2, #64	@ 0x40
 800e104:	9b04      	ldr	r3, [sp, #16]
 800e106:	eba0 000a 	sub.w	r0, r0, sl
 800e10a:	4082      	lsls	r2, r0
 800e10c:	4313      	orrs	r3, r2
 800e10e:	3401      	adds	r4, #1
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e116:	2206      	movs	r2, #6
 800e118:	4829      	ldr	r0, [pc, #164]	@ (800e1c0 <_vfiprintf_r+0x224>)
 800e11a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e11e:	f7fe fa2c 	bl	800c57a <memchr>
 800e122:	2800      	cmp	r0, #0
 800e124:	d03f      	beq.n	800e1a6 <_vfiprintf_r+0x20a>
 800e126:	4b27      	ldr	r3, [pc, #156]	@ (800e1c4 <_vfiprintf_r+0x228>)
 800e128:	bb1b      	cbnz	r3, 800e172 <_vfiprintf_r+0x1d6>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	3307      	adds	r3, #7
 800e12e:	f023 0307 	bic.w	r3, r3, #7
 800e132:	3308      	adds	r3, #8
 800e134:	9303      	str	r3, [sp, #12]
 800e136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e138:	443b      	add	r3, r7
 800e13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13c:	e76a      	b.n	800e014 <_vfiprintf_r+0x78>
 800e13e:	460c      	mov	r4, r1
 800e140:	2001      	movs	r0, #1
 800e142:	fb0c 3202 	mla	r2, ip, r2, r3
 800e146:	e7a8      	b.n	800e09a <_vfiprintf_r+0xfe>
 800e148:	2300      	movs	r3, #0
 800e14a:	f04f 0c0a 	mov.w	ip, #10
 800e14e:	4619      	mov	r1, r3
 800e150:	3401      	adds	r4, #1
 800e152:	9305      	str	r3, [sp, #20]
 800e154:	4620      	mov	r0, r4
 800e156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15a:	3a30      	subs	r2, #48	@ 0x30
 800e15c:	2a09      	cmp	r2, #9
 800e15e:	d903      	bls.n	800e168 <_vfiprintf_r+0x1cc>
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0c6      	beq.n	800e0f2 <_vfiprintf_r+0x156>
 800e164:	9105      	str	r1, [sp, #20]
 800e166:	e7c4      	b.n	800e0f2 <_vfiprintf_r+0x156>
 800e168:	4604      	mov	r4, r0
 800e16a:	2301      	movs	r3, #1
 800e16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e170:	e7f0      	b.n	800e154 <_vfiprintf_r+0x1b8>
 800e172:	ab03      	add	r3, sp, #12
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	462a      	mov	r2, r5
 800e178:	4630      	mov	r0, r6
 800e17a:	4b13      	ldr	r3, [pc, #76]	@ (800e1c8 <_vfiprintf_r+0x22c>)
 800e17c:	a904      	add	r1, sp, #16
 800e17e:	f7fd fc3d 	bl	800b9fc <_printf_float>
 800e182:	4607      	mov	r7, r0
 800e184:	1c78      	adds	r0, r7, #1
 800e186:	d1d6      	bne.n	800e136 <_vfiprintf_r+0x19a>
 800e188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e18a:	07d9      	lsls	r1, r3, #31
 800e18c:	d405      	bmi.n	800e19a <_vfiprintf_r+0x1fe>
 800e18e:	89ab      	ldrh	r3, [r5, #12]
 800e190:	059a      	lsls	r2, r3, #22
 800e192:	d402      	bmi.n	800e19a <_vfiprintf_r+0x1fe>
 800e194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e196:	f7fe f9e7 	bl	800c568 <__retarget_lock_release_recursive>
 800e19a:	89ab      	ldrh	r3, [r5, #12]
 800e19c:	065b      	lsls	r3, r3, #25
 800e19e:	f53f af1f 	bmi.w	800dfe0 <_vfiprintf_r+0x44>
 800e1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1a4:	e71e      	b.n	800dfe4 <_vfiprintf_r+0x48>
 800e1a6:	ab03      	add	r3, sp, #12
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	4b06      	ldr	r3, [pc, #24]	@ (800e1c8 <_vfiprintf_r+0x22c>)
 800e1b0:	a904      	add	r1, sp, #16
 800e1b2:	f7fd fec1 	bl	800bf38 <_printf_i>
 800e1b6:	e7e4      	b.n	800e182 <_vfiprintf_r+0x1e6>
 800e1b8:	0800f228 	.word	0x0800f228
 800e1bc:	0800f22e 	.word	0x0800f22e
 800e1c0:	0800f232 	.word	0x0800f232
 800e1c4:	0800b9fd 	.word	0x0800b9fd
 800e1c8:	0800df77 	.word	0x0800df77

0800e1cc <__swbuf_r>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	460e      	mov	r6, r1
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	b118      	cbz	r0, 800e1de <__swbuf_r+0x12>
 800e1d6:	6a03      	ldr	r3, [r0, #32]
 800e1d8:	b90b      	cbnz	r3, 800e1de <__swbuf_r+0x12>
 800e1da:	f7fe f859 	bl	800c290 <__sinit>
 800e1de:	69a3      	ldr	r3, [r4, #24]
 800e1e0:	60a3      	str	r3, [r4, #8]
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	071a      	lsls	r2, r3, #28
 800e1e6:	d501      	bpl.n	800e1ec <__swbuf_r+0x20>
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	b943      	cbnz	r3, 800e1fe <__swbuf_r+0x32>
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f000 f82a 	bl	800e248 <__swsetup_r>
 800e1f4:	b118      	cbz	r0, 800e1fe <__swbuf_r+0x32>
 800e1f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	6922      	ldr	r2, [r4, #16]
 800e202:	b2f6      	uxtb	r6, r6
 800e204:	1a98      	subs	r0, r3, r2
 800e206:	6963      	ldr	r3, [r4, #20]
 800e208:	4637      	mov	r7, r6
 800e20a:	4283      	cmp	r3, r0
 800e20c:	dc05      	bgt.n	800e21a <__swbuf_r+0x4e>
 800e20e:	4621      	mov	r1, r4
 800e210:	4628      	mov	r0, r5
 800e212:	f7ff fdb1 	bl	800dd78 <_fflush_r>
 800e216:	2800      	cmp	r0, #0
 800e218:	d1ed      	bne.n	800e1f6 <__swbuf_r+0x2a>
 800e21a:	68a3      	ldr	r3, [r4, #8]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	60a3      	str	r3, [r4, #8]
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	1c5a      	adds	r2, r3, #1
 800e224:	6022      	str	r2, [r4, #0]
 800e226:	701e      	strb	r6, [r3, #0]
 800e228:	6962      	ldr	r2, [r4, #20]
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d004      	beq.n	800e23a <__swbuf_r+0x6e>
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	07db      	lsls	r3, r3, #31
 800e234:	d5e1      	bpl.n	800e1fa <__swbuf_r+0x2e>
 800e236:	2e0a      	cmp	r6, #10
 800e238:	d1df      	bne.n	800e1fa <__swbuf_r+0x2e>
 800e23a:	4621      	mov	r1, r4
 800e23c:	4628      	mov	r0, r5
 800e23e:	f7ff fd9b 	bl	800dd78 <_fflush_r>
 800e242:	2800      	cmp	r0, #0
 800e244:	d0d9      	beq.n	800e1fa <__swbuf_r+0x2e>
 800e246:	e7d6      	b.n	800e1f6 <__swbuf_r+0x2a>

0800e248 <__swsetup_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4b29      	ldr	r3, [pc, #164]	@ (800e2f0 <__swsetup_r+0xa8>)
 800e24c:	4605      	mov	r5, r0
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	460c      	mov	r4, r1
 800e252:	b118      	cbz	r0, 800e25c <__swsetup_r+0x14>
 800e254:	6a03      	ldr	r3, [r0, #32]
 800e256:	b90b      	cbnz	r3, 800e25c <__swsetup_r+0x14>
 800e258:	f7fe f81a 	bl	800c290 <__sinit>
 800e25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e260:	0719      	lsls	r1, r3, #28
 800e262:	d422      	bmi.n	800e2aa <__swsetup_r+0x62>
 800e264:	06da      	lsls	r2, r3, #27
 800e266:	d407      	bmi.n	800e278 <__swsetup_r+0x30>
 800e268:	2209      	movs	r2, #9
 800e26a:	602a      	str	r2, [r5, #0]
 800e26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e270:	f04f 30ff 	mov.w	r0, #4294967295
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	e033      	b.n	800e2e0 <__swsetup_r+0x98>
 800e278:	0758      	lsls	r0, r3, #29
 800e27a:	d512      	bpl.n	800e2a2 <__swsetup_r+0x5a>
 800e27c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e27e:	b141      	cbz	r1, 800e292 <__swsetup_r+0x4a>
 800e280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e284:	4299      	cmp	r1, r3
 800e286:	d002      	beq.n	800e28e <__swsetup_r+0x46>
 800e288:	4628      	mov	r0, r5
 800e28a:	f7fe ffd5 	bl	800d238 <_free_r>
 800e28e:	2300      	movs	r3, #0
 800e290:	6363      	str	r3, [r4, #52]	@ 0x34
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e298:	81a3      	strh	r3, [r4, #12]
 800e29a:	2300      	movs	r3, #0
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	6923      	ldr	r3, [r4, #16]
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	f043 0308 	orr.w	r3, r3, #8
 800e2a8:	81a3      	strh	r3, [r4, #12]
 800e2aa:	6923      	ldr	r3, [r4, #16]
 800e2ac:	b94b      	cbnz	r3, 800e2c2 <__swsetup_r+0x7a>
 800e2ae:	89a3      	ldrh	r3, [r4, #12]
 800e2b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2b8:	d003      	beq.n	800e2c2 <__swsetup_r+0x7a>
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	4628      	mov	r0, r5
 800e2be:	f000 f83e 	bl	800e33e <__smakebuf_r>
 800e2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c6:	f013 0201 	ands.w	r2, r3, #1
 800e2ca:	d00a      	beq.n	800e2e2 <__swsetup_r+0x9a>
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	60a2      	str	r2, [r4, #8]
 800e2d0:	6962      	ldr	r2, [r4, #20]
 800e2d2:	4252      	negs	r2, r2
 800e2d4:	61a2      	str	r2, [r4, #24]
 800e2d6:	6922      	ldr	r2, [r4, #16]
 800e2d8:	b942      	cbnz	r2, 800e2ec <__swsetup_r+0xa4>
 800e2da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2de:	d1c5      	bne.n	800e26c <__swsetup_r+0x24>
 800e2e0:	bd38      	pop	{r3, r4, r5, pc}
 800e2e2:	0799      	lsls	r1, r3, #30
 800e2e4:	bf58      	it	pl
 800e2e6:	6962      	ldrpl	r2, [r4, #20]
 800e2e8:	60a2      	str	r2, [r4, #8]
 800e2ea:	e7f4      	b.n	800e2d6 <__swsetup_r+0x8e>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e7f7      	b.n	800e2e0 <__swsetup_r+0x98>
 800e2f0:	2000001c 	.word	0x2000001c

0800e2f4 <__swhatbuf_r>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fc:	4615      	mov	r5, r2
 800e2fe:	2900      	cmp	r1, #0
 800e300:	461e      	mov	r6, r3
 800e302:	b096      	sub	sp, #88	@ 0x58
 800e304:	da0c      	bge.n	800e320 <__swhatbuf_r+0x2c>
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	2100      	movs	r1, #0
 800e30a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e30e:	bf14      	ite	ne
 800e310:	2340      	movne	r3, #64	@ 0x40
 800e312:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e316:	2000      	movs	r0, #0
 800e318:	6031      	str	r1, [r6, #0]
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	b016      	add	sp, #88	@ 0x58
 800e31e:	bd70      	pop	{r4, r5, r6, pc}
 800e320:	466a      	mov	r2, sp
 800e322:	f000 f849 	bl	800e3b8 <_fstat_r>
 800e326:	2800      	cmp	r0, #0
 800e328:	dbed      	blt.n	800e306 <__swhatbuf_r+0x12>
 800e32a:	9901      	ldr	r1, [sp, #4]
 800e32c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e330:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e334:	4259      	negs	r1, r3
 800e336:	4159      	adcs	r1, r3
 800e338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e33c:	e7eb      	b.n	800e316 <__swhatbuf_r+0x22>

0800e33e <__smakebuf_r>:
 800e33e:	898b      	ldrh	r3, [r1, #12]
 800e340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e342:	079d      	lsls	r5, r3, #30
 800e344:	4606      	mov	r6, r0
 800e346:	460c      	mov	r4, r1
 800e348:	d507      	bpl.n	800e35a <__smakebuf_r+0x1c>
 800e34a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	6123      	str	r3, [r4, #16]
 800e352:	2301      	movs	r3, #1
 800e354:	6163      	str	r3, [r4, #20]
 800e356:	b003      	add	sp, #12
 800e358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35a:	466a      	mov	r2, sp
 800e35c:	ab01      	add	r3, sp, #4
 800e35e:	f7ff ffc9 	bl	800e2f4 <__swhatbuf_r>
 800e362:	9f00      	ldr	r7, [sp, #0]
 800e364:	4605      	mov	r5, r0
 800e366:	4639      	mov	r1, r7
 800e368:	4630      	mov	r0, r6
 800e36a:	f7fd fa1d 	bl	800b7a8 <_malloc_r>
 800e36e:	b948      	cbnz	r0, 800e384 <__smakebuf_r+0x46>
 800e370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e374:	059a      	lsls	r2, r3, #22
 800e376:	d4ee      	bmi.n	800e356 <__smakebuf_r+0x18>
 800e378:	f023 0303 	bic.w	r3, r3, #3
 800e37c:	f043 0302 	orr.w	r3, r3, #2
 800e380:	81a3      	strh	r3, [r4, #12]
 800e382:	e7e2      	b.n	800e34a <__smakebuf_r+0xc>
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e38e:	81a3      	strh	r3, [r4, #12]
 800e390:	9b01      	ldr	r3, [sp, #4]
 800e392:	6020      	str	r0, [r4, #0]
 800e394:	b15b      	cbz	r3, 800e3ae <__smakebuf_r+0x70>
 800e396:	4630      	mov	r0, r6
 800e398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e39c:	f000 f81e 	bl	800e3dc <_isatty_r>
 800e3a0:	b128      	cbz	r0, 800e3ae <__smakebuf_r+0x70>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f023 0303 	bic.w	r3, r3, #3
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	431d      	orrs	r5, r3
 800e3b2:	81a5      	strh	r5, [r4, #12]
 800e3b4:	e7cf      	b.n	800e356 <__smakebuf_r+0x18>
	...

0800e3b8 <_fstat_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	4d06      	ldr	r5, [pc, #24]	@ (800e3d8 <_fstat_r+0x20>)
 800e3be:	4604      	mov	r4, r0
 800e3c0:	4608      	mov	r0, r1
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	f7f9 fab7 	bl	8007938 <_fstat>
 800e3ca:	1c43      	adds	r3, r0, #1
 800e3cc:	d102      	bne.n	800e3d4 <_fstat_r+0x1c>
 800e3ce:	682b      	ldr	r3, [r5, #0]
 800e3d0:	b103      	cbz	r3, 800e3d4 <_fstat_r+0x1c>
 800e3d2:	6023      	str	r3, [r4, #0]
 800e3d4:	bd38      	pop	{r3, r4, r5, pc}
 800e3d6:	bf00      	nop
 800e3d8:	20000578 	.word	0x20000578

0800e3dc <_isatty_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	2300      	movs	r3, #0
 800e3e0:	4d05      	ldr	r5, [pc, #20]	@ (800e3f8 <_isatty_r+0x1c>)
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	4608      	mov	r0, r1
 800e3e6:	602b      	str	r3, [r5, #0]
 800e3e8:	f7f9 fab5 	bl	8007956 <_isatty>
 800e3ec:	1c43      	adds	r3, r0, #1
 800e3ee:	d102      	bne.n	800e3f6 <_isatty_r+0x1a>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	b103      	cbz	r3, 800e3f6 <_isatty_r+0x1a>
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	20000578 	.word	0x20000578

0800e3fc <_init>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	bf00      	nop
 800e400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e402:	bc08      	pop	{r3}
 800e404:	469e      	mov	lr, r3
 800e406:	4770      	bx	lr

0800e408 <_fini>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	bf00      	nop
 800e40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40e:	bc08      	pop	{r3}
 800e410:	469e      	mov	lr, r3
 800e412:	4770      	bx	lr

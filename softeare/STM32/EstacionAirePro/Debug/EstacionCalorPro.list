
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf7c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  0800c090  0800c090  0000d090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf30  0800cf30  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf30  0800cf30  0000df30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf38  0800cf38  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cf38  0800cf38  0000df38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800cf40  0800cf40  0000df40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cf48  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001d8  0800d120  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800d120  0000e588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b671  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008597  00000000  00000000  00039872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f8  00000000  00000000  00041e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ca0  00000000  00000000  00043f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2ec  00000000  00000000  00045ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000301b5  00000000  00000000  00064e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e6a8  00000000  00000000  00095049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001336f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f8c  00000000  00000000  00133734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a73e  00000000  00000000  0013b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00145dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c074 	.word	0x0800c074

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800c074 	.word	0x0800c074

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <_ZN15CManejadorBotonC1Ev+0x38>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	0800c1d8 	.word	0x0800c1d8

080010b8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <_ZN15CManejadorBotonD1Ev+0x1c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	0800c1d8 	.word	0x0800c1d8

080010d8 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe9 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80010e6:	2120      	movs	r1, #32
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f008 f940 	bl	800936e <_ZdlPvj>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	80fb      	strh	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	797a      	ldrb	r2, [r7, #5]
 800111e:	729a      	strb	r2, [r3, #10]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	891b      	ldrh	r3, [r3, #8]
 8001144:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f006 fb43 	bl	80077e4 <HAL_GPIO_Init>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	891b      	ldrh	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f006 fc0b 	bl	8007994 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0

}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	61da      	str	r2, [r3, #28]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02e      	beq.n	8001212 <_ZN15CManejadorBoton7ProcesaEi+0x70>
		return;
	if(gpio_pin!=Gpio_Pin)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d12a      	bne.n	8001216 <_ZN15CManejadorBoton7ProcesaEi+0x74>
		return;
	int estado = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
	estado = Leer();
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ffce 	bl	8001166 <_ZN15CManejadorBoton4LeerEv>
 80011ca:	60f8      	str	r0, [r7, #12]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80011cc:	f006 f8ca 	bl	8007364 <HAL_GetTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60bb      	str	r3, [r7, #8]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b63      	cmp	r3, #99	@ 0x63
 80011de:	dd1c      	ble.n	800121a <_ZN15CManejadorBoton7ProcesaEi+0x78>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80011e0:	f006 f8c0 	bl	8007364 <HAL_GetTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d110      	bne.n	800121c <_ZN15CManejadorBoton7ProcesaEi+0x7a>
	{
		Manejador->OnBotonClickEvent(Identificador);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69d8      	ldr	r0, [r3, #28]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3308      	adds	r3, #8
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	7a92      	ldrb	r2, [r2, #10]
 800120c:	4611      	mov	r1, r2
 800120e:	4798      	blx	r3
 8001210:	e004      	b.n	800121c <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001212:	bf00      	nop
 8001214:	e002      	b.n	800121c <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001216:	bf00      	nop
 8001218:	e000      	b.n	800121c <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 800121a:	bf00      	nop
	}
}
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	0800c1e8 	.word	0x0800c1e8

08001244 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	0800c1e8 	.word	0x0800c1e8

08001264 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
}
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffe9 	bl	8001244 <_ZN22CManejadorEventosBotonD1Ev>
 8001272:	2104      	movs	r1, #4
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f008 f87a 	bl	800936e <_ZdlPvj>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZN22CManejadorEventosBoton17OnBotonClickEventEi>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]

}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>

Calefactor::Calefactor()
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <_ZN10CalefactorC1Ev+0x20>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	0800c1fc 	.word	0x0800c1fc

080012bc <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <_ZN10CalefactorD1Ev+0x1c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	0800c1fc 	.word	0x0800c1fc

080012dc <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
}
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffe9 	bl	80012bc <_ZN10CalefactorD1Ev>
 80012ea:	2110      	movs	r1, #16
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f008 f83e 	bl	800936e <_ZdlPvj>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4613      	mov	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	811a      	strh	r2, [r3, #8]

}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	891b      	ldrh	r3, [r3, #8]
 800133a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2302      	movs	r3, #2
 8001346:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f107 0208 	add.w	r2, r7, #8
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f006 fa46 	bl	80077e4 <HAL_GPIO_Init>
	Apagar();
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f817 	bl	800138c <_ZN10Calefactor6ApagarEv>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6858      	ldr	r0, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	891b      	ldrh	r3, [r3, #8]
 8001376:	2201      	movs	r2, #1
 8001378:	4619      	mov	r1, r3
 800137a:	f006 fb11 	bl	80079a0 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	60da      	str	r2, [r3, #12]
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6858      	ldr	r0, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	891b      	ldrh	r3, [r3, #8]
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f006 fafe 	bl	80079a0 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	0800c20c 	.word	0x0800c20c

080013d4 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	0800c20c 	.word	0x0800c20c

080013f4 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
}
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffe9 	bl	80013d4 <_ZN20ControlVelocidadAireD1Ev>
 8001402:	2134      	movs	r1, #52	@ 0x34
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f007 ffb2 	bl	800936e <_ZdlPvj>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a2d      	ldr	r2, [pc, #180]	@ (80014d8 <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <_ZN20ControlVelocidadAire10InicializaEv+0xc8>)
 8001444:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800145e:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.NbrOfConversion = 1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3304      	adds	r3, #4
 8001476:	4618      	mov	r0, r3
 8001478:	f006 f8d2 	bl	8007620 <HAL_ADC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <_ZN20ControlVelocidadAire10InicializaEv+0x7e>
	 {
	 Error_Handler();
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f845 	bl	800151c <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001492:	2303      	movs	r3, #3
 8001494:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 8001496:	2301      	movs	r3, #1
 8001498:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800149a:	2307      	movs	r3, #7
 800149c:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f005 ff77 	bl	800739c <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <_ZN20ControlVelocidadAire10InicializaEv+0xb0>
	 {
	 Error_Handler();
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f82c 	bl	800151c <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f006 f821 	bl	8007510 <HAL_ADC_Start>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40012400 	.word	0x40012400

080014e0 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3304      	adds	r3, #4
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 ff51 	bl	8007394 <HAL_ADC_GetValue>
 80014f2:	4603      	mov	r3, r0
 80014f4:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2264      	movs	r2, #100	@ 0x64
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x38>)
 8001500:	fb82 1203 	smull	r1, r2, r2, r3
 8001504:	441a      	add	r2, r3
 8001506:	12d2      	asrs	r2, r2, #11
 8001508:	17db      	asrs	r3, r3, #31
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	3364      	adds	r3, #100	@ 0x64
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	80080081 	.word	0x80080081

0800151c <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fe72 	bl	8001224 <_ZN22CManejadorEventosBotonC1Ev>
 8001540:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <_ZN8CEncoderC1Ev+0x44>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	639a      	str	r2, [r3, #56]	@ 0x38
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	0800c21c 	.word	0x0800c21c

08001578 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <_ZN8CEncoderD1Ev+0x20>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe5b 	bl	8001244 <_ZN22CManejadorEventosBotonD1Ev>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800c21c 	.word	0x0800c21c

0800159c <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
}
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ffe7 	bl	8001578 <_ZN8CEncoderD1Ev>
 80015aa:	214c      	movs	r1, #76	@ 0x4c
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f007 fede 	bl	800936e <_ZdlPvj>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8c3a      	ldrh	r2, [r7, #32]
 80015e2:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e8:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80015ee:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 80015f6:	2020      	movs	r0, #32
 80015f8:	f007 febb 	bl	8009372 <_Znwj>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461c      	mov	r4, r3
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff fd3b 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fdb8 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	69d8      	ldr	r0, [r3, #28]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6959      	ldr	r1, [r3, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8b1a      	ldrh	r2, [r3, #24]
 8001624:	2303      	movs	r3, #3
 8001626:	f7ff fd67 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f807 	bl	800163e <_ZN8CEncoder6LeeClkEv>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	891b      	ldrh	r3, [r3, #8]
 800164e:	4619      	mov	r1, r3
 8001650:	4610      	mov	r0, r2
 8001652:	f006 f99f 	bl	8007994 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	8a1b      	ldrh	r3, [r3, #16]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f006 f98e 	bl	8007994 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	891b      	ldrh	r3, [r3, #8]
 800169e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <_ZN8CEncoder4InitEv+0x78>)
 80016a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f107 0208 	add.w	r2, r7, #8
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 f896 	bl	80077e4 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8a1b      	ldrh	r3, [r3, #16]
 80016bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 f887 	bl	80077e4 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8b1b      	ldrh	r3, [r3, #24]
 80016da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f107 0208 	add.w	r2, r7, #8
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 f878 	bl	80077e4 <HAL_GPIO_Init>
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	10310000 	.word	0x10310000

08001700 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	621a      	str	r2, [r3, #32]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <_ZN8CEncoder17OnBotonClickEventEi>:
void CEncoder::OnBotonClickEvent(int idBoton)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]

	switch (idBoton)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d10b      	bne.n	8001742 <_ZN8CEncoder17OnBotonClickEventEi+0x28>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a18      	ldr	r0, [r3, #32]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3310      	adds	r3, #16
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800173c:	4611      	mov	r1, r2
 800173e:	4798      	blx	r3
		break;
 8001740:	bf00      	nop
	}
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fd21 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f804 	bl	8001770 <_ZN8CEncoder10leeEncoderEi>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	891b      	ldrh	r3, [r3, #8]
 800177e:	461a      	mov	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4293      	cmp	r3, r2
 8001784:	d128      	bne.n	80017d8 <_ZN8CEncoder10leeEncoderEi+0x68>
		return;
	CLK_status = LeeClk();
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff59 	bl	800163e <_ZN8CEncoder6LeeClkEv>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	429a      	cmp	r2, r3
 800179c:	d017      	beq.n	80017ce <_ZN8CEncoder10leeEncoderEi+0x5e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d113      	bne.n	80017ce <_ZN8CEncoder10leeEncoderEi+0x5e>
	{
		if (LeeDt() != CLK_status)
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff5a 	bl	8001660 <_ZN8CEncoder5LeeDtEv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	429a      	cmp	r2, r3
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <_ZN8CEncoder10leeEncoderEi+0x58>
		{
			incrementa();
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f80d 	bl	80017e0 <_ZN8CEncoder10incrementaEv>
 80017c6:	e002      	b.n	80017ce <_ZN8CEncoder10leeEncoderEi+0x5e>
		}
		else
		{
			decrementa();
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f81c 	bl	8001806 <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017d6:	e000      	b.n	80017da <_ZN8CEncoder10leeEncoderEi+0x6a>
		return;
 80017d8:	bf00      	nop
}
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a18      	ldr	r0, [r3, #32]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3308      	adds	r3, #8
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017fa:	4611      	mov	r1, r2
 80017fc:	4798      	blx	r3
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a18      	ldr	r0, [r3, #32]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	330c      	adds	r3, #12
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001820:	4611      	mov	r1, r2
 8001822:	4798      	blx	r3
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	0800c234 	.word	0x0800c234

0800184c <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	0800c234 	.word	0x0800c234

0800186c <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
}
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffe9 	bl	800184c <_ZN24CManejadorEventosEncoderD1Ev>
 800187a:	2104      	movs	r1, #4
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f007 fd76 	bl	800936e <_ZdlPvj>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]

}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]

}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]

}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN13CEstacionBaseC1Ev+0x20>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	0800c250 	.word	0x0800c250

080018ec <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <_ZN13CEstacionBaseD1Ev+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	0800c250 	.word	0x0800c250

0800190c <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
}
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe9 	bl	80018ec <_ZN13CEstacionBaseD1Ev>
 800191a:	2108      	movs	r1, #8
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f007 fd26 	bl	800936e <_ZdlPvj>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZN13CEstacionBase18GetTemperaturaRealEv>:

float CEstacionBase::GetTemperaturaReal() //regresa la tenperatura actual de la estacion
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	return 0;
 8001934:	f04f 0300 	mov.w	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]

}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]

}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	return 0;
 800199a:	2300      	movs	r3, #0

}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]

}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	605a      	str	r2, [r3, #4]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	330c      	adds	r3, #12
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4798      	blx	r3
 8001a1c:	e000      	b.n	8001a20 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8001a1e:	bf00      	nop
}
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3308      	adds	r3, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4798      	blx	r3
 8001a4c:	e000      	b.n	8001a50 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8001a4e:	bf00      	nop

}
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]

}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]

}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]

}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <_ZN16CestacionBaku601D1Ev>:
#include <Estaciones/CestacionBaku601.hpp>
#include "Calefactor/Calefactor.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.h"

CestacionBaku601::~CestacionBaku601()
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <_ZN16CestacionBaku601D1Ev+0x50>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4a11      	ldr	r2, [pc, #68]	@ (8001b48 <_ZN16CestacionBaku601D1Ev+0x54>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	33e0      	adds	r3, #224	@ 0xe0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fbe3 	bl	80062d8 <_ZN15SensorMagneticoD1Ev>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	33d0      	adds	r3, #208	@ 0xd0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fbd0 	bl	80012bc <_ZN10CalefactorD1Ev>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3384      	adds	r3, #132	@ 0x84
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fa2b 	bl	8005f7c <_ZN3PwmD1Ev>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 fb8e 	bl	800624c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff feda 	bl	80018ec <_ZN13CEstacionBaseD1Ev>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0800c2b0 	.word	0x0800c2b0
 8001b48:	0800c314 	.word	0x0800c314

08001b4c <_ZThn8_N16CestacionBaku601D1Ev>:
	Calefactor calefactor;
	SensorMagnetico sensorMagnetico;
	int NivelAire=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 8001b4c:	f1a0 0008 	sub.w	r0, r0, #8
 8001b50:	f7ff bfd0 	b.w	8001af4 <_ZN16CestacionBaku601D1Ev>

08001b54 <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
}
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffc9 	bl	8001af4 <_ZN16CestacionBaku601D1Ev>
 8001b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f007 fc01 	bl	800936e <_ZdlPvj>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_ZThn8_N16CestacionBaku601D0Ev>:
 8001b76:	f1a0 0008 	sub.w	r0, r0, #8
 8001b7a:	f7ff bfeb 	b.w	8001b54 <_ZN16CestacionBaku601D0Ev>
	...

08001b80 <_ZN16CestacionBaku601C1Ev>:

CestacionBaku601::CestacionBaku601() :
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fe9c 	bl	80018c8 <_ZN13CEstacionBaseC1Ev>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3308      	adds	r3, #8
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 fb49 	bl	800622c <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8001b9a:	4a57      	ldr	r2, [pc, #348]	@ (8001cf8 <_ZN16CestacionBaku601C1Ev+0x178>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	4a56      	ldr	r2, [pc, #344]	@ (8001cfc <_ZN16CestacionBaku601C1Ev+0x17c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2264      	movs	r2, #100	@ 0x64
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3e      	ldr	r2, [pc, #248]	@ (8001d00 <_ZN16CestacionBaku601C1Ev+0x180>)
 8001c08:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d04 <_ZN16CestacionBaku601C1Ev+0x184>)
 8001c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	220b      	movs	r2, #11
 8001c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	665a      	str	r2, [r3, #100]	@ 0x64
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3368      	adds	r3, #104	@ 0x68
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 f854 	bl	8005ce6 <_ZN7MAX6675C1Ev>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3384      	adds	r3, #132	@ 0x84
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 f98a 	bl	8005f5c <_ZN3PwmC1Ev>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	33d0      	adds	r3, #208	@ 0xd0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fb23 	bl	8001298 <_ZN10CalefactorC1Ev>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	33e0      	adds	r3, #224	@ 0xe0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fb22 	bl	80062a0 <_ZN15SensorMagneticoC1Ev>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 8001c6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c74:	f004 f9a2 	bl	8005fbc <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3368      	adds	r3, #104	@ 0x68
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4922      	ldr	r1, [pc, #136]	@ (8001d08 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 f84c 	bl	8005d1e <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3368      	adds	r3, #104	@ 0x68
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	491e      	ldr	r1, [pc, #120]	@ (8001d08 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 f857 	bl	8005d42 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3368      	adds	r3, #104	@ 0x68
 8001c98:	2201      	movs	r2, #1
 8001c9a:	491b      	ldr	r1, [pc, #108]	@ (8001d08 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f004 f82c 	bl	8005cfa <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3368      	adds	r3, #104	@ 0x68
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 f900 	bl	8005eac <_ZN7MAX66754InitEv>


	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	33d0      	adds	r3, #208	@ 0xd0
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fb21 	bl	80012fc <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	33d0      	adds	r3, #208	@ 0xd0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fb2e 	bl	8001320 <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	33e0      	adds	r3, #224	@ 0xe0
 8001cc8:	2220      	movs	r2, #32
 8001cca:	4910      	ldr	r1, [pc, #64]	@ (8001d0c <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fb23 	bl	8006318 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	33e0      	adds	r3, #224	@ 0xe0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fb30 	bl	800633c <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f004 fb45 	bl	8006378 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	0800c2b0 	.word	0x0800c2b0
 8001cfc:	0800c314 	.word	0x0800c314
 8001d00:	40a00000 	.word	0x40a00000
 8001d04:	44160000 	.word	0x44160000
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40010c00 	.word	0x40010c00

08001d10 <_ZN16CestacionBaku60118GetTemperaturaRealEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaReal()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	return thermocouple.MAX6675_lee(); //* .59;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3368      	adds	r3, #104	@ 0x68
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f004 f859 	bl	8005dd4 <_ZN7MAX667511MAX6675_leeEv>
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	611a      	str	r2, [r3, #16]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	NivelAire=nivel;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	//pwm.SicloTrabajo(nivel);
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <_ZN16CestacionBaku6019GetEstadoEv>:


//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	33e0      	adds	r3, #224	@ 0xe0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fb04 	bl	8006392 <_ZN15SensorMagnetico4LeerEv>
 8001d8a:	4603      	mov	r3, r0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:




void CestacionBaku601::IncrementaTemperatura()
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	da04      	bge.n	8001db2 <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]
	}
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd04      	ble.n	8001dd6 <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	1e5a      	subs	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <_ZN16CestacionBaku60117ActivarCalefactorEv>:


void CestacionBaku601::ActivarCalefactor()
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:


void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8001e24:	f1a0 0008 	sub.w	r0, r0, #8
 8001e28:	f7ff bff2 	b.w	8001e10 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

08001e2c <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f80d 	bl	8001e54 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
	ProcesaTemperaturaReal();
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f821 	bl	8001e82 <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>
	procesaAire();
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f843 	bl	8001ecc <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f862 	bl	8001f10 <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3310      	adds	r3, #16
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
 8001e68:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d002      	beq.n	8001e7a <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	615a      	str	r2, [r3, #20]
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>:

void CestacionBaku601::ProcesaTemperaturaReal()
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	int temperatura = GetTemperaturaReal();
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f8c9 	bl	8001030 <__aeabi_f2iz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	60fb      	str	r3, [r7, #12]
	if (temperaturaRealAnterior != temperatura)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d00b      	beq.n	8001ec4 <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv+0x42>
	{
		temperaturaRealAnterior = temperatura;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	619a      	str	r2, [r3, #24]
		TemperaturaRealEvent(temperaturaRealAnterior);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3350      	adds	r3, #80	@ 0x50
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6992      	ldr	r2, [r2, #24]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4798      	blx	r3
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN16CestacionBaku60111procesaAireEv>:

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3318      	adds	r3, #24
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4798      	blx	r3
 8001ee2:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d00b      	beq.n	8001f06 <_ZN16CestacionBaku60111procesaAireEv+0x3a>
	{
		AireAnterior = aire;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	334c      	adds	r3, #76	@ 0x4c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	69d2      	ldr	r2, [r2, #28]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4798      	blx	r3
	}
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <_ZN16CestacionBaku60117ProcesaCalefactorEv>:


void CestacionBaku601::ProcesaCalefactor()
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d108      	bne.n	8001f32 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor=0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	33d0      	adds	r3, #208	@ 0xd0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fa2e 	bl	800138c <_ZN10Calefactor6ApagarEv>
		return;
 8001f30:	e094      	b.n	800205c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	int sensor = sensorMagnetico.Leer();
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	33e0      	adds	r3, #224	@ 0xe0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fa2b 	bl	8006392 <_ZN15SensorMagnetico4LeerEv>
 8001f3c:	6178      	str	r0, [r7, #20]
	if (sensor == BOTON_PRESIONADO)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x3c>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f88f 	bl	8002068 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 8001f4a:	e087      	b.n	800205c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	TiempoEnfriando=0;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3318      	adds	r3, #24
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4610      	mov	r0, r2
 8001f66:	4798      	blx	r3
 8001f68:	6138      	str	r0, [r7, #16]
	pwm.SicloTrabajo(aire);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3384      	adds	r3, #132	@ 0x84
 8001f6e:	6939      	ldr	r1, [r7, #16]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 f8cf 	bl	8006114 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual=HAL_GetTick(); //me trae el tiempo en milisegundos
 8001f76:	f005 f9f5 	bl	8007364 <HAL_GetTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
	if(TiempoActual<TiempoProximoMuestreo )
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	db65      	blt.n	800205a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo=TiempoActual+TiempoMuestreoTemperatura;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	441a      	add	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	639a      	str	r2, [r3, #56]	@ 0x38
	float temperatura = GetTemperaturaReal();
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	60f8      	str	r0, [r7, #12]
	 PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fe24 	bl	8000bfc <__aeabi_i2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	68f9      	ldr	r1, [r7, #12]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fd69 	bl	8000a90 <__aeabi_fsub>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
	 Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fe0e 	bl	8000bfc <__aeabi_i2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f7fe fe5d 	bl	8000ca4 <__aeabi_fmul>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7fe fd50 	bl	8000a94 <__addsf3>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40
	 PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT)/10;   //Calculo de la salida del controlador PI
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	4619      	mov	r1, r3
 800200a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800200e:	f7fe fefd 	bl	8000e0c <__aeabi_fdiv>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f7fe fe41 	bl	8000ca4 <__aeabi_fmul>
 8002022:	4603      	mov	r3, r0
 8002024:	4619      	mov	r1, r3
 8002026:	4628      	mov	r0, r5
 8002028:	f7fe fd34 	bl	8000a94 <__addsf3>
 800202c:	4603      	mov	r3, r0
 800202e:	4619      	mov	r1, r3
 8002030:	4620      	mov	r0, r4
 8002032:	f7fe fe37 	bl	8000ca4 <__aeabi_fmul>
 8002036:	4603      	mov	r3, r0
 8002038:	490a      	ldr	r1, [pc, #40]	@ (8002064 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x154>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fee6 	bl	8000e0c <__aeabi_fdiv>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	645a      	str	r2, [r3, #68]	@ 0x44
	 //asigno la potencia del calefactor
	 PotenciaCalefactor=PID_value;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ffef 	bl	8001030 <__aeabi_f2iz>
 8002052:	4602      	mov	r2, r0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
 8002058:	e000      	b.n	800205c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
		return;
 800205a:	bf00      	nop
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	bf00      	nop
 8002064:	41200000 	.word	0x41200000

08002068 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor=0; //bajo toda la potencia
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaReal();
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3308      	adds	r3, #8
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	60f8      	str	r0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 8002084:	492c      	ldr	r1, [pc, #176]	@ (8002138 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd0>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7fe ffb4 	bl	8000ff4 <__aeabi_fcmple>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03c      	beq.n	800210c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xa4>
	{
		if(TiempoEnfriando==0)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	f7fe fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x5a>
		{
			TiempoEnfriando=HAL_GetTick();
 80020aa:	f005 f95b 	bl	8007364 <HAL_GetTick>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f997 	bl	80003e4 <__aeabi_ui2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 80020c0:	e033      	b.n	800212a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
		}
		if(HAL_GetTick()-TiempoEnfriando<=10000)
 80020c2:	f005 f94f 	bl	8007364 <HAL_GetTick>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe f98b 	bl	80003e4 <__aeabi_ui2d>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80020d4:	f7fe f848 	bl	8000168 <__aeabi_dsub>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	2301      	movs	r3, #1
 80020e2:	461c      	mov	r4, r3
 80020e4:	a312      	add	r3, pc, #72	@ (adr r3, 8002130 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc8>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe fc71 	bl	80009d0 <__aeabi_dcmple>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x90>
 80020f4:	2300      	movs	r3, #0
 80020f6:	461c      	mov	r4, r3
 80020f8:	b2e3      	uxtb	r3, r4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d114      	bne.n	8002128 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc0>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3384      	adds	r3, #132	@ 0x84
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f004 f805 	bl	8006114 <_ZN3Pwm12SicloTrabajoEi>
		return;
 800210a:	e00e      	b.n	800212a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
	}
	//pongo al maximo el aire para enfriar la pistola
	if(temperatura>10)
 800210c:	490b      	ldr	r1, [pc, #44]	@ (800213c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd4>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7fe ff84 	bl	800101c <__aeabi_fcmpgt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
	{
		pwm.SicloTrabajo(100);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3384      	adds	r3, #132	@ 0x84
 800211e:	2164      	movs	r1, #100	@ 0x64
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fff7 	bl	8006114 <_ZN3Pwm12SicloTrabajoEi>
 8002126:	e000      	b.n	800212a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc2>
			return;
 8002128:	bf00      	nop
	}
}
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	00000000 	.word	0x00000000
 8002134:	40c38800 	.word	0x40c38800
 8002138:	41f00000 	.word	0x41f00000
 800213c:	41200000 	.word	0x41200000

08002140 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	if(gpio_pin!=CruceCero_Pin)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b10      	cmp	r3, #16
 800214e:	d124      	bne.n	800219a <_ZN16CestacionBaku60110CruceXCeroEi+0x5a>
		return;
	if(TiempoAntiReboresCruceXCero>0)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002154:	2b00      	cmp	r3, #0
 8002156:	dc22      	bgt.n	800219e <_ZN16CestacionBaku60110CruceXCeroEi+0x5e>
	{
		return;
	}
	TiempoAntiReboresCruceXCero=9;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2209      	movs	r2, #9
 800215c:	651a      	str	r2, [r3, #80]	@ 0x50

	if(ciclos>=100)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	2b63      	cmp	r3, #99	@ 0x63
 8002164:	dd02      	ble.n	800216c <_ZN16CestacionBaku60110CruceXCeroEi+0x2c>
	{
		ciclos=0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if(ciclos<PotenciaCalefactor)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	429a      	cmp	r2, r3
 8002176:	da05      	bge.n	8002184 <_ZN16CestacionBaku60110CruceXCeroEi+0x44>
	{
		calefactor.Encender();
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	33d0      	adds	r3, #208	@ 0xd0
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f8f2 	bl	8001366 <_ZN10Calefactor8EncenderEv>
 8002182:	e004      	b.n	800218e <_ZN16CestacionBaku60110CruceXCeroEi+0x4e>
	}
	else
	{
		calefactor.Apagar();
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	33d0      	adds	r3, #208	@ 0xd0
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f8ff 	bl	800138c <_ZN10Calefactor6ApagarEv>
	}
	ciclos=ciclos+1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
 8002198:	e002      	b.n	80021a0 <_ZN16CestacionBaku60110CruceXCeroEi+0x60>
		return;
 800219a:	bf00      	nop
 800219c:	e000      	b.n	80021a0 <_ZN16CestacionBaku60110CruceXCeroEi+0x60>
		return;
 800219e:	bf00      	nop
}
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
		if(TiempoAntiReboresCruceXCero>0)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dd04      	ble.n	80021c0 <_ZN16CestacionBaku6019TimerTickEv+0x1a>
		{
			TiempoAntiReboresCruceXCero--;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	651a      	str	r2, [r3, #80]	@ 0x50
		}
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor=valor;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
	CruceXCero(GPIO_Pin);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	333c      	adds	r3, #60	@ 0x3c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <_ZN18CComponenteBaseTftC1Ev+0x2c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	0800c328 	.word	0x0800c328

0800224c <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0800c328 	.word	0x0800c328

0800226c <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
}
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ffe9 	bl	800224c <_ZN18CComponenteBaseTftD1Ev>
 800227a:	2118      	movs	r1, #24
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f007 f876 	bl	800936e <_ZdlPvj>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	460b      	mov	r3, r1
 80022a0:	813b      	strh	r3, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	4608      	mov	r0, r1
 80022cc:	4611      	mov	r1, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	4603      	mov	r3, r0
 80022d2:	817b      	strh	r3, [r7, #10]
 80022d4:	460b      	mov	r3, r1
 80022d6:	813b      	strh	r3, [r7, #8]
 80022d8:	4613      	mov	r3, r2
 80022da:	80fb      	strh	r3, [r7, #6]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	461a      	mov	r2, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	817b      	strh	r3, [r7, #10]
 80022f8:	460b      	mov	r3, r1
 80022fa:	813b      	strh	r3, [r7, #8]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	4608      	mov	r0, r1
 8002314:	4611      	mov	r1, r2
 8002316:	461a      	mov	r2, r3
 8002318:	4603      	mov	r3, r0
 800231a:	817b      	strh	r3, [r7, #10]
 800231c:	460b      	mov	r3, r1
 800231e:	813b      	strh	r3, [r7, #8]
 8002320:	4613      	mov	r3, r2
 8002322:	80fb      	strh	r3, [r7, #6]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	4608      	mov	r0, r1
 8002338:	4611      	mov	r1, r2
 800233a:	461a      	mov	r2, r3
 800233c:	4603      	mov	r3, r0
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	460b      	mov	r3, r1
 8002342:	813b      	strh	r3, [r7, #8]
 8002344:	4613      	mov	r3, r2
 8002346:	80fb      	strh	r3, [r7, #6]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	4608      	mov	r0, r1
 800235c:	4611      	mov	r1, r2
 800235e:	461a      	mov	r2, r3
 8002360:	4603      	mov	r3, r0
 8002362:	817b      	strh	r3, [r7, #10]
 8002364:	460b      	mov	r3, r1
 8002366:	813b      	strh	r3, [r7, #8]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70fb      	strb	r3, [r7, #3]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	817b      	strh	r3, [r7, #10]
 80023c6:	460b      	mov	r3, r1
 80023c8:	813b      	strh	r3, [r7, #8]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	4608      	mov	r0, r1
 800241c:	4611      	mov	r1, r2
 800241e:	461a      	mov	r2, r3
 8002420:	4603      	mov	r3, r0
 8002422:	817b      	strh	r3, [r7, #10]
 8002424:	460b      	mov	r3, r1
 8002426:	813b      	strh	r3, [r7, #8]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	return 319;
 800243e:	f240 133f 	movw	r3, #319	@ 0x13f
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	return 239;
 8002454:	23ef      	movs	r3, #239	@ 0xef
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	817b      	strh	r3, [r7, #10]
 8002472:	460b      	mov	r3, r1
 8002474:	813b      	strh	r3, [r7, #8]
 8002476:	4613      	mov	r3, r2
 8002478:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 800247a:	8978      	ldrh	r0, [r7, #10]
 800247c:	8939      	ldrh	r1, [r7, #8]
 800247e:	897a      	ldrh	r2, [r7, #10]
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4413      	add	r3, r2
 8002484:	b29c      	uxth	r4, r3
 8002486:	893a      	ldrh	r2, [r7, #8]
 8002488:	8c3b      	ldrh	r3, [r7, #32]
 800248a:	4413      	add	r3, r2
 800248c:	b29a      	uxth	r2, r3
 800248e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	4622      	mov	r2, r4
 8002496:	f002 fb4e 	bl	8004b36 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}

080024a2 <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 80024a2:	b590      	push	{r4, r7, lr}
 80024a4:	b087      	sub	sp, #28
 80024a6:	af02      	add	r7, sp, #8
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	4608      	mov	r0, r1
 80024ac:	4611      	mov	r1, r2
 80024ae:	461a      	mov	r2, r3
 80024b0:	4603      	mov	r3, r0
 80024b2:	817b      	strh	r3, [r7, #10]
 80024b4:	460b      	mov	r3, r1
 80024b6:	813b      	strh	r3, [r7, #8]
 80024b8:	4613      	mov	r3, r2
 80024ba:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 80024bc:	8978      	ldrh	r0, [r7, #10]
 80024be:	8939      	ldrh	r1, [r7, #8]
 80024c0:	897a      	ldrh	r2, [r7, #10]
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4413      	add	r3, r2
 80024c6:	b29c      	uxth	r4, r3
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	8c3b      	ldrh	r3, [r7, #32]
 80024cc:	4413      	add	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	4622      	mov	r2, r4
 80024d8:	f002 faac 	bl	8004a34 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}

080024e4 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 80024f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
    CursorY=y;
 80024fc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	611a      	str	r2, [r3, #16]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 8002546:	b590      	push	{r4, r7, lr}
 8002548:	b085      	sub	sp, #20
 800254a:	af02      	add	r7, sp, #8
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6898      	ldr	r0, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	b29c      	uxth	r4, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	b29b      	uxth	r3, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6952      	ldr	r2, [r2, #20]
 8002568:	b292      	uxth	r2, r2
 800256a:	9201      	str	r2, [sp, #4]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	4623      	mov	r3, r4
 8002570:	4602      	mov	r2, r0
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	f002 fbd4 	bl	8004d20 <_Z17ILI9341_Draw_TextPKciittt>
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <_ZN12CEtiquetaTftD1Ev+0x20>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fb31 	bl	8002bf8 <_ZN14CRectanguloTftD1Ev>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800c378 	.word	0x0800c378

080025a4 <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
}
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ffe7 	bl	8002580 <_ZN12CEtiquetaTftD1Ev>
 80025b2:	21a4      	movs	r1, #164	@ 0xa4
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f006 feda 	bl	800936e <_ZdlPvj>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	9303      	str	r3, [sp, #12]
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	f000 fb27 	bl	8002c3c <_ZN14CRectanguloTftC1Eiiiiiii>
 80025ee:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3330      	adds	r3, #48	@ 0x30
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	4618      	mov	r0, r3
 8002614:	f007 fde3 	bl	800a1de <strcpy>
	ColorTexto = colorTexto;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002624:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	0800c378 	.word	0x0800c378

08002638 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002638:	b40e      	push	{r1, r2, r3}
 800263a:	b580      	push	{r7, lr}
 800263c:	b0bb      	sub	sp, #236	@ 0xec
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 8002654:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002658:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002662:	e0f1      	b.n	8002848 <_ZN12CEtiquetaTft8SetTextoEPcz+0x210>
	{

		if (*p != '%')
 8002664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b25      	cmp	r3, #37	@ 0x25
 800266c:	d00f      	beq.n	800268e <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	7819      	ldrb	r1, [r3, #0]
 8002674:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800267c:	4413      	add	r3, r2
 800267e:	460a      	mov	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002686:	3301      	adds	r3, #1
 8002688:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 800268c:	e0d7      	b.n	800283e <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		}
		encontrado = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 8002694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002698:	3301      	adds	r3, #1
 800269a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3b63      	subs	r3, #99	@ 0x63
 80026a6:	2b15      	cmp	r3, #21
 80026a8:	f200 8092 	bhi.w	80027d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x198>
 80026ac:	a201      	add	r2, pc, #4	@ (adr r2, 80026b4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	0800277d 	.word	0x0800277d
 80026b8:	0800270d 	.word	0x0800270d
 80026bc:	080027d1 	.word	0x080027d1
 80026c0:	08002799 	.word	0x08002799
 80026c4:	080027d1 	.word	0x080027d1
 80026c8:	080027d1 	.word	0x080027d1
 80026cc:	08002729 	.word	0x08002729
 80026d0:	080027d1 	.word	0x080027d1
 80026d4:	080027d1 	.word	0x080027d1
 80026d8:	080027d1 	.word	0x080027d1
 80026dc:	080027d1 	.word	0x080027d1
 80026e0:	080027d1 	.word	0x080027d1
 80026e4:	080027d1 	.word	0x080027d1
 80026e8:	08002761 	.word	0x08002761
 80026ec:	080027d1 	.word	0x080027d1
 80026f0:	080027d1 	.word	0x080027d1
 80026f4:	080027b5 	.word	0x080027b5
 80026f8:	080027d1 	.word	0x080027d1
 80026fc:	080027d1 	.word	0x080027d1
 8002700:	080027d1 	.word	0x080027d1
 8002704:	080027d1 	.word	0x080027d1
 8002708:	08002745 	.word	0x08002745
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	60fa      	str	r2, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4959      	ldr	r1, [pc, #356]	@ (8002880 <_ZN12CEtiquetaTft8SetTextoEPcz+0x248>)
 800271a:	4618      	mov	r0, r3
 800271c:	f007 fc28 	bl	8009f70 <siprintf>
			encontrado = 1;
 8002720:	2301      	movs	r3, #1
 8002722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002726:	e063      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1d1a      	adds	r2, r3, #4
 800272c:	60fa      	str	r2, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4953      	ldr	r1, [pc, #332]	@ (8002884 <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>)
 8002736:	4618      	mov	r0, r3
 8002738:	f007 fc1a 	bl	8009f70 <siprintf>
			encontrado = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002742:	e055      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1d1a      	adds	r2, r3, #4
 8002748:	60fa      	str	r2, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	494d      	ldr	r1, [pc, #308]	@ (8002888 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 8002752:	4618      	mov	r0, r3
 8002754:	f007 fc0c 	bl	8009f70 <siprintf>
			encontrado = 1;
 8002758:	2301      	movs	r3, #1
 800275a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800275e:	e047      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, int));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1d1a      	adds	r2, r3, #4
 8002764:	60fa      	str	r2, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4947      	ldr	r1, [pc, #284]	@ (800288c <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 800276e:	4618      	mov	r0, r3
 8002770:	f007 fbfe 	bl	8009f70 <siprintf>
			encontrado = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800277a:	e039      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1d1a      	adds	r2, r3, #4
 8002780:	60fa      	str	r2, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4941      	ldr	r1, [pc, #260]	@ (8002890 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 800278a:	4618      	mov	r0, r3
 800278c:	f007 fbf0 	bl	8009f70 <siprintf>
			encontrado = 1;
 8002790:	2301      	movs	r3, #1
 8002792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002796:	e02b      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, int));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1d1a      	adds	r2, r3, #4
 800279c:	60fa      	str	r2, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	493b      	ldr	r1, [pc, #236]	@ (8002894 <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f007 fbe2 	bl	8009f70 <siprintf>
			encontrado = 1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80027b2:	e01d      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1d1a      	adds	r2, r3, #4
 80027b8:	60fa      	str	r2, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	4935      	ldr	r1, [pc, #212]	@ (8002898 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f007 fbd4 	bl	8009f70 <siprintf>
			encontrado = 1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80027ce:	e00f      	b.n	80027f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		default:
			buffer[posbuffer] = *p;
 80027d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d4:	7819      	ldrb	r1, [r3, #0]
 80027d6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80027da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027de:	4413      	add	r3, r2
 80027e0:	460a      	mov	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80027e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e8:	3301      	adds	r3, #1
 80027ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 80027ee:	bf00      	nop
		}
		if (encontrado == 1)
 80027f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d122      	bne.n	800283e <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		{
			postmp = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 80027fe:	e016      	b.n	800282e <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f6>
			{
				buffer[posbuffer] = tmp[postmp];
 8002800:	f107 0210 	add.w	r2, r7, #16
 8002804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002808:	4413      	add	r3, r2
 800280a:	7819      	ldrb	r1, [r3, #0]
 800280c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002814:	4413      	add	r3, r2
 8002816:	460a      	mov	r2, r1
 8002818:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 800281a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800281e:	3301      	adds	r3, #1
 8002820:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002828:	3301      	adds	r3, #1
 800282a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 800282e:	f107 0210 	add.w	r2, r7, #16
 8002832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e0      	bne.n	8002800 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c8>
	for (p = formato; *p; p++)
 800283e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002842:	3301      	adds	r3, #1
 8002844:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f47f af08 	bne.w	8002664 <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 8002854:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800285c:	4413      	add	r3, r2
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3330      	adds	r3, #48	@ 0x30
 8002866:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f007 fcb6 	bl	800a1de <strcpy>
}
 8002872:	bf00      	nop
 8002874:	37ec      	adds	r7, #236	@ 0xec
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800287c:	b003      	add	sp, #12
 800287e:	4770      	bx	lr
 8002880:	0800c090 	.word	0x0800c090
 8002884:	0800c094 	.word	0x0800c094
 8002888:	0800c098 	.word	0x0800c098
 800288c:	0800c09c 	.word	0x0800c09c
 8002890:	0800c0a0 	.word	0x0800c0a0
 8002894:	0800c0a4 	.word	0x0800c0a4
 8002898:	0800c0a8 	.word	0x0800c0a8

0800289c <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f9d9 	bl	8002ca0 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4413      	add	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	b219      	sxth	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002910:	b29b      	uxth	r3, r3
 8002912:	4413      	add	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	b21b      	sxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	f7ff fde3 	bl	80024e4 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f7ff fdef 	bl	800250e <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002938:	b29b      	uxth	r3, r3
 800293a:	4619      	mov	r1, r3
 800293c:	4610      	mov	r0, r2
 800293e:	f7ff fdf4 	bl	800252a <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3330      	adds	r3, #48	@ 0x30
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f7ff fdfb 	bl	8002546 <_ZN18CComponenteBaseTft5printEPc>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	BackColor=color;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	615a      	str	r2, [r3, #20]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
	...

08002974 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <_ZN13CPantallaBaseD1Ev+0x30>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4a09      	ldr	r2, [pc, #36]	@ (80029a8 <_ZN13CPantallaBaseD1Ev+0x34>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3330      	adds	r3, #48	@ 0x30
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f937 	bl	8005c00 <_ZN26CManejadorEventosControlesD1Ev>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f92f 	bl	8002bf8 <_ZN14CRectanguloTftD1Ev>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	0800c3d4 	.word	0x0800c3d4
 80029a8:	0800c448 	.word	0x0800c448

080029ac <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 80029ac:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80029b0:	f7ff bfe0 	b.w	8002974 <_ZN13CPantallaBaseD1Ev>

080029b4 <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
}
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffd9 	bl	8002974 <_ZN13CPantallaBaseD1Ev>
 80029c2:	21ac      	movs	r1, #172	@ 0xac
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f006 fcd2 	bl	800936e <_ZdlPvj>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZThn48_N13CPantallaBaseD0Ev>:
 80029d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80029d8:	f7ff bfec 	b.w	80029b4 <_ZN13CPantallaBaseD0Ev>

080029dc <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b08f      	sub	sp, #60	@ 0x3c
 80029e0:	af08      	add	r7, sp, #32
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	231f      	movs	r3, #31
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	2301      	movs	r3, #1
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	2300      	movs	r3, #0
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	2200      	movs	r2, #0
 80029fe:	2100      	movs	r1, #0
 8002a00:	f000 f91c 	bl	8002c3c <_ZN14CRectanguloTftC1Eiiiiiii>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3330      	adds	r3, #48	@ 0x30
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 f8e9 	bl	8005be0 <_ZN26CManejadorEventosControlesC1Ev>
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab8 <_ZN13CPantallaBaseC1EiPc+0xdc>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <_ZN13CPantallaBaseC1EiPc+0xe0>)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3340      	adds	r3, #64	@ 0x40
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f007 fbce 	bl	800a1de <strcpy>
	setRotation(3);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2103      	movs	r1, #3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fc9e 	bl	8002388 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fcf1 	bl	8002436 <_ZN18CComponenteBaseTft5widthEv>
 8002a54:	4603      	mov	r3, r0
 8002a56:	617b      	str	r3, [r7, #20]
	int alto = height();
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fcf6 	bl	800244c <_ZN18CComponenteBaseTft6heightEv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	6979      	ldr	r1, [r7, #20]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f967 	bl	8002d3e <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 8002a70:	20a4      	movs	r0, #164	@ 0xa4
 8002a72:	f006 fc7e 	bl	8009372 <_Znwj>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461c      	mov	r4, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3340      	adds	r3, #64	@ 0x40
 8002a86:	201f      	movs	r0, #31
 8002a88:	9006      	str	r0, [sp, #24]
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	9005      	str	r0, [sp, #20]
 8002a8e:	2003      	movs	r0, #3
 8002a90:	9004      	str	r0, [sp, #16]
 8002a92:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a96:	9003      	str	r0, [sp, #12]
 8002a98:	9302      	str	r3, [sp, #8]
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	231e      	movs	r3, #30
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7ff fd8d 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	0800c3d4 	.word	0x0800c3d4
 8002abc:	0800c448 	.word	0x0800c448

08002ac0 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
	CRectanguloTft::Show();
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f8e8 	bl	8002ca0 <_ZN14CRectanguloTft4ShowEv>
	//dibujo el titulo
	LabelTitulo->Show();
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3348      	adds	r3, #72	@ 0x48
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4798      	blx	r3
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3328      	adds	r3, #40	@ 0x28
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	3230      	adds	r2, #48	@ 0x30
 8002b24:	4611      	mov	r1, r2
 8002b26:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3334      	adds	r3, #52	@ 0x34
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4798      	blx	r3
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
	Estacion->QuitaManejadorControles();
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	332c      	adds	r3, #44	@ 0x2c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
	Visible=false;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	return Visible;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d004      	beq.n	8002bae <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002bac:	e000      	b.n	8002bb0 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8002bae:	bf00      	nop
}
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	333c      	adds	r3, #60	@ 0x3c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	3230      	adds	r2, #48	@ 0x30
 8002bea:	4611      	mov	r1, r2
 8002bec:	4798      	blx	r3
 8002bee:	e000      	b.n	8002bf2 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 8002bf0:	bf00      	nop
}
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <_ZN14CRectanguloTftD1Ev+0x20>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fb1f 	bl	800224c <_ZN18CComponenteBaseTftD1Ev>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	0800c47c 	.word	0x0800c47c

08002c1c <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
}
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffe7 	bl	8002bf8 <_ZN14CRectanguloTftD1Ev>
 8002c2a:	2130      	movs	r1, #48	@ 0x30
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f006 fb9e 	bl	800936e <_ZdlPvj>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fae5 	bl	800221c <_ZN18CComponenteBaseTftC1Ev>
 8002c52:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c64:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0800c47c 	.word	0x0800c47c

08002ca0 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3338      	adds	r3, #56	@ 0x38
 8002cb0:	681c      	ldr	r4, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	b219      	sxth	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	b21d      	sxth	r5, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	b21e      	sxth	r6, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6952      	ldr	r2, [r2, #20]
 8002cce:	b292      	uxth	r2, r2
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4633      	mov	r3, r6
 8002cd6:	462a      	mov	r2, r5
 8002cd8:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d118      	bne.n	8002d14 <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3344      	adds	r3, #68	@ 0x44
 8002cea:	681c      	ldr	r4, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	b219      	sxth	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	b21d      	sxth	r5, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	b21e      	sxth	r6, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d08:	b292      	uxth	r2, r2
 8002d0a:	9201      	str	r2, [sp, #4]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4633      	mov	r3, r6
 8002d10:	462a      	mov	r2, r5
 8002d12:	47a0      	blx	r4
  }
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d1c <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  Xi=x;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	619a      	str	r2, [r3, #24]
  Yi=y;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	61da      	str	r2, [r3, #28]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	615a      	str	r2, [r3, #20]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return Xi;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return Yi;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return Alto;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	0fd9      	lsrs	r1, r3, #31
 8002dce:	440b      	add	r3, r1
 8002dd0:	105b      	asrs	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b08d      	sub	sp, #52	@ 0x34
 8002de4:	af08      	add	r7, sp, #32
 8002de6:	6078      	str	r0, [r7, #4]
CPantallaBase(1, "CONF MEMORIA")
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a6b      	ldr	r2, [pc, #428]	@ (8002f98 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fdf4 	bl	80029dc <_ZN13CPantallaBaseC1EiPc>
 8002df4:	4a69      	ldr	r2, [pc, #420]	@ (8002f9c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	4a69      	ldr	r2, [pc, #420]	@ (8002fa0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002e08:	20a4      	movs	r0, #164	@ 0xa4
 8002e0a:	f006 fab2 	bl	8009372 <_Znwj>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e16:	9306      	str	r3, [sp, #24]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9305      	str	r3, [sp, #20]
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	9304      	str	r3, [sp, #16]
 8002e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e24:	9303      	str	r3, [sp, #12]
 8002e26:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 8002e28:	9302      	str	r3, [sp, #8]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	2314      	movs	r3, #20
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2332      	movs	r3, #50	@ 0x32
 8002e34:	2223      	movs	r2, #35	@ 0x23
 8002e36:	2105      	movs	r1, #5
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7ff fbc3 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002e44:	20a4      	movs	r0, #164	@ 0xa4
 8002e46:	f006 fa94 	bl	8009372 <_Znwj>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e52:	9306      	str	r3, [sp, #24]
 8002e54:	2300      	movs	r3, #0
 8002e56:	9305      	str	r3, [sp, #20]
 8002e58:	2303      	movs	r3, #3
 8002e5a:	9304      	str	r3, [sp, #16]
 8002e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e60:	9303      	str	r3, [sp, #12]
 8002e62:	4b51      	ldr	r3, [pc, #324]	@ (8002fa8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2314      	movs	r3, #20
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2332      	movs	r3, #50	@ 0x32
 8002e70:	2241      	movs	r2, #65	@ 0x41
 8002e72:	2105      	movs	r1, #5
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff fba5 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff9a 	bl	8002dbc <_ZN14CRectanguloTft11DameCentroXEv>
 8002e88:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8002e8a:	20a4      	movs	r0, #164	@ 0xa4
 8002e8c:	f006 fa71 	bl	8009372 <_Znwj>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461c      	mov	r4, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8002e9a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002e9e:	9306      	str	r3, [sp, #24]
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	9305      	str	r3, [sp, #20]
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	9304      	str	r3, [sp, #16]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9303      	str	r3, [sp, #12]
 8002eac:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8002eae:	9302      	str	r3, [sp, #8]
 8002eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	231e      	movs	r3, #30
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2396      	movs	r3, #150	@ 0x96
 8002ebc:	2269      	movs	r2, #105	@ 0x69
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff fb80 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	2105      	movs	r1, #5
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fce1 	bl	800289c <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8002eda:	20a4      	movs	r0, #164	@ 0xa4
 8002edc:	f006 fa49 	bl	8009372 <_Znwj>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ee8:	9306      	str	r3, [sp, #24]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9305      	str	r3, [sp, #20]
 8002eee:	2303      	movs	r3, #3
 8002ef0:	9304      	str	r3, [sp, #16]
 8002ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ef6:	9303      	str	r3, [sp, #12]
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 8002efa:	9302      	str	r3, [sp, #8]
 8002efc:	2300      	movs	r3, #0
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	231e      	movs	r3, #30
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	23c8      	movs	r3, #200	@ 0xc8
 8002f06:	2287      	movs	r2, #135	@ 0x87
 8002f08:	2105      	movs	r1, #5
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff fb5a 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8002f16:	20a4      	movs	r0, #164	@ 0xa4
 8002f18:	f006 fa2b 	bl	8009372 <_Znwj>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461c      	mov	r4, r3
 8002f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f24:	9306      	str	r3, [sp, #24]
 8002f26:	2301      	movs	r3, #1
 8002f28:	9305      	str	r3, [sp, #20]
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	9304      	str	r3, [sp, #16]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9303      	str	r3, [sp, #12]
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	231e      	movs	r3, #30
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2382      	movs	r3, #130	@ 0x82
 8002f42:	22c8      	movs	r2, #200	@ 0xc8
 8002f44:	210a      	movs	r1, #10
 8002f46:	4620      	mov	r0, r4
 8002f48:	f7ff fb3c 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8002f52:	20a4      	movs	r0, #164	@ 0xa4
 8002f54:	f006 fa0d 	bl	8009372 <_Znwj>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461c      	mov	r4, r3
 8002f5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f60:	9306      	str	r3, [sp, #24]
 8002f62:	2301      	movs	r3, #1
 8002f64:	9305      	str	r3, [sp, #20]
 8002f66:	2303      	movs	r3, #3
 8002f68:	9304      	str	r3, [sp, #16]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9303      	str	r3, [sp, #12]
 8002f6e:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	231e      	movs	r3, #30
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2391      	movs	r3, #145	@ 0x91
 8002f7e:	22c8      	movs	r2, #200	@ 0xc8
 8002f80:	21a0      	movs	r1, #160	@ 0xa0
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff fb1e 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	0800c0ac 	.word	0x0800c0ac
 8002f9c:	0800c4d8 	.word	0x0800c4d8
 8002fa0:	0800c560 	.word	0x0800c560
 8002fa4:	0800c0bc 	.word	0x0800c0bc
 8002fa8:	0800c0c8 	.word	0x0800c0c8
 8002fac:	0800c0d4 	.word	0x0800c0d4
 8002fb0:	0800c0dc 	.word	0x0800c0dc
 8002fb4:	0800c0e8 	.word	0x0800c0e8
 8002fb8:	0800c0f0 	.word	0x0800c0f0

08002fbc <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	4a07      	ldr	r2, [pc, #28]	@ (8002fe4 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	4a07      	ldr	r2, [pc, #28]	@ (8002fe8 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fcce 	bl	8002974 <_ZN13CPantallaBaseD1Ev>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0800c4d8 	.word	0x0800c4d8
 8002fe8:	0800c560 	.word	0x0800c560

08002fec <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:
	void LeeDatosMemoria();
	int DameDireccionMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 8002fec:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002ff0:	f7ff bfe4 	b.w	8002fbc <_ZN26CConfigurarPantallaMemoriaD1Ev>

08002ff4 <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
}
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ffdd 	bl	8002fbc <_ZN26CConfigurarPantallaMemoriaD1Ev>
 8003002:	21e0      	movs	r1, #224	@ 0xe0
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f006 f9b2 	bl	800936e <_ZdlPvj>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 8003014:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003018:	f7ff bfec 	b.w	8002ff4 <_ZN26CConfigurarPantallaMemoriaD0Ev>

0800301c <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800302a:	4618      	mov	r0, r3
 800302c:	f002 fcb5 	bl	800599a <_ZN19CManejadorControles12GetNivelAireEv>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	CPantallaBase::Show();
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fd40 	bl	8002ac0 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f881 	bl	8003148 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3348      	adds	r3, #72	@ 0x48
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4610      	mov	r0, r2
 800305a:	4798      	blx	r3
	MuestraInformacion();
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8df 	bl	8003220 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto("Memoria: %d", NumeroMemoria);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800306e:	461a      	mov	r2, r3
 8003070:	4913      	ldr	r1, [pc, #76]	@ (80030c0 <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 8003072:	f7ff fae1 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3348      	adds	r3, #72	@ 0x48
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
	LabelGuardar->Show();
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3348      	adds	r3, #72	@ 0x48
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4610      	mov	r0, r2
 80030a0:	4798      	blx	r3
	LabelCancelar->Show();
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3348      	adds	r3, #72	@ 0x48
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4610      	mov	r0, r2
 80030b6:	4798      	blx	r3
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	0800c0fc 	.word	0x0800c0fc

080030c4 <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 fc61 	bl	800599a <_ZN19CManejadorControles12GetNivelAireEv>
 80030d8:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dc06      	bgt.n	80030f6 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	429a      	cmp	r2, r3
 80030f4:	da03      	bge.n	80030fe <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
	MuestraInformacion();
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f88e 	bl	8003220 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	VelocidadAireAnterior=-1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f04f 32ff 	mov.w	r2, #4294967295
 8003126:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	NumeroMemoria=numeroMemoria;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	DireccionMemoria=DameDireccionMemoria();
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f852 	bl	80031dc <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af04      	add	r7, sp, #16
 800314e:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003156:	b29a      	uxth	r2, r3
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	9302      	str	r3, [sp, #8]
 800315e:	2304      	movs	r3, #4
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2301      	movs	r3, #1
 800316a:	21a0      	movs	r1, #160	@ 0xa0
 800316c:	481a      	ldr	r0, [pc, #104]	@ (80031d8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x90>)
 800316e:	f004 ff63 	bl	8008038 <HAL_I2C_Mem_Read>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d026      	beq.n	80031d0 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
	  {
			Temperatura=datos_r[0];
 8003182:	89bb      	ldrh	r3, [r7, #12]
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			VelocidadAire=datos_r[1];
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

		 	if(Temperatura<0 || Temperatura>500)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800319c:	2b00      	cmp	r3, #0
 800319e:	db05      	blt.n	80031ac <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x64>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80031a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031aa:	dd03      	ble.n	80031b4 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2264      	movs	r2, #100	@ 0x64
 80031b0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db04      	blt.n	80031c8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x80>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031c4:	2b64      	cmp	r3, #100	@ 0x64
 80031c6:	dd03      	ble.n	80031d0 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2232      	movs	r2, #50	@ 0x32
 80031cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
	  }

}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000254 	.word	0x20000254

080031dc <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>:
int CConfigurarPantallaMemoria::DameDireccionMemoria()
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	int direccion=1;
 80031e4:	2301      	movs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d00c      	beq.n	800320c <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x30>
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	dc0d      	bgt.n	8003212 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d002      	beq.n	8003200 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x24>
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d003      	beq.n	8003206 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 80031fe:	e008      	b.n	8003212 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=1;
 8003200:	2301      	movs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
		break;
 8003204:	e005      	b.n	8003212 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=5;
 8003206:	2305      	movs	r3, #5
 8003208:	60fb      	str	r3, [r7, #12]
		break;
 800320a:	e002      	b.n	8003212 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=9;
 800320c:	2309      	movs	r3, #9
 800320e:	60fb      	str	r3, [r7, #12]
		break;
 8003210:	bf00      	nop
	}
	return direccion;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003234:	429a      	cmp	r2, r3
 8003236:	d01a      	beq.n	800326e <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto("%d", Temperatura);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003244:	461a      	mov	r2, r3
 8003246:	491d      	ldr	r1, [pc, #116]	@ (80032bc <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003248:	f7ff f9f6 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3348      	adds	r3, #72	@ 0x48
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4610      	mov	r0, r2
 8003260:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800327a:	429a      	cmp	r2, r3
 800327c:	d01a      	beq.n	80032b4 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto("Aire: %d", VelocidadAire);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800328a:	461a      	mov	r2, r3
 800328c:	490c      	ldr	r1, [pc, #48]	@ (80032c0 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 800328e:	f7ff f9d3 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3348      	adds	r3, #72	@ 0x48
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4610      	mov	r0, r2
 80032a6:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	0800c108 	.word	0x0800c108
 80032c0:	0800c10c 	.word	0x0800c10c

080032c4 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80032d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032d6:	da06      	bge.n	80032e6 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 80032f0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80032f4:	f7ff bfe6 	b.w	80032c4 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

080032f8 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003306:	2b00      	cmp	r3, #0
 8003308:	dd06      	ble.n	8003318 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8003322:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003326:	f7ff bfe7 	b.w	80032f8 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

0800332c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af04      	add	r7, sp, #16
 8003332:	6078      	str	r0, [r7, #4]
	//hay que guarar la informacion
 	uint16_t datos_w[2];

 	datos_w[0]=Temperatura;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800333a:	b29b      	uxth	r3, r3
 800333c:	81bb      	strh	r3, [r7, #12]
 	datos_w[1]=VelocidadAire;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003344:	b29b      	uxth	r3, r3
 8003346:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_w,4,HAL_MAX_DELAY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800334e:	b29a      	uxth	r2, r3
 8003350:	f04f 33ff 	mov.w	r3, #4294967295
 8003354:	9302      	str	r3, [sp, #8]
 8003356:	2304      	movs	r3, #4
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	f107 030c 	add.w	r3, r7, #12
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2301      	movs	r3, #1
 8003362:	21a0      	movs	r1, #160	@ 0xa0
 8003364:	4804      	ldr	r0, [pc, #16]	@ (8003378 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x4c>)
 8003366:	f004 fdd7 	bl	8007f18 <HAL_I2C_Mem_Write>
	 ManejadorPantallas.MuestraMenuPrincipal();
 800336a:	4804      	ldr	r0, [pc, #16]	@ (800337c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x50>)
 800336c:	f000 f885 	bl	800347a <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000254 	.word	0x20000254
 800337c:	200001f8 	.word	0x200001f8

08003380 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8003380:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003384:	f7ff bfd2 	b.w	800332c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>

08003388 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonDosClickEvent()
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003390:	4803      	ldr	r0, [pc, #12]	@ (80033a0 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv+0x18>)
 8003392:	f000 f872 	bl	800347a <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200001f8 	.word	0x200001f8

080033a4 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 80033a4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80033a8:	f7ff bfee 	b.w	8003388 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>

080033ac <_ZN19CManejadorPantallasC1Ev>:
#include "GUI/PantallaManual/CPantallaManual.hpp"
#include <GUI/PantallaMenuPrincipal/CMenuPrincipal.h>
#include <stdio.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>

CManejadorPantallas::CManejadorPantallas()
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <_ZN19CManejadorPantallasC1Ev+0x38>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub
}
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	0800c594 	.word	0x0800c594

080033e8 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	0800c594 	.word	0x0800c594

08003408 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
}
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffe9 	bl	80033e8 <_ZN19CManejadorPantallasD1Ev>
 8003416:	2128      	movs	r1, #40	@ 0x28
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f005 ffa8 	bl	800936e <_ZdlPvj>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 8003442:	b590      	push	{r4, r7, lr}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 8003452:	20e8      	movs	r0, #232	@ 0xe8
 8003454:	f005 ff8d 	bl	8009372 <_Znwj>
 8003458:	4603      	mov	r3, r0
 800345a:	461c      	mov	r4, r3
 800345c:	4620      	mov	r0, r4
 800345e:	f000 fd33 	bl	8003ec8 <_ZN15CPantallaManualC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611c      	str	r4, [r3, #16]
	AsignaPantallaActual(pantallaManual);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f843 	bl	80034f8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}

0800347a <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 800347a:	b590      	push	{r4, r7, lr}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 800348a:	20c0      	movs	r0, #192	@ 0xc0
 800348c:	f005 ff71 	bl	8009372 <_Znwj>
 8003490:	4603      	mov	r3, r0
 8003492:	461c      	mov	r4, r3
 8003494:	4620      	mov	r0, r4
 8003496:	f001 f931 	bl	80046fc <_ZN14CMenuPrincipalC1Ev>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(menuPrincipal);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f827 	bl	80034f8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}

080034b2 <_ZN19CManejadorPantallas16RefrescaPantallaEv>:

void CManejadorPantallas::RefrescaPantalla()
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
	if(CambioPantalla==true)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d108      	bne.n	80034d6 <_ZN19CManejadorPantallas16RefrescaPantallaEv+0x24>
		PantallaActual->Show();
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3348      	adds	r3, #72	@ 0x48
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4610      	mov	r0, r2
 80034d4:	4798      	blx	r3
	PantallaActual->Refresca();
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3354      	adds	r3, #84	@ 0x54
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4610      	mov	r0, r2
 80034e6:	4798      	blx	r3
	CambioPantalla=false;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	if(PantallaActual!=NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase+0x24>
		PantallaActual->Ocultar();
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3360      	adds	r3, #96	@ 0x60
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4610      	mov	r0, r2
 800351a:	4798      	blx	r3
	PantallaAnterior=PantallaActual;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
	PantallaActual=pantalla;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	609a      	str	r2, [r3, #8]
	PantallaActual->SetEstacion(Estacion);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6898      	ldr	r0, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3358      	adds	r3, #88	@ 0x58
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6852      	ldr	r2, [r2, #4]
 800353c:	4611      	mov	r1, r2
 800353e:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6898      	ldr	r0, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	335c      	adds	r3, #92	@ 0x5c
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6992      	ldr	r2, [r2, #24]
 8003552:	4611      	mov	r1, r2
 8003554:	4798      	blx	r3
	CambioPantalla=true;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:
void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 8003592:	20e0      	movs	r0, #224	@ 0xe0
 8003594:	f005 feed 	bl	8009372 <_Znwj>
 8003598:	4603      	mov	r3, r0
 800359a:	461c      	mov	r4, r3
 800359c:	4620      	mov	r0, r4
 800359e:	f7ff fc1f 	bl	8002de0 <_ZN26CConfigurarPantallaMemoriaC1Ev>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	61dc      	str	r4, [r3, #28]
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	336c      	adds	r3, #108	@ 0x6c
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6839      	ldr	r1, [r7, #0]
 80035b6:	4610      	mov	r0, r2
 80035b8:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff99 	bl	80034f8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}

080035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 80035ce:	b590      	push	{r4, r7, lr}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x26>
		PantallaMemoria=new CPantallaMemoria();
 80035e0:	20f0      	movs	r0, #240	@ 0xf0
 80035e2:	f005 fec6 	bl	8009372 <_Znwj>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461c      	mov	r4, r3
 80035ea:	4620      	mov	r0, r4
 80035ec:	f001 f83c 	bl	8004668 <_ZN16CPantallaMemoriaC1Ev>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	621c      	str	r4, [r3, #32]
	PantallaMemoria->SetMemoria(memoria);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f870 	bl	80046e0 <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff76 	bl	80034f8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bd90      	pop	{r4, r7, pc}

08003614 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv>:
void CManejadorPantallas::MuestraPantallaAnterior()
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	if(PantallaAnterior==NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv+0x1e>
		return;
	AsignaPantallaActual(PantallaAnterior);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff64 	bl	80034f8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
 8003630:	e000      	b.n	8003634 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv+0x20>
		return;
 8003632:	bf00      	nop
}
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	4a04      	ldr	r2, [pc, #16]	@ (8003658 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	0800c5a4 	.word	0x0800c5a4

0800365c <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	0800c5a4 	.word	0x0800c5a4

0800367c <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
}
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ffe9 	bl	800365c <_ZN20CManejadorEventoMenuD1Ev>
 800368a:	2104      	movs	r1, #4
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f005 fe6e 	bl	800936e <_ZdlPvj>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]

}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	f7ff fab1 	bl	8002c3c <_ZN14CRectanguloTftC1Eiiiiiii>
 80036da:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <_ZN5CMenuC1Eiiiiiii+0x5c>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2219      	movs	r2, #25
 80036e4:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f6:	3305      	adds	r3, #5
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	fb92 f2f3 	sdiv	r2, r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	0800c5b8 	.word	0x0800c5b8

08003710 <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <_ZN5CMenuD1Ev+0x20>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fa69 	bl	8002bf8 <_ZN14CRectanguloTftD1Ev>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	0800c5b8 	.word	0x0800c5b8

08003734 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
}
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ffe7 	bl	8003710 <_ZN5CMenuD1Ev>
 8003742:	2180      	movs	r1, #128	@ 0x80
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f005 fe12 	bl	800936e <_ZdlPvj>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	int y;
	CRectanguloTft::Show();
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fa9e 	bl	8002ca0 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003768:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 800376a:	e01c      	b.n	80037a6 <_ZN5CMenu4ShowEv+0x52>
	{
		y=tmp->DamePosicionY()+tmp->DameAltura();
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fb3c 	bl	8003dea <_ZN9CMenuItem13DamePosicionYEv>
 8003772:	4604      	mov	r4, r0
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb46 	bl	8003e06 <_ZN9CMenuItem10DameAlturaEv>
 800377a:	4603      	mov	r3, r0
 800377c:	4423      	add	r3, r4
 800377e:	60bb      	str	r3, [r7, #8]
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8c3 	bl	800390e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <_ZN5CMenu4ShowEv+0x5a>
		{
			return;
		}
		tmp->Show();
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fa8e 	bl	8003cba <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fb18 	bl	8003dd4 <_ZN9CMenuItem13DameSiguienteEv>
 80037a4:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1df      	bne.n	800376c <_ZN5CMenu4ShowEv+0x18>
 80037ac:	e000      	b.n	80037b0 <_ZN5CMenu4ShowEv+0x5c>
			return;
 80037ae:	bf00      	nop
	}
}
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}

080037b6 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 80037e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e8:	b091      	sub	sp, #68	@ 0x44
 80037ea:	af08      	add	r7, sp, #32
 80037ec:	6178      	str	r0, [r7, #20]
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	60fa      	str	r2, [r7, #12]
 80037f2:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 80037f4:	20a4      	movs	r0, #164	@ 0xa4
 80037f6:	f005 fdbc 	bl	8009372 <_Znwj>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461c      	mov	r4, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	699d      	ldr	r5, [r3, #24]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	69de      	ldr	r6, [r3, #28]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003814:	6979      	ldr	r1, [r7, #20]
 8003816:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800381c:	9006      	str	r0, [sp, #24]
 800381e:	2000      	movs	r0, #0
 8003820:	9005      	str	r0, [sp, #20]
 8003822:	2003      	movs	r0, #3
 8003824:	9004      	str	r0, [sp, #16]
 8003826:	9103      	str	r1, [sp, #12]
 8003828:	6939      	ldr	r1, [r7, #16]
 800382a:	9102      	str	r1, [sp, #8]
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4632      	mov	r2, r6
 8003834:	4629      	mov	r1, r5
 8003836:	4620      	mov	r0, r4
 8003838:	f7fe fec4 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800383c:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 800383e:	2028      	movs	r0, #40	@ 0x28
 8003840:	f005 fd97 	bl	8009372 <_Znwj>
 8003844:	4603      	mov	r3, r0
 8003846:	461c      	mov	r4, r3
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	4620      	mov	r0, r4
 8003850:	f000 f9d8 	bl	8003c04 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8003854:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	4603      	mov	r3, r0
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	f000 fa5c 	bl	8003d28 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 8003870:	69bb      	ldr	r3, [r7, #24]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800387a <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff ffa9 	bl	80037e6 <_ZN5CMenu8CreaItemEPcib>
 8003894:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	2b00      	cmp	r3, #0
 800389c:	d111      	bne.n	80038c2 <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa54 	bl	8003d58 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 80038c0:	e00e      	b.n	80038e0 <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f9dd 	bl	8003c88 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	4619      	mov	r1, r3
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f806 	bl	80038e6 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f911 	bl	8003b02 <_ZN5CMenu14CalculaPaginasEv>
}
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:

void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	3305      	adds	r3, #5
 80038fc:	4619      	mov	r1, r3
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f000 fa39 	bl	8003d76 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003904:	e000      	b.n	8003908 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 8003906:	bf00      	nop
}
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 800390e:	b590      	push	{r4, r7, lr}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 8003918:	6838      	ldr	r0, [r7, #0]
 800391a:	f000 fa66 	bl	8003dea <_ZN9CMenuItem13DamePosicionYEv>
 800391e:	4604      	mov	r4, r0
 8003920:	6838      	ldr	r0, [r7, #0]
 8003922:	f000 fa70 	bl	8003e06 <_ZN9CMenuItem10DameAlturaEv>
 8003926:	4603      	mov	r3, r0
 8003928:	4423      	add	r3, r4
 800392a:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	4413      	add	r3, r2
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	429a      	cmp	r2, r3
 800393a:	dd01      	ble.n	8003940 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 8003940:	2301      	movs	r3, #1
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}

0800394a <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d03f      	beq.n	80039da <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 8003960:	e037      	b.n	80039d2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa5d 	bl	8003e22 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02d      	beq.n	80039ca <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa30 	bl	8003dd4 <_ZN9CMenuItem13DameSiguienteEv>
 8003974:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d030      	beq.n	80039de <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 800397c:	2100      	movs	r1, #0
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f9ea 	bl	8003d58 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8003984:	2101      	movs	r1, #1
 8003986:	68b8      	ldr	r0, [r7, #8]
 8003988:	f000 f9e6 	bl	8003d58 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ffba 	bl	800390e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f98a 	bl	8003cba <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 80039a6:	68b8      	ldr	r0, [r7, #8]
 80039a8:	f000 f987 	bl	8003cba <_ZN9CMenuItem4ShowEv>
				return;
 80039ac:	e018      	b.n	80039e0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff98 	bl	80038e6 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3348      	adds	r3, #72	@ 0x48
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
				return;
 80039c8:	e00a      	b.n	80039e0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fa02 	bl	8003dd4 <_ZN9CMenuItem13DameSiguienteEv>
 80039d0:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1c4      	bne.n	8003962 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 80039d8:	e002      	b.n	80039e0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 80039de:	bf00      	nop
	}

}
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d05c      	beq.n	8003ab0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 80039fc:	e054      	b.n	8003aa8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f000 fa0f 	bl	8003e22 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d04a      	beq.n	8003aa0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 8003a0a:	6978      	ldr	r0, [r7, #20]
 8003a0c:	f000 fa15 	bl	8003e3a <_ZN9CMenuItem12DameAnteriorEv>
 8003a10:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d04d      	beq.n	8003ab4 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f000 f99c 	bl	8003d58 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 8003a20:	2101      	movs	r1, #1
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f998 	bl	8003d58 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8ba 	bl	8003baa <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8003a46:	6978      	ldr	r0, [r7, #20]
 8003a48:	f000 f937 	bl	8003cba <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f934 	bl	8003cba <_ZN9CMenuItem4ShowEv>
				return;
 8003a52:	e030      	b.n	8003ab6 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a58:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 8003a5a:	e00b      	b.n	8003a74 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f000 f9ec 	bl	8003e3a <_ZN9CMenuItem12DameAnteriorEv>
 8003a62:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	dced      	bgt.n	8003a5c <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8003a80:	e000      	b.n	8003a84 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8003a82:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff2d 	bl	80038e6 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3348      	adds	r3, #72	@ 0x48
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
				return;
 8003a9e:	e00a      	b.n	8003ab6 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 8003aa0:	6978      	ldr	r0, [r7, #20]
 8003aa2:	f000 f9ca 	bl	8003e3a <_ZN9CMenuItem12DameAnteriorEv>
 8003aa6:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1a7      	bne.n	80039fe <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8003aae:	e002      	b.n	8003ab6 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8003ab4:	bf00      	nop
	}

}
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 8003abc:	b5b0      	push	{r4, r5, r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d014      	beq.n	8003af6 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	681c      	ldr	r4, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f9b2 	bl	8003e50 <_ZN9CMenuItem17DameIdentificadorEv>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4619      	mov	r1, r3
 8003af0:	4628      	mov	r0, r5
 8003af2:	47a0      	blx	r4
 8003af4:	e002      	b.n	8003afc <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003afa:	bf00      	nop
}
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bdb0      	pop	{r4, r5, r7, pc}

08003b02 <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f833 	bl	8003b76 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	3314      	adds	r3, #20
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003b2e:	e01a      	b.n	8003b66 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b3a:	fb01 f202 	mul.w	r2, r1, r2
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3301      	adds	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f938 	bl	8003dd4 <_ZN9CMenuItem13DameSiguienteEv>
 8003b64:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e1      	bne.n	8003b30 <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e009      	b.n	8003b98 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	ddf2      	ble.n	8003b84 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e00d      	b.n	8003bd6 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d101      	bne.n	8003bd0 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e006      	b.n	8003bde <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b09      	cmp	r3, #9
 8003bda:	ddee      	ble.n	8003bba <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8003bdc:	2300      	movs	r3, #0

}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
	...

08003c04 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	70fb      	strb	r3, [r7, #3]
 8003c12:	4a0c      	ldr	r2, [pc, #48]	@ (8003c44 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x40>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	0800c614 	.word	0x0800c614

08003c48 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <_ZN9CMenuItemD1Ev+0x1c>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	0800c614 	.word	0x0800c614

08003c68 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
}
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ffe9 	bl	8003c48 <_ZN9CMenuItemD1Ev>
 8003c76:	2128      	movs	r1, #40	@ 0x28
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f005 fb78 	bl	800936e <_ZdlPvj>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]
		return;
 8003ca6:	e005      	b.n	8003cb4 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ffea 	bl	8003c88 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7fe fdf3 	bl	80028c2 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7fe fe36 	bl	8002958 <_ZN12CEtiquetaTft12SetBackColorEi>
 8003cec:	e00f      	b.n	8003d0e <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe fde2 	bl	80028c2 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7fe fe25 	bl	8002958 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3348      	adds	r3, #72	@ 0x48
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fff8 	bl	8002d7a <_ZN14CRectanguloTft13DamePosicionXEv>
 8003d8a:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	334c      	adds	r3, #76	@ 0x4c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	4798      	blx	r3
	if(Siguiente==NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fff9 	bl	8002da6 <_ZN14CRectanguloTft8DameAltoEv>
 8003db4:	4602      	mov	r2, r0
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	3305      	adds	r3, #5
 8003dbc:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ffd6 	bl	8003d76 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003dca:	e000      	b.n	8003dce <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8003dcc:	bf00      	nop
}
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe ffca 	bl	8002d90 <_ZN14CRectanguloTft13DamePosicionYEv>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe ffc7 	bl	8002da6 <_ZN14CRectanguloTft8DameAltoEv>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	return Anterior;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	return Identificador;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
	...

08003e68 <_ZN15CPantallaManualD1Ev>:
#include "Uart/Uart.h"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	4a07      	ldr	r2, [pc, #28]	@ (8003e90 <_ZN15CPantallaManualD1Ev+0x28>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	4a07      	ldr	r2, [pc, #28]	@ (8003e94 <_ZN15CPantallaManualD1Ev+0x2c>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fd78 	bl	8002974 <_ZN13CPantallaBaseD1Ev>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	0800c624 	.word	0x0800c624
 8003e94:	0800c6b8 	.word	0x0800c6b8

08003e98 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelAire;
	CEtiquetaTft *LabelEstado;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8003e98:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003e9c:	f7ff bfe4 	b.w	8003e68 <_ZN15CPantallaManualD1Ev>

08003ea0 <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
}
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ffdd 	bl	8003e68 <_ZN15CPantallaManualD1Ev>
 8003eae:	21e8      	movs	r1, #232	@ 0xe8
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f005 fa5c 	bl	800936e <_ZdlPvj>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_ZThn48_N15CPantallaManualD0Ev>:
 8003ec0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003ec4:	f7ff bfec 	b.w	8003ea0 <_ZN15CPantallaManualD0Ev>

08003ec8 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b08d      	sub	sp, #52	@ 0x34
 8003ecc:	af08      	add	r7, sp, #32
 8003ece:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: Manual")
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a68      	ldr	r2, [pc, #416]	@ (8004074 <_ZN15CPantallaManualC1Ev+0x1ac>)
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fd80 	bl	80029dc <_ZN13CPantallaBaseC1EiPc>
 8003edc:	4a66      	ldr	r2, [pc, #408]	@ (8004078 <_ZN15CPantallaManualC1Ev+0x1b0>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	4a66      	ldr	r2, [pc, #408]	@ (800407c <_ZN15CPantallaManualC1Ev+0x1b4>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003f48:	20a4      	movs	r0, #164	@ 0xa4
 8003f4a:	f005 fa12 	bl	8009372 <_Znwj>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461c      	mov	r4, r3
 8003f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f56:	9306      	str	r3, [sp, #24]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	4b46      	ldr	r3, [pc, #280]	@ (8004080 <_ZN15CPantallaManualC1Ev+0x1b8>)
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2314      	movs	r3, #20
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2332      	movs	r3, #50	@ 0x32
 8003f74:	2223      	movs	r2, #35	@ 0x23
 8003f76:	2105      	movs	r1, #5
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7fe fb23 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	int centroX = DameCentroX();
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe ff18 	bl	8002dbc <_ZN14CRectanguloTft11DameCentroXEv>
 8003f8c:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8003f8e:	20a4      	movs	r0, #164	@ 0xa4
 8003f90:	f005 f9ef 	bl	8009372 <_Znwj>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461c      	mov	r4, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8003f9e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003fa2:	9306      	str	r3, [sp, #24]
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	9305      	str	r3, [sp, #20]
 8003fa8:	2303      	movs	r3, #3
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9303      	str	r3, [sp, #12]
 8003fb0:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <_ZN15CPantallaManualC1Ev+0x1bc>)
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	231e      	movs	r3, #30
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2396      	movs	r3, #150	@ 0x96
 8003fc0:	2241      	movs	r2, #65	@ 0x41
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7fe fafe 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelTemperaturas->SetSeparacion(5, 5);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fd4:	2205      	movs	r2, #5
 8003fd6:	2105      	movs	r1, #5
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fc5f 	bl	800289c <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8003fde:	20a4      	movs	r0, #164	@ 0xa4
 8003fe0:	f005 f9c7 	bl	8009372 <_Znwj>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461c      	mov	r4, r3
 8003fe8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003fec:	9306      	str	r3, [sp, #24]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9305      	str	r3, [sp, #20]
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	9304      	str	r3, [sp, #16]
 8003ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ffa:	9303      	str	r3, [sp, #12]
 8003ffc:	4b22      	ldr	r3, [pc, #136]	@ (8004088 <_ZN15CPantallaManualC1Ev+0x1c0>)
 8003ffe:	9302      	str	r3, [sp, #8]
 8004000:	2300      	movs	r3, #0
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	231e      	movs	r3, #30
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	23c8      	movs	r3, #200	@ 0xc8
 800400a:	2269      	movs	r2, #105	@ 0x69
 800400c:	2105      	movs	r1, #5
 800400e:	4620      	mov	r0, r4
 8004010:	f7fe fad8 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 800401a:	20a4      	movs	r0, #164	@ 0xa4
 800401c:	f005 f9a9 	bl	8009372 <_Znwj>
 8004020:	4603      	mov	r3, r0
 8004022:	461c      	mov	r4, r3
 8004024:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004028:	9306      	str	r3, [sp, #24]
 800402a:	2300      	movs	r3, #0
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	2303      	movs	r3, #3
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004036:	9303      	str	r3, [sp, #12]
 8004038:	4b14      	ldr	r3, [pc, #80]	@ (800408c <_ZN15CPantallaManualC1Ev+0x1c4>)
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	2300      	movs	r3, #0
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2323      	movs	r3, #35	@ 0x23
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004048:	2291      	movs	r2, #145	@ 0x91
 800404a:	2105      	movs	r1, #5
 800404c:	4620      	mov	r0, r4
 800404e:	f7fe fab9 	bl	80025c4 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800405e:	2205      	movs	r2, #5
 8004060:	210f      	movs	r1, #15
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fc1a 	bl	800289c <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	bf00      	nop
 8004074:	0800c118 	.word	0x0800c118
 8004078:	0800c624 	.word	0x0800c624
 800407c:	0800c6b8 	.word	0x0800c6b8
 8004080:	0800c128 	.word	0x0800c128
 8004084:	0800c134 	.word	0x0800c134
 8004088:	0800c13c 	.word	0x0800c13c
 800408c:	0800c148 	.word	0x0800c148

08004090 <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d10e      	bne.n	80040d0 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3364      	adds	r3, #100	@ 0x64
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4610      	mov	r0, r2
 80040be:	4798      	blx	r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d143      	bne.n	8004158 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	if (EstadoBoquilla == 1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d115      	bne.n	8004112 <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040ec:	211f      	movs	r1, #31
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fe36 	bl	8002d60 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fbe0 	bl	80028c2 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004108:	4915      	ldr	r1, [pc, #84]	@ (8004160 <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fa94 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
 8004110:	e016      	b.n	8004140 <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004118:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fe1f 	bl	8002d60 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004128:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fbc8 	bl	80028c2 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004138:	490a      	ldr	r1, [pc, #40]	@ (8004164 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fa7c 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3348      	adds	r3, #72	@ 0x48
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4610      	mov	r0, r2
 8004154:	4798      	blx	r3
 8004156:	e000      	b.n	800415a <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8004158:	bf00      	nop
}
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	0800c158 	.word	0x0800c158
 8004164:	0800c148 	.word	0x0800c148

08004168 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3310      	adds	r3, #16
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4610      	mov	r0, r2
 8004184:	4798      	blx	r3
 8004186:	4602      	mov	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaReal();
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4610      	mov	r0, r2
 80041a2:	4798      	blx	r3
 80041a4:	4603      	mov	r3, r0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc ff42 	bl	8001030 <__aeabi_f2iz>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire = ManejadorControles->GetNivelAire();
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fbed 	bl	800599a <_ZN19CManejadorControles12GetNivelAireEv>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	EstadoBoquilla=Estacion->GetEstado();
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	331c      	adds	r3, #28
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4610      	mov	r0, r2
 80041dc:	4798      	blx	r3
 80041de:	4602      	mov	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11e      	bne.n	8004240 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x50>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura && EsVisible()==true )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800420e:	429a      	cmp	r2, r3
 8004210:	d113      	bne.n	800423a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800421e:	429a      	cmp	r2, r3
 8004220:	d10b      	bne.n	800423a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3364      	adds	r3, #100	@ 0x64
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4610      	mov	r0, r2
 800422e:	4798      	blx	r3
 8004230:	4603      	mov	r3, r0
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4c>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d123      	bne.n	8004288 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x98>
			return;
	}
	TemperaturaAnterior=Temperatura;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	SetTemperaturaAnterior=SetTemperatura;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800426a:	4909      	ldr	r1, [pc, #36]	@ (8004290 <_ZN15CPantallaManual19MuestraTemperaturasEb+0xa0>)
 800426c:	f7fe f9e4 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3348      	adds	r3, #72	@ 0x48
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4610      	mov	r0, r2
 8004284:	4798      	blx	r3
 8004286:	e000      	b.n	800428a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x9a>
			return;
 8004288:	bf00      	nop
}
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	0800c168 	.word	0x0800c168

08004294 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Estacion->SetNivelAire(NivelAire);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 80042be:	4611      	mov	r1, r2
 80042c0:	4798      	blx	r3
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
private:
	void MuestraEstado(bool forrzar);
	void MuestraNivelAire(bool forrzar);
	void LeeDatosEstacion();
	void MuestraTemperaturas(bool forrzar);
	void OnNivelAireEvent(int aire);
 80042ca:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80042ce:	f7ff bfe1 	b.w	8004294 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

080042d4 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d10b      	bne.n	800430e <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3364      	adds	r3, #100	@ 0x64
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
 8004304:	4603      	mov	r3, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d129      	bne.n	8004368 <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Estacion->SetNivelAire(NivelAire);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8004338:	4611      	mov	r1, r2
 800433a:	4798      	blx	r3
	LabelAire->SetTexto("Aire: %d", NivelAire);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004348:	461a      	mov	r2, r3
 800434a:	4909      	ldr	r1, [pc, #36]	@ (8004370 <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 800434c:	f7fe f974 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3348      	adds	r3, #72	@ 0x48
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4610      	mov	r0, r2
 8004364:	4798      	blx	r3
 8004366:	e000      	b.n	800436a <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8004368:	bf00      	nop

}
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	0800c170 	.word	0x0800c170

08004374 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 8004390:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004394:	f7ff bfee 	b.w	8004374 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08004398 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3320      	adds	r3, #32
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4610      	mov	r0, r2
 80043b4:	4798      	blx	r3
	TemperaturaGuardada=false;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:
	void MuestraInformacion(bool forzar);

	//eventos del Encoder
	virtual void OnPerillaIncremento();
 80043c6:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80043ca:	f7ff bfe5 	b.w	8004398 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

080043ce <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3324      	adds	r3, #36	@ 0x24
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4610      	mov	r0, r2
 80043ea:	4798      	blx	r3
	TemperaturaGuardada=false;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80043fc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004400:	f7ff bfe5 	b.w	80043ce <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08004404 <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <_ZN15CPantallaManual8RefrescaEv+0x18>
		GuardaTemperatura();
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f83e 	bl	8004498 <_ZN15CPantallaManual17GuardaTemperaturaEv>
	MuestraInformacion(false);
 800441c:	2100      	movs	r1, #0
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f816 	bl	8004450 <_ZN15CPantallaManual18MuestraInformacionEb>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>:
 void CPantallaManual::OnBotonPerillaClickEvent()
 {
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004434:	4803      	ldr	r0, [pc, #12]	@ (8004444 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv+0x18>)
 8004436:	f7ff f820 	bl	800347a <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200001f8 	.word	0x200001f8

08004448 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8004448:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800444c:	f7ff bfee 	b.w	800442c <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>

08004450 <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe83 	bl	8004168 <_ZN15CPantallaManual16LeeDatosEstacionEv>
		MuestraTemperaturas(forzar);
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff fec2 	bl	80041f0 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff fe0d 	bl	8004090 <_ZN15CPantallaManual13MuestraEstadoEb>
		MuestraNivelAire(forzar);
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ff2a 	bl	80042d4 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3368      	adds	r3, #104	@ 0x68
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2101      	movs	r1, #1
 800448c:	4610      	mov	r0, r2
 800448e:	4798      	blx	r3

 }
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af04      	add	r7, sp, #16
 800449e:	6078      	str	r0, [r7, #4]
 	uint8_t temperatura=Estacion->GetTemperatura();
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3310      	adds	r3, #16
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4610      	mov	r0, r2
 80044b4:	4798      	blx	r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	74fb      	strb	r3, [r7, #19]
 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 80044bc:	f002 ff52 	bl	8007364 <HAL_GetTick>
 80044c0:	4603      	mov	r3, r0
 80044c2:	617b      	str	r3, [r7, #20]
 	if(t>tiempoescritura)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	dd17      	ble.n	8004500 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x68>
 	{

 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY);
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	9302      	str	r3, [sp, #8]
 80044d6:	2301      	movs	r3, #1
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	f107 0313 	add.w	r3, r7, #19
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2301      	movs	r3, #1
 80044e2:	2200      	movs	r2, #0
 80044e4:	21a0      	movs	r1, #160	@ 0xa0
 80044e6:	4808      	ldr	r0, [pc, #32]	@ (8004508 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x70>)
 80044e8:	f003 fd16 	bl	8007f18 <HAL_I2C_Mem_Write>
 		TemperaturaGuardada=true;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 		tiempoescritura=t+1000;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 	}

 }
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000254 	.word	0x20000254

0800450c <_ZN15CPantallaManual4ShowEv>:
 void CPantallaManual::Show()
 {
 800450c:	b580      	push	{r7, lr}
 800450e:	b094      	sub	sp, #80	@ 0x50
 8004510:	af04      	add	r7, sp, #16
 8004512:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fad2 	bl	8002ac0 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3348      	adds	r3, #72	@ 0x48
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3

 	uint8_t temperatura;
 	uint8_t datos_w[10];
 	uint8_t datos_r[10];
 	char buf_tx[30];
 	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY)==HAL_OK)
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	9302      	str	r3, [sp, #8]
 8004538:	2301      	movs	r3, #1
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2301      	movs	r3, #1
 8004544:	2200      	movs	r2, #0
 8004546:	21a0      	movs	r1, #160	@ 0xa0
 8004548:	4813      	ldr	r0, [pc, #76]	@ (8004598 <_ZN15CPantallaManual4ShowEv+0x8c>)
 800454a:	f003 fd75 	bl	8008038 <HAL_I2C_Mem_Read>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d010      	beq.n	8004580 <_ZN15CPantallaManual4ShowEv+0x74>
 	  {
 		 	if(temperatura>=0 && temperatura<=500)
 		 	{
 		 		Estacion->SetTemperatura(temperatura);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004574:	4610      	mov	r0, r2
 8004576:	4798      	blx	r3
 		 	}
 		 	TemperaturaGuardada=true;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 	  }
 	LeeDatosEstacion();
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fdf1 	bl	8004168 <_ZN15CPantallaManual16LeeDatosEstacionEv>
 	MuestraInformacion(true);
 8004586:	2101      	movs	r1, #1
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff61 	bl	8004450 <_ZN15CPantallaManual18MuestraInformacionEb>
 }
 800458e:	bf00      	nop
 8004590:	3740      	adds	r7, #64	@ 0x40
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000254 	.word	0x20000254

0800459c <_ZN15CPantallaManual21OnBotonTresClickEventEv>:
void CPantallaManual::OnBotonTresClickEvent()
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 80045a4:	2103      	movs	r1, #3
 80045a6:	4803      	ldr	r0, [pc, #12]	@ (80045b4 <_ZN15CPantallaManual21OnBotonTresClickEventEv+0x18>)
 80045a8:	f7ff f811 	bl	80035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	200001f8 	.word	0x200001f8

080045b8 <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 80045b8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80045bc:	f7ff bfee 	b.w	800459c <_ZN15CPantallaManual21OnBotonTresClickEventEv>

080045c0 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>:
void CPantallaManual::OnBotonUnoClickEvent()
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 80045c8:	2101      	movs	r1, #1
 80045ca:	4803      	ldr	r0, [pc, #12]	@ (80045d8 <_ZN15CPantallaManual20OnBotonUnoClickEventEv+0x18>)
 80045cc:	f7fe ffff 	bl	80035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200001f8 	.word	0x200001f8

080045dc <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 80045dc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80045e0:	f7ff bfee 	b.w	80045c0 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>

080045e4 <_ZN15CPantallaManual20OnBotonDosClickEventEv>:
void CPantallaManual::OnBotonDosClickEvent()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 80045ec:	2102      	movs	r1, #2
 80045ee:	4803      	ldr	r0, [pc, #12]	@ (80045fc <_ZN15CPantallaManual20OnBotonDosClickEventEv+0x18>)
 80045f0:	f7fe ffed 	bl	80035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200001f8 	.word	0x200001f8

08004600 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8004600:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004604:	f7ff bfee 	b.w	80045e4 <_ZN15CPantallaManual20OnBotonDosClickEventEv>

08004608 <_ZN16CPantallaMemoriaD1Ev>:
#include "Uart/Uart.h"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	4a07      	ldr	r2, [pc, #28]	@ (8004630 <_ZN16CPantallaMemoriaD1Ev+0x28>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fc22 	bl	8003e68 <_ZN15CPantallaManualD1Ev>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	0800c6ec 	.word	0x0800c6ec
 8004634:	0800c780 	.word	0x0800c780

08004638 <_ZThn48_N16CPantallaMemoriaD1Ev>:
//	virtual void OnBotonCuatroClickEvent();
//	void GuardaTemperatura();
public:
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 8004638:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800463c:	f7ff bfe4 	b.w	8004608 <_ZN16CPantallaMemoriaD1Ev>

08004640 <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
}
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ffdd 	bl	8004608 <_ZN16CPantallaMemoriaD1Ev>
 800464e:	21f0      	movs	r1, #240	@ 0xf0
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f004 fe8c 	bl	800936e <_ZdlPvj>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZThn48_N16CPantallaMemoriaD0Ev>:
 8004660:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004664:	f7ff bfec 	b.w	8004640 <_ZN16CPantallaMemoriaD0Ev>

08004668 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
		CPantallaManual()
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fc28 	bl	8003ec8 <_ZN15CPantallaManualC1Ev>
 8004678:	4a05      	ldr	r2, [pc, #20]	@ (8004690 <_ZN16CPantallaMemoriaC1Ev+0x28>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	4a05      	ldr	r2, [pc, #20]	@ (8004694 <_ZN16CPantallaMemoriaC1Ev+0x2c>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	@ 0x30
//	LabelTemperaturas->SetSeparacion(5, 5);
//	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
//	LabelEstado = new CEtiquetaTft( 5, 175, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
//	LabelEstado->SetSeparacion(15, 5);

}
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	0800c6ec 	.word	0x0800c6ec
 8004694:	0800c780 	.word	0x0800c780

08004698 <_ZN16CPantallaMemoria4ShowEv>:

 }
 */

 void CPantallaMemoria::Show()
 {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	 CPantallaManual::Show();
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff32 	bl	800450c <_ZN15CPantallaManual4ShowEv>

 	//LabelTemperatura->Show();
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto("Memoria: %d", NumeroMemoria);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046b4:	461a      	mov	r2, r3
 80046b6:	4909      	ldr	r1, [pc, #36]	@ (80046dc <_ZN16CPantallaMemoria4ShowEv+0x44>)
 80046b8:	f7fd ffbe 	bl	8002638 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3348      	adds	r3, #72	@ 0x48
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4610      	mov	r0, r2
 80046d0:	4798      	blx	r3
// 		 	}
 //		 	TemperaturaGuardada=true;
 	//  }
// 	LeeDatosEstacion();
 //	MuestraInformacion(true);
 }
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	0800c17c 	.word	0x0800c17c

080046e0 <_ZN16CPantallaMemoria10SetMemoriaEi>:


void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b087      	sub	sp, #28
 8004700:	af04      	add	r7, sp, #16
 8004702:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, " Menu Principal")
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a33      	ldr	r2, [pc, #204]	@ (80047d4 <_ZN14CMenuPrincipalC1Ev+0xd8>)
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe f966 	bl	80029dc <_ZN13CPantallaBaseC1EiPc>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	33ac      	adds	r3, #172	@ 0xac
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe ff91 	bl	800363c <_ZN20CManejadorEventoMenuC1Ev>
 800471a:	4a2f      	ldr	r2, [pc, #188]	@ (80047d8 <_ZN14CMenuPrincipalC1Ev+0xdc>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	4a2e      	ldr	r2, [pc, #184]	@ (80047dc <_ZN14CMenuPrincipalC1Ev+0xe0>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
 8004726:	4a2e      	ldr	r2, [pc, #184]	@ (80047e0 <_ZN14CMenuPrincipalC1Ev+0xe4>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 800472e:	2080      	movs	r0, #128	@ 0x80
 8004730:	f004 fe1f 	bl	8009372 <_Znwj>
 8004734:	4603      	mov	r3, r0
 8004736:	461c      	mov	r4, r3
 8004738:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800473c:	9303      	str	r3, [sp, #12]
 800473e:	2301      	movs	r3, #1
 8004740:	9302      	str	r3, [sp, #8]
 8004742:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	23d2      	movs	r3, #210	@ 0xd2
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004750:	221e      	movs	r2, #30
 8004752:	2104      	movs	r1, #4
 8004754:	4620      	mov	r0, r4
 8004756:	f7fe ffab 	bl	80036b0 <_ZN5CMenuC1Eiiiiiii>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	33ac      	adds	r3, #172	@ 0xac
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7ff fa3b 	bl	8003be8 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004780:	f247 726f 	movw	r2, #30575	@ 0x776f
 8004784:	2100      	movs	r1, #0
 8004786:	f7ff f816 	bl	80037b6 <_ZN5CMenu18AsignaColoresItemsEiiii>

	Menu->AgregaItem("Conf Memoria 1", MENU_MEMORIA_1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004790:	2300      	movs	r3, #0
 8004792:	2201      	movs	r2, #1
 8004794:	4913      	ldr	r1, [pc, #76]	@ (80047e4 <_ZN14CMenuPrincipalC1Ev+0xe8>)
 8004796:	f7ff f870 	bl	800387a <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Conf Memoria 2", MENU_MEMORIA_2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80047a0:	2300      	movs	r3, #0
 80047a2:	2202      	movs	r2, #2
 80047a4:	4910      	ldr	r1, [pc, #64]	@ (80047e8 <_ZN14CMenuPrincipalC1Ev+0xec>)
 80047a6:	f7ff f868 	bl	800387a <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Conf Memoria 3", MENU_MEMORIA_3);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80047b0:	2300      	movs	r3, #0
 80047b2:	2203      	movs	r2, #3
 80047b4:	490d      	ldr	r1, [pc, #52]	@ (80047ec <_ZN14CMenuPrincipalC1Ev+0xf0>)
 80047b6:	f7ff f860 	bl	800387a <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem("Salir", MENU_SALIR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80047c0:	2300      	movs	r3, #0
 80047c2:	2200      	movs	r2, #0
 80047c4:	490a      	ldr	r1, [pc, #40]	@ (80047f0 <_ZN14CMenuPrincipalC1Ev+0xf4>)
 80047c6:	f7ff f858 	bl	800387a <_ZN5CMenu10AgregaItemEPcib>
}
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd90      	pop	{r4, r7, pc}
 80047d4:	0800c188 	.word	0x0800c188
 80047d8:	0800c7b4 	.word	0x0800c7b4
 80047dc:	0800c848 	.word	0x0800c848
 80047e0:	0800c87c 	.word	0x0800c87c
 80047e4:	0800c198 	.word	0x0800c198
 80047e8:	0800c1a8 	.word	0x0800c1a8
 80047ec:	0800c1b8 	.word	0x0800c1b8
 80047f0:	0800c1c8 	.word	0x0800c1c8

080047f4 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	4a0b      	ldr	r2, [pc, #44]	@ (800482c <_ZN14CMenuPrincipalD1Ev+0x38>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	4a0b      	ldr	r2, [pc, #44]	@ (8004830 <_ZN14CMenuPrincipalD1Ev+0x3c>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30
 8004808:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <_ZN14CMenuPrincipalD1Ev+0x40>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	33ac      	adds	r3, #172	@ 0xac
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe ff21 	bl	800365c <_ZN20CManejadorEventoMenuD1Ev>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe f8a9 	bl	8002974 <_ZN13CPantallaBaseD1Ev>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	0800c7b4 	.word	0x0800c7b4
 8004830:	0800c848 	.word	0x0800c848
 8004834:	0800c87c 	.word	0x0800c87c

08004838 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 8004838:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800483c:	f7ff bfda 	b.w	80047f4 <_ZN14CMenuPrincipalD1Ev>

08004840 <_ZThn172_N14CMenuPrincipalD1Ev>:
 8004840:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8004844:	f7ff bfd6 	b.w	80047f4 <_ZN14CMenuPrincipalD1Ev>

08004848 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
}
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ffcf 	bl	80047f4 <_ZN14CMenuPrincipalD1Ev>
 8004856:	21c0      	movs	r1, #192	@ 0xc0
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f004 fd88 	bl	800936e <_ZdlPvj>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZThn172_N14CMenuPrincipalD0Ev>:
 8004868:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800486c:	f7ff bfec 	b.w	8004848 <_ZN14CMenuPrincipalD0Ev>

08004870 <_ZThn48_N14CMenuPrincipalD0Ev>:
 8004870:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004874:	f7ff bfe8 	b.w	8004848 <_ZN14CMenuPrincipalD0Ev>

08004878 <_ZN14CMenuPrincipal4ShowEv>:

void CMenuPrincipal::Show()
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe f91c 	bl	8002ac0 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3348      	adds	r3, #72	@ 0x48
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4610      	mov	r0, r2
 800489c:	4798      	blx	r3
	SetVisible(true);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3368      	adds	r3, #104	@ 0x68
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	4610      	mov	r0, r2
 80048ac:	4798      	blx	r3
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_ZN14CMenuPrincipal8RefrescaEv>:
void CMenuPrincipal::Refresca()
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3364      	adds	r3, #100	@ 0x64
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4610      	mov	r0, r2
 80048ca:	4798      	blx	r3
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <_ZN14CMenuPrincipal8RefrescaEv+0x32>
		Show();
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3348      	adds	r3, #72	@ 0x48
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>:
void CMenuPrincipal::OnBotonCuatroClickEvent()
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80048f8:	4803      	ldr	r0, [pc, #12]	@ (8004908 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv+0x18>)
 80048fa:	f7fe fda2 	bl	8003442 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200001f8 	.word	0x200001f8

0800490c <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonCuatroClickEvent();
 800490c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004910:	f7ff bfee 	b.w	80048f0 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>

08004914 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>:
void CMenuPrincipal::OnPerillaIncremento()
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff f811 	bl	800394a <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZThn48_N14CMenuPrincipal19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8004930:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004934:	f7ff bfee 	b.w	8004914 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>

08004938 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>:
void CMenuPrincipal::OnPerillaDecremento()
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff f84d 	bl	80039e6 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZThn48_N14CMenuPrincipal19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004954:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004958:	f7ff bfee 	b.w	8004938 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>

0800495c <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEv>:
void CMenuPrincipal::OnBotonPerillaClickEvent()
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	Menu->OnClickSeleccionado();
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f8a6 	bl	8003abc <_ZN5CMenu19OnClickSeleccionadoEv>
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <_ZThn48_N14CMenuPrincipal24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8004978:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800497c:	f7ff bfee 	b.w	800495c <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEv>

08004980 <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	switch(identificador)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <_ZN14CMenuPrincipal11OnMenuEventEi+0x20>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	db0d      	blt.n	80049b2 <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	2b02      	cmp	r3, #2
 800499c:	d809      	bhi.n	80049b2 <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 800499e:	e003      	b.n	80049a8 <_ZN14CMenuPrincipal11OnMenuEventEi+0x28>
	{
	case MENU_SALIR:
		ManejadorPantallas.MuestraPantallaAnterior();
 80049a0:	4806      	ldr	r0, [pc, #24]	@ (80049bc <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 80049a2:	f7fe fe37 	bl	8003614 <_ZN19CManejadorPantallas23MuestraPantallaAnteriorEv>
		break;
 80049a6:	e004      	b.n	80049b2 <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
	case MENU_MEMORIA_1:
	case MENU_MEMORIA_2:
	case MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	4804      	ldr	r0, [pc, #16]	@ (80049bc <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 80049ac:	f7fe fde8 	bl	8003580 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 80049b0:	bf00      	nop
	}

}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200001f8 	.word	0x200001f8

080049c0 <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 80049c0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80049c4:	f7ff bfdc 	b.w	8004980 <_ZN14CMenuPrincipal11OnMenuEventEi>

080049c8 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>:

void CMenuPrincipal::OnBotonTresClickEvent()
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 80049d0:	2103      	movs	r1, #3
 80049d2:	4803      	ldr	r0, [pc, #12]	@ (80049e0 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv+0x18>)
 80049d4:	f7fe fdfb 	bl	80035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200001f8 	.word	0x200001f8

080049e4 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 80049e4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80049e8:	f7ff bfee 	b.w	80049c8 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>

080049ec <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>:
void CMenuPrincipal::OnBotonUnoClickEvent()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 80049f4:	2101      	movs	r1, #1
 80049f6:	4803      	ldr	r0, [pc, #12]	@ (8004a04 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv+0x18>)
 80049f8:	f7fe fde9 	bl	80035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	200001f8 	.word	0x200001f8

08004a08 <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8004a08:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004a0c:	f7ff bfee 	b.w	80049ec <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>

08004a10 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>:
void CMenuPrincipal::OnBotonDosClickEvent()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4803      	ldr	r0, [pc, #12]	@ (8004a28 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv+0x18>)
 8004a1c:	f7fe fdd7 	bl	80035ce <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200001f8 	.word	0x200001f8

08004a2c <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8004a2c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004a30:	f7ff bfee 	b.w	8004a10 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>

08004a34 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	80fb      	strh	r3, [r7, #6]
 8004a46:	4603      	mov	r3, r0
 8004a48:	80bb      	strh	r3, [r7, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	807b      	strh	r3, [r7, #2]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8004a68:	887a      	ldrh	r2, [r7, #2]
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc f8c4 	bl	8000bfc <__aeabi_i2f>
 8004a74:	4603      	mov	r3, r0
 8004a76:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7fc faaf 	bl	8000fe0 <__aeabi_fcmplt>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8004a92:	883a      	ldrh	r2, [r7, #0]
 8004a94:	88bb      	ldrh	r3, [r7, #4]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fc f8af 	bl	8000bfc <__aeabi_i2f>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7fc fa9a 	bl	8000fe0 <__aeabi_fcmplt>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8004abc:	887a      	ldrh	r2, [r7, #2]
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	82fb      	strh	r3, [r7, #22]
 8004ac4:	e003      	b.n	8004ace <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	887b      	ldrh	r3, [r7, #2]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8004ace:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ad0:	8afa      	ldrh	r2, [r7, #22]
 8004ad2:	88b9      	ldrh	r1, [r7, #4]
 8004ad4:	88f8      	ldrh	r0, [r7, #6]
 8004ad6:	f000 fd73 	bl	80055c0 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8004ada:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004adc:	8afa      	ldrh	r2, [r7, #22]
 8004ade:	8839      	ldrh	r1, [r7, #0]
 8004ae0:	88f8      	ldrh	r0, [r7, #6]
 8004ae2:	f000 fd6d 	bl	80055c0 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004ae6:	7cbb      	ldrb	r3, [r7, #18]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8004aec:	883a      	ldrh	r2, [r7, #0]
 8004aee:	88bb      	ldrh	r3, [r7, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	82bb      	strh	r3, [r7, #20]
 8004af4:	e003      	b.n	8004afe <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004af6:	88ba      	ldrh	r2, [r7, #4]
 8004af8:	883b      	ldrh	r3, [r7, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8004afe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b00:	8aba      	ldrh	r2, [r7, #20]
 8004b02:	88b9      	ldrh	r1, [r7, #4]
 8004b04:	88f8      	ldrh	r0, [r7, #6]
 8004b06:	f000 fda9 	bl	800565c <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8004b0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b0c:	8aba      	ldrh	r2, [r7, #20]
 8004b0e:	88b9      	ldrh	r1, [r7, #4]
 8004b10:	8878      	ldrh	r0, [r7, #2]
 8004b12:	f000 fda3 	bl	800565c <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8004b1c:	8abb      	ldrh	r3, [r7, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8004b22:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004b24:	8839      	ldrh	r1, [r7, #0]
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fc13 	bl	8005354 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}

08004b36 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004b36:	b590      	push	{r4, r7, lr}
 8004b38:	b089      	sub	sp, #36	@ 0x24
 8004b3a:	af02      	add	r7, sp, #8
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4611      	mov	r1, r2
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	80fb      	strh	r3, [r7, #6]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	80bb      	strh	r3, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
 8004b50:	4613      	mov	r3, r2
 8004b52:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	da01      	bge.n	8004b82 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8004b86:	883a      	ldrh	r2, [r7, #0]
 8004b88:	88bb      	ldrh	r3, [r7, #4]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da01      	bge.n	8004b98 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	823b      	strh	r3, [r7, #16]
 8004baa:	e005      	b.n	8004bb8 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004bb8:	7cbb      	ldrb	r3, [r7, #18]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8004bbe:	883a      	ldrh	r2, [r7, #0]
 8004bc0:	88bb      	ldrh	r3, [r7, #4]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8004bc6:	88bb      	ldrh	r3, [r7, #4]
 8004bc8:	81fb      	strh	r3, [r7, #14]
 8004bca:	e005      	b.n	8004bd8 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004bcc:	88ba      	ldrh	r2, [r7, #4]
 8004bce:	883b      	ldrh	r3, [r7, #0]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8004bd4:	883b      	ldrh	r3, [r7, #0]
 8004bd6:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8004bd8:	8abc      	ldrh	r4, [r7, #20]
 8004bda:	8afa      	ldrh	r2, [r7, #22]
 8004bdc:	89f9      	ldrh	r1, [r7, #14]
 8004bde:	8a38      	ldrh	r0, [r7, #16]
 8004be0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	4623      	mov	r3, r4
 8004be6:	f000 fc81 	bl	80054ec <_Z22ILI9341_Draw_Rectanglettttt>
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd90      	pop	{r4, r7, pc}
	...

08004bf4 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b08b      	sub	sp, #44	@ 0x2c
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	4613      	mov	r3, r2
 8004c06:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	2b1f      	cmp	r3, #31
 8004c10:	d802      	bhi.n	8004c18 <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e002      	b.n	8004c1e <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 8004c18:	7ffb      	ldrb	r3, [r7, #31]
 8004c1a:	3b20      	subs	r3, #32
 8004c1c:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	773b      	strb	r3, [r7, #28]
 8004c22:	e012      	b.n	8004c4a <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 8004c24:	7ffa      	ldrb	r2, [r7, #31]
 8004c26:	7f38      	ldrb	r0, [r7, #28]
 8004c28:	7f39      	ldrb	r1, [r7, #28]
 8004c2a:	4c3c      	ldr	r4, [pc, #240]	@ (8004d1c <_Z17ILI9341_Draw_Charciittt+0x128>)
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4423      	add	r3, r4
 8004c36:	4403      	add	r3, r0
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	f101 0320 	add.w	r3, r1, #32
 8004c3e:	443b      	add	r3, r7
 8004c40:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004c44:	7f3b      	ldrb	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	773b      	strb	r3, [r7, #28]
 8004c4a:	7f3b      	ldrb	r3, [r7, #28]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d9e9      	bls.n	8004c24 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	b298      	uxth	r0, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	b299      	uxth	r1, r3
 8004c58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	0052      	lsls	r2, r2, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	b29c      	uxth	r4, r3
 8004c6a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	4623      	mov	r3, r4
 8004c70:	f000 fc3c 	bl	80054ec <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8004c74:	2300      	movs	r3, #0
 8004c76:	777b      	strb	r3, [r7, #29]
 8004c78:	e047      	b.n	8004d0a <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	77bb      	strb	r3, [r7, #30]
 8004c7e:	e03e      	b.n	8004cfe <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 8004c80:	7f7b      	ldrb	r3, [r7, #29]
 8004c82:	3320      	adds	r3, #32
 8004c84:	443b      	add	r3, r7
 8004c86:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	7fbb      	ldrb	r3, [r7, #30]
 8004c8e:	fa42 f303 	asr.w	r3, r2, r3
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02e      	beq.n	8004cf8 <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 8004c9a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d110      	bne.n	8004cc2 <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8004ca0:	7f7b      	ldrb	r3, [r7, #29]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	b298      	uxth	r0, r3
 8004cac:	7fbb      	ldrb	r3, [r7, #30]
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	89ba      	ldrh	r2, [r7, #12]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f000 fb4a 	bl	8005354 <_Z18ILI9341_Draw_Pixelttt>
 8004cc0:	e01a      	b.n	8004cf8 <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8004cc2:	7f7b      	ldrb	r3, [r7, #29]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	b298      	uxth	r0, r3
 8004cd6:	7fbb      	ldrb	r3, [r7, #30]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b299      	uxth	r1, r3
 8004cea:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8004cec:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	f000 fbfa 	bl	80054ec <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004cf8:	7fbb      	ldrb	r3, [r7, #30]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	77bb      	strb	r3, [r7, #30]
 8004cfe:	7fbb      	ldrb	r3, [r7, #30]
 8004d00:	2b07      	cmp	r3, #7
 8004d02:	d9bd      	bls.n	8004c80 <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 8004d04:	7f7b      	ldrb	r3, [r7, #29]
 8004d06:	3301      	adds	r3, #1
 8004d08:	777b      	strb	r3, [r7, #29]
 8004d0a:	7f7b      	ldrb	r3, [r7, #29]
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	d9b4      	bls.n	8004c7a <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	@ 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	0800c888 	.word	0x0800c888

08004d20 <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	807b      	strh	r3, [r7, #2]
	while (*Text)
 8004d2e:	e016      	b.n	8004d5e <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	60fa      	str	r2, [r7, #12]
 8004d36:	7818      	ldrb	r0, [r3, #0]
 8004d38:	887a      	ldrh	r2, [r7, #2]
 8004d3a:	8bbb      	ldrh	r3, [r7, #28]
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	8b3b      	ldrh	r3, [r7, #24]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	f7ff ff54 	bl	8004bf4 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 8004d4c:	8b3a      	ldrh	r2, [r7, #24]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	461a      	mov	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]
	while (*Text)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e4      	bne.n	8004d30 <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8004d74:	f002 f88a 	bl	8006e8c <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8004d78:	f001 fc92 	bl	80066a0 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <_Z16ILI9341_SPI_Initv+0x1c>)
 8004d82:	f002 fe0d 	bl	80079a0 <HAL_GPIO_WritePin>
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40010c00 	.word	0x40010c00

08004d90 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004d9a:	1df9      	adds	r1, r7, #7
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4803      	ldr	r0, [pc, #12]	@ (8004db0 <_Z16ILI9341_SPI_Sendh+0x20>)
 8004da2:	f003 fe3b 	bl	8008a1c <HAL_SPI_Transmit>
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200003d8 	.word	0x200003d8

08004db4 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	480a      	ldr	r0, [pc, #40]	@ (8004dec <_Z21ILI9341_Write_Commandh+0x38>)
 8004dc4:	f002 fdec 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2102      	movs	r1, #2
 8004dcc:	4807      	ldr	r0, [pc, #28]	@ (8004dec <_Z21ILI9341_Write_Commandh+0x38>)
 8004dce:	f002 fde7 	bl	80079a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ffdb 	bl	8004d90 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4803      	ldr	r0, [pc, #12]	@ (8004dec <_Z21ILI9341_Write_Commandh+0x38>)
 8004de0:	f002 fdde 	bl	80079a0 <HAL_GPIO_WritePin>
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40010c00 	.word	0x40010c00

08004df0 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	480a      	ldr	r0, [pc, #40]	@ (8004e28 <_Z18ILI9341_Write_Datah+0x38>)
 8004e00:	f002 fdce 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004e04:	2200      	movs	r2, #0
 8004e06:	2101      	movs	r1, #1
 8004e08:	4807      	ldr	r0, [pc, #28]	@ (8004e28 <_Z18ILI9341_Write_Datah+0x38>)
 8004e0a:	f002 fdc9 	bl	80079a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ffbd 	bl	8004d90 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004e16:	2201      	movs	r2, #1
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4803      	ldr	r0, [pc, #12]	@ (8004e28 <_Z18ILI9341_Write_Datah+0x38>)
 8004e1c:	f002 fdc0 	bl	80079a0 <HAL_GPIO_WritePin>
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40010c00 	.word	0x40010c00

08004e2c <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	80fb      	strh	r3, [r7, #6]
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80bb      	strh	r3, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	807b      	strh	r3, [r7, #2]
 8004e46:	4613      	mov	r3, r2
 8004e48:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8004e4a:	202a      	movs	r0, #42	@ 0x2a
 8004e4c:	f7ff ffb2 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ffc9 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ffc4 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8004e68:	887b      	ldrh	r3, [r7, #2]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ffbd 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8004e76:	887b      	ldrh	r3, [r7, #2]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff ffb8 	bl	8004df0 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8004e80:	202b      	movs	r0, #43	@ 0x2b
 8004e82:	f7ff ff97 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8004e86:	88bb      	ldrh	r3, [r7, #4]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ffae 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8004e94:	88bb      	ldrh	r3, [r7, #4]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ffa9 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8004e9e:	883b      	ldrh	r3, [r7, #0]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ffa2 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8004eac:	883b      	ldrh	r3, [r7, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff9d 	bl	8004df0 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8004eb6:	202c      	movs	r0, #44	@ 0x2c
 8004eb8:	f7ff ff7c 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}

08004ec4 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2120      	movs	r1, #32
 8004ecc:	480a      	ldr	r0, [pc, #40]	@ (8004ef8 <_Z13ILI9341_Resetv+0x34>)
 8004ece:	f002 fd67 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004ed2:	20c8      	movs	r0, #200	@ 0xc8
 8004ed4:	f002 fa4c 	bl	8007370 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2101      	movs	r1, #1
 8004edc:	4806      	ldr	r0, [pc, #24]	@ (8004ef8 <_Z13ILI9341_Resetv+0x34>)
 8004ede:	f002 fd5f 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004ee2:	20c8      	movs	r0, #200	@ 0xc8
 8004ee4:	f002 fa44 	bl	8007370 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2120      	movs	r1, #32
 8004eec:	4802      	ldr	r0, [pc, #8]	@ (8004ef8 <_Z13ILI9341_Resetv+0x34>)
 8004eee:	f002 fd57 	bl	80079a0 <HAL_GPIO_WritePin>
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40010c00 	.word	0x40010c00

08004efc <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8004f0a:	2036      	movs	r0, #54	@ 0x36
 8004f0c:	f7ff ff52 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 8004f10:	2001      	movs	r0, #1
 8004f12:	f002 fa2d 	bl	8007370 <HAL_Delay>

	switch (screen_rotation)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d837      	bhi.n	8004f8c <_Z20ILI9341_Set_Rotationh+0x90>
 8004f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <_Z20ILI9341_Set_Rotationh+0x28>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f4b 	.word	0x08004f4b
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f77 	.word	0x08004f77
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8004f34:	2048      	movs	r0, #72	@ 0x48
 8004f36:	f7ff ff5b 	bl	8004df0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8004f3a:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004f3c:	22f0      	movs	r2, #240	@ 0xf0
 8004f3e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8004f40:	4b16      	ldr	r3, [pc, #88]	@ (8004f9c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004f42:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f46:	801a      	strh	r2, [r3, #0]
		break;
 8004f48:	e021      	b.n	8004f8e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8004f4a:	2028      	movs	r0, #40	@ 0x28
 8004f4c:	f7ff ff50 	bl	8004df0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8004f50:	4b11      	ldr	r3, [pc, #68]	@ (8004f98 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004f52:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f56:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8004f58:	4b10      	ldr	r3, [pc, #64]	@ (8004f9c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004f5a:	22f0      	movs	r2, #240	@ 0xf0
 8004f5c:	801a      	strh	r2, [r3, #0]
		break;
 8004f5e:	e016      	b.n	8004f8e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8004f60:	2088      	movs	r0, #136	@ 0x88
 8004f62:	f7ff ff45 	bl	8004df0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8004f66:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004f68:	22f0      	movs	r2, #240	@ 0xf0
 8004f6a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f9c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004f6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f72:	801a      	strh	r2, [r3, #0]
		break;
 8004f74:	e00b      	b.n	8004f8e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8004f76:	20e8      	movs	r0, #232	@ 0xe8
 8004f78:	f7ff ff3a 	bl	8004df0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8004f7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f82:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8004f84:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8004f86:	22f0      	movs	r2, #240	@ 0xf0
 8004f88:	801a      	strh	r2, [r3, #0]
		break;
 8004f8a:	e000      	b.n	8004f8e <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8004f8c:	bf00      	nop
	}
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000002 	.word	0x20000002
 8004f9c:	20000000 	.word	0x20000000

08004fa0 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	2120      	movs	r1, #32
 8004fa8:	4802      	ldr	r0, [pc, #8]	@ (8004fb4 <_Z14ILI9341_Enablev+0x14>)
 8004faa:	f002 fcf9 	bl	80079a0 <HAL_GPIO_WritePin>
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40010c00 	.word	0x40010c00

08004fb8 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8004fbc:	f7ff fff0 	bl	8004fa0 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8004fc0:	f7ff fed6 	bl	8004d70 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8004fc4:	f7ff ff7e 	bl	8004ec4 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f7ff fef3 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8004fce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fd2:	f002 f9cd 	bl	8007370 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8004fd6:	20cb      	movs	r0, #203	@ 0xcb
 8004fd8:	f7ff feec 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8004fdc:	2039      	movs	r0, #57	@ 0x39
 8004fde:	f7ff ff07 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8004fe2:	202c      	movs	r0, #44	@ 0x2c
 8004fe4:	f7ff ff04 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f7ff ff01 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8004fee:	2034      	movs	r0, #52	@ 0x34
 8004ff0:	f7ff fefe 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8004ff4:	2002      	movs	r0, #2
 8004ff6:	f7ff fefb 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8004ffa:	20cf      	movs	r0, #207	@ 0xcf
 8004ffc:	f7ff feda 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005000:	2000      	movs	r0, #0
 8005002:	f7ff fef5 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005006:	20c1      	movs	r0, #193	@ 0xc1
 8005008:	f7ff fef2 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 800500c:	2030      	movs	r0, #48	@ 0x30
 800500e:	f7ff feef 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8005012:	20e8      	movs	r0, #232	@ 0xe8
 8005014:	f7ff fece 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8005018:	2085      	movs	r0, #133	@ 0x85
 800501a:	f7ff fee9 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 800501e:	2000      	movs	r0, #0
 8005020:	f7ff fee6 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8005024:	2078      	movs	r0, #120	@ 0x78
 8005026:	f7ff fee3 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800502a:	20ea      	movs	r0, #234	@ 0xea
 800502c:	f7ff fec2 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005030:	2000      	movs	r0, #0
 8005032:	f7ff fedd 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005036:	2000      	movs	r0, #0
 8005038:	f7ff feda 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 800503c:	20ed      	movs	r0, #237	@ 0xed
 800503e:	f7ff feb9 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8005042:	2064      	movs	r0, #100	@ 0x64
 8005044:	f7ff fed4 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005048:	2003      	movs	r0, #3
 800504a:	f7ff fed1 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 800504e:	2012      	movs	r0, #18
 8005050:	f7ff fece 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8005054:	2081      	movs	r0, #129	@ 0x81
 8005056:	f7ff fecb 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800505a:	20f7      	movs	r0, #247	@ 0xf7
 800505c:	f7ff feaa 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8005060:	2020      	movs	r0, #32
 8005062:	f7ff fec5 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8005066:	20c0      	movs	r0, #192	@ 0xc0
 8005068:	f7ff fea4 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 800506c:	2023      	movs	r0, #35	@ 0x23
 800506e:	f7ff febf 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8005072:	20c1      	movs	r0, #193	@ 0xc1
 8005074:	f7ff fe9e 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8005078:	2010      	movs	r0, #16
 800507a:	f7ff feb9 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 800507e:	20c5      	movs	r0, #197	@ 0xc5
 8005080:	f7ff fe98 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8005084:	203e      	movs	r0, #62	@ 0x3e
 8005086:	f7ff feb3 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 800508a:	2028      	movs	r0, #40	@ 0x28
 800508c:	f7ff feb0 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8005090:	20c7      	movs	r0, #199	@ 0xc7
 8005092:	f7ff fe8f 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8005096:	2086      	movs	r0, #134	@ 0x86
 8005098:	f7ff feaa 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 800509c:	2036      	movs	r0, #54	@ 0x36
 800509e:	f7ff fe89 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 80050a2:	2048      	movs	r0, #72	@ 0x48
 80050a4:	f7ff fea4 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80050a8:	203a      	movs	r0, #58	@ 0x3a
 80050aa:	f7ff fe83 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 80050ae:	2055      	movs	r0, #85	@ 0x55
 80050b0:	f7ff fe9e 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80050b4:	20b1      	movs	r0, #177	@ 0xb1
 80050b6:	f7ff fe7d 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7ff fe98 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 80050c0:	2018      	movs	r0, #24
 80050c2:	f7ff fe95 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 80050c6:	20b6      	movs	r0, #182	@ 0xb6
 80050c8:	f7ff fe74 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 80050cc:	2008      	movs	r0, #8
 80050ce:	f7ff fe8f 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 80050d2:	2082      	movs	r0, #130	@ 0x82
 80050d4:	f7ff fe8c 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 80050d8:	2027      	movs	r0, #39	@ 0x27
 80050da:	f7ff fe89 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 80050de:	20f2      	movs	r0, #242	@ 0xf2
 80050e0:	f7ff fe68 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80050e4:	2000      	movs	r0, #0
 80050e6:	f7ff fe83 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80050ea:	2026      	movs	r0, #38	@ 0x26
 80050ec:	f7ff fe62 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7ff fe7d 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80050f6:	20e0      	movs	r0, #224	@ 0xe0
 80050f8:	f7ff fe5c 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 80050fc:	200f      	movs	r0, #15
 80050fe:	f7ff fe77 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005102:	2031      	movs	r0, #49	@ 0x31
 8005104:	f7ff fe74 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8005108:	202b      	movs	r0, #43	@ 0x2b
 800510a:	f7ff fe71 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 800510e:	200c      	movs	r0, #12
 8005110:	f7ff fe6e 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005114:	200e      	movs	r0, #14
 8005116:	f7ff fe6b 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 800511a:	2008      	movs	r0, #8
 800511c:	f7ff fe68 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8005120:	204e      	movs	r0, #78	@ 0x4e
 8005122:	f7ff fe65 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8005126:	20f1      	movs	r0, #241	@ 0xf1
 8005128:	f7ff fe62 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 800512c:	2037      	movs	r0, #55	@ 0x37
 800512e:	f7ff fe5f 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8005132:	2007      	movs	r0, #7
 8005134:	f7ff fe5c 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8005138:	2010      	movs	r0, #16
 800513a:	f7ff fe59 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 800513e:	2003      	movs	r0, #3
 8005140:	f7ff fe56 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005144:	200e      	movs	r0, #14
 8005146:	f7ff fe53 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 800514a:	2009      	movs	r0, #9
 800514c:	f7ff fe50 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005150:	2000      	movs	r0, #0
 8005152:	f7ff fe4d 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8005156:	20e1      	movs	r0, #225	@ 0xe1
 8005158:	f7ff fe2c 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 800515c:	2000      	movs	r0, #0
 800515e:	f7ff fe47 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005162:	200e      	movs	r0, #14
 8005164:	f7ff fe44 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8005168:	2014      	movs	r0, #20
 800516a:	f7ff fe41 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 800516e:	2003      	movs	r0, #3
 8005170:	f7ff fe3e 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8005174:	2011      	movs	r0, #17
 8005176:	f7ff fe3b 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 800517a:	2007      	movs	r0, #7
 800517c:	f7ff fe38 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005180:	2031      	movs	r0, #49	@ 0x31
 8005182:	f7ff fe35 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005186:	20c1      	movs	r0, #193	@ 0xc1
 8005188:	f7ff fe32 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 800518c:	2048      	movs	r0, #72	@ 0x48
 800518e:	f7ff fe2f 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8005192:	2008      	movs	r0, #8
 8005194:	f7ff fe2c 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005198:	200f      	movs	r0, #15
 800519a:	f7ff fe29 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 800519e:	200c      	movs	r0, #12
 80051a0:	f7ff fe26 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80051a4:	2031      	movs	r0, #49	@ 0x31
 80051a6:	f7ff fe23 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 80051aa:	2036      	movs	r0, #54	@ 0x36
 80051ac:	f7ff fe20 	bl	8004df0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 80051b0:	200f      	movs	r0, #15
 80051b2:	f7ff fe1d 	bl	8004df0 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80051b6:	2011      	movs	r0, #17
 80051b8:	f7ff fdfc 	bl	8004db4 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 80051bc:	2078      	movs	r0, #120	@ 0x78
 80051be:	f002 f8d7 	bl	8007370 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80051c2:	2029      	movs	r0, #41	@ 0x29
 80051c4:	f7ff fdf6 	bl	8004db4 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7ff fe97 	bl	8004efc <_Z20ILI9341_Set_Rotationh>
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80051d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051d8:	b08d      	sub	sp, #52	@ 0x34
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	6039      	str	r1, [r7, #0]
 80051e0:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 80051e2:	466b      	mov	r3, sp
 80051e4:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80051f2:	d202      	bcs.n	80051fa <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f8:	e002      	b.n	8005200 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 80051fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80051fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005200:	2201      	movs	r2, #1
 8005202:	2102      	movs	r1, #2
 8005204:	483e      	ldr	r0, [pc, #248]	@ (8005300 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005206:	f002 fbcb 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800520a:	2200      	movs	r2, #0
 800520c:	2101      	movs	r1, #1
 800520e:	483c      	ldr	r0, [pc, #240]	@ (8005300 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005210:	f002 fbc6 	bl	80079a0 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	b29b      	uxth	r3, r3
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 800521e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005220:	460b      	mov	r3, r1
 8005222:	3b01      	subs	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	2300      	movs	r3, #0
 8005228:	4688      	mov	r8, r1
 800522a:	4699      	mov	r9, r3
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005238:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005240:	2300      	movs	r3, #0
 8005242:	460c      	mov	r4, r1
 8005244:	461d      	mov	r5, r3
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	00eb      	lsls	r3, r5, #3
 8005250:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005254:	00e2      	lsls	r2, r4, #3
 8005256:	1dcb      	adds	r3, r1, #7
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	ebad 0d03 	sub.w	sp, sp, r3
 8005260:	466b      	mov	r3, sp
 8005262:	3300      	adds	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005266:	2300      	movs	r3, #0
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800526a:	e00e      	b.n	800528a <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	4413      	add	r3, r2
 8005272:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005276:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	3301      	adds	r3, #1
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	b2d1      	uxtb	r1, r2
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	3302      	adds	r3, #2
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800528a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	429a      	cmp	r2, r3
 8005290:	d3ec      	bcc.n	800526c <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80052aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ac:	fb01 f202 	mul.w	r2, r1, r2
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d010      	beq.n	80052dc <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052be:	e009      	b.n	80052d4 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80052c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	230a      	movs	r3, #10
 80052c6:	69b9      	ldr	r1, [r7, #24]
 80052c8:	480e      	ldr	r0, [pc, #56]	@ (8005304 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 80052ca:	f003 fba7 	bl	8008a1c <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	3301      	adds	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3f1      	bcc.n	80052c0 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	230a      	movs	r3, #10
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	4807      	ldr	r0, [pc, #28]	@ (8005304 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 80052e6:	f003 fb99 	bl	8008a1c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80052ea:	2201      	movs	r2, #1
 80052ec:	2101      	movs	r1, #1
 80052ee:	4804      	ldr	r0, [pc, #16]	@ (8005300 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80052f0:	f002 fb56 	bl	80079a0 <HAL_GPIO_WritePin>
 80052f4:	46b5      	mov	sp, r6
}
 80052f6:	bf00      	nop
 80052f8:	3734      	adds	r7, #52	@ 0x34
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005300:	40010c00 	.word	0x40010c00
 8005304:	200003d8 	.word	0x200003d8

08005308 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8005312:	4b0e      	ldr	r3, [pc, #56]	@ (800534c <_Z19ILI9341_Fill_Screent+0x44>)
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29a      	uxth	r2, r3
 8005318:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <_Z19ILI9341_Fill_Screent+0x48>)
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	2100      	movs	r1, #0
 8005320:	2000      	movs	r0, #0
 8005322:	f7ff fd83 	bl	8004e2c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8005326:	4b09      	ldr	r3, [pc, #36]	@ (800534c <_Z19ILI9341_Fill_Screent+0x44>)
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <_Z19ILI9341_Fill_Screent+0x48>)
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	461a      	mov	r2, r3
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff ff48 	bl	80051d4 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20000002 	.word	0x20000002
 8005350:	20000000 	.word	0x20000000

08005354 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	80fb      	strh	r3, [r7, #6]
 800535e:	460b      	mov	r3, r1
 8005360:	80bb      	strh	r3, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005366:	4b5d      	ldr	r3, [pc, #372]	@ (80054dc <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	429a      	cmp	r2, r3
 8005370:	d205      	bcs.n	800537e <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8005372:	4b5b      	ldr	r3, [pc, #364]	@ (80054e0 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	88ba      	ldrh	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d301      	bcc.n	8005382 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	f040 80a5 	bne.w	80054d4 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800538a:	2200      	movs	r2, #0
 800538c:	2102      	movs	r1, #2
 800538e:	4855      	ldr	r0, [pc, #340]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005390:	f002 fb06 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005394:	2200      	movs	r2, #0
 8005396:	2101      	movs	r1, #1
 8005398:	4852      	ldr	r0, [pc, #328]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800539a:	f002 fb01 	bl	80079a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 800539e:	202a      	movs	r0, #42	@ 0x2a
 80053a0:	f7ff fcf6 	bl	8004d90 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80053a4:	2201      	movs	r2, #1
 80053a6:	2102      	movs	r1, #2
 80053a8:	484e      	ldr	r0, [pc, #312]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053aa:	f002 faf9 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80053ae:	2201      	movs	r2, #1
 80053b0:	2101      	movs	r1, #1
 80053b2:	484c      	ldr	r0, [pc, #304]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053b4:	f002 faf4 	bl	80079a0 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2101      	movs	r1, #1
 80053bc:	4849      	ldr	r0, [pc, #292]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053be:	f002 faef 	bl	80079a0 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	753b      	strb	r3, [r7, #20]
 80053cc:	88fb      	ldrh	r3, [r7, #6]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	757b      	strb	r3, [r7, #21]
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	3301      	adds	r3, #1
 80053d6:	121b      	asrs	r3, r3, #8
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	75bb      	strb	r3, [r7, #22]
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	3301      	adds	r3, #1
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80053e6:	f107 0114 	add.w	r1, r7, #20
 80053ea:	2301      	movs	r3, #1
 80053ec:	2204      	movs	r2, #4
 80053ee:	483e      	ldr	r0, [pc, #248]	@ (80054e8 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80053f0:	f003 fb14 	bl	8008a1c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80053f4:	2201      	movs	r2, #1
 80053f6:	2101      	movs	r1, #1
 80053f8:	483a      	ldr	r0, [pc, #232]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80053fa:	f002 fad1 	bl	80079a0 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80053fe:	2200      	movs	r2, #0
 8005400:	2102      	movs	r1, #2
 8005402:	4838      	ldr	r0, [pc, #224]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005404:	f002 facc 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005408:	2200      	movs	r2, #0
 800540a:	2101      	movs	r1, #1
 800540c:	4835      	ldr	r0, [pc, #212]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800540e:	f002 fac7 	bl	80079a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8005412:	202b      	movs	r0, #43	@ 0x2b
 8005414:	f7ff fcbc 	bl	8004d90 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005418:	2201      	movs	r2, #1
 800541a:	2102      	movs	r1, #2
 800541c:	4831      	ldr	r0, [pc, #196]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800541e:	f002 fabf 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005422:	2201      	movs	r2, #1
 8005424:	2101      	movs	r1, #1
 8005426:	482f      	ldr	r0, [pc, #188]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005428:	f002 faba 	bl	80079a0 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800542c:	2200      	movs	r2, #0
 800542e:	2101      	movs	r1, #1
 8005430:	482c      	ldr	r0, [pc, #176]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005432:	f002 fab5 	bl	80079a0 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8005436:	88bb      	ldrh	r3, [r7, #4]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	b29b      	uxth	r3, r3
 800543c:	b2db      	uxtb	r3, r3
 800543e:	743b      	strb	r3, [r7, #16]
 8005440:	88bb      	ldrh	r3, [r7, #4]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	747b      	strb	r3, [r7, #17]
 8005446:	88bb      	ldrh	r3, [r7, #4]
 8005448:	3301      	adds	r3, #1
 800544a:	121b      	asrs	r3, r3, #8
 800544c:	b2db      	uxtb	r3, r3
 800544e:	74bb      	strb	r3, [r7, #18]
 8005450:	88bb      	ldrh	r3, [r7, #4]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	3301      	adds	r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800545a:	f107 0110 	add.w	r1, r7, #16
 800545e:	2301      	movs	r3, #1
 8005460:	2204      	movs	r2, #4
 8005462:	4821      	ldr	r0, [pc, #132]	@ (80054e8 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005464:	f003 fada 	bl	8008a1c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005468:	2201      	movs	r2, #1
 800546a:	2101      	movs	r1, #1
 800546c:	481d      	ldr	r0, [pc, #116]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800546e:	f002 fa97 	bl	80079a0 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	2102      	movs	r1, #2
 8005476:	481b      	ldr	r0, [pc, #108]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005478:	f002 fa92 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800547c:	2200      	movs	r2, #0
 800547e:	2101      	movs	r1, #1
 8005480:	4818      	ldr	r0, [pc, #96]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005482:	f002 fa8d 	bl	80079a0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8005486:	202c      	movs	r0, #44	@ 0x2c
 8005488:	f7ff fc82 	bl	8004d90 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800548c:	2201      	movs	r2, #1
 800548e:	2102      	movs	r1, #2
 8005490:	4814      	ldr	r0, [pc, #80]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005492:	f002 fa85 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005496:	2201      	movs	r2, #1
 8005498:	2101      	movs	r1, #1
 800549a:	4812      	ldr	r0, [pc, #72]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800549c:	f002 fa80 	bl	80079a0 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80054a0:	2200      	movs	r2, #0
 80054a2:	2101      	movs	r1, #1
 80054a4:	480f      	ldr	r0, [pc, #60]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80054a6:	f002 fa7b 	bl	80079a0 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
	{ Colour >> 8, Colour };
 80054aa:	887b      	ldrh	r3, [r7, #2]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	733b      	strb	r3, [r7, #12]
 80054b4:	887b      	ldrh	r3, [r7, #2]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80054ba:	f107 010c 	add.w	r1, r7, #12
 80054be:	2301      	movs	r3, #1
 80054c0:	2202      	movs	r2, #2
 80054c2:	4809      	ldr	r0, [pc, #36]	@ (80054e8 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80054c4:	f003 faaa 	bl	8008a1c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80054c8:	2201      	movs	r2, #1
 80054ca:	2101      	movs	r1, #1
 80054cc:	4805      	ldr	r0, [pc, #20]	@ (80054e4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80054ce:	f002 fa67 	bl	80079a0 <HAL_GPIO_WritePin>
 80054d2:	e000      	b.n	80054d6 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 80054d4:	bf00      	nop

}
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000002 	.word	0x20000002
 80054e0:	20000000 	.word	0x20000000
 80054e4:	40010c00 	.word	0x40010c00
 80054e8:	200003d8 	.word	0x200003d8

080054ec <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	80fb      	strh	r3, [r7, #6]
 80054fe:	4603      	mov	r3, r0
 8005500:	80bb      	strh	r3, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	807b      	strh	r3, [r7, #2]
 8005506:	4613      	mov	r3, r2
 8005508:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800550a:	4b2b      	ldr	r3, [pc, #172]	@ (80055b8 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	88fa      	ldrh	r2, [r7, #6]
 8005512:	429a      	cmp	r2, r3
 8005514:	d205      	bcs.n	8005522 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 8005516:	4b29      	ldr	r3, [pc, #164]	@ (80055bc <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	88ba      	ldrh	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	d301      	bcc.n	8005526 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d141      	bne.n	80055b0 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	4413      	add	r3, r2
 8005532:	4a21      	ldr	r2, [pc, #132]	@ (80055b8 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	b292      	uxth	r2, r2
 8005538:	4293      	cmp	r3, r2
 800553a:	bfcc      	ite	gt
 800553c:	2301      	movgt	r3, #1
 800553e:	2300      	movle	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8005546:	4b1c      	ldr	r3, [pc, #112]	@ (80055b8 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29a      	uxth	r2, r3
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8005552:	88ba      	ldrh	r2, [r7, #4]
 8005554:	883b      	ldrh	r3, [r7, #0]
 8005556:	4413      	add	r3, r2
 8005558:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800555a:	8812      	ldrh	r2, [r2, #0]
 800555c:	b292      	uxth	r2, r2
 800555e:	4293      	cmp	r3, r2
 8005560:	bfcc      	ite	gt
 8005562:	2301      	movgt	r3, #1
 8005564:	2300      	movle	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 800556c:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29a      	uxth	r2, r3
 8005572:	88bb      	ldrh	r3, [r7, #4]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	4413      	add	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29c      	uxth	r4, r3
 8005584:	88ba      	ldrh	r2, [r7, #4]
 8005586:	883b      	ldrh	r3, [r7, #0]
 8005588:	4413      	add	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29b      	uxth	r3, r3
 8005590:	88b9      	ldrh	r1, [r7, #4]
 8005592:	88f8      	ldrh	r0, [r7, #6]
 8005594:	4622      	mov	r2, r4
 8005596:	f7ff fc49 	bl	8004e2c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800559a:	883b      	ldrh	r3, [r7, #0]
 800559c:	887a      	ldrh	r2, [r7, #2]
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	8b3b      	ldrh	r3, [r7, #24]
 80055a6:	4611      	mov	r1, r2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fe13 	bl	80051d4 <_Z25ILI9341_Draw_Colour_Bursttm>
 80055ae:	e000      	b.n	80055b2 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 80055b0:	bf00      	nop
}
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd90      	pop	{r4, r7, pc}
 80055b8:	20000002 	.word	0x20000002
 80055bc:	20000000 	.word	0x20000000

080055c0 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	80fb      	strh	r3, [r7, #6]
 80055d2:	4603      	mov	r3, r0
 80055d4:	80bb      	strh	r3, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	807b      	strh	r3, [r7, #2]
 80055da:	4613      	mov	r3, r2
 80055dc:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80055de:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d205      	bcs.n	80055f6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 80055ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	88ba      	ldrh	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d301      	bcc.n	80055fa <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d124      	bne.n	800564a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	4413      	add	r3, r2
 8005606:	4a13      	ldr	r2, [pc, #76]	@ (8005654 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8005608:	8812      	ldrh	r2, [r2, #0]
 800560a:	b292      	uxth	r2, r2
 800560c:	4293      	cmp	r3, r2
 800560e:	bfcc      	ite	gt
 8005610:	2301      	movgt	r3, #1
 8005612:	2300      	movle	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 800561a:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29a      	uxth	r2, r3
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	887b      	ldrh	r3, [r7, #2]
 800562a:	4413      	add	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	88bb      	ldrh	r3, [r7, #4]
 8005634:	88b9      	ldrh	r1, [r7, #4]
 8005636:	88f8      	ldrh	r0, [r7, #6]
 8005638:	f7ff fbf8 	bl	8004e2c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 800563c:	887a      	ldrh	r2, [r7, #2]
 800563e:	883b      	ldrh	r3, [r7, #0]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fdc6 	bl	80051d4 <_Z25ILI9341_Draw_Colour_Bursttm>
 8005648:	e000      	b.n	800564c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 800564a:	bf00      	nop
}
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	bd90      	pop	{r4, r7, pc}
 8005652:	bf00      	nop
 8005654:	20000002 	.word	0x20000002
 8005658:	20000000 	.word	0x20000000

0800565c <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	80fb      	strh	r3, [r7, #6]
 800566e:	4603      	mov	r3, r0
 8005670:	80bb      	strh	r3, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]
 8005676:	4613      	mov	r3, r2
 8005678:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800567a:	4b1d      	ldr	r3, [pc, #116]	@ (80056f0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	429a      	cmp	r2, r3
 8005684:	d205      	bcs.n	8005692 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8005686:	4b1b      	ldr	r3, [pc, #108]	@ (80056f4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	88ba      	ldrh	r2, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d301      	bcc.n	8005696 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d124      	bne.n	80056e6 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800569c:	88ba      	ldrh	r2, [r7, #4]
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	4413      	add	r3, r2
 80056a2:	4a14      	ldr	r2, [pc, #80]	@ (80056f4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	b292      	uxth	r2, r2
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfcc      	ite	gt
 80056ac:	2301      	movgt	r3, #1
 80056ae:	2300      	movle	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 80056b6:	4b0f      	ldr	r3, [pc, #60]	@ (80056f4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	88bb      	ldrh	r3, [r7, #4]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 80056c2:	88ba      	ldrh	r2, [r7, #4]
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	4413      	add	r3, r2
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	88b9      	ldrh	r1, [r7, #4]
 80056d2:	88f8      	ldrh	r0, [r7, #6]
 80056d4:	f7ff fbaa 	bl	8004e2c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 80056d8:	887a      	ldrh	r2, [r7, #2]
 80056da:	883b      	ldrh	r3, [r7, #0]
 80056dc:	4611      	mov	r1, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fd78 	bl	80051d4 <_Z25ILI9341_Draw_Colour_Bursttm>
 80056e4:	e000      	b.n	80056e8 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 80056e6:	bf00      	nop
}
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd90      	pop	{r4, r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000002 	.word	0x20000002
 80056f4:	20000000 	.word	0x20000000

080056f8 <_ZN19CManejadorControlesC1Ev>:
 */

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"

CManejadorControles::CManejadorControles()
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fb fd8e 	bl	8001224 <_ZN22CManejadorEventosBotonC1Ev>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fc f88d 	bl	800182c <_ZN24CManejadorEventosEncoderC1Ev>
 8005712:	4a52      	ldr	r2, [pc, #328]	@ (800585c <_ZN19CManejadorControlesC1Ev+0x164>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	4a51      	ldr	r2, [pc, #324]	@ (8005860 <_ZN19CManejadorControlesC1Ev+0x168>)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	330c      	adds	r3, #12
 8005728:	4618      	mov	r0, r3
 800572a:	f7fb fca7 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	332c      	adds	r3, #44	@ 0x2c
 8005732:	4618      	mov	r0, r3
 8005734:	f7fb fca2 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	334c      	adds	r3, #76	@ 0x4c
 800573c:	4618      	mov	r0, r3
 800573e:	f7fb fc9d 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	336c      	adds	r3, #108	@ 0x6c
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fc98 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	338c      	adds	r3, #140	@ 0x8c
 8005750:	4618      	mov	r0, r3
 8005752:	f7fb feed 	bl	8001530 <_ZN8CEncoderC1Ev>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	33d8      	adds	r3, #216	@ 0xd8
 800575a:	4618      	mov	r0, r3
 800575c:	f7fb fe2a 	bl	80013b4 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOA, GPIO_PIN_4, 1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f103 000c 	add.w	r0, r3, #12
 8005766:	2301      	movs	r3, #1
 8005768:	2210      	movs	r2, #16
 800576a:	493e      	ldr	r1, [pc, #248]	@ (8005864 <_ZN19CManejadorControlesC1Ev+0x16c>)
 800576c:	f7fb fcc4 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	330c      	adds	r3, #12
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f7fb fd05 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	330c      	adds	r3, #12
 8005782:	4618      	mov	r0, r3
 8005784:	f7fb fcd1 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800578e:	2302      	movs	r3, #2
 8005790:	2240      	movs	r2, #64	@ 0x40
 8005792:	4934      	ldr	r1, [pc, #208]	@ (8005864 <_ZN19CManejadorControlesC1Ev+0x16c>)
 8005794:	f7fb fcb0 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	332c      	adds	r3, #44	@ 0x2c
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fb fcf1 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	332c      	adds	r3, #44	@ 0x2c
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fb fcbd 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80057b6:	2303      	movs	r3, #3
 80057b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057bc:	492a      	ldr	r1, [pc, #168]	@ (8005868 <_ZN19CManejadorControlesC1Ev+0x170>)
 80057be:	f7fb fc9b 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	334c      	adds	r3, #76	@ 0x4c
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fb fcdc 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	334c      	adds	r3, #76	@ 0x4c
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fb fca8 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80057e0:	2304      	movs	r3, #4
 80057e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80057e6:	4920      	ldr	r1, [pc, #128]	@ (8005868 <_ZN19CManejadorControlesC1Ev+0x170>)
 80057e8:	f7fb fc86 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	336c      	adds	r3, #108	@ 0x6c
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4611      	mov	r1, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fb fcc7 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	336c      	adds	r3, #108	@ 0x6c
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fb fc93 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 800580a:	2301      	movs	r3, #1
 800580c:	9303      	str	r3, [sp, #12]
 800580e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <_ZN19CManejadorControlesC1Ev+0x170>)
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4b12      	ldr	r3, [pc, #72]	@ (8005868 <_ZN19CManejadorControlesC1Ev+0x170>)
 8005820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005824:	4910      	ldr	r1, [pc, #64]	@ (8005868 <_ZN19CManejadorControlesC1Ev+0x170>)
 8005826:	f7fb fec9 	bl	80015bc <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fb ff62 	bl	8001700 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	338c      	adds	r3, #140	@ 0x8c
 8005840:	4618      	mov	r0, r3
 8005842:	f7fb ff1f 	bl	8001684 <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	33d8      	adds	r3, #216	@ 0xd8
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb fde2 	bl	8001414 <_ZN20ControlVelocidadAire10InicializaEv>

}
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	0800cad0 	.word	0x0800cad0
 8005860:	0800cb18 	.word	0x0800cb18
 8005864:	40010800 	.word	0x40010800
 8005868:	40010c00 	.word	0x40010c00

0800586c <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	4a18      	ldr	r2, [pc, #96]	@ (80058d8 <_ZN19CManejadorControlesD1Ev+0x6c>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <_ZN19CManejadorControlesD1Ev+0x70>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	33d8      	adds	r3, #216	@ 0xd8
 8005884:	4618      	mov	r0, r3
 8005886:	f7fb fda5 	bl	80013d4 <_ZN20ControlVelocidadAireD1Ev>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	338c      	adds	r3, #140	@ 0x8c
 800588e:	4618      	mov	r0, r3
 8005890:	f7fb fe72 	bl	8001578 <_ZN8CEncoderD1Ev>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	336c      	adds	r3, #108	@ 0x6c
 8005898:	4618      	mov	r0, r3
 800589a:	f7fb fc0d 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	334c      	adds	r3, #76	@ 0x4c
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fb fc08 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	332c      	adds	r3, #44	@ 0x2c
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fb fc03 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	330c      	adds	r3, #12
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fb fbfe 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fb ffc3 	bl	800184c <_ZN24CManejadorEventosEncoderD1Ev>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fb fcbb 	bl	8001244 <_ZN22CManejadorEventosBotonD1Ev>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	0800cad0 	.word	0x0800cad0
 80058dc:	0800cb18 	.word	0x0800cb18

080058e0 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 80058e0:	f1a0 0004 	sub.w	r0, r0, #4
 80058e4:	f7ff bfc2 	b.w	800586c <_ZN19CManejadorControlesD1Ev>

080058e8 <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
}
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ffbb 	bl	800586c <_ZN19CManejadorControlesD1Ev>
 80058f6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f003 fd37 	bl	800936e <_ZdlPvj>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <_ZThn4_N19CManejadorControlesD0Ev>:
 800590a:	f1a0 0004 	sub.w	r0, r0, #4
 800590e:	f7ff bfeb 	b.w	80058e8 <_ZN19CManejadorControlesD0Ev>

08005912 <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f80b 	bl	800593a <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3338      	adds	r3, #56	@ 0x38
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	330c      	adds	r3, #12
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fb fc29 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	332c      	adds	r3, #44	@ 0x2c
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb fc23 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	334c      	adds	r3, #76	@ 0x4c
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fb fc1d 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonManual.Procesa(gpio_pin);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	336c      	adds	r3, #108	@ 0x6c
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7fb fc17 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	338c      	adds	r3, #140	@ 0x8c
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fb fedc 	bl	800174a <_ZN8CEncoder7ProcesaEi>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	33d8      	adds	r3, #216	@ 0xd8
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fb fd9a 	bl	80014e0 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 80059ac:	4603      	mov	r3, r0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <_ZN19CManejadorControles18BotonUnoClickEventEv>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent()
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <_ZN19CManejadorControles18BotonUnoClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoClickEvent();
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3310      	adds	r3, #16
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4610      	mov	r0, r2
 80059d6:	4798      	blx	r3
 80059d8:	e000      	b.n	80059dc <_ZN19CManejadorControles18BotonUnoClickEventEv+0x26>
		return;
 80059da:	bf00      	nop

}
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <_ZN19CManejadorControles18BotonDosClickEventEv>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent()
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <_ZN19CManejadorControles18BotonDosClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosClickEvent();
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	e000      	b.n	8005a08 <_ZN19CManejadorControles18BotonDosClickEventEv+0x26>
		return;
 8005a06:	bf00      	nop

}
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_ZN19CManejadorControles19BotonTresClickEventEv>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent()
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <_ZN19CManejadorControles19BotonTresClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresClickEvent();
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3318      	adds	r3, #24
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	e000      	b.n	8005a34 <_ZN19CManejadorControles19BotonTresClickEventEv+0x26>
		return;
 8005a32:	bf00      	nop

}
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <_ZN19CManejadorControles21BotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent()
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroClickEvent();
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	331c      	adds	r3, #28
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4798      	blx	r3
 8005a5c:	e000      	b.n	8005a60 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x26>
		return;
 8005a5e:	bf00      	nop

}
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <_ZN19CManejadorControles22BotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent()
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaClickEvent();
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3320      	adds	r3, #32
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	e000      	b.n	8005a8c <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x26>
		return;
 8005a8a:	bf00      	nop

}
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3324      	adds	r3, #36	@ 0x24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
 8005ab4:	e000      	b.n	8005ab8 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 8005ab6:	bf00      	nop

}
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3328      	adds	r3, #40	@ 0x28
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
 8005ae0:	e000      	b.n	8005ae4 <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 8005ae2:	bf00      	nop

}
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <_ZN19CManejadorControles17OnBotonClickEventEi>:

void CManejadorControles::OnBotonClickEvent(int idBoton)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d826      	bhi.n	8005b4c <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <_ZN19CManejadorControles17OnBotonClickEventEi+0x18>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b23 	.word	0x08005b23
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b3f 	.word	0x08005b3f
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent();
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
		break;
 8005b20:	e014      	b.n	8005b4c <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosClickEvent();
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	331c      	adds	r3, #28
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
		break;
 8005b2e:	e00d      	b.n	8005b4c <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresClickEvent();
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3320      	adds	r3, #32
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
		break;
 8005b3c:	e006      	b.n	8005b4c <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroClickEvent();
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3324      	adds	r3, #36	@ 0x24
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4798      	blx	r3
		break;
 8005b4a:	bf00      	nop
	}
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <_ZN19CManejadorControles19OnIncrementoEncoderEi>:


//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	332c      	adds	r3, #44	@ 0x2c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 8005b72:	f1a0 0004 	sub.w	r0, r0, #4
 8005b76:	f7ff bfed 	b.w	8005b54 <_ZN19CManejadorControles19OnIncrementoEncoderEi>

08005b7a <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3330      	adds	r3, #48	@ 0x30
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 8005b98:	f1a0 0004 	sub.w	r0, r0, #4
 8005b9c:	f7ff bfed 	b.w	8005b7a <_ZN19CManejadorControles19OnDecrementoEncoderEi>

08005ba0 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
	BotonPerillaClickEvent();
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3328      	adds	r3, #40	@ 0x28
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEi>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder);
 8005bbe:	f1a0 0004 	sub.w	r0, r0, #4
 8005bc2:	f7ff bfed 	b.w	8005ba0 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>

08005bc6 <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:




void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	609a      	str	r2, [r3, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	4a04      	ldr	r2, [pc, #16]	@ (8005bfc <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	0800cb34 	.word	0x0800cb34

08005c00 <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	4a04      	ldr	r2, [pc, #16]	@ (8005c1c <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	0800cb34 	.word	0x0800cb34

08005c20 <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
}
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ffe9 	bl	8005c00 <_ZN26CManejadorEventosControlesD1Ev>
 8005c2e:	2104      	movs	r1, #4
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f003 fb9c 	bl	800936e <_ZdlPvj>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]

}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]

}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEv>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent()
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr

08005c7a <_ZN26CManejadorEventosControles20OnBotonDosClickEventEv>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent()
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]

}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <_ZN26CManejadorEventosControles21OnBotonTresClickEventEv>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent()
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]

}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent()
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]

}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent()
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr

08005cc2 <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]

}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.h"
MAX6675::MAX6675()
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
{

}
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	4613      	mov	r3, r2
 8005d06:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	819a      	strh	r2, [r3, #12]

}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr

08005d1e <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	88fa      	ldrh	r2, [r7, #6]
 8005d36:	81da      	strh	r2, [r3, #14]

}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	88fa      	ldrh	r2, [r7, #6]
 8005d5a:	821a      	strh	r2, [r3, #16]

}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6858      	ldr	r0, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	89db      	ldrh	r3, [r3, #14]
 8005d76:	2201      	movs	r2, #1
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f001 fe11 	bl	80079a0 <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e002      	b.n	8005d8a <_ZN7MAX667513MAX6675_pulsoEv+0x24>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3301      	adds	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d90:	dbf8      	blt.n	8005d84 <_ZN7MAX667513MAX6675_pulsoEv+0x1e>
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	899b      	ldrh	r3, [r3, #12]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f001 fdf9 	bl	8007994 <HAL_GPIO_ReadPin>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6858      	ldr	r0, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	89db      	ldrh	r3, [r3, #14]
 8005dae:	2200      	movs	r2, #0
 8005db0:	4619      	mov	r1, r3
 8005db2:	f001 fdf5 	bl	80079a0 <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e002      	b.n	8005dc2 <_ZN7MAX667513MAX6675_pulsoEv+0x5c>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dc8:	dbf8      	blt.n	8005dbc <_ZN7MAX667513MAX6675_pulsoEv+0x56>
	return lei;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <_ZN7MAX667511MAX6675_leeEv>:
float MAX6675::MAX6675_lee()
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	int tiempoClick = HAL_GetTick() - TiempoTranscurrido;
 8005ddc:	f001 fac2 	bl	8007364 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	613b      	str	r3, [r7, #16]
	if (tiempoClick < 275)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8005df0:	dc02      	bgt.n	8005df8 <_ZN7MAX667511MAX6675_leeEv+0x24>
	{
		return UltimaTemperatura;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	e052      	b.n	8005e9e <_ZN7MAX667511MAX6675_leeEv+0xca>
	}
	TiempoTranscurrido = HAL_GetTick();
 8005df8:	f001 fab4 	bl	8007364 <HAL_GetTick>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	615a      	str	r2, [r3, #20]

	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 8005e04:	2300      	movs	r3, #0
 8005e06:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6898      	ldr	r0, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8a1b      	ldrh	r3, [r3, #16]
 8005e10:	2200      	movs	r2, #0
 8005e12:	4619      	mov	r1, r3
 8005e14:	f001 fdc4 	bl	80079a0 <HAL_GPIO_WritePin>
	for (cont = 15; cont >= 0; cont--)
 8005e18:	230f      	movs	r3, #15
 8005e1a:	757b      	strb	r3, [r7, #21]
 8005e1c:	e01b      	b.n	8005e56 <_ZN7MAX667511MAX6675_leeEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ffa1 	bl	8005d66 <_ZN7MAX667513MAX6675_pulsoEv>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <_ZN7MAX667511MAX6675_leeEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 8005e34:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	b21a      	sxth	r2, r3
 8005e40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 8005e4a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	757b      	strb	r3, [r7, #21]
 8005e56:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dadf      	bge.n	8005e1e <_ZN7MAX667511MAX6675_leeEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6898      	ldr	r0, [r3, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8a1b      	ldrh	r3, [r3, #16]
 8005e66:	2201      	movs	r2, #1
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f001 fd99 	bl	80079a0 <HAL_GPIO_WritePin>
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 8005e6e:	8afb      	ldrh	r3, [r7, #22]
 8005e70:	08db      	lsrs	r3, r3, #3
 8005e72:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura=(((float) sensor_dato * 0.25)); //0.25
 8005e74:	89fb      	ldrh	r3, [r7, #14]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fa febc 	bl	8000bf4 <__aeabi_ui2f>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fa ff0e 	bl	8000ca4 <__aeabi_fmul>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
	return UltimaTemperatura+26;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	4904      	ldr	r1, [pc, #16]	@ (8005ea8 <_ZN7MAX667511MAX6675_leeEv+0xd4>)
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa fdfc 	bl	8000a94 <__addsf3>
 8005e9c:	4603      	mov	r3, r0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	41d00000 	.word	0x41d00000

08005eac <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8005eb4:	f107 0308 	add.w	r3, r7, #8
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	89da      	ldrh	r2, [r3, #14]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8a1b      	ldrh	r3, [r3, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4821      	ldr	r0, [pc, #132]	@ (8005f58 <_ZN7MAX66754InitEv+0xac>)
 8005ed4:	f001 fd64 	bl	80079a0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	899b      	ldrh	r3, [r3, #12]
 8005edc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f107 0208 	add.w	r2, r7, #8
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fc77 	bl	80077e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	89da      	ldrh	r2, [r3, #14]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8a1b      	ldrh	r3, [r3, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f04:	2301      	movs	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	4810      	ldr	r0, [pc, #64]	@ (8005f58 <_ZN7MAX66754InitEv+0xac>)
 8005f18:	f001 fc64 	bl	80077e4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6858      	ldr	r0, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	89db      	ldrh	r3, [r3, #14]
 8005f24:	2200      	movs	r2, #0
 8005f26:	4619      	mov	r1, r3
 8005f28:	f001 fd3a 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6898      	ldr	r0, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8a1b      	ldrh	r3, [r3, #16]
 8005f34:	2201      	movs	r2, #1
 8005f36:	4619      	mov	r1, r3
 8005f38:	f001 fd32 	bl	80079a0 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8005f3c:	2064      	movs	r0, #100	@ 0x64
 8005f3e:	f001 fa17 	bl	8007370 <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 8005f42:	f001 fa0f 	bl	8007364 <HAL_GetTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	615a      	str	r2, [r3, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40010800 	.word	0x40010800

08005f5c <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f1xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	4a04      	ldr	r2, [pc, #16]	@ (8005f78 <_ZN3PwmC1Ev+0x1c>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	0800cb68 	.word	0x0800cb68

08005f7c <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <_ZN3PwmD1Ev+0x1c>)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	0800cb68 	.word	0x0800cb68

08005f9c <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
}
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ffe9 	bl	8005f7c <_ZN3PwmD1Ev>
 8005faa:	214c      	movs	r1, #76	@ 0x4c
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f003 f9de 	bl	800936e <_ZdlPvj>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b092      	sub	sp, #72	@ 0x48
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
 8005fd6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fe2:	f107 0314 	add.w	r3, r7, #20
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	605a      	str	r2, [r3, #4]
 8005fec:	609a      	str	r2, [r3, #8]
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	611a      	str	r2, [r3, #16]
 8005ff2:	615a      	str	r2, [r3, #20]
 8005ff4:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2280      	movs	r2, #128	@ 0x80
 8006018:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3304      	adds	r3, #4
 800601e:	4618      	mov	r0, r3
 8006020:	f002 ff2e 	bl	8008e80 <HAL_TIM_Base_Init>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	bf14      	ite	ne
 800602a:	2301      	movne	r3, #1
 800602c:	2300      	moveq	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f887 	bl	8006148 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800603a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800603e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3304      	adds	r3, #4
 8006044:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f002 fffe 	bl	800904c <HAL_TIM_ConfigClockSource>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf14      	ite	ne
 8006056:	2301      	movne	r3, #1
 8006058:	2300      	moveq	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f871 	bl	8006148 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3304      	adds	r3, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f002 ff34 	bl	8008ed8 <HAL_TIM_PWM_Init>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	bf14      	ite	ne
 8006076:	2301      	movne	r3, #1
 8006078:	2300      	moveq	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f861 	bl	8006148 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006086:	2300      	movs	r3, #0
 8006088:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3304      	adds	r3, #4
 8006092:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006096:	4611      	mov	r1, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f003 f8cf 	bl	800923c <HAL_TIMEx_MasterConfigSynchronization>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f84a 	bl	8006148 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060b4:	2360      	movs	r3, #96	@ 0x60
 80060b6:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3304      	adds	r3, #4
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	f107 0114 	add.w	r1, r7, #20
 80060ce:	4618      	mov	r0, r3
 80060d0:	f002 ff5a 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf14      	ite	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	2300      	moveq	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f82f 	bl	8006148 <_ZN3Pwm13Error_HandlerEv>
	  }
	  HAL_TIM_MspPostInit(&Htim);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f833 	bl	800615c <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(&Htim,chanel);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f003 f89a 	bl	8009238 <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 8006104:	2100      	movs	r1, #0
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f804 	bl	8006114 <_ZN3Pwm12SicloTrabajoEi>
}
 800610c:	bf00      	nop
 800610e:	3748      	adds	r7, #72	@ 0x48
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	4a06      	ldr	r2, [pc, #24]	@ (8006144 <_ZN3Pwm12SicloTrabajoEi+0x30>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	51eb851f 	.word	0x51eb851f

08006148 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
	...

0800615c <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>:
void Pwm::HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	@ 0x28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006166:	f107 0314 	add.w	r3, r7, #20
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	605a      	str	r2, [r3, #4]
 8006170:	609a      	str	r2, [r3, #8]
 8006172:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a28      	ldr	r2, [pc, #160]	@ (800621c <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d119      	bne.n	80061b2 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0x56>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800617e:	4b28      	ldr	r3, [pc, #160]	@ (8006220 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8006184:	f043 0304 	orr.w	r3, r3, #4
 8006188:	6193      	str	r3, [r2, #24]
 800618a:	4b25      	ldr	r3, [pc, #148]	@ (8006220 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006196:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800619a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800619c:	2302      	movs	r3, #2
 800619e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a0:	2302      	movs	r3, #2
 80061a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	4619      	mov	r1, r3
 80061aa:	481e      	ldr	r0, [pc, #120]	@ (8006224 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 80061ac:	f001 fb1a 	bl	80077e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
  }

}
 80061b0:	e02f      	b.n	8006212 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
  else if(htim->Instance==TIM2)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ba:	d12a      	bne.n	8006212 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061bc:	4b18      	ldr	r3, [pc, #96]	@ (8006220 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4a17      	ldr	r2, [pc, #92]	@ (8006220 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	6193      	str	r3, [r2, #24]
 80061c8:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80061d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061da:	2302      	movs	r3, #2
 80061dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061de:	2302      	movs	r3, #2
 80061e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e2:	f107 0314 	add.w	r3, r7, #20
 80061e6:	4619      	mov	r1, r3
 80061e8:	480e      	ldr	r0, [pc, #56]	@ (8006224 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 80061ea:	f001 fafb 	bl	80077e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80061ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006228 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
 800620c:	4a06      	ldr	r2, [pc, #24]	@ (8006228 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	6053      	str	r3, [r2, #4]
}
 8006212:	bf00      	nop
 8006214:	3728      	adds	r7, #40	@ 0x28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40021000 	.word	0x40021000
 8006224:	40010800 	.word	0x40010800
 8006228:	40010000 	.word	0x40010000

0800622c <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	0800cb78 	.word	0x0800cb78

0800624c <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	4a04      	ldr	r2, [pc, #16]	@ (8006268 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	0800cb78 	.word	0x0800cb78

0800626c <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
}
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ffe9 	bl	800624c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800627a:	2104      	movs	r1, #4
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f003 f876 	bl	800936e <_ZdlPvj>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <_ZN15SensorMagneticoC1Ev>:

#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f1xx.h"
#include "Constantes.hpp"

SensorMagnetico::SensorMagnetico()
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	4a0a      	ldr	r2, [pc, #40]	@ (80062d4 <_ZN15SensorMagneticoC1Ev+0x34>)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	611a      	str	r2, [r3, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	615a      	str	r2, [r3, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	0800cb8c 	.word	0x0800cb8c

080062d8 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	4a04      	ldr	r2, [pc, #16]	@ (80062f4 <_ZN15SensorMagneticoD1Ev+0x1c>)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	0800cb8c 	.word	0x0800cb8c

080062f8 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
}
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ffe9 	bl	80062d8 <_ZN15SensorMagneticoD1Ev>
 8006306:	211c      	movs	r1, #28
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f003 f830 	bl	800936e <_ZdlPvj>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	811a      	strh	r2, [r3, #8]

}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8006344:	f107 0308 	add.w	r3, r7, #8
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	891b      	ldrh	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635c:	2301      	movs	r3, #1
 800635e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f107 0208 	add.w	r2, r7, #8
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f001 fa3a 	bl	80077e4 <HAL_GPIO_Init>
}
 8006370:	bf00      	nop
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	60da      	str	r2, [r3, #12]

}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	891b      	ldrh	r3, [r3, #8]
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f001 faf5 	bl	8007994 <HAL_GPIO_ReadPin>
 80063aa:	4603      	mov	r3, r0

}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	@ 0x30
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 80063c8:	4b3b      	ldr	r3, [pc, #236]	@ (80064b8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	4a3a      	ldr	r2, [pc, #232]	@ (80064b8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 80063ce:	f043 0302 	orr.w	r3, r3, #2
 80063d2:	61d3      	str	r3, [r2, #28]
 80063d4:	4b38      	ldr	r3, [pc, #224]	@ (80064b8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f640 5215 	movw	r2, #3349	@ 0xd15
 80063f8:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	1e5a      	subs	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4618      	mov	r0, r3
 8006414:	f002 fd34 	bl	8008e80 <HAL_TIM_Base_Init>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x78>
	{
		return false;
 8006428:	2300      	movs	r3, #0
 800642a:	e041      	b.n	80064b0 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_ClockConfigTypeDef TimClock =
 800642c:	f107 0320 	add.w	r3, r7, #32
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	609a      	str	r2, [r3, #8]
 8006438:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800643a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800643e:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f107 0220 	add.w	r2, r7, #32
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f002 fdff 	bl	800904c <HAL_TIM_ConfigClockSource>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xae>
	{
		return false;
 800645e:	2300      	movs	r3, #0
 8006460:	e026      	b.n	80064b0 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_MasterConfigTypeDef TimMaster =
 8006462:	f107 0318 	add.w	r3, r7, #24
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 8006470:	2300      	movs	r3, #0
 8006472:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f107 0218 	add.w	r2, r7, #24
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f002 fedd 	bl	800923c <HAL_TIMEx_MasterConfigSynchronization>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe2>
	{
		return false;
 8006492:	2300      	movs	r3, #0
 8006494:	e00c      	b.n	80064b0 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 8006496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800649a:	2200      	movs	r2, #0
 800649c:	2105      	movs	r1, #5
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 f94e 	bl	8007740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 80064a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 f979 	bl	80077a0 <HAL_NVIC_EnableIRQ>
	return true;
 80064ae:	2301      	movs	r3, #1
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3730      	adds	r7, #48	@ 0x30
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40021000 	.word	0x40021000

080064bc <_ZN6CTimer5StartEv>:
void CTimer::Start()
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&HTim);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fbd0 	bl	8008c6c <HAL_TIM_Base_Start_IT>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
	...

080064f0 <_Z16IncializaSistemav>:
//TIM_HandleTypeDef htim2;
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;

void IncializaSistema()
{
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b095      	sub	sp, #84	@ 0x54
 80064f4:	af00      	add	r7, sp, #0
	CTimer timer;
 80064f6:	463b      	mov	r3, r7
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff ffeb 	bl	80064d4 <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80064fe:	2200      	movs	r2, #0
 8006500:	2100      	movs	r1, #0
 8006502:	2028      	movs	r0, #40	@ 0x28
 8006504:	f001 f91c 	bl	8007740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006508:	2028      	movs	r0, #40	@ 0x28
 800650a:	f001 f949 	bl	80077a0 <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 800650e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006512:	f002 ff2e 	bl	8009372 <_Znwj>
 8006516:	4603      	mov	r3, r0
 8006518:	461c      	mov	r4, r3
 800651a:	4620      	mov	r0, r4
 800651c:	f7fb fb30 	bl	8001b80 <_ZN16CestacionBaku601C1Ev>
 8006520:	4b11      	ldr	r3, [pc, #68]	@ (8006568 <_Z16IncializaSistemav+0x78>)
 8006522:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 8006524:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 8006528:	f002 ff23 	bl	8009372 <_Znwj>
 800652c:	4603      	mov	r3, r0
 800652e:	461c      	mov	r4, r3
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff f8e1 	bl	80056f8 <_ZN19CManejadorControlesC1Ev>
 8006536:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <_Z16IncializaSistemav+0x7c>)
 8006538:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 800653a:	f7fe fd3d 	bl	8004fb8 <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800653e:	2003      	movs	r0, #3
 8006540:	f7fe fcdc 	bl	8004efc <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(WHITE);
 8006544:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006548:	f7fe fede 	bl	8005308 <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 800654c:	4638      	mov	r0, r7
 800654e:	231d      	movs	r3, #29
 8006550:	2201      	movs	r2, #1
 8006552:	4907      	ldr	r1, [pc, #28]	@ (8006570 <_Z16IncializaSistemav+0x80>)
 8006554:	f7ff ff2e 	bl	80063b4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>
	timer.Start();
 8006558:	463b      	mov	r3, r7
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff ffae 	bl	80064bc <_ZN6CTimer5StartEv>

}
 8006560:	bf00      	nop
 8006562:	3754      	adds	r7, #84	@ 0x54
 8006564:	46bd      	mov	sp, r7
 8006566:	bd90      	pop	{r4, r7, pc}
 8006568:	200001f4 	.word	0x200001f4
 800656c:	20000220 	.word	0x20000220
 8006570:	40000400 	.word	0x40000400

08006574 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
	ManejadorPantallas.SetEstacion(estacion);
 8006578:	4b0f      	ldr	r3, [pc, #60]	@ (80065b8 <_Z14EjecutaSistemav+0x44>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4619      	mov	r1, r3
 800657e:	480f      	ldr	r0, [pc, #60]	@ (80065bc <_Z14EjecutaSistemav+0x48>)
 8006580:	f7fc ff52 	bl	8003428 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 8006584:	4b0e      	ldr	r3, [pc, #56]	@ (80065c0 <_Z14EjecutaSistemav+0x4c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	480c      	ldr	r0, [pc, #48]	@ (80065bc <_Z14EjecutaSistemav+0x48>)
 800658c:	f7fc ffeb 	bl	8003566 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	ManejadorPantallas.MuestraPantallaManual();
 8006590:	480a      	ldr	r0, [pc, #40]	@ (80065bc <_Z14EjecutaSistemav+0x48>)
 8006592:	f7fc ff56 	bl	8003442 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (1)
	{
		estacion->Procesa();
 8006596:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <_Z14EjecutaSistemav+0x44>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <_Z14EjecutaSistemav+0x44>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3330      	adds	r3, #48	@ 0x30
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 80065a8:	4804      	ldr	r0, [pc, #16]	@ (80065bc <_Z14EjecutaSistemav+0x48>)
 80065aa:	f7fc ff82 	bl	80034b2 <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 80065ae:	2001      	movs	r0, #1
 80065b0:	f000 fede 	bl	8007370 <HAL_Delay>
		estacion->Procesa();
 80065b4:	bf00      	nop
 80065b6:	e7ee      	b.n	8006596 <_Z14EjecutaSistemav+0x22>
 80065b8:	200001f4 	.word	0x200001f4
 80065bc:	200001f8 	.word	0x200001f8
 80065c0:	20000220 	.word	0x20000220

080065c4 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	80fb      	strh	r3, [r7, #6]
	estacion->GPIO_INTERRUPCION(GPIO_Pin);
 80065ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <HAL_GPIO_EXTI_Callback+0x3c>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <HAL_GPIO_EXTI_Callback+0x3c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3354      	adds	r3, #84	@ 0x54
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	88f9      	ldrh	r1, [r7, #6]
 80065de:	4610      	mov	r0, r2
 80065e0:	4798      	blx	r3
	ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <HAL_GPIO_EXTI_Callback+0x40>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <HAL_GPIO_EXTI_Callback+0x40>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3334      	adds	r3, #52	@ 0x34
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	88f9      	ldrh	r1, [r7, #6]
 80065f2:	4610      	mov	r0, r2
 80065f4:	4798      	blx	r3
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200001f4 	.word	0x200001f4
 8006604:	20000220 	.word	0x20000220

08006608 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a07      	ldr	r2, [pc, #28]	@ (8006634 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d108      	bne.n	800662c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		estacion->TimerTick();
 800661a:	4b07      	ldr	r3, [pc, #28]	@ (8006638 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3340      	adds	r3, #64	@ 0x40
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
	}
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40000400 	.word	0x40000400
 8006638:	200001f4 	.word	0x200001f4

0800663c <_Z41__static_initialization_and_destruction_0ii>:
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006652:	4293      	cmp	r3, r2
 8006654:	d102      	bne.n	800665c <_Z41__static_initialization_and_destruction_0ii+0x20>
CManejadorPantallas ManejadorPantallas;
 8006656:	4809      	ldr	r0, [pc, #36]	@ (800667c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006658:	f7fc fea8 	bl	80033ac <_ZN19CManejadorPantallasC1Ev>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006668:	4293      	cmp	r3, r2
 800666a:	d102      	bne.n	8006672 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800666c:	4803      	ldr	r0, [pc, #12]	@ (800667c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800666e:	f7fc febb 	bl	80033e8 <_ZN19CManejadorPantallasD1Ev>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200001f8 	.word	0x200001f8

08006680 <_GLOBAL__sub_I_estacion>:
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
 8006684:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006688:	2001      	movs	r0, #1
 800668a:	f7ff ffd7 	bl	800663c <_Z41__static_initialization_and_destruction_0ii>
 800668e:	bd80      	pop	{r7, pc}

08006690 <_GLOBAL__sub_D_estacion>:
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
 8006694:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006698:	2000      	movs	r0, #0
 800669a:	f7ff ffcf 	bl	800663c <_Z41__static_initialization_and_destruction_0ii>
 800669e:	bd80      	pop	{r7, pc}

080066a0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066a0:	4b52      	ldr	r3, [pc, #328]	@ (80067ec <MX_GPIO_Init+0x14c>)
{
 80066a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066a6:	699a      	ldr	r2, [r3, #24]
{
 80066a8:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066ae:	619a      	str	r2, [r3, #24]
 80066b0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066b4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066bc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80066be:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 80067f0 <MX_GPIO_Init+0x150>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066c2:	f042 0210 	orr.w	r2, r2, #16
 80066c6:	619a      	str	r2, [r3, #24]
 80066c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80066ca:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066cc:	f002 0210 	and.w	r2, r2, #16
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066d4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80066d6:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066d8:	f042 0204 	orr.w	r2, r2, #4
 80066dc:	619a      	str	r2, [r3, #24]
 80066de:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e0:	2503      	movs	r5, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e2:	f002 0204 	and.w	r2, r2, #4
 80066e6:	9203      	str	r2, [sp, #12]
 80066e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ea:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ec:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066f0:	f042 0208 	orr.w	r2, r2, #8
 80066f4:	619a      	str	r2, [r3, #24]
 80066f6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80066f8:	f44f 5a00 	mov.w	sl, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066fc:	f002 0208 	and.w	r2, r2, #8
 8006700:	9204      	str	r2, [sp, #16]
 8006702:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006704:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8006706:	4f3b      	ldr	r7, [pc, #236]	@ (80067f4 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006708:	f042 0220 	orr.w	r2, r2, #32
 800670c:	619a      	str	r2, [r3, #24]
 800670e:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006710:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800671a:	2304      	movs	r3, #4
 800671c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8006720:	f001 f860 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006724:	2368      	movs	r3, #104	@ 0x68
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006726:	4640      	mov	r0, r8
 8006728:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800672a:	e9cd 3906 	strd	r3, r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006730:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006732:	f001 f857 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8006736:	2210      	movs	r2, #16
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8006738:	4640      	mov	r0, r8
 800673a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800673c:	e9cd 2406 	strd	r2, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006740:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8006744:	f001 f84e 	bl	80077e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8006748:	4638      	mov	r0, r7
 800674a:	a906      	add	r1, sp, #24

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674c:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800674e:	e9cd a406 	strd	sl, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006752:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8006754:	f001 f846 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006758:	2232      	movs	r2, #50	@ 0x32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800675a:	f44f 4b84 	mov.w	fp, #16896	@ 0x4200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800675e:	4638      	mov	r0, r7
 8006760:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006762:	e9cd 2606 	strd	r2, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006766:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800676a:	f001 f83b 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800676e:	e9cd a606 	strd	sl, r6, [sp, #24]
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006772:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80067f8 <MX_GPIO_Init+0x158>
 8006776:	a906      	add	r1, sp, #24
 8006778:	4650      	mov	r0, sl
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800677a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800677e:	f001 f831 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006782:	4650      	mov	r0, sl
 8006784:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006786:	e9cd b906 	strd	fp, r9, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678a:	e9cd 4608 	strd	r4, r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800678e:	f001 f829 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8006792:	2323      	movs	r3, #35	@ 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006794:	4638      	mov	r0, r7
 8006796:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006798:	e9cd 3906 	strd	r3, r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800679e:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067a0:	f001 f820 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80067a4:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a8:	a906      	add	r1, sp, #24
 80067aa:	4814      	ldr	r0, [pc, #80]	@ (80067fc <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ac:	e9cd 2606 	strd	r2, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067b0:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067b4:	f001 f816 	bl	80077e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80067b8:	2368      	movs	r3, #104	@ 0x68
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80067ba:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80067be:	4619      	mov	r1, r3
 80067c0:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c2:	e9cd 2606 	strd	r2, r6, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80067c6:	4622      	mov	r2, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067c8:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80067cc:	f001 f8e8 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80067d0:	4622      	mov	r2, r4
 80067d2:	4659      	mov	r1, fp
 80067d4:	4650      	mov	r0, sl
 80067d6:	f001 f8e3 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80067da:	4622      	mov	r2, r4
 80067dc:	2123      	movs	r1, #35	@ 0x23
 80067de:	4638      	mov	r0, r7
 80067e0:	f001 f8de 	bl	80079a0 <HAL_GPIO_WritePin>

}
 80067e4:	b00b      	add	sp, #44	@ 0x2c
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	bf00      	nop
 80067ec:	40021000 	.word	0x40021000
 80067f0:	40011800 	.word	0x40011800
 80067f4:	40011000 	.word	0x40011000
 80067f8:	40010c00 	.word	0x40010c00
 80067fc:	40010800 	.word	0x40010800

08006800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006804:	f000 fd90 	bl	8007328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006808:	f000 f814 	bl	8006834 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800680c:	f000 fa48 	bl	8006ca0 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8006810:	f000 f8f2 	bl	80069f8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8006814:	f000 fa16 	bl	8006c44 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8006818:	f000 f872 	bl	8006900 <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 800681c:	f000 f928 	bl	8006a70 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8006820:	f000 f9b4 	bl	8006b8c <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8006824:	f000 f8b4 	bl	8006990 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
	IncializaSistema();
 8006828:	f7ff fe62 	bl	80064f0 <_Z16IncializaSistemav>
	EjecutaSistema();
 800682c:	f7ff fea2 	bl	8006574 <_Z14EjecutaSistemav>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <main+0x30>

08006834 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b094      	sub	sp, #80	@ 0x50
 8006838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800683a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800683e:	2228      	movs	r2, #40	@ 0x28
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f003 fbf7 	bl	800a036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006848:	f107 0314 	add.w	r3, r7, #20
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	609a      	str	r2, [r3, #8]
 8006862:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006864:	2302      	movs	r3, #2
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006868:	2301      	movs	r3, #1
 800686a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800686c:	2310      	movs	r3, #16
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006870:	2302      	movs	r3, #2
 8006872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8006874:	2300      	movs	r3, #0
 8006876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8006878:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800687c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800687e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fd14 	bl	80082b0 <HAL_RCC_OscConfig>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf14      	ite	ne
 800688e:	2301      	movne	r3, #1
 8006890:	2300      	moveq	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8006898:	f000 faf2 	bl	8006e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800689c:	230f      	movs	r3, #15
 800689e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80068a0:	2302      	movs	r3, #2
 80068a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80068a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80068b2:	f107 0314 	add.w	r3, r7, #20
 80068b6:	2101      	movs	r1, #1
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 febb 	bl	8008634 <HAL_RCC_ClockConfig>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bf14      	ite	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	2300      	moveq	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80068ce:	f000 fad7 	bl	8006e80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80068d2:	2302      	movs	r3, #2
 80068d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 ff65 	bl	80087ac <HAL_RCCEx_PeriphCLKConfig>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80068f2:	f000 fac5 	bl	8006e80 <Error_Handler>
  }
}
 80068f6:	bf00      	nop
 80068f8:	3750      	adds	r7, #80	@ 0x50
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	605a      	str	r2, [r3, #4]
 800690e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006910:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 8006912:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <_ZL12MX_ADC1_Initv+0x8c>)
 8006914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006916:	4b1c      	ldr	r3, [pc, #112]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 8006918:	2200      	movs	r2, #0
 800691a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800691c:	4b1a      	ldr	r3, [pc, #104]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 800691e:	2200      	movs	r2, #0
 8006920:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006922:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 8006924:	2200      	movs	r2, #0
 8006926:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006928:	4b17      	ldr	r3, [pc, #92]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 800692a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800692e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006930:	4b15      	ldr	r3, [pc, #84]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 8006932:	2200      	movs	r2, #0
 8006934:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8006936:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 8006938:	2201      	movs	r2, #1
 800693a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800693c:	4812      	ldr	r0, [pc, #72]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 800693e:	f000 fe6f 	bl	8007620 <HAL_ADC_Init>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8006952:	f000 fa95 	bl	8006e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006956:	2303      	movs	r3, #3
 8006958:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800695a:	2301      	movs	r3, #1
 800695c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	4619      	mov	r1, r3
 8006966:	4808      	ldr	r0, [pc, #32]	@ (8006988 <_ZL12MX_ADC1_Initv+0x88>)
 8006968:	f000 fd18 	bl	800739c <HAL_ADC_ConfigChannel>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 800697c:	f000 fa80 	bl	8006e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20000224 	.word	0x20000224
 800698c:	40012400 	.word	0x40012400

08006990 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006994:	4b15      	ldr	r3, [pc, #84]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 8006996:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <_ZL12MX_I2C1_Initv+0x60>)
 8006998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800699a:	4b14      	ldr	r3, [pc, #80]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 800699c:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <_ZL12MX_I2C1_Initv+0x64>)
 800699e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80069a0:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80069a6:	4b11      	ldr	r3, [pc, #68]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069ac:	4b0f      	ldr	r3, [pc, #60]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80069b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069b4:	4b0d      	ldr	r3, [pc, #52]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80069ba:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069bc:	2200      	movs	r2, #0
 80069be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069c0:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80069c6:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80069cc:	4807      	ldr	r0, [pc, #28]	@ (80069ec <_ZL12MX_I2C1_Initv+0x5c>)
 80069ce:	f001 f9fb 	bl	8007dc8 <HAL_I2C_Init>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80069e2:	f000 fa4d 	bl	8006e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000254 	.word	0x20000254
 80069f0:	40005400 	.word	0x40005400
 80069f4:	000186a0 	.word	0x000186a0

080069f8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 80069fe:	4a1b      	ldr	r2, [pc, #108]	@ (8006a6c <_ZL12MX_SPI1_Initv+0x74>)
 8006a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006a02:	4b19      	ldr	r3, [pc, #100]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006a0a:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006a10:	4b15      	ldr	r3, [pc, #84]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a16:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a1c:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006a22:	4b11      	ldr	r3, [pc, #68]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a30:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006a42:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a44:	220a      	movs	r2, #10
 8006a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006a48:	4807      	ldr	r0, [pc, #28]	@ (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a4a:	f001 ff8f 	bl	800896c <HAL_SPI_Init>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2301      	movne	r3, #1
 8006a56:	2300      	moveq	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8006a5e:	f000 fa0f 	bl	8006e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006a62:	bf00      	nop
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	200002a8 	.word	0x200002a8
 8006a6c:	40013000 	.word	0x40013000

08006a70 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	@ 0x38
 8006a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
 8006a80:	609a      	str	r2, [r3, #8]
 8006a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a84:	f107 0320 	add.w	r3, r7, #32
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	609a      	str	r2, [r3, #8]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	611a      	str	r2, [r3, #16]
 8006a9c:	615a      	str	r2, [r3, #20]
 8006a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006aa0:	4b39      	ldr	r3, [pc, #228]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006aa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006aa8:	4b37      	ldr	r3, [pc, #220]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aae:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006ab4:	4b34      	ldr	r3, [pc, #208]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006ab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006abc:	4b32      	ldr	r3, [pc, #200]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006ac2:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006ac4:	2280      	movs	r2, #128	@ 0x80
 8006ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006ac8:	482f      	ldr	r0, [pc, #188]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006aca:	f002 f9d9 	bl	8008e80 <HAL_TIM_Base_Init>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8006ade:	f000 f9cf 	bl	8006e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ae8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006aec:	4619      	mov	r1, r3
 8006aee:	4826      	ldr	r0, [pc, #152]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006af0:	f002 faac 	bl	800904c <HAL_TIM_ConfigClockSource>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8006b04:	f000 f9bc 	bl	8006e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006b08:	481f      	ldr	r0, [pc, #124]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006b0a:	f002 f9e5 	bl	8008ed8 <HAL_TIM_PWM_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8006b1e:	f000 f9af 	bl	8006e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b22:	2300      	movs	r3, #0
 8006b24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b2a:	f107 0320 	add.w	r3, r7, #32
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4815      	ldr	r0, [pc, #84]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006b32:	f002 fb83 	bl	800923c <HAL_TIMEx_MasterConfigSynchronization>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8006b46:	f000 f99b 	bl	8006e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b4a:	2360      	movs	r3, #96	@ 0x60
 8006b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4809      	ldr	r0, [pc, #36]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006b62:	f002 fa11 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8006b76:	f000 f983 	bl	8006e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006b7a:	4803      	ldr	r0, [pc, #12]	@ (8006b88 <_ZL12MX_TIM2_Initv+0x118>)
 8006b7c:	f000 fa90 	bl	80070a0 <HAL_TIM_MspPostInit>

}
 8006b80:	bf00      	nop
 8006b82:	3738      	adds	r7, #56	@ 0x38
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000300 	.word	0x20000300

08006b8c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b92:	f107 0308 	add.w	r3, r7, #8
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	605a      	str	r2, [r3, #4]
 8006b9c:	609a      	str	r2, [r3, #8]
 8006b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006ba8:	4b24      	ldr	r3, [pc, #144]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006baa:	4a25      	ldr	r2, [pc, #148]	@ (8006c40 <_ZL12MX_TIM3_Initv+0xb4>)
 8006bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006bae:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bb4:	4b21      	ldr	r3, [pc, #132]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8006bba:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bbc:	2264      	movs	r2, #100	@ 0x64
 8006bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006bcc:	481b      	ldr	r0, [pc, #108]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bce:	f002 f957 	bl	8008e80 <HAL_TIM_Base_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf14      	ite	ne
 8006bd8:	2301      	movne	r3, #1
 8006bda:	2300      	moveq	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <_ZL12MX_TIM3_Initv+0x5a>
  {
    Error_Handler();
 8006be2:	f000 f94d 	bl	8006e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006bec:	f107 0308 	add.w	r3, r7, #8
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4812      	ldr	r0, [pc, #72]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006bf4:	f002 fa2a 	bl	800904c <HAL_TIM_ConfigClockSource>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <_ZL12MX_TIM3_Initv+0x80>
  {
    Error_Handler();
 8006c08:	f000 f93a 	bl	8006e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006c14:	463b      	mov	r3, r7
 8006c16:	4619      	mov	r1, r3
 8006c18:	4808      	ldr	r0, [pc, #32]	@ (8006c3c <_ZL12MX_TIM3_Initv+0xb0>)
 8006c1a:	f002 fb0f 	bl	800923c <HAL_TIMEx_MasterConfigSynchronization>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <_ZL12MX_TIM3_Initv+0xa6>
  {
    Error_Handler();
 8006c2e:	f000 f927 	bl	8006e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000348 	.word	0x20000348
 8006c40:	40000400 	.word	0x40000400

08006c44 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006c48:	4b13      	ldr	r3, [pc, #76]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c4a:	4a14      	ldr	r2, [pc, #80]	@ (8006c9c <_ZL19MX_USART1_UART_Initv+0x58>)
 8006c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006c4e:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c56:	4b10      	ldr	r3, [pc, #64]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c6a:	220c      	movs	r2, #12
 8006c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c74:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006c7a:	4807      	ldr	r0, [pc, #28]	@ (8006c98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006c7c:	f002 fb48 	bl	8009310 <HAL_UART_Init>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf14      	ite	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006c90:	f000 f8f6 	bl	8006e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006c94:	bf00      	nop
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000390 	.word	0x20000390
 8006c9c:	40013800 	.word	0x40013800

08006ca0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca6:	f107 0310 	add.w	r3, r7, #16
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
 8006cb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cba:	f043 0310 	orr.w	r3, r3, #16
 8006cbe:	6193      	str	r3, [r2, #24]
 8006cc0:	4b69      	ldr	r3, [pc, #420]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ccc:	4b66      	ldr	r3, [pc, #408]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	4a65      	ldr	r2, [pc, #404]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cd2:	f043 0320 	orr.w	r3, r3, #32
 8006cd6:	6193      	str	r3, [r2, #24]
 8006cd8:	4b63      	ldr	r3, [pc, #396]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce4:	4b60      	ldr	r3, [pc, #384]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cea:	f043 0304 	orr.w	r3, r3, #4
 8006cee:	6193      	str	r3, [r2, #24]
 8006cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	4a59      	ldr	r2, [pc, #356]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006d02:	f043 0308 	orr.w	r3, r3, #8
 8006d06:	6193      	str	r3, [r2, #24]
 8006d08:	4b57      	ldr	r3, [pc, #348]	@ (8006e68 <_ZL12MX_GPIO_Initv+0x1c8>)
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8006d14:	2200      	movs	r2, #0
 8006d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d1a:	4854      	ldr	r0, [pc, #336]	@ (8006e6c <_ZL12MX_GPIO_Initv+0x1cc>)
 8006d1c:	f000 fe40 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8006d20:	2200      	movs	r2, #0
 8006d22:	2106      	movs	r1, #6
 8006d24:	4852      	ldr	r0, [pc, #328]	@ (8006e70 <_ZL12MX_GPIO_Initv+0x1d0>)
 8006d26:	f000 fe3b 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2123      	movs	r1, #35	@ 0x23
 8006d2e:	4851      	ldr	r0, [pc, #324]	@ (8006e74 <_ZL12MX_GPIO_Initv+0x1d4>)
 8006d30:	f000 fe36 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8006d34:	2201      	movs	r2, #1
 8006d36:	2108      	movs	r1, #8
 8006d38:	484e      	ldr	r0, [pc, #312]	@ (8006e74 <_ZL12MX_GPIO_Initv+0x1d4>)
 8006d3a:	f000 fe31 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d44:	2301      	movs	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d50:	f107 0310 	add.w	r3, r7, #16
 8006d54:	4619      	mov	r1, r3
 8006d56:	4845      	ldr	r0, [pc, #276]	@ (8006e6c <_ZL12MX_GPIO_Initv+0x1cc>)
 8006d58:	f000 fd44 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8006d5c:	f240 1301 	movw	r3, #257	@ 0x101
 8006d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	4619      	mov	r1, r3
 8006d70:	483f      	ldr	r0, [pc, #252]	@ (8006e70 <_ZL12MX_GPIO_Initv+0x1d0>)
 8006d72:	f000 fd37 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8006d76:	2306      	movs	r3, #6
 8006d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d82:	2302      	movs	r3, #2
 8006d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d86:	f107 0310 	add.w	r3, r7, #16
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4838      	ldr	r0, [pc, #224]	@ (8006e70 <_ZL12MX_GPIO_Initv+0x1d0>)
 8006d8e:	f000 fd29 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006d92:	2310      	movs	r3, #16
 8006d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d96:	4b38      	ldr	r3, [pc, #224]	@ (8006e78 <_ZL12MX_GPIO_Initv+0x1d8>)
 8006d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9e:	f107 0310 	add.w	r3, r7, #16
 8006da2:	4619      	mov	r1, r3
 8006da4:	4832      	ldr	r0, [pc, #200]	@ (8006e70 <_ZL12MX_GPIO_Initv+0x1d0>)
 8006da6:	f000 fd1d 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006daa:	2340      	movs	r3, #64	@ 0x40
 8006dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006dae:	4b33      	ldr	r3, [pc, #204]	@ (8006e7c <_ZL12MX_GPIO_Initv+0x1dc>)
 8006db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006db6:	f107 0310 	add.w	r3, r7, #16
 8006dba:	4619      	mov	r1, r3
 8006dbc:	482c      	ldr	r0, [pc, #176]	@ (8006e70 <_ZL12MX_GPIO_Initv+0x1d0>)
 8006dbe:	f000 fd11 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5;
 8006dc2:	2323      	movs	r3, #35	@ 0x23
 8006dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd2:	f107 0310 	add.w	r3, r7, #16
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4826      	ldr	r0, [pc, #152]	@ (8006e74 <_ZL12MX_GPIO_Initv+0x1d4>)
 8006dda:	f000 fd03 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_8;
 8006dde:	f44f 430d 	mov.w	r3, #36096	@ 0x8d00
 8006de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006de4:	4b25      	ldr	r3, [pc, #148]	@ (8006e7c <_ZL12MX_GPIO_Initv+0x1dc>)
 8006de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dec:	f107 0310 	add.w	r3, r7, #16
 8006df0:	4619      	mov	r1, r3
 8006df2:	4820      	ldr	r0, [pc, #128]	@ (8006e74 <_ZL12MX_GPIO_Initv+0x1d4>)
 8006df4:	f000 fcf6 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006df8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e06:	f107 0310 	add.w	r3, r7, #16
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4819      	ldr	r0, [pc, #100]	@ (8006e74 <_ZL12MX_GPIO_Initv+0x1d4>)
 8006e0e:	f000 fce9 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e12:	2308      	movs	r3, #8
 8006e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e16:	2301      	movs	r3, #1
 8006e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	4619      	mov	r1, r3
 8006e28:	4812      	ldr	r0, [pc, #72]	@ (8006e74 <_ZL12MX_GPIO_Initv+0x1d4>)
 8006e2a:	f000 fcdb 	bl	80077e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	200a      	movs	r0, #10
 8006e34:	f000 fc84 	bl	8007740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006e38:	200a      	movs	r0, #10
 8006e3a:	f000 fcb1 	bl	80077a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2100      	movs	r1, #0
 8006e42:	2017      	movs	r0, #23
 8006e44:	f000 fc7c 	bl	8007740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006e48:	2017      	movs	r0, #23
 8006e4a:	f000 fca9 	bl	80077a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2100      	movs	r1, #0
 8006e52:	2028      	movs	r0, #40	@ 0x28
 8006e54:	f000 fc74 	bl	8007740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006e58:	2028      	movs	r0, #40	@ 0x28
 8006e5a:	f000 fca1 	bl	80077a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006e5e:	bf00      	nop
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40011000 	.word	0x40011000
 8006e70:	40010800 	.word	0x40010800
 8006e74:	40010c00 	.word	0x40010c00
 8006e78:	10110000 	.word	0x10110000
 8006e7c:	10310000 	.word	0x10310000

08006e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e84:	b672      	cpsid	i
}
 8006e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <Error_Handler+0x8>

08006e8c <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 8006e8c:	b508      	push	{r3, lr}
	Hspi.Instance = SPI1;
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8006e8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
	Hspi.Instance = SPI1;
 8006e92:	480d      	ldr	r0, [pc, #52]	@ (8006ec8 <SPI1_Init+0x3c>)
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8006e94:	4a0d      	ldr	r2, [pc, #52]	@ (8006ecc <SPI1_Init+0x40>)
 8006e96:	e9c0 2300 	strd	r2, r3, [r0]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8006e9a:	2300      	movs	r3, #0
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
	Hspi.Init.NSS = SPI_NSS_SOFT;
 8006e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ea0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ea4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ea8:	e9c0 2306 	strd	r2, r3, [r0, #24]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 8006eac:	e9c0 3308 	strd	r3, r3, [r0, #32]
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eb0:	6283      	str	r3, [r0, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 8006eb2:	2307      	movs	r3, #7
 8006eb4:	62c3      	str	r3, [r0, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 8006eb6:	f001 fd59 	bl	800896c <HAL_SPI_Init>
 8006eba:	b118      	cbz	r0, 8006ec4 <SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8006ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006ec0:	f7ff bfde 	b.w	8006e80 <Error_Handler>
}
 8006ec4:	bd08      	pop	{r3, pc}
 8006ec6:	bf00      	nop
 8006ec8:	200003d8 	.word	0x200003d8
 8006ecc:	40013000 	.word	0x40013000

08006ed0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <HAL_MspInit+0x3c>)
{
 8006ed2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	619a      	str	r2, [r3, #24]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	f002 0201 	and.w	r2, r2, #1
 8006ee2:	9200      	str	r2, [sp, #0]
 8006ee4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006eec:	61da      	str	r2, [r3, #28]
 8006eee:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006ef0:	4a07      	ldr	r2, [pc, #28]	@ (8006f10 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006efa:	6853      	ldr	r3, [r2, #4]
 8006efc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006f00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f06:	b002      	add	sp, #8
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40010000 	.word	0x40010000

08006f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4604      	mov	r4, r0
 8006f18:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	a802      	add	r0, sp, #8
 8006f20:	f003 f889 	bl	800a036 <memset>
  if(hadc->Instance==ADC1)
 8006f24:	6822      	ldr	r2, [r4, #0]
 8006f26:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <HAL_ADC_MspInit+0x54>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d11b      	bne.n	8006f64 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f2c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8006f30:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f32:	480e      	ldr	r0, [pc, #56]	@ (8006f6c <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f38:	619a      	str	r2, [r3, #24]
 8006f3a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f3e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8006f42:	9200      	str	r2, [sp, #0]
 8006f44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	f042 0204 	orr.w	r2, r2, #4
 8006f4c:	619a      	str	r2, [r3, #24]
 8006f4e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f50:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f60:	f000 fc40 	bl	80077e4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8006f64:	b006      	add	sp, #24
 8006f66:	bd10      	pop	{r4, pc}
 8006f68:	40012400 	.word	0x40012400
 8006f6c:	40010800 	.word	0x40010800

08006f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f70:	b510      	push	{r4, lr}
 8006f72:	4604      	mov	r4, r0
 8006f74:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f76:	2210      	movs	r2, #16
 8006f78:	2100      	movs	r1, #0
 8006f7a:	a802      	add	r0, sp, #8
 8006f7c:	f003 f85b 	bl	800a036 <memset>
  if(hi2c->Instance==I2C1)
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	4b11      	ldr	r3, [pc, #68]	@ (8006fc8 <HAL_I2C_MspInit+0x58>)
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d11c      	bne.n	8006fc2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f88:	4c10      	ldr	r4, [pc, #64]	@ (8006fcc <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f8a:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f8c:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f8e:	4810      	ldr	r0, [pc, #64]	@ (8006fd0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f90:	f043 0308 	orr.w	r3, r3, #8
 8006f94:	61a3      	str	r3, [r4, #24]
 8006f96:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f98:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fa2:	2312      	movs	r3, #18
 8006fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fac:	f000 fc1a 	bl	80077e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fb0:	69e3      	ldr	r3, [r4, #28]
 8006fb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fb6:	61e3      	str	r3, [r4, #28]
 8006fb8:	69e3      	ldr	r3, [r4, #28]
 8006fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006fc2:	b006      	add	sp, #24
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40005400 	.word	0x40005400
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	40010c00 	.word	0x40010c00

08006fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fda:	2210      	movs	r2, #16
 8006fdc:	2100      	movs	r1, #0
 8006fde:	a802      	add	r0, sp, #8
 8006fe0:	f003 f829 	bl	800a036 <memset>
  if(hspi->Instance==SPI1)
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	4b11      	ldr	r3, [pc, #68]	@ (800702c <HAL_SPI_MspInit+0x58>)
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d11d      	bne.n	8007028 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fec:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8006ff0:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff2:	480f      	ldr	r0, [pc, #60]	@ (8007030 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ff4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ff8:	619a      	str	r2, [r3, #24]
 8006ffa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ffc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ffe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007002:	9200      	str	r2, [sp, #0]
 8007004:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	f042 0204 	orr.w	r2, r2, #4
 800700c:	619a      	str	r2, [r3, #24]
 800700e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007010:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701a:	2302      	movs	r3, #2
 800701c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007020:	2303      	movs	r3, #3
 8007022:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007024:	f000 fbde 	bl	80077e4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007028:	b006      	add	sp, #24
 800702a:	bd10      	pop	{r4, pc}
 800702c:	40013000 	.word	0x40013000
 8007030:	40010800 	.word	0x40010800

08007034 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8007034:	6803      	ldr	r3, [r0, #0]
{
 8007036:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8007038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703c:	d115      	bne.n	800706a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800703e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8007042:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007044:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800704c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800704e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007050:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800705a:	f000 fb71 	bl	8007740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800705e:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007060:	b003      	add	sp, #12
 8007062:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007066:	f000 bb9b 	b.w	80077a0 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 800706a:	4a0b      	ldr	r2, [pc, #44]	@ (8007098 <HAL_TIM_Base_MspInit+0x64>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d110      	bne.n	8007092 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007070:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007072:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007074:	69da      	ldr	r2, [r3, #28]
 8007076:	f042 0202 	orr.w	r2, r2, #2
 800707a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800707c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800707e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007080:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800708a:	f000 fb59 	bl	8007740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800708e:	201d      	movs	r0, #29
 8007090:	e7e6      	b.n	8007060 <HAL_TIM_Base_MspInit+0x2c>
}
 8007092:	b003      	add	sp, #12
 8007094:	f85d fb04 	ldr.w	pc, [sp], #4
 8007098:	40000400 	.word	0x40000400
 800709c:	40021000 	.word	0x40021000

080070a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a6:	2210      	movs	r2, #16
 80070a8:	2100      	movs	r1, #0
 80070aa:	a802      	add	r0, sp, #8
 80070ac:	f002 ffc3 	bl	800a036 <memset>
  if(htim->Instance==TIM2)
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b6:	d11d      	bne.n	80070f4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070b8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80070bc:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070be:	480e      	ldr	r0, [pc, #56]	@ (80070f8 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c0:	f042 0204 	orr.w	r2, r2, #4
 80070c4:	619a      	str	r2, [r3, #24]
 80070c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070de:	f000 fb81 	bl	80077e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80070e2:	4a06      	ldr	r2, [pc, #24]	@ (80070fc <HAL_TIM_MspPostInit+0x5c>)
 80070e4:	6853      	ldr	r3, [r2, #4]
 80070e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ea:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80070ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80070f4:	b006      	add	sp, #24
 80070f6:	bd10      	pop	{r4, pc}
 80070f8:	40010800 	.word	0x40010800
 80070fc:	40010000 	.word	0x40010000

08007100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007100:	b510      	push	{r4, lr}
 8007102:	4604      	mov	r4, r0
 8007104:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007106:	2210      	movs	r2, #16
 8007108:	2100      	movs	r1, #0
 800710a:	a802      	add	r0, sp, #8
 800710c:	f002 ff93 	bl	800a036 <memset>
  if(huart->Instance==USART1)
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	4b17      	ldr	r3, [pc, #92]	@ (8007170 <HAL_UART_MspInit+0x70>)
 8007114:	429a      	cmp	r2, r3
 8007116:	d128      	bne.n	800716a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007118:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800711c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800711e:	4815      	ldr	r0, [pc, #84]	@ (8007174 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8007120:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007124:	619a      	str	r2, [r3, #24]
 8007126:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007128:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800712a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800712e:	9200      	str	r2, [sp, #0]
 8007130:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	f042 0204 	orr.w	r2, r2, #4
 8007138:	619a      	str	r2, [r3, #24]
 800713a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007148:	2302      	movs	r3, #2
 800714a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800714e:	2303      	movs	r3, #3
 8007150:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007152:	f000 fb47 	bl	80077e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007156:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800715a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800715c:	4805      	ldr	r0, [pc, #20]	@ (8007174 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800715e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007162:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007164:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007166:	f000 fb3d 	bl	80077e4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800716a:	b006      	add	sp, #24
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	40013800 	.word	0x40013800
 8007174:	40010800 	.word	0x40010800

08007178 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007178:	e7fe      	b.n	8007178 <NMI_Handler>

0800717a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800717a:	e7fe      	b.n	800717a <HardFault_Handler>

0800717c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800717c:	e7fe      	b.n	800717c <MemManage_Handler>

0800717e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800717e:	e7fe      	b.n	800717e <BusFault_Handler>

08007180 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007180:	e7fe      	b.n	8007180 <UsageFault_Handler>

08007182 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007182:	4770      	bx	lr

08007184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8007184:	4770      	bx	lr

08007186 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8007186:	4770      	bx	lr

08007188 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007188:	f000 b8e0 	b.w	800734c <HAL_IncTick>

0800718c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800718c:	2010      	movs	r0, #16
 800718e:	f000 bc0d 	b.w	80079ac <HAL_GPIO_EXTI_IRQHandler>

08007192 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007192:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007194:	2040      	movs	r0, #64	@ 0x40
 8007196:	f000 fc09 	bl	80079ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800719a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800719e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80071a2:	f000 bc03 	b.w	80079ac <HAL_GPIO_EXTI_IRQHandler>
	...

080071a8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <TIM2_IRQHandler+0x8>)
 80071aa:	f001 bd8e 	b.w	8008cca <HAL_TIM_IRQHandler>
 80071ae:	bf00      	nop
 80071b0:	20000300 	.word	0x20000300

080071b4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80071b4:	4801      	ldr	r0, [pc, #4]	@ (80071bc <TIM3_IRQHandler+0x8>)
 80071b6:	f001 bd88 	b.w	8008cca <HAL_TIM_IRQHandler>
 80071ba:	bf00      	nop
 80071bc:	20000348 	.word	0x20000348

080071c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80071c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80071c2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80071c6:	f000 fbf1 	bl	80079ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80071ca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80071ce:	f000 fbed 	bl	80079ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80071d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80071d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80071da:	f000 bbe7 	b.w	80079ac <HAL_GPIO_EXTI_IRQHandler>

080071de <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80071de:	2001      	movs	r0, #1
 80071e0:	4770      	bx	lr

080071e2 <_kill>:

int _kill(int pid, int sig)
{
 80071e2:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80071e4:	f002 ffce 	bl	800a184 <__errno>
 80071e8:	2316      	movs	r3, #22
 80071ea:	6003      	str	r3, [r0, #0]
  return -1;
}
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	bd08      	pop	{r3, pc}

080071f2 <_exit>:

void _exit (int status)
{
 80071f2:	b508      	push	{r3, lr}
  errno = EINVAL;
 80071f4:	f002 ffc6 	bl	800a184 <__errno>
 80071f8:	2316      	movs	r3, #22
 80071fa:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80071fc:	e7fe      	b.n	80071fc <_exit+0xa>

080071fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071fe:	b570      	push	{r4, r5, r6, lr}
 8007200:	460d      	mov	r5, r1
 8007202:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007204:	460e      	mov	r6, r1
 8007206:	1b73      	subs	r3, r6, r5
 8007208:	429c      	cmp	r4, r3
 800720a:	dc01      	bgt.n	8007210 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800720c:	4620      	mov	r0, r4
 800720e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8007210:	f3af 8000 	nop.w
 8007214:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007218:	e7f5      	b.n	8007206 <_read+0x8>

0800721a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800721a:	b570      	push	{r4, r5, r6, lr}
 800721c:	460d      	mov	r5, r1
 800721e:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007220:	460e      	mov	r6, r1
 8007222:	1b73      	subs	r3, r6, r5
 8007224:	429c      	cmp	r4, r3
 8007226:	dc01      	bgt.n	800722c <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8007228:	4620      	mov	r0, r4
 800722a:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800722c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8007230:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007234:	e7f5      	b.n	8007222 <_write+0x8>

08007236 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	4770      	bx	lr

0800723c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800723c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8007240:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8007242:	604b      	str	r3, [r1, #4]
}
 8007244:	4770      	bx	lr

08007246 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007246:	2001      	movs	r0, #1
 8007248:	4770      	bx	lr

0800724a <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800724a:	2000      	movs	r0, #0
 800724c:	4770      	bx	lr
	...

08007250 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007250:	4a0b      	ldr	r2, [pc, #44]	@ (8007280 <_sbrk+0x30>)
{
 8007252:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8007254:	6811      	ldr	r1, [r2, #0]
{
 8007256:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8007258:	b909      	cbnz	r1, 800725e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800725a:	490a      	ldr	r1, [pc, #40]	@ (8007284 <_sbrk+0x34>)
 800725c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800725e:	6810      	ldr	r0, [r2, #0]
 8007260:	4909      	ldr	r1, [pc, #36]	@ (8007288 <_sbrk+0x38>)
 8007262:	4c0a      	ldr	r4, [pc, #40]	@ (800728c <_sbrk+0x3c>)
 8007264:	4403      	add	r3, r0
 8007266:	1b09      	subs	r1, r1, r4
 8007268:	428b      	cmp	r3, r1
 800726a:	d906      	bls.n	800727a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800726c:	f002 ff8a 	bl	800a184 <__errno>
 8007270:	230c      	movs	r3, #12
 8007272:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007274:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8007278:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800727a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800727c:	e7fc      	b.n	8007278 <_sbrk+0x28>
 800727e:	bf00      	nop
 8007280:	20000430 	.word	0x20000430
 8007284:	20000588 	.word	0x20000588
 8007288:	20005000 	.word	0x20005000
 800728c:	00000400 	.word	0x00000400

08007290 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007290:	4770      	bx	lr
	...

08007294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007294:	f7ff fffc 	bl	8007290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007298:	480b      	ldr	r0, [pc, #44]	@ (80072c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800729a:	490c      	ldr	r1, [pc, #48]	@ (80072cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800729c:	4a0c      	ldr	r2, [pc, #48]	@ (80072d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800729e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072a0:	e002      	b.n	80072a8 <LoopCopyDataInit>

080072a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072a6:	3304      	adds	r3, #4

080072a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072ac:	d3f9      	bcc.n	80072a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072ae:	4a09      	ldr	r2, [pc, #36]	@ (80072d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80072b0:	4c09      	ldr	r4, [pc, #36]	@ (80072d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80072b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072b4:	e001      	b.n	80072ba <LoopFillZerobss>

080072b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072b8:	3204      	adds	r2, #4

080072ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072bc:	d3fb      	bcc.n	80072b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072be:	f002 ff67 	bl	800a190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80072c2:	f7ff fa9d 	bl	8006800 <main>
  bx lr
 80072c6:	4770      	bx	lr
  ldr r0, =_sdata
 80072c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80072d0:	0800cf48 	.word	0x0800cf48
  ldr r2, =_sbss
 80072d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80072d8:	20000588 	.word	0x20000588

080072dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072dc:	e7fe      	b.n	80072dc <ADC1_2_IRQHandler>
	...

080072e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072e2:	4b0e      	ldr	r3, [pc, #56]	@ (800731c <HAL_InitTick+0x3c>)
{
 80072e4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007320 <HAL_InitTick+0x40>)
 80072f2:	6810      	ldr	r0, [r2, #0]
 80072f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80072f8:	f000 fa60 	bl	80077bc <HAL_SYSTICK_Config>
 80072fc:	4604      	mov	r4, r0
 80072fe:	b958      	cbnz	r0, 8007318 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007300:	2d0f      	cmp	r5, #15
 8007302:	d809      	bhi.n	8007318 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007304:	4602      	mov	r2, r0
 8007306:	4629      	mov	r1, r5
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	f000 fa18 	bl	8007740 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007310:	4620      	mov	r0, r4
 8007312:	4b04      	ldr	r3, [pc, #16]	@ (8007324 <HAL_InitTick+0x44>)
 8007314:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007316:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007318:	2001      	movs	r0, #1
 800731a:	e7fc      	b.n	8007316 <HAL_InitTick+0x36>
 800731c:	20000008 	.word	0x20000008
 8007320:	20000004 	.word	0x20000004
 8007324:	2000000c 	.word	0x2000000c

08007328 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007328:	4a07      	ldr	r2, [pc, #28]	@ (8007348 <HAL_Init+0x20>)
{
 800732a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800732c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800732e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007330:	f043 0310 	orr.w	r3, r3, #16
 8007334:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007336:	f000 f9f1 	bl	800771c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800733a:	200f      	movs	r0, #15
 800733c:	f7ff ffd0 	bl	80072e0 <HAL_InitTick>
  HAL_MspInit();
 8007340:	f7ff fdc6 	bl	8006ed0 <HAL_MspInit>
}
 8007344:	2000      	movs	r0, #0
 8007346:	bd08      	pop	{r3, pc}
 8007348:	40022000 	.word	0x40022000

0800734c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800734c:	4a03      	ldr	r2, [pc, #12]	@ (800735c <HAL_IncTick+0x10>)
 800734e:	4b04      	ldr	r3, [pc, #16]	@ (8007360 <HAL_IncTick+0x14>)
 8007350:	6811      	ldr	r1, [r2, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	440b      	add	r3, r1
 8007356:	6013      	str	r3, [r2, #0]
}
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20000434 	.word	0x20000434
 8007360:	20000008 	.word	0x20000008

08007364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007364:	4b01      	ldr	r3, [pc, #4]	@ (800736c <HAL_GetTick+0x8>)
 8007366:	6818      	ldr	r0, [r3, #0]
}
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20000434 	.word	0x20000434

08007370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007374:	f7ff fff6 	bl	8007364 <HAL_GetTick>
 8007378:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800737a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800737c:	bf1e      	ittt	ne
 800737e:	4b04      	ldrne	r3, [pc, #16]	@ (8007390 <HAL_Delay+0x20>)
 8007380:	781b      	ldrbne	r3, [r3, #0]
 8007382:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007384:	f7ff ffee 	bl	8007364 <HAL_GetTick>
 8007388:	1b43      	subs	r3, r0, r5
 800738a:	42a3      	cmp	r3, r4
 800738c:	d3fa      	bcc.n	8007384 <HAL_Delay+0x14>
  {
  }
}
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20000008 	.word	0x20000008

08007394 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007394:	6803      	ldr	r3, [r0, #0]
 8007396:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8007398:	4770      	bx	lr
	...

0800739c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800739c:	2300      	movs	r3, #0
{ 
 800739e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80073a0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073a2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 80073a6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d06c      	beq.n	8007486 <HAL_ADC_ConfigChannel+0xea>
 80073ac:	2301      	movs	r3, #1
 80073ae:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80073b2:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80073b4:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80073b6:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80073b8:	6808      	ldr	r0, [r1, #0]
 80073ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80073be:	d822      	bhi.n	8007406 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80073c0:	261f      	movs	r6, #31
 80073c2:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80073c4:	3b05      	subs	r3, #5
 80073c6:	409e      	lsls	r6, r3
 80073c8:	ea25 0506 	bic.w	r5, r5, r6
 80073cc:	fa00 f303 	lsl.w	r3, r0, r3
 80073d0:	432b      	orrs	r3, r5
 80073d2:	6353      	str	r3, [r2, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80073d4:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80073d6:	688b      	ldr	r3, [r1, #8]
 80073d8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80073dc:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80073e0:	d929      	bls.n	8007436 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80073e2:	68d6      	ldr	r6, [r2, #12]
 80073e4:	3d1e      	subs	r5, #30
 80073e6:	40a9      	lsls	r1, r5
 80073e8:	ea26 0101 	bic.w	r1, r6, r1
 80073ec:	40ab      	lsls	r3, r5
 80073ee:	430b      	orrs	r3, r1
 80073f0:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073f2:	f1a0 0310 	sub.w	r3, r0, #16
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d925      	bls.n	8007446 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073fa:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073fc:	2300      	movs	r3, #0
 80073fe:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8007402:	b002      	add	sp, #8
 8007404:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8007406:	2d0c      	cmp	r5, #12
 8007408:	f04f 051f 	mov.w	r5, #31
 800740c:	d809      	bhi.n	8007422 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800740e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8007410:	3b23      	subs	r3, #35	@ 0x23
 8007412:	409d      	lsls	r5, r3
 8007414:	ea26 0505 	bic.w	r5, r6, r5
 8007418:	fa00 f303 	lsl.w	r3, r0, r3
 800741c:	432b      	orrs	r3, r5
 800741e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007420:	e7d8      	b.n	80073d4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007422:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8007424:	3b41      	subs	r3, #65	@ 0x41
 8007426:	409d      	lsls	r5, r3
 8007428:	ea26 0505 	bic.w	r5, r6, r5
 800742c:	fa00 f303 	lsl.w	r3, r0, r3
 8007430:	432b      	orrs	r3, r5
 8007432:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007434:	e7ce      	b.n	80073d4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007436:	6910      	ldr	r0, [r2, #16]
 8007438:	40a9      	lsls	r1, r5
 800743a:	ea20 0101 	bic.w	r1, r0, r1
 800743e:	40ab      	lsls	r3, r5
 8007440:	430b      	orrs	r3, r1
 8007442:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007444:	e7d9      	b.n	80073fa <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8007446:	4b11      	ldr	r3, [pc, #68]	@ (800748c <HAL_ADC_ConfigChannel+0xf0>)
 8007448:	429a      	cmp	r2, r3
 800744a:	d116      	bne.n	800747a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800744c:	6893      	ldr	r3, [r2, #8]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	d4d3      	bmi.n	80073fa <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007452:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007454:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800745a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800745c:	d1cd      	bne.n	80073fa <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800745e:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <HAL_ADC_ConfigChannel+0xf4>)
 8007460:	4a0c      	ldr	r2, [pc, #48]	@ (8007494 <HAL_ADC_ConfigChannel+0xf8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	fbb3 f3f2 	udiv	r3, r3, r2
 8007468:	220a      	movs	r2, #10
 800746a:	4353      	muls	r3, r2
            wait_loop_index--;
 800746c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0c2      	beq.n	80073fa <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	3b01      	subs	r3, #1
 8007478:	e7f8      	b.n	800746c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800747a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 800747c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800747e:	f043 0320 	orr.w	r3, r3, #32
 8007482:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8007484:	e7ba      	b.n	80073fc <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8007486:	2002      	movs	r0, #2
 8007488:	e7bb      	b.n	8007402 <HAL_ADC_ConfigChannel+0x66>
 800748a:	bf00      	nop
 800748c:	40012400 	.word	0x40012400
 8007490:	20000004 	.word	0x20000004
 8007494:	000f4240 	.word	0x000f4240

08007498 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8007498:	2300      	movs	r3, #0
{
 800749a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800749c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800749e:	6803      	ldr	r3, [r0, #0]
{
 80074a0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	07d2      	lsls	r2, r2, #31
 80074a6:	d502      	bpl.n	80074ae <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80074a8:	2000      	movs	r0, #0
}
 80074aa:	b003      	add	sp, #12
 80074ac:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074b6:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <ADC_Enable+0x70>)
 80074b8:	4a14      	ldr	r2, [pc, #80]	@ (800750c <ADC_Enable+0x74>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80074c0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80074c2:	9b01      	ldr	r3, [sp, #4]
 80074c4:	b9e3      	cbnz	r3, 8007500 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80074c6:	f7ff ff4d 	bl	8007364 <HAL_GetTick>
 80074ca:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	07db      	lsls	r3, r3, #31
 80074d2:	d4e9      	bmi.n	80074a8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074d4:	f7ff ff46 	bl	8007364 <HAL_GetTick>
 80074d8:	1b40      	subs	r0, r0, r5
 80074da:	2802      	cmp	r0, #2
 80074dc:	d9f6      	bls.n	80074cc <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f013 0301 	ands.w	r3, r3, #1
 80074e6:	d1f1      	bne.n	80074cc <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80074ea:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ec:	f042 0210 	orr.w	r2, r2, #16
 80074f0:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 80074f4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074f8:	f042 0201 	orr.w	r2, r2, #1
 80074fc:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80074fe:	e7d4      	b.n	80074aa <ADC_Enable+0x12>
      wait_loop_index--;
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	e7dc      	b.n	80074c0 <ADC_Enable+0x28>
 8007506:	bf00      	nop
 8007508:	20000004 	.word	0x20000004
 800750c:	000f4240 	.word	0x000f4240

08007510 <HAL_ADC_Start>:
{
 8007510:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8007512:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8007516:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007518:	2b01      	cmp	r3, #1
 800751a:	d054      	beq.n	80075c6 <HAL_ADC_Start+0xb6>
 800751c:	2301      	movs	r3, #1
 800751e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8007522:	f7ff ffb9 	bl	8007498 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8007526:	2800      	cmp	r0, #0
 8007528:	d149      	bne.n	80075be <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800752a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800752c:	4a27      	ldr	r2, [pc, #156]	@ (80075cc <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800752e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007532:	f023 0301 	bic.w	r3, r3, #1
 8007536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800753a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	4293      	cmp	r3, r2
 8007540:	d104      	bne.n	800754c <HAL_ADC_Start+0x3c>
 8007542:	4923      	ldr	r1, [pc, #140]	@ (80075d0 <HAL_ADC_Start+0xc0>)
 8007544:	684a      	ldr	r2, [r1, #4]
 8007546:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800754a:	d12e      	bne.n	80075aa <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800754c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800754e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007552:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007554:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007556:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007558:	bf41      	itttt	mi
 800755a:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 800755c:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 8007560:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 8007564:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007566:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800756c:	bf1c      	itt	ne
 800756e:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 8007570:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8007574:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8007576:	2200      	movs	r2, #0
 8007578:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800757c:	f06f 0202 	mvn.w	r2, #2
 8007580:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8007588:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 800758c:	d113      	bne.n	80075b6 <HAL_ADC_Start+0xa6>
 800758e:	4a0f      	ldr	r2, [pc, #60]	@ (80075cc <HAL_ADC_Start+0xbc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d105      	bne.n	80075a0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007594:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007598:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800759a:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800759e:	d10a      	bne.n	80075b6 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80075a6:	609a      	str	r2, [r3, #8]
}
 80075a8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80075ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80075b0:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80075b2:	684a      	ldr	r2, [r1, #4]
 80075b4:	e7cf      	b.n	8007556 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80075bc:	e7f3      	b.n	80075a6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80075be:	2300      	movs	r3, #0
 80075c0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80075c4:	e7f0      	b.n	80075a8 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 80075c6:	2002      	movs	r0, #2
 80075c8:	e7ee      	b.n	80075a8 <HAL_ADC_Start+0x98>
 80075ca:	bf00      	nop
 80075cc:	40012800 	.word	0x40012800
 80075d0:	40012400 	.word	0x40012400

080075d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80075d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80075d6:	6803      	ldr	r3, [r0, #0]
{
 80075d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	07d1      	lsls	r1, r2, #31
 80075de:	d401      	bmi.n	80075e4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80075e0:	2000      	movs	r0, #0
}
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80075ec:	f7ff feba 	bl	8007364 <HAL_GetTick>
 80075f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	07db      	lsls	r3, r3, #31
 80075f8:	d5f2      	bpl.n	80075e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80075fa:	f7ff feb3 	bl	8007364 <HAL_GetTick>
 80075fe:	1b40      	subs	r0, r0, r5
 8007600:	2802      	cmp	r0, #2
 8007602:	d9f6      	bls.n	80075f2 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	07da      	lsls	r2, r3, #31
 800760a:	d5f2      	bpl.n	80075f2 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800760c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 800760e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007610:	f043 0310 	orr.w	r3, r3, #16
 8007614:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007616:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800761e:	e7e0      	b.n	80075e2 <ADC_ConversionStop_Disable+0xe>

08007620 <HAL_ADC_Init>:
{
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8007622:	4604      	mov	r4, r0
 8007624:	2800      	cmp	r0, #0
 8007626:	d06d      	beq.n	8007704 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007628:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800762a:	b923      	cbnz	r3, 8007636 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800762c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800762e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8007632:	f7ff fc6f 	bl	8006f14 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007636:	4620      	mov	r0, r4
 8007638:	f7ff ffcc 	bl	80075d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800763c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800763e:	f013 0310 	ands.w	r3, r3, #16
 8007642:	d161      	bne.n	8007708 <HAL_ADC_Init+0xe8>
 8007644:	2800      	cmp	r0, #0
 8007646:	d15f      	bne.n	8007708 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8007648:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800764a:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800764c:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8007650:	f022 0202 	bic.w	r2, r2, #2
 8007654:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007658:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800765a:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800765c:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800765e:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007660:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007662:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007666:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800766a:	d036      	beq.n	80076da <HAL_ADC_Init+0xba>
 800766c:	1e77      	subs	r7, r6, #1
 800766e:	427d      	negs	r5, r7
 8007670:	417d      	adcs	r5, r7
 8007672:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007674:	7d27      	ldrb	r7, [r4, #20]
 8007676:	2f01      	cmp	r7, #1
 8007678:	d106      	bne.n	8007688 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800767a:	bb82      	cbnz	r2, 80076de <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800767c:	69a2      	ldr	r2, [r4, #24]
 800767e:	3a01      	subs	r2, #1
 8007680:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8007684:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8007688:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800768a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800768e:	6857      	ldr	r7, [r2, #4]
 8007690:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 8007694:	ea45 0507 	orr.w	r5, r5, r7
 8007698:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800769a:	6897      	ldr	r7, [r2, #8]
 800769c:	4d1d      	ldr	r5, [pc, #116]	@ (8007714 <HAL_ADC_Init+0xf4>)
 800769e:	ea05 0507 	and.w	r5, r5, r7
 80076a2:	ea45 0501 	orr.w	r5, r5, r1
 80076a6:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80076a8:	d001      	beq.n	80076ae <HAL_ADC_Init+0x8e>
 80076aa:	2e01      	cmp	r6, #1
 80076ac:	d102      	bne.n	80076b4 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80076b4:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 80076b6:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 80076ba:	432b      	orrs	r3, r5
 80076bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80076be:	6892      	ldr	r2, [r2, #8]
 80076c0:	4b15      	ldr	r3, [pc, #84]	@ (8007718 <HAL_ADC_Init+0xf8>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	4299      	cmp	r1, r3
 80076c6:	d113      	bne.n	80076f0 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 80076c8:	2300      	movs	r3, #0
 80076ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80076cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80076d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80076da:	4635      	mov	r5, r6
 80076dc:	e7ca      	b.n	8007674 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80076e0:	f042 0220 	orr.w	r2, r2, #32
 80076e4:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80076ee:	e7cb      	b.n	8007688 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80076f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80076f2:	f023 0312 	bic.w	r3, r3, #18
 80076f6:	f043 0310 	orr.w	r3, r3, #16
 80076fa:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 8007704:	2001      	movs	r0, #1
 8007706:	e7e7      	b.n	80076d8 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007708:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800770a:	f043 0310 	orr.w	r3, r3, #16
 800770e:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8007710:	e7f8      	b.n	8007704 <HAL_ADC_Init+0xe4>
 8007712:	bf00      	nop
 8007714:	ffe1f7fd 	.word	0xffe1f7fd
 8007718:	ff1f0efe 	.word	0xff1f0efe

0800771c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800771c:	4907      	ldr	r1, [pc, #28]	@ (800773c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800771e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007720:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007722:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007726:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800772a:	0412      	lsls	r2, r2, #16
 800772c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800772e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8007738:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800773a:	4770      	bx	lr
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007740:	4b15      	ldr	r3, [pc, #84]	@ (8007798 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007742:	b530      	push	{r4, r5, lr}
 8007744:	68dc      	ldr	r4, [r3, #12]
 8007746:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800774a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800774e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007750:	2b04      	cmp	r3, #4
 8007752:	bf28      	it	cs
 8007754:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007756:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007758:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800775c:	bf94      	ite	ls
 800775e:	2400      	movls	r4, #0
 8007760:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007762:	fa05 f303 	lsl.w	r3, r5, r3
 8007766:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800776a:	40a5      	lsls	r5, r4
 800776c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007770:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8007772:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007774:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007778:	bfac      	ite	ge
 800777a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800777e:	4a07      	ldrlt	r2, [pc, #28]	@ (800779c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007780:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007784:	b2db      	uxtb	r3, r3
 8007786:	bfab      	itete	ge
 8007788:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800778c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007790:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007794:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	e000ed00 	.word	0xe000ed00
 800779c:	e000ed14 	.word	0xe000ed14

080077a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80077a0:	2800      	cmp	r0, #0
 80077a2:	db07      	blt.n	80077b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077a4:	2301      	movs	r3, #1
 80077a6:	0941      	lsrs	r1, r0, #5
 80077a8:	4a03      	ldr	r2, [pc, #12]	@ (80077b8 <HAL_NVIC_EnableIRQ+0x18>)
 80077aa:	f000 001f 	and.w	r0, r0, #31
 80077ae:	4083      	lsls	r3, r0
 80077b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	e000e100 	.word	0xe000e100

080077bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077bc:	3801      	subs	r0, #1
 80077be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80077c2:	d20b      	bcs.n	80077dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c8:	21f0      	movs	r1, #240	@ 0xf0
 80077ca:	4a05      	ldr	r2, [pc, #20]	@ (80077e0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077cc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077d2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077d4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077d6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80077dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80077de:	4770      	bx	lr
 80077e0:	e000ed00 	.word	0xe000ed00

080077e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80077e8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80077ea:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80077ec:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8007978 <HAL_GPIO_Init+0x194>
 80077f0:	4b62      	ldr	r3, [pc, #392]	@ (800797c <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80077f2:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8007980 <HAL_GPIO_Init+0x19c>
 80077f6:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8007984 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077fa:	680a      	ldr	r2, [r1, #0]
 80077fc:	fa32 f506 	lsrs.w	r5, r2, r6
 8007800:	d102      	bne.n	8007808 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8007802:	b003      	add	sp, #12
 8007804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007808:	2701      	movs	r7, #1
 800780a:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800780c:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8007810:	ea37 0202 	bics.w	r2, r7, r2
 8007814:	d17a      	bne.n	800790c <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8007816:	684a      	ldr	r2, [r1, #4]
 8007818:	2a03      	cmp	r2, #3
 800781a:	d807      	bhi.n	800782c <HAL_GPIO_Init+0x48>
 800781c:	3a01      	subs	r2, #1
 800781e:	2a02      	cmp	r2, #2
 8007820:	f200 8083 	bhi.w	800792a <HAL_GPIO_Init+0x146>
 8007824:	e8df f002 	tbb	[pc, r2]
 8007828:	9792      	.short	0x9792
 800782a:	9d          	.byte	0x9d
 800782b:	00          	.byte	0x00
 800782c:	2a12      	cmp	r2, #18
 800782e:	f000 8095 	beq.w	800795c <HAL_GPIO_Init+0x178>
 8007832:	d86d      	bhi.n	8007910 <HAL_GPIO_Init+0x12c>
 8007834:	2a11      	cmp	r2, #17
 8007836:	f000 808b 	beq.w	8007950 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800783a:	2dff      	cmp	r5, #255	@ 0xff
 800783c:	bf98      	it	ls
 800783e:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007840:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007844:	bf88      	it	hi
 8007846:	f100 0904 	addhi.w	r9, r0, #4
 800784a:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800784e:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007852:	bf88      	it	hi
 8007854:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007856:	fa0b fa02 	lsl.w	sl, fp, r2
 800785a:	ea27 070a 	bic.w	r7, r7, sl
 800785e:	fa04 f202 	lsl.w	r2, r4, r2
 8007862:	4317      	orrs	r7, r2
 8007864:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007868:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800786c:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8007870:	d04c      	beq.n	800790c <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007872:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007876:	f026 0703 	bic.w	r7, r6, #3
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	f8cc 2018 	str.w	r2, [ip, #24]
 8007882:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007886:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800788a:	f002 0201 	and.w	r2, r2, #1
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007894:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007898:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800789a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800789e:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80078a0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80078a4:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80078a8:	4a37      	ldr	r2, [pc, #220]	@ (8007988 <HAL_GPIO_Init+0x1a4>)
 80078aa:	4290      	cmp	r0, r2
 80078ac:	d05d      	beq.n	800796a <HAL_GPIO_Init+0x186>
 80078ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078b2:	4290      	cmp	r0, r2
 80078b4:	d05b      	beq.n	800796e <HAL_GPIO_Init+0x18a>
 80078b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078ba:	4290      	cmp	r0, r2
 80078bc:	d059      	beq.n	8007972 <HAL_GPIO_Init+0x18e>
 80078be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078c2:	4290      	cmp	r0, r2
 80078c4:	bf14      	ite	ne
 80078c6:	2204      	movne	r2, #4
 80078c8:	2203      	moveq	r2, #3
 80078ca:	fa02 f20a 	lsl.w	r2, r2, sl
 80078ce:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80078d2:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80078d4:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078d6:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80078da:	bf14      	ite	ne
 80078dc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80078de:	43aa      	biceq	r2, r5
 80078e0:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80078e2:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80078e4:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80078e8:	bf14      	ite	ne
 80078ea:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80078ec:	43aa      	biceq	r2, r5
 80078ee:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80078f0:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078f2:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80078f6:	bf14      	ite	ne
 80078f8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80078fa:	43aa      	biceq	r2, r5
 80078fc:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80078fe:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007900:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007904:	bf14      	ite	ne
 8007906:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007908:	43aa      	biceq	r2, r5
 800790a:	601a      	str	r2, [r3, #0]
	position++;
 800790c:	3601      	adds	r6, #1
 800790e:	e774      	b.n	80077fa <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8007910:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800798c <HAL_GPIO_Init+0x1a8>
 8007914:	454a      	cmp	r2, r9
 8007916:	d008      	beq.n	800792a <HAL_GPIO_Init+0x146>
 8007918:	d810      	bhi.n	800793c <HAL_GPIO_Init+0x158>
 800791a:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800791e:	454a      	cmp	r2, r9
 8007920:	d003      	beq.n	800792a <HAL_GPIO_Init+0x146>
 8007922:	4572      	cmp	r2, lr
 8007924:	d001      	beq.n	800792a <HAL_GPIO_Init+0x146>
 8007926:	4542      	cmp	r2, r8
 8007928:	d187      	bne.n	800783a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800792a:	688a      	ldr	r2, [r1, #8]
 800792c:	b1da      	cbz	r2, 8007966 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800792e:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007930:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8007934:	bf0c      	ite	eq
 8007936:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007938:	6147      	strne	r7, [r0, #20]
 800793a:	e77e      	b.n	800783a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800793c:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8007990 <HAL_GPIO_Init+0x1ac>
 8007940:	454a      	cmp	r2, r9
 8007942:	d0f2      	beq.n	800792a <HAL_GPIO_Init+0x146>
 8007944:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007948:	454a      	cmp	r2, r9
 800794a:	e7ed      	b.n	8007928 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800794c:	68cc      	ldr	r4, [r1, #12]
          break;
 800794e:	e774      	b.n	800783a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007950:	68cc      	ldr	r4, [r1, #12]
 8007952:	3404      	adds	r4, #4
          break;
 8007954:	e771      	b.n	800783a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007956:	68cc      	ldr	r4, [r1, #12]
 8007958:	3408      	adds	r4, #8
          break;
 800795a:	e76e      	b.n	800783a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800795c:	68cc      	ldr	r4, [r1, #12]
 800795e:	340c      	adds	r4, #12
          break;
 8007960:	e76b      	b.n	800783a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007962:	2400      	movs	r4, #0
 8007964:	e769      	b.n	800783a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007966:	2404      	movs	r4, #4
 8007968:	e767      	b.n	800783a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800796a:	2200      	movs	r2, #0
 800796c:	e7ad      	b.n	80078ca <HAL_GPIO_Init+0xe6>
 800796e:	2201      	movs	r2, #1
 8007970:	e7ab      	b.n	80078ca <HAL_GPIO_Init+0xe6>
 8007972:	2202      	movs	r2, #2
 8007974:	e7a9      	b.n	80078ca <HAL_GPIO_Init+0xe6>
 8007976:	bf00      	nop
 8007978:	40021000 	.word	0x40021000
 800797c:	40010400 	.word	0x40010400
 8007980:	10210000 	.word	0x10210000
 8007984:	10110000 	.word	0x10110000
 8007988:	40010800 	.word	0x40010800
 800798c:	10220000 	.word	0x10220000
 8007990:	10310000 	.word	0x10310000

08007994 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007994:	6883      	ldr	r3, [r0, #8]
 8007996:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007998:	bf14      	ite	ne
 800799a:	2001      	movne	r0, #1
 800799c:	2000      	moveq	r0, #0
 800799e:	4770      	bx	lr

080079a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079a0:	b10a      	cbz	r2, 80079a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80079a2:	6101      	str	r1, [r0, #16]
  }
}
 80079a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80079a6:	0409      	lsls	r1, r1, #16
 80079a8:	e7fb      	b.n	80079a2 <HAL_GPIO_WritePin+0x2>
	...

080079ac <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80079ac:	4a04      	ldr	r2, [pc, #16]	@ (80079c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80079ae:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80079b0:	6951      	ldr	r1, [r2, #20]
 80079b2:	4201      	tst	r1, r0
 80079b4:	d002      	beq.n	80079bc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079b6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079b8:	f7fe fe04 	bl	80065c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80079bc:	bd08      	pop	{r3, pc}
 80079be:	bf00      	nop
 80079c0:	40010400 	.word	0x40010400

080079c4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079c4:	6801      	ldr	r1, [r0, #0]
 80079c6:	2200      	movs	r2, #0
 80079c8:	694b      	ldr	r3, [r1, #20]
 80079ca:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80079ce:	d010      	beq.n	80079f2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d0:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80079d4:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80079d6:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80079d8:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079da:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079de:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079e8:	f043 0304 	orr.w	r3, r3, #4
 80079ec:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80079ee:	2001      	movs	r0, #1
 80079f0:	4770      	bx	lr
  }
  return HAL_OK;
 80079f2:	4618      	mov	r0, r3
}
 80079f4:	4770      	bx	lr

080079f6 <I2C_WaitOnFlagUntilTimeout>:
{
 80079f6:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	4691      	mov	r9, r2
 8007a00:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a06:	6833      	ldr	r3, [r6, #0]
 8007a08:	f1ba 0f01 	cmp.w	sl, #1
 8007a0c:	bf0c      	ite	eq
 8007a0e:	695c      	ldreq	r4, [r3, #20]
 8007a10:	699c      	ldrne	r4, [r3, #24]
 8007a12:	ea27 0404 	bic.w	r4, r7, r4
 8007a16:	b2a4      	uxth	r4, r4
 8007a18:	fab4 f484 	clz	r4, r4
 8007a1c:	0964      	lsrs	r4, r4, #5
 8007a1e:	45a1      	cmp	r9, r4
 8007a20:	d001      	beq.n	8007a26 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8007a22:	2000      	movs	r0, #0
 8007a24:	e025      	b.n	8007a72 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8007a26:	1c6a      	adds	r2, r5, #1
 8007a28:	d0ee      	beq.n	8007a08 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2a:	f7ff fc9b 	bl	8007364 <HAL_GetTick>
 8007a2e:	9b08      	ldr	r3, [sp, #32]
 8007a30:	1ac0      	subs	r0, r0, r3
 8007a32:	42a8      	cmp	r0, r5
 8007a34:	d801      	bhi.n	8007a3a <I2C_WaitOnFlagUntilTimeout+0x44>
 8007a36:	2d00      	cmp	r5, #0
 8007a38:	d1e5      	bne.n	8007a06 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007a3a:	6833      	ldr	r3, [r6, #0]
 8007a3c:	f1ba 0f01 	cmp.w	sl, #1
 8007a40:	bf0c      	ite	eq
 8007a42:	695b      	ldreq	r3, [r3, #20]
 8007a44:	699b      	ldrne	r3, [r3, #24]
 8007a46:	ea27 0303 	bic.w	r3, r7, r3
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	fab3 f383 	clz	r3, r3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	4599      	cmp	r9, r3
 8007a54:	d1d7      	bne.n	8007a06 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007a56:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8007a58:	2220      	movs	r2, #32
          return HAL_ERROR;
 8007a5a:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007a5c:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007a5e:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a62:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a66:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8007a68:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a6c:	f042 0220 	orr.w	r2, r2, #32
 8007a70:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8007a72:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8007a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	4616      	mov	r6, r2
 8007a80:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	6968      	ldr	r0, [r5, #20]
 8007a86:	ea27 0000 	bic.w	r0, r7, r0
 8007a8a:	b280      	uxth	r0, r0
 8007a8c:	b1c0      	cbz	r0, 8007ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a8e:	696b      	ldr	r3, [r5, #20]
 8007a90:	055a      	lsls	r2, r3, #21
 8007a92:	d517      	bpl.n	8007ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a94:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a96:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a9c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a9e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8007aa2:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aa8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ab2:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ab6:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8007ab8:	2300      	movs	r3, #0
      return HAL_ERROR;
 8007aba:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8007abc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007ac4:	1c73      	adds	r3, r6, #1
 8007ac6:	d0dd      	beq.n	8007a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac8:	f7ff fc4c 	bl	8007364 <HAL_GetTick>
 8007acc:	eba0 0008 	sub.w	r0, r0, r8
 8007ad0:	42b0      	cmp	r0, r6
 8007ad2:	d801      	bhi.n	8007ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8007ad4:	2e00      	cmp	r6, #0
 8007ad6:	d1d4      	bne.n	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	695a      	ldr	r2, [r3, #20]
 8007adc:	ea27 0202 	bic.w	r2, r7, r2
 8007ae0:	b292      	uxth	r2, r2
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d0cd      	beq.n	8007a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ae6:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ae8:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007aea:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007aec:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007af0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007af4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007af6:	4313      	orrs	r3, r2
 8007af8:	e7dd      	b.n	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08007afa <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8007afa:	b570      	push	{r4, r5, r6, lr}
 8007afc:	4604      	mov	r4, r0
 8007afe:	460d      	mov	r5, r1
 8007b00:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	d501      	bpl.n	8007b0e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e01e      	b.n	8007b4c <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff ff58 	bl	80079c4 <I2C_IsAcknowledgeFailed>
 8007b14:	b9c8      	cbnz	r0, 8007b4a <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007b16:	1c6a      	adds	r2, r5, #1
 8007b18:	d0f3      	beq.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1a:	f7ff fc23 	bl	8007364 <HAL_GetTick>
 8007b1e:	1b80      	subs	r0, r0, r6
 8007b20:	42a8      	cmp	r0, r5
 8007b22:	d801      	bhi.n	8007b28 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	d1ec      	bne.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8007b30:	d1e7      	bne.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b32:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b34:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b36:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b3a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8007b40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b44:	f042 0220 	orr.w	r2, r2, #32
 8007b48:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007b4a:	2001      	movs	r0, #1
}
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b50 <I2C_RequestMemoryWrite>:
{
 8007b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b56:	6802      	ldr	r2, [r0, #0]
{
 8007b58:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b5a:	6813      	ldr	r3, [r2, #0]
{
 8007b5c:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b62:	6013      	str	r3, [r2, #0]
{
 8007b64:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8007b68:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b72:	f8cd 8000 	str.w	r8, [sp]
{
 8007b76:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b78:	f7ff ff3d 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	b138      	cbz	r0, 8007b90 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	05db      	lsls	r3, r3, #23
 8007b84:	d502      	bpl.n	8007b8c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b8a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8007b8c:	2603      	movs	r6, #3
 8007b8e:	e020      	b.n	8007bd2 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b90:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8007b94:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b96:	463a      	mov	r2, r7
 8007b98:	4643      	mov	r3, r8
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4918      	ldr	r1, [pc, #96]	@ (8007c00 <I2C_RequestMemoryWrite+0xb0>)
 8007b9e:	f7ff ff6a 	bl	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba2:	b9a8      	cbnz	r0, 8007bd0 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	9003      	str	r0, [sp, #12]
 8007ba8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007baa:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bac:	9203      	str	r2, [sp, #12]
 8007bae:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb0:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb8:	f7ff ff9f 	bl	8007afa <I2C_WaitOnTXEFlagUntilTimeout>
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	b160      	cbz	r0, 8007bda <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bc2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	bf01      	itttt	eq
 8007bc6:	6822      	ldreq	r2, [r4, #0]
 8007bc8:	6813      	ldreq	r3, [r2, #0]
 8007bca:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8007bce:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8007bd0:	2601      	movs	r6, #1
}
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	b005      	add	sp, #20
 8007bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bda:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007be0:	d102      	bne.n	8007be8 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007be2:	b2ed      	uxtb	r5, r5
 8007be4:	611d      	str	r5, [r3, #16]
 8007be6:	e7f4      	b.n	8007bd2 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007be8:	0a2a      	lsrs	r2, r5, #8
 8007bea:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bec:	4639      	mov	r1, r7
 8007bee:	4642      	mov	r2, r8
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff ff82 	bl	8007afa <I2C_WaitOnTXEFlagUntilTimeout>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d1e2      	bne.n	8007bc0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	e7f1      	b.n	8007be2 <I2C_RequestMemoryWrite+0x92>
 8007bfe:	bf00      	nop
 8007c00:	00010002 	.word	0x00010002

08007c04 <I2C_RequestMemoryRead>:
{
 8007c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	469a      	mov	sl, r3
 8007c0a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0e:	6803      	ldr	r3, [r0, #0]
{
 8007c10:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c12:	681a      	ldr	r2, [r3, #0]
{
 8007c14:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c1a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c1c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c26:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c28:	463b      	mov	r3, r7
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8cd 8000 	str.w	r8, [sp]
{
 8007c30:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c32:	f7ff fee0 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	b148      	cbz	r0, 8007c4e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c3a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c3c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c3e:	bf48      	it	mi
 8007c40:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 8007c44:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c48:	bf48      	it	mi
 8007c4a:	6423      	strmi	r3, [r4, #64]	@ 0x40
 8007c4c:	e021      	b.n	8007c92 <I2C_RequestMemoryRead+0x8e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c4e:	fa5f f986 	uxtb.w	r9, r6
 8007c52:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8007c56:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c58:	463a      	mov	r2, r7
 8007c5a:	4643      	mov	r3, r8
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	492a      	ldr	r1, [pc, #168]	@ (8007d08 <I2C_RequestMemoryRead+0x104>)
 8007c60:	f7ff ff09 	bl	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c64:	b9a0      	cbnz	r0, 8007c90 <I2C_RequestMemoryRead+0x8c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	9003      	str	r0, [sp, #12]
 8007c6a:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c6c:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c6e:	9203      	str	r2, [sp, #12]
 8007c70:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c72:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c74:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c76:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c78:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c7a:	f7ff ff3e 	bl	8007afa <I2C_WaitOnTXEFlagUntilTimeout>
 8007c7e:	b158      	cbz	r0, 8007c98 <I2C_RequestMemoryRead+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c82:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c84:	bf01      	itttt	eq
 8007c86:	6822      	ldreq	r2, [r4, #0]
 8007c88:	6813      	ldreq	r3, [r2, #0]
 8007c8a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8007c8e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8007c90:	2001      	movs	r0, #1
}
 8007c92:	b004      	add	sp, #16
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c98:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c9c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c9e:	d11a      	bne.n	8007cd6 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ca0:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ca8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007caa:	f7ff ff26 	bl	8007afa <I2C_WaitOnTXEFlagUntilTimeout>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1e5      	bne.n	8007c80 <I2C_RequestMemoryRead+0x7c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cb4:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb6:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cbe:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007cc6:	f8cd 8000 	str.w	r8, [sp]
 8007cca:	f7ff fe94 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 8007cce:	6822      	ldr	r2, [r4, #0]
 8007cd0:	b160      	cbz	r0, 8007cec <I2C_RequestMemoryRead+0xe8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	e7b2      	b.n	8007c3c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cd6:	0a2a      	lsrs	r2, r5, #8
 8007cd8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cda:	4639      	mov	r1, r7
 8007cdc:	4642      	mov	r2, r8
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ff0b 	bl	8007afa <I2C_WaitOnTXEFlagUntilTimeout>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1cb      	bne.n	8007c80 <I2C_RequestMemoryRead+0x7c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	e7d9      	b.n	8007ca0 <I2C_RequestMemoryRead+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cec:	f049 0301 	orr.w	r3, r9, #1
 8007cf0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4643      	mov	r3, r8
 8007cf6:	463a      	mov	r2, r7
 8007cf8:	4903      	ldr	r1, [pc, #12]	@ (8007d08 <I2C_RequestMemoryRead+0x104>)
 8007cfa:	f7ff febc 	bl	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cfe:	3800      	subs	r0, #0
 8007d00:	bf18      	it	ne
 8007d02:	2001      	movne	r0, #1
 8007d04:	e7c5      	b.n	8007c92 <I2C_RequestMemoryRead+0x8e>
 8007d06:	bf00      	nop
 8007d08:	00010002 	.word	0x00010002

08007d0c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4604      	mov	r4, r0
 8007d10:	460d      	mov	r5, r1
 8007d12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	075b      	lsls	r3, r3, #29
 8007d1a:	d501      	bpl.n	8007d20 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e01e      	b.n	8007d5e <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7ff fe4f 	bl	80079c4 <I2C_IsAcknowledgeFailed>
 8007d26:	b9c8      	cbnz	r0, 8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007d28:	1c6a      	adds	r2, r5, #1
 8007d2a:	d0f3      	beq.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2c:	f7ff fb1a 	bl	8007364 <HAL_GetTick>
 8007d30:	1b80      	subs	r0, r0, r6
 8007d32:	42a8      	cmp	r0, r5
 8007d34:	d801      	bhi.n	8007d3a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	d1ec      	bne.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f013 0304 	ands.w	r3, r3, #4
 8007d42:	d1e7      	bne.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d44:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d46:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d48:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d4c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d50:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8007d52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d56:	f042 0220 	orr.w	r2, r2, #32
 8007d5a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007d5c:	2001      	movs	r0, #1
}
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}

08007d60 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	4604      	mov	r4, r0
 8007d64:	460d      	mov	r5, r1
 8007d66:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d68:	6821      	ldr	r1, [r4, #0]
 8007d6a:	694b      	ldr	r3, [r1, #20]
 8007d6c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8007d70:	d001      	beq.n	8007d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8007d72:	2000      	movs	r0, #0
 8007d74:	e011      	b.n	8007d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d76:	694a      	ldr	r2, [r1, #20]
 8007d78:	06d2      	lsls	r2, r2, #27
 8007d7a:	d50f      	bpl.n	8007d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d7c:	f06f 0210 	mvn.w	r2, #16
 8007d80:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d82:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d84:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d86:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d90:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007d92:	2300      	movs	r3, #0
      return HAL_ERROR;
 8007d94:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8007d96:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9c:	f7ff fae2 	bl	8007364 <HAL_GetTick>
 8007da0:	1b80      	subs	r0, r0, r6
 8007da2:	42a8      	cmp	r0, r5
 8007da4:	d801      	bhi.n	8007daa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	d1de      	bne.n	8007d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8007db2:	d1d9      	bne.n	8007d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8007db4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007db6:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007db8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dbc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	e7e4      	b.n	8007d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08007dc8 <HAL_I2C_Init>:
{
 8007dc8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8007dca:	4604      	mov	r4, r0
 8007dcc:	b908      	cbnz	r0, 8007dd2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8007dce:	2001      	movs	r0, #1
}
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dd2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007dd6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007dda:	b91b      	cbnz	r3, 8007de4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8007ddc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8007de0:	f7ff f8c6 	bl	8006f70 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007de4:	2324      	movs	r3, #36	@ 0x24
 8007de6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e02:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e04:	f000 fcb2 	bl	800876c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e08:	4b3f      	ldr	r3, [pc, #252]	@ (8007f08 <HAL_I2C_Init+0x140>)
 8007e0a:	6865      	ldr	r5, [r4, #4]
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	bf94      	ite	ls
 8007e10:	4b3e      	ldrls	r3, [pc, #248]	@ (8007f0c <HAL_I2C_Init+0x144>)
 8007e12:	4b3f      	ldrhi	r3, [pc, #252]	@ (8007f10 <HAL_I2C_Init+0x148>)
 8007e14:	4298      	cmp	r0, r3
 8007e16:	bf8c      	ite	hi
 8007e18:	2300      	movhi	r3, #0
 8007e1a:	2301      	movls	r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1d6      	bne.n	8007dce <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e20:	4e39      	ldr	r6, [pc, #228]	@ (8007f08 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8007e22:	4b3c      	ldr	r3, [pc, #240]	@ (8007f14 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e24:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8007e26:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e2a:	bf88      	it	hi
 8007e2c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	6851      	ldr	r1, [r2, #4]
 8007e34:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007e38:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e3c:	bf82      	ittt	hi
 8007e3e:	4373      	mulhi	r3, r6
 8007e40:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8007e44:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e48:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e4a:	6a11      	ldr	r1, [r2, #32]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e56:	69d1      	ldr	r1, [r2, #28]
 8007e58:	1e43      	subs	r3, r0, #1
 8007e5a:	482b      	ldr	r0, [pc, #172]	@ (8007f08 <HAL_I2C_Init+0x140>)
 8007e5c:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8007e60:	4285      	cmp	r5, r0
 8007e62:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8007e66:	d832      	bhi.n	8007ece <HAL_I2C_Init+0x106>
 8007e68:	006d      	lsls	r5, r5, #1
 8007e6a:	fbb3 f3f5 	udiv	r3, r3, r5
 8007e6e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8007e72:	3301      	adds	r3, #1
 8007e74:	4203      	tst	r3, r0
 8007e76:	d042      	beq.n	8007efe <HAL_I2C_Init+0x136>
 8007e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7c:	4319      	orrs	r1, r3
 8007e7e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e80:	6811      	ldr	r1, [r2, #0]
 8007e82:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8007e86:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8007e8a:	4303      	orrs	r3, r0
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e90:	6891      	ldr	r1, [r2, #8]
 8007e92:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8007e96:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8007e9a:	4303      	orrs	r3, r0
 8007e9c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ea4:	68d1      	ldr	r1, [r2, #12]
 8007ea6:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8007eaa:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8007eae:	4303      	orrs	r3, r0
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007eb4:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb6:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007ebe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ec0:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007ec2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ec6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8007ecc:	e780      	b.n	8007dd0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ece:	68a0      	ldr	r0, [r4, #8]
 8007ed0:	b950      	cbnz	r0, 8007ee8 <HAL_I2C_Init+0x120>
 8007ed2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ed6:	fbb3 f3f5 	udiv	r3, r3, r5
 8007eda:	3301      	adds	r3, #1
 8007edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ee0:	b17b      	cbz	r3, 8007f02 <HAL_I2C_Init+0x13a>
 8007ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee6:	e7c9      	b.n	8007e7c <HAL_I2C_Init+0xb4>
 8007ee8:	2019      	movs	r0, #25
 8007eea:	4368      	muls	r0, r5
 8007eec:	fbb3 f3f0 	udiv	r3, r3, r0
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef6:	b123      	cbz	r3, 8007f02 <HAL_I2C_Init+0x13a>
 8007ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007efc:	e7be      	b.n	8007e7c <HAL_I2C_Init+0xb4>
 8007efe:	2304      	movs	r3, #4
 8007f00:	e7bc      	b.n	8007e7c <HAL_I2C_Init+0xb4>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e7ba      	b.n	8007e7c <HAL_I2C_Init+0xb4>
 8007f06:	bf00      	nop
 8007f08:	000186a0 	.word	0x000186a0
 8007f0c:	001e847f 	.word	0x001e847f
 8007f10:	003d08ff 	.word	0x003d08ff
 8007f14:	000f4240 	.word	0x000f4240

08007f18 <HAL_I2C_Mem_Write>:
{
 8007f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	4699      	mov	r9, r3
 8007f20:	460f      	mov	r7, r1
 8007f22:	4690      	mov	r8, r2
 8007f24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8007f26:	f7ff fa1d 	bl	8007364 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f2a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8007f2e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d003      	beq.n	8007f3c <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8007f34:	2002      	movs	r0, #2
}
 8007f36:	b003      	add	sp, #12
 8007f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f3c:	9000      	str	r0, [sp, #0]
 8007f3e:	2319      	movs	r3, #25
 8007f40:	2201      	movs	r2, #1
 8007f42:	4620      	mov	r0, r4
 8007f44:	493a      	ldr	r1, [pc, #232]	@ (8008030 <HAL_I2C_Mem_Write+0x118>)
 8007f46:	f7ff fd56 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d1f2      	bne.n	8007f34 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8007f4e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d0ee      	beq.n	8007f34 <HAL_I2C_Mem_Write+0x1c>
 8007f56:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f58:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8007f5a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f5e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f60:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f62:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8007f64:	bf58      	it	pl
 8007f66:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f68:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8007f6a:	bf5c      	itt	pl
 8007f6c:	f043 0301 	orrpl.w	r3, r3, #1
 8007f70:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f72:	6803      	ldr	r3, [r0, #0]
 8007f74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f78:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f7a:	2321      	movs	r3, #33	@ 0x21
 8007f7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f80:	2340      	movs	r3, #64	@ 0x40
 8007f82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8007f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f8c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8007f8e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f90:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8007f94:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f96:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007f98:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f9a:	4b26      	ldr	r3, [pc, #152]	@ (8008034 <HAL_I2C_Mem_Write+0x11c>)
 8007f9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	e9cd 6500 	strd	r6, r5, [sp]
 8007fa4:	f7ff fdd4 	bl	8007b50 <I2C_RequestMemoryWrite>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d02a      	beq.n	8008002 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8007fac:	2001      	movs	r0, #1
 8007fae:	e7c2      	b.n	8007f36 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fb0:	f7ff fda3 	bl	8007afa <I2C_WaitOnTXEFlagUntilTimeout>
 8007fb4:	b140      	cbz	r0, 8007fc8 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fb8:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fba:	bf01      	itttt	eq
 8007fbc:	6822      	ldreq	r2, [r4, #0]
 8007fbe:	6813      	ldreq	r3, [r2, #0]
 8007fc0:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8007fc4:	6013      	streq	r3, [r2, #0]
 8007fc6:	e7f1      	b.n	8007fac <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fca:	6827      	ldr	r7, [r4, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007fd2:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8007fd4:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007fd6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fd8:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007fda:	3a01      	subs	r2, #1
 8007fdc:	b292      	uxth	r2, r2
 8007fde:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007fe0:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8007fe2:	1e48      	subs	r0, r1, #1
 8007fe4:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007fe6:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8007fe8:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007fea:	d50a      	bpl.n	8008002 <HAL_I2C_Mem_Write+0xea>
 8007fec:	b148      	cbz	r0, 8008002 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fee:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8007ff0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ff2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8007ff4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8007ff6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8007ff8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8007ffe:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8008000:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008002:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008004:	462a      	mov	r2, r5
 8008006:	4631      	mov	r1, r6
 8008008:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1d0      	bne.n	8007fb0 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800800e:	f7ff fe7d 	bl	8007d0c <I2C_WaitOnBTFFlagUntilTimeout>
 8008012:	2800      	cmp	r0, #0
 8008014:	d1cf      	bne.n	8007fb6 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008016:	6822      	ldr	r2, [r4, #0]
 8008018:	6813      	ldr	r3, [r2, #0]
 800801a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800801e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008020:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8008022:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008026:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800802a:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 800802e:	e782      	b.n	8007f36 <HAL_I2C_Mem_Write+0x1e>
 8008030:	00100002 	.word	0x00100002
 8008034:	ffff0000 	.word	0xffff0000

08008038 <HAL_I2C_Mem_Read>:
{
 8008038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800803c:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 800803e:	2300      	movs	r3, #0
{
 8008040:	4604      	mov	r4, r0
 8008042:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 8008044:	9303      	str	r3, [sp, #12]
{
 8008046:	460d      	mov	r5, r1
 8008048:	4690      	mov	r8, r2
 800804a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 800804c:	f7ff f98a 	bl	8007364 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008050:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008054:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008056:	2b20      	cmp	r3, #32
 8008058:	d004      	beq.n	8008064 <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 800805a:	2502      	movs	r5, #2
}
 800805c:	4628      	mov	r0, r5
 800805e:	b009      	add	sp, #36	@ 0x24
 8008060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008064:	9000      	str	r0, [sp, #0]
 8008066:	2319      	movs	r3, #25
 8008068:	2201      	movs	r2, #1
 800806a:	4620      	mov	r0, r4
 800806c:	498c      	ldr	r1, [pc, #560]	@ (80082a0 <HAL_I2C_Mem_Read+0x268>)
 800806e:	f7ff fcc2 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 8008072:	2800      	cmp	r0, #0
 8008074:	d1f1      	bne.n	800805a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8008076:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d0ed      	beq.n	800805a <HAL_I2C_Mem_Read+0x22>
 800807e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008080:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8008082:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008086:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008088:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800808a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800808c:	bf58      	it	pl
 800808e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008090:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8008092:	bf5c      	itt	pl
 8008094:	f043 0301 	orrpl.w	r3, r3, #1
 8008098:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800809a:	6803      	ldr	r3, [r0, #0]
 800809c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080a0:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080a2:	2322      	movs	r3, #34	@ 0x22
 80080a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080a8:	2340      	movs	r3, #64	@ 0x40
 80080aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80080b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080b4:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80080b6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80080bc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080c0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080c2:	4b78      	ldr	r3, [pc, #480]	@ (80082a4 <HAL_I2C_Mem_Read+0x26c>)
 80080c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080c6:	464b      	mov	r3, r9
 80080c8:	e9cd 7600 	strd	r7, r6, [sp]
 80080cc:	f7ff fd9a 	bl	8007c04 <I2C_RequestMemoryRead>
 80080d0:	4605      	mov	r5, r0
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f040 80ba 	bne.w	800824c <HAL_I2C_Mem_Read+0x214>
    if (hi2c->XferSize == 0U)
 80080d8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080da:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80080dc:	b9c2      	cbnz	r2, 8008110 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080de:	9004      	str	r0, [sp, #16]
 80080e0:	695a      	ldr	r2, [r3, #20]
 80080e2:	9204      	str	r2, [sp, #16]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	9204      	str	r2, [sp, #16]
 80080e8:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080f0:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080f2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80082a8 <HAL_I2C_Mem_Read+0x270>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80080f6:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 80082ac <HAL_I2C_Mem_Read+0x274>
    while (hi2c->XferSize > 0U)
 80080fa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d137      	bne.n	8008170 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8008100:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8008102:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008106:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800810a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800810e:	e7a5      	b.n	800805c <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8008110:	2a01      	cmp	r2, #1
 8008112:	d111      	bne.n	8008138 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800811a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800811c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	9005      	str	r0, [sp, #20]
 8008122:	695a      	ldr	r2, [r3, #20]
 8008124:	9205      	str	r2, [sp, #20]
 8008126:	699a      	ldr	r2, [r3, #24]
 8008128:	9205      	str	r2, [sp, #20]
 800812a:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008132:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008134:	b662      	cpsie	i
}
 8008136:	e7dc      	b.n	80080f2 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8008138:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800813a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800813c:	d10e      	bne.n	800815c <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800813e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008142:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008144:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	9006      	str	r0, [sp, #24]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	9206      	str	r2, [sp, #24]
 800814e:	699a      	ldr	r2, [r3, #24]
 8008150:	9206      	str	r2, [sp, #24]
 8008152:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800815a:	e7ea      	b.n	8008132 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800815c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008160:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008162:	9007      	str	r0, [sp, #28]
 8008164:	695a      	ldr	r2, [r3, #20]
 8008166:	9207      	str	r2, [sp, #28]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	e7c0      	b.n	80080f2 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8008170:	2b03      	cmp	r3, #3
 8008172:	d878      	bhi.n	8008266 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8008174:	2b01      	cmp	r3, #1
 8008176:	d115      	bne.n	80081a4 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008178:	4632      	mov	r2, r6
 800817a:	4639      	mov	r1, r7
 800817c:	4620      	mov	r0, r4
 800817e:	f7ff fdef 	bl	8007d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008182:	2800      	cmp	r0, #0
 8008184:	d162      	bne.n	800824c <HAL_I2C_Mem_Read+0x214>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800818c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800818e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008190:	3301      	adds	r3, #1
 8008192:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8008194:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008196:	3b01      	subs	r3, #1
 8008198:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800819a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800819c:	3b01      	subs	r3, #1
 800819e:	b29b      	uxth	r3, r3
 80081a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80081a2:	e7aa      	b.n	80080fa <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 80081a4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	463b      	mov	r3, r7
 80081ac:	4641      	mov	r1, r8
 80081ae:	4620      	mov	r0, r4
 80081b0:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 80081b2:	d118      	bne.n	80081e6 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081b4:	f7ff fc1f 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d147      	bne.n	800824c <HAL_I2C_Mem_Read+0x214>
 80081bc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081cc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80081ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081d0:	3301      	adds	r3, #1
 80081d2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80081d4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80081d6:	3b01      	subs	r3, #1
 80081d8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80081da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80081e2:	b662      	cpsie	i
 80081e4:	e7cf      	b.n	8008186 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081e6:	f7ff fc06 	bl	80079f6 <I2C_WaitOnFlagUntilTimeout>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d12e      	bne.n	800824c <HAL_I2C_Mem_Read+0x214>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	6813      	ldr	r3, [r2, #0]
 80081f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081f6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80081f8:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081fa:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008204:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008206:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008208:	1c53      	adds	r3, r2, #1
 800820a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800820c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800820e:	3b01      	subs	r3, #1
 8008210:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8008212:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008214:	3b01      	subs	r3, #1
 8008216:	b29b      	uxth	r3, r3
 8008218:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800821a:	f8d9 3000 	ldr.w	r3, [r9]
 800821e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008222:	2123      	movs	r1, #35	@ 0x23
 8008224:	434b      	muls	r3, r1
 8008226:	9303      	str	r3, [sp, #12]
            count--;
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3b01      	subs	r3, #1
 800822c:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	b973      	cbnz	r3, 8008250 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8008232:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008234:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008236:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800823a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800823e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008240:	f042 0220 	orr.w	r2, r2, #32
 8008244:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008246:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8008248:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800824c:	2501      	movs	r5, #1
 800824e:	e705      	b.n	800805c <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	6959      	ldr	r1, [r3, #20]
 8008254:	0748      	lsls	r0, r1, #29
 8008256:	d5e7      	bpl.n	8008228 <HAL_I2C_Mem_Read+0x1f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008258:	6819      	ldr	r1, [r3, #0]
 800825a:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800825e:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	7053      	strb	r3, [r2, #1]
 8008264:	e7b3      	b.n	80081ce <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008266:	4632      	mov	r2, r6
 8008268:	4639      	mov	r1, r7
 800826a:	4620      	mov	r0, r4
 800826c:	f7ff fd78 	bl	8007d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008270:	2800      	cmp	r0, #0
 8008272:	d1eb      	bne.n	800824c <HAL_I2C_Mem_Read+0x214>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800827a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800827c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800827e:	1c53      	adds	r3, r2, #1
 8008280:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8008282:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008284:	3b01      	subs	r3, #1
 8008286:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8008288:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800828a:	3b01      	subs	r3, #1
 800828c:	b29b      	uxth	r3, r3
 800828e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	6959      	ldr	r1, [r3, #20]
 8008294:	0749      	lsls	r1, r1, #29
 8008296:	f57f af30 	bpl.w	80080fa <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	7053      	strb	r3, [r2, #1]
 800829e:	e776      	b.n	800818e <HAL_I2C_Mem_Read+0x156>
 80082a0:	00100002 	.word	0x00100002
 80082a4:	ffff0000 	.word	0xffff0000
 80082a8:	00010004 	.word	0x00010004
 80082ac:	20000004 	.word	0x20000004

080082b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082b4:	4605      	mov	r5, r0
 80082b6:	b338      	cbz	r0, 8008308 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b8:	6803      	ldr	r3, [r0, #0]
 80082ba:	07db      	lsls	r3, r3, #31
 80082bc:	d410      	bmi.n	80082e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	079f      	lsls	r7, r3, #30
 80082c2:	d45e      	bmi.n	8008382 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	0719      	lsls	r1, r3, #28
 80082c8:	f100 8095 	bmi.w	80083f6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	075a      	lsls	r2, r3, #29
 80082d0:	f100 80c1 	bmi.w	8008456 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082d4:	69eb      	ldr	r3, [r5, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f040 812c 	bne.w	8008534 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80082dc:	2000      	movs	r0, #0
 80082de:	e029      	b.n	8008334 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082e0:	4c90      	ldr	r4, [pc, #576]	@ (8008524 <HAL_RCC_OscConfig+0x274>)
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	f003 030c 	and.w	r3, r3, #12
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d007      	beq.n	80082fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d10a      	bne.n	800830c <HAL_RCC_OscConfig+0x5c>
 80082f6:	6863      	ldr	r3, [r4, #4]
 80082f8:	03de      	lsls	r6, r3, #15
 80082fa:	d507      	bpl.n	800830c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	039c      	lsls	r4, r3, #14
 8008300:	d5dd      	bpl.n	80082be <HAL_RCC_OscConfig+0xe>
 8008302:	686b      	ldr	r3, [r5, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1da      	bne.n	80082be <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8008308:	2001      	movs	r0, #1
 800830a:	e013      	b.n	8008334 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800830c:	686b      	ldr	r3, [r5, #4]
 800830e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008312:	d112      	bne.n	800833a <HAL_RCC_OscConfig+0x8a>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800831a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800831c:	f7ff f822 	bl	8007364 <HAL_GetTick>
 8008320:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	0398      	lsls	r0, r3, #14
 8008326:	d4ca      	bmi.n	80082be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008328:	f7ff f81c 	bl	8007364 <HAL_GetTick>
 800832c:	1b80      	subs	r0, r0, r6
 800832e:	2864      	cmp	r0, #100	@ 0x64
 8008330:	d9f7      	bls.n	8008322 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8008332:	2003      	movs	r0, #3
}
 8008334:	b002      	add	sp, #8
 8008336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800833a:	b99b      	cbnz	r3, 8008364 <HAL_RCC_OscConfig+0xb4>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800834a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800834c:	f7ff f80a 	bl	8007364 <HAL_GetTick>
 8008350:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0399      	lsls	r1, r3, #14
 8008356:	d5b2      	bpl.n	80082be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008358:	f7ff f804 	bl	8007364 <HAL_GetTick>
 800835c:	1b80      	subs	r0, r0, r6
 800835e:	2864      	cmp	r0, #100	@ 0x64
 8008360:	d9f7      	bls.n	8008352 <HAL_RCC_OscConfig+0xa2>
 8008362:	e7e6      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	d103      	bne.n	8008374 <HAL_RCC_OscConfig+0xc4>
 800836c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	e7cf      	b.n	8008314 <HAL_RCC_OscConfig+0x64>
 8008374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008380:	e7cb      	b.n	800831a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008382:	4c68      	ldr	r4, [pc, #416]	@ (8008524 <HAL_RCC_OscConfig+0x274>)
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	f013 0f0c 	tst.w	r3, #12
 800838a:	d007      	beq.n	800839c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800838c:	6863      	ldr	r3, [r4, #4]
 800838e:	f003 030c 	and.w	r3, r3, #12
 8008392:	2b08      	cmp	r3, #8
 8008394:	d110      	bne.n	80083b8 <HAL_RCC_OscConfig+0x108>
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	03da      	lsls	r2, r3, #15
 800839a:	d40d      	bmi.n	80083b8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	079b      	lsls	r3, r3, #30
 80083a0:	d502      	bpl.n	80083a8 <HAL_RCC_OscConfig+0xf8>
 80083a2:	692b      	ldr	r3, [r5, #16]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d1af      	bne.n	8008308 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	696a      	ldr	r2, [r5, #20]
 80083ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80083b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	e785      	b.n	80082c4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083b8:	692a      	ldr	r2, [r5, #16]
 80083ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008528 <HAL_RCC_OscConfig+0x278>)
 80083bc:	b16a      	cbz	r2, 80083da <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80083be:	2201      	movs	r2, #1
 80083c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083c2:	f7fe ffcf 	bl	8007364 <HAL_GetTick>
 80083c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	079f      	lsls	r7, r3, #30
 80083cc:	d4ec      	bmi.n	80083a8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083ce:	f7fe ffc9 	bl	8007364 <HAL_GetTick>
 80083d2:	1b80      	subs	r0, r0, r6
 80083d4:	2802      	cmp	r0, #2
 80083d6:	d9f7      	bls.n	80083c8 <HAL_RCC_OscConfig+0x118>
 80083d8:	e7ab      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80083da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083dc:	f7fe ffc2 	bl	8007364 <HAL_GetTick>
 80083e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	0798      	lsls	r0, r3, #30
 80083e6:	f57f af6d 	bpl.w	80082c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083ea:	f7fe ffbb 	bl	8007364 <HAL_GetTick>
 80083ee:	1b80      	subs	r0, r0, r6
 80083f0:	2802      	cmp	r0, #2
 80083f2:	d9f6      	bls.n	80083e2 <HAL_RCC_OscConfig+0x132>
 80083f4:	e79d      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083f6:	69aa      	ldr	r2, [r5, #24]
 80083f8:	4e4a      	ldr	r6, [pc, #296]	@ (8008524 <HAL_RCC_OscConfig+0x274>)
 80083fa:	4b4b      	ldr	r3, [pc, #300]	@ (8008528 <HAL_RCC_OscConfig+0x278>)
 80083fc:	b1e2      	cbz	r2, 8008438 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80083fe:	2201      	movs	r2, #1
 8008400:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008404:	f7fe ffae 	bl	8007364 <HAL_GetTick>
 8008408:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800840a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800840c:	079b      	lsls	r3, r3, #30
 800840e:	d50d      	bpl.n	800842c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008410:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008414:	4b45      	ldr	r3, [pc, #276]	@ (800852c <HAL_RCC_OscConfig+0x27c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	fbb3 f3f2 	udiv	r3, r3, r2
 800841c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800841e:	bf00      	nop
  }
  while (Delay --);
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	9201      	str	r2, [sp, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f9      	bne.n	800841e <HAL_RCC_OscConfig+0x16e>
 800842a:	e74f      	b.n	80082cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800842c:	f7fe ff9a 	bl	8007364 <HAL_GetTick>
 8008430:	1b00      	subs	r0, r0, r4
 8008432:	2802      	cmp	r0, #2
 8008434:	d9e9      	bls.n	800840a <HAL_RCC_OscConfig+0x15a>
 8008436:	e77c      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8008438:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800843c:	f7fe ff92 	bl	8007364 <HAL_GetTick>
 8008440:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008442:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008444:	079f      	lsls	r7, r3, #30
 8008446:	f57f af41 	bpl.w	80082cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800844a:	f7fe ff8b 	bl	8007364 <HAL_GetTick>
 800844e:	1b00      	subs	r0, r0, r4
 8008450:	2802      	cmp	r0, #2
 8008452:	d9f6      	bls.n	8008442 <HAL_RCC_OscConfig+0x192>
 8008454:	e76d      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008456:	4c33      	ldr	r4, [pc, #204]	@ (8008524 <HAL_RCC_OscConfig+0x274>)
 8008458:	69e3      	ldr	r3, [r4, #28]
 800845a:	00d8      	lsls	r0, r3, #3
 800845c:	d424      	bmi.n	80084a8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800845e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008460:	69e3      	ldr	r3, [r4, #28]
 8008462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008466:	61e3      	str	r3, [r4, #28]
 8008468:	69e3      	ldr	r3, [r4, #28]
 800846a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008472:	4e2f      	ldr	r6, [pc, #188]	@ (8008530 <HAL_RCC_OscConfig+0x280>)
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	05d9      	lsls	r1, r3, #23
 8008478:	d518      	bpl.n	80084ac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800847a:	68eb      	ldr	r3, [r5, #12]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d126      	bne.n	80084ce <HAL_RCC_OscConfig+0x21e>
 8008480:	6a23      	ldr	r3, [r4, #32]
 8008482:	f043 0301 	orr.w	r3, r3, #1
 8008486:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008488:	f7fe ff6c 	bl	8007364 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800848c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008490:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008492:	6a23      	ldr	r3, [r4, #32]
 8008494:	079b      	lsls	r3, r3, #30
 8008496:	d53f      	bpl.n	8008518 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8008498:	2f00      	cmp	r7, #0
 800849a:	f43f af1b 	beq.w	80082d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800849e:	69e3      	ldr	r3, [r4, #28]
 80084a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084a4:	61e3      	str	r3, [r4, #28]
 80084a6:	e715      	b.n	80082d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80084a8:	2700      	movs	r7, #0
 80084aa:	e7e2      	b.n	8008472 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084ac:	6833      	ldr	r3, [r6, #0]
 80084ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80084b4:	f7fe ff56 	bl	8007364 <HAL_GetTick>
 80084b8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ba:	6833      	ldr	r3, [r6, #0]
 80084bc:	05da      	lsls	r2, r3, #23
 80084be:	d4dc      	bmi.n	800847a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084c0:	f7fe ff50 	bl	8007364 <HAL_GetTick>
 80084c4:	eba0 0008 	sub.w	r0, r0, r8
 80084c8:	2864      	cmp	r0, #100	@ 0x64
 80084ca:	d9f6      	bls.n	80084ba <HAL_RCC_OscConfig+0x20a>
 80084cc:	e731      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084ce:	b9ab      	cbnz	r3, 80084fc <HAL_RCC_OscConfig+0x24c>
 80084d0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	6223      	str	r3, [r4, #32]
 80084dc:	6a23      	ldr	r3, [r4, #32]
 80084de:	f023 0304 	bic.w	r3, r3, #4
 80084e2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80084e4:	f7fe ff3e 	bl	8007364 <HAL_GetTick>
 80084e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ea:	6a23      	ldr	r3, [r4, #32]
 80084ec:	0798      	lsls	r0, r3, #30
 80084ee:	d5d3      	bpl.n	8008498 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084f0:	f7fe ff38 	bl	8007364 <HAL_GetTick>
 80084f4:	1b80      	subs	r0, r0, r6
 80084f6:	4540      	cmp	r0, r8
 80084f8:	d9f7      	bls.n	80084ea <HAL_RCC_OscConfig+0x23a>
 80084fa:	e71a      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	6a23      	ldr	r3, [r4, #32]
 8008500:	d103      	bne.n	800850a <HAL_RCC_OscConfig+0x25a>
 8008502:	f043 0304 	orr.w	r3, r3, #4
 8008506:	6223      	str	r3, [r4, #32]
 8008508:	e7ba      	b.n	8008480 <HAL_RCC_OscConfig+0x1d0>
 800850a:	f023 0301 	bic.w	r3, r3, #1
 800850e:	6223      	str	r3, [r4, #32]
 8008510:	6a23      	ldr	r3, [r4, #32]
 8008512:	f023 0304 	bic.w	r3, r3, #4
 8008516:	e7b6      	b.n	8008486 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008518:	f7fe ff24 	bl	8007364 <HAL_GetTick>
 800851c:	1b80      	subs	r0, r0, r6
 800851e:	4540      	cmp	r0, r8
 8008520:	d9b7      	bls.n	8008492 <HAL_RCC_OscConfig+0x1e2>
 8008522:	e706      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
 8008524:	40021000 	.word	0x40021000
 8008528:	42420000 	.word	0x42420000
 800852c:	20000004 	.word	0x20000004
 8008530:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008534:	4c2a      	ldr	r4, [pc, #168]	@ (80085e0 <HAL_RCC_OscConfig+0x330>)
 8008536:	6862      	ldr	r2, [r4, #4]
 8008538:	f002 020c 	and.w	r2, r2, #12
 800853c:	2a08      	cmp	r2, #8
 800853e:	d03e      	beq.n	80085be <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008540:	2200      	movs	r2, #0
 8008542:	2b02      	cmp	r3, #2
 8008544:	4b27      	ldr	r3, [pc, #156]	@ (80085e4 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8008546:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008548:	d12c      	bne.n	80085a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800854a:	f7fe ff0b 	bl	8007364 <HAL_GetTick>
 800854e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	0199      	lsls	r1, r3, #6
 8008554:	d420      	bmi.n	8008598 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008556:	6a2b      	ldr	r3, [r5, #32]
 8008558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800855c:	d105      	bne.n	800856a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800855e:	6862      	ldr	r2, [r4, #4]
 8008560:	68a9      	ldr	r1, [r5, #8]
 8008562:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008566:	430a      	orrs	r2, r1
 8008568:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800856a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800856c:	6862      	ldr	r2, [r4, #4]
 800856e:	430b      	orrs	r3, r1
 8008570:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8008574:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8008576:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008578:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800857a:	4b1a      	ldr	r3, [pc, #104]	@ (80085e4 <HAL_RCC_OscConfig+0x334>)
 800857c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800857e:	f7fe fef1 	bl	8007364 <HAL_GetTick>
 8008582:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	019a      	lsls	r2, r3, #6
 8008588:	f53f aea8 	bmi.w	80082dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800858c:	f7fe feea 	bl	8007364 <HAL_GetTick>
 8008590:	1b40      	subs	r0, r0, r5
 8008592:	2802      	cmp	r0, #2
 8008594:	d9f6      	bls.n	8008584 <HAL_RCC_OscConfig+0x2d4>
 8008596:	e6cc      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008598:	f7fe fee4 	bl	8007364 <HAL_GetTick>
 800859c:	1b80      	subs	r0, r0, r6
 800859e:	2802      	cmp	r0, #2
 80085a0:	d9d6      	bls.n	8008550 <HAL_RCC_OscConfig+0x2a0>
 80085a2:	e6c6      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80085a4:	f7fe fede 	bl	8007364 <HAL_GetTick>
 80085a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	019b      	lsls	r3, r3, #6
 80085ae:	f57f ae95 	bpl.w	80082dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b2:	f7fe fed7 	bl	8007364 <HAL_GetTick>
 80085b6:	1b40      	subs	r0, r0, r5
 80085b8:	2802      	cmp	r0, #2
 80085ba:	d9f6      	bls.n	80085aa <HAL_RCC_OscConfig+0x2fa>
 80085bc:	e6b9      	b.n	8008332 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085be:	2b01      	cmp	r3, #1
 80085c0:	f43f aea2 	beq.w	8008308 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80085c4:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085c6:	6a2b      	ldr	r3, [r5, #32]
 80085c8:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80085cc:	429a      	cmp	r2, r3
 80085ce:	f47f ae9b 	bne.w	8008308 <HAL_RCC_OscConfig+0x58>
 80085d2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80085d4:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085d8:	1ac0      	subs	r0, r0, r3
 80085da:	bf18      	it	ne
 80085dc:	2001      	movne	r0, #1
 80085de:	e6a9      	b.n	8008334 <HAL_RCC_OscConfig+0x84>
 80085e0:	40021000 	.word	0x40021000
 80085e4:	42420000 	.word	0x42420000

080085e8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80085e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008620 <HAL_RCC_GetSysClockFreq+0x38>)
 80085ea:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80085ec:	f003 010c 	and.w	r1, r3, #12
 80085f0:	2908      	cmp	r1, #8
 80085f2:	d112      	bne.n	800861a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80085f4:	480b      	ldr	r0, [pc, #44]	@ (8008624 <HAL_RCC_GetSysClockFreq+0x3c>)
 80085f6:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80085fa:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80085fc:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80085fe:	d509      	bpl.n	8008614 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008600:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008602:	4a09      	ldr	r2, [pc, #36]	@ (8008628 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008604:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008608:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800860a:	4a08      	ldr	r2, [pc, #32]	@ (800862c <HAL_RCC_GetSysClockFreq+0x44>)
 800860c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800860e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008612:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008614:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <HAL_RCC_GetSysClockFreq+0x48>)
 8008616:	4358      	muls	r0, r3
 8008618:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800861a:	4803      	ldr	r0, [pc, #12]	@ (8008628 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40021000 	.word	0x40021000
 8008624:	0800cbae 	.word	0x0800cbae
 8008628:	007a1200 	.word	0x007a1200
 800862c:	0800cbac 	.word	0x0800cbac
 8008630:	003d0900 	.word	0x003d0900

08008634 <HAL_RCC_ClockConfig>:
{
 8008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800863a:	4604      	mov	r4, r0
 800863c:	b910      	cbnz	r0, 8008644 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800863e:	2001      	movs	r0, #1
}
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008644:	4a44      	ldr	r2, [pc, #272]	@ (8008758 <HAL_RCC_ClockConfig+0x124>)
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	428b      	cmp	r3, r1
 800864e:	d328      	bcc.n	80086a2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008650:	6821      	ldr	r1, [r4, #0]
 8008652:	078e      	lsls	r6, r1, #30
 8008654:	d430      	bmi.n	80086b8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008656:	07ca      	lsls	r2, r1, #31
 8008658:	d443      	bmi.n	80086e2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800865a:	4a3f      	ldr	r2, [pc, #252]	@ (8008758 <HAL_RCC_ClockConfig+0x124>)
 800865c:	6813      	ldr	r3, [r2, #0]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	42ab      	cmp	r3, r5
 8008664:	d865      	bhi.n	8008732 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	4d3c      	ldr	r5, [pc, #240]	@ (800875c <HAL_RCC_ClockConfig+0x128>)
 800866a:	f012 0f04 	tst.w	r2, #4
 800866e:	d16c      	bne.n	800874a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008670:	0713      	lsls	r3, r2, #28
 8008672:	d506      	bpl.n	8008682 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008674:	686b      	ldr	r3, [r5, #4]
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800867c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008680:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008682:	f7ff ffb1 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 8008686:	686b      	ldr	r3, [r5, #4]
 8008688:	4a35      	ldr	r2, [pc, #212]	@ (8008760 <HAL_RCC_ClockConfig+0x12c>)
 800868a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800868e:	5cd3      	ldrb	r3, [r2, r3]
 8008690:	40d8      	lsrs	r0, r3
 8008692:	4b34      	ldr	r3, [pc, #208]	@ (8008764 <HAL_RCC_ClockConfig+0x130>)
 8008694:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008696:	4b34      	ldr	r3, [pc, #208]	@ (8008768 <HAL_RCC_ClockConfig+0x134>)
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	f7fe fe21 	bl	80072e0 <HAL_InitTick>
  return HAL_OK;
 800869e:	2000      	movs	r0, #0
 80086a0:	e7ce      	b.n	8008640 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a2:	6813      	ldr	r3, [r2, #0]
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ac:	6813      	ldr	r3, [r2, #0]
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	428b      	cmp	r3, r1
 80086b4:	d1c3      	bne.n	800863e <HAL_RCC_ClockConfig+0xa>
 80086b6:	e7cb      	b.n	8008650 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086b8:	4b28      	ldr	r3, [pc, #160]	@ (800875c <HAL_RCC_ClockConfig+0x128>)
 80086ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086be:	bf1e      	ittt	ne
 80086c0:	685a      	ldrne	r2, [r3, #4]
 80086c2:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80086c6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086c8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086ca:	bf42      	ittt	mi
 80086cc:	685a      	ldrmi	r2, [r3, #4]
 80086ce:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80086d2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	68a0      	ldr	r0, [r4, #8]
 80086d8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80086dc:	4302      	orrs	r2, r0
 80086de:	605a      	str	r2, [r3, #4]
 80086e0:	e7b9      	b.n	8008656 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	4e1d      	ldr	r6, [pc, #116]	@ (800875c <HAL_RCC_ClockConfig+0x128>)
 80086e6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086ea:	d11a      	bne.n	8008722 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f0:	d0a5      	beq.n	800863e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086f2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086f4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086f8:	f023 0303 	bic.w	r3, r3, #3
 80086fc:	4313      	orrs	r3, r2
 80086fe:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008700:	f7fe fe30 	bl	8007364 <HAL_GetTick>
 8008704:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008706:	6873      	ldr	r3, [r6, #4]
 8008708:	6862      	ldr	r2, [r4, #4]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008712:	d0a2      	beq.n	800865a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008714:	f7fe fe26 	bl	8007364 <HAL_GetTick>
 8008718:	1bc0      	subs	r0, r0, r7
 800871a:	4540      	cmp	r0, r8
 800871c:	d9f3      	bls.n	8008706 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800871e:	2003      	movs	r0, #3
 8008720:	e78e      	b.n	8008640 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008722:	2a02      	cmp	r2, #2
 8008724:	d102      	bne.n	800872c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008726:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800872a:	e7e1      	b.n	80086f0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800872c:	f013 0f02 	tst.w	r3, #2
 8008730:	e7de      	b.n	80086f0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008732:	6813      	ldr	r3, [r2, #0]
 8008734:	f023 0307 	bic.w	r3, r3, #7
 8008738:	432b      	orrs	r3, r5
 800873a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873c:	6813      	ldr	r3, [r2, #0]
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	42ab      	cmp	r3, r5
 8008744:	f47f af7b 	bne.w	800863e <HAL_RCC_ClockConfig+0xa>
 8008748:	e78d      	b.n	8008666 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800874a:	686b      	ldr	r3, [r5, #4]
 800874c:	68e1      	ldr	r1, [r4, #12]
 800874e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008752:	430b      	orrs	r3, r1
 8008754:	606b      	str	r3, [r5, #4]
 8008756:	e78b      	b.n	8008670 <HAL_RCC_ClockConfig+0x3c>
 8008758:	40022000 	.word	0x40022000
 800875c:	40021000 	.word	0x40021000
 8008760:	0800cb9c 	.word	0x0800cb9c
 8008764:	20000004 	.word	0x20000004
 8008768:	2000000c 	.word	0x2000000c

0800876c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800876c:	4b04      	ldr	r3, [pc, #16]	@ (8008780 <HAL_RCC_GetPCLK1Freq+0x14>)
 800876e:	4a05      	ldr	r2, [pc, #20]	@ (8008784 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008776:	5cd3      	ldrb	r3, [r2, r3]
 8008778:	4a03      	ldr	r2, [pc, #12]	@ (8008788 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800877a:	6810      	ldr	r0, [r2, #0]
}
 800877c:	40d8      	lsrs	r0, r3
 800877e:	4770      	bx	lr
 8008780:	40021000 	.word	0x40021000
 8008784:	0800cb94 	.word	0x0800cb94
 8008788:	20000004 	.word	0x20000004

0800878c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800878c:	4b04      	ldr	r3, [pc, #16]	@ (80087a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800878e:	4a05      	ldr	r2, [pc, #20]	@ (80087a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008796:	5cd3      	ldrb	r3, [r2, r3]
 8008798:	4a03      	ldr	r2, [pc, #12]	@ (80087a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800879a:	6810      	ldr	r0, [r2, #0]
}
 800879c:	40d8      	lsrs	r0, r3
 800879e:	4770      	bx	lr
 80087a0:	40021000 	.word	0x40021000
 80087a4:	0800cb94 	.word	0x0800cb94
 80087a8:	20000004 	.word	0x20000004

080087ac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80087ac:	6803      	ldr	r3, [r0, #0]
{
 80087ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80087b2:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80087b4:	07d8      	lsls	r0, r3, #31
 80087b6:	d521      	bpl.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087b8:	4c36      	ldr	r4, [pc, #216]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80087ba:	69e3      	ldr	r3, [r4, #28]
 80087bc:	00d9      	lsls	r1, r3, #3
 80087be:	d42b      	bmi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80087c0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80087c2:	69e3      	ldr	r3, [r4, #28]
 80087c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087c8:	61e3      	str	r3, [r4, #28]
 80087ca:	69e3      	ldr	r3, [r4, #28]
 80087cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087d4:	4f30      	ldr	r7, [pc, #192]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	05da      	lsls	r2, r3, #23
 80087da:	d51f      	bpl.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087dc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087de:	686a      	ldr	r2, [r5, #4]
 80087e0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80087e4:	d12e      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087e6:	6a23      	ldr	r3, [r4, #32]
 80087e8:	686a      	ldr	r2, [r5, #4]
 80087ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ee:	4313      	orrs	r3, r2
 80087f0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80087f2:	b11e      	cbz	r6, 80087fc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f4:	69e3      	ldr	r3, [r4, #28]
 80087f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087fa:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087fc:	682a      	ldr	r2, [r5, #0]
 80087fe:	0791      	lsls	r1, r2, #30
 8008800:	d506      	bpl.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008802:	4924      	ldr	r1, [pc, #144]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008804:	68a8      	ldr	r0, [r5, #8]
 8008806:	684b      	ldr	r3, [r1, #4]
 8008808:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800880c:	4303      	orrs	r3, r0
 800880e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008810:	06d3      	lsls	r3, r2, #27
 8008812:	d436      	bmi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008814:	2000      	movs	r0, #0
 8008816:	e012      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8008818:	2600      	movs	r6, #0
 800881a:	e7db      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008822:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008824:	f7fe fd9e 	bl	8007364 <HAL_GetTick>
 8008828:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	05db      	lsls	r3, r3, #23
 800882e:	d4d5      	bmi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008830:	f7fe fd98 	bl	8007364 <HAL_GetTick>
 8008834:	eba0 0008 	sub.w	r0, r0, r8
 8008838:	2864      	cmp	r0, #100	@ 0x64
 800883a:	d9f6      	bls.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 800883c:	2003      	movs	r0, #3
}
 800883e:	b002      	add	sp, #8
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008844:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8008848:	429a      	cmp	r2, r3
 800884a:	d0cc      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 800884c:	2001      	movs	r0, #1
 800884e:	4a13      	ldr	r2, [pc, #76]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008850:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8008852:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008856:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008858:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800885c:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800885e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8008862:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008864:	d5bf      	bpl.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8008866:	f7fe fd7d 	bl	8007364 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800886a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800886e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008870:	6a23      	ldr	r3, [r4, #32]
 8008872:	0798      	lsls	r0, r3, #30
 8008874:	d4b7      	bmi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008876:	f7fe fd75 	bl	8007364 <HAL_GetTick>
 800887a:	1bc0      	subs	r0, r0, r7
 800887c:	4540      	cmp	r0, r8
 800887e:	d9f7      	bls.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8008880:	e7dc      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008882:	4a04      	ldr	r2, [pc, #16]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008884:	68e9      	ldr	r1, [r5, #12]
 8008886:	6853      	ldr	r3, [r2, #4]
 8008888:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800888c:	430b      	orrs	r3, r1
 800888e:	6053      	str	r3, [r2, #4]
 8008890:	e7c0      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008892:	bf00      	nop
 8008894:	40021000 	.word	0x40021000
 8008898:	40007000 	.word	0x40007000
 800889c:	42420000 	.word	0x42420000

080088a0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80088a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088a4:	461c      	mov	r4, r3
 80088a6:	4616      	mov	r6, r2
 80088a8:	460f      	mov	r7, r1
 80088aa:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80088ac:	f7fe fd5a 	bl	8007364 <HAL_GetTick>
 80088b0:	4434      	add	r4, r6
 80088b2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80088b4:	f7fe fd56 	bl	8007364 <HAL_GetTick>
 80088b8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80088ba:	4b24      	ldr	r3, [pc, #144]	@ (800894c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80088c2:	4363      	muls	r3, r4
 80088c4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088c6:	682a      	ldr	r2, [r5, #0]
 80088c8:	6893      	ldr	r3, [r2, #8]
 80088ca:	ea37 0303 	bics.w	r3, r7, r3
 80088ce:	d001      	beq.n	80088d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80088d0:	2000      	movs	r0, #0
 80088d2:	e02e      	b.n	8008932 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80088d4:	1c73      	adds	r3, r6, #1
 80088d6:	d0f7      	beq.n	80088c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088d8:	f7fe fd44 	bl	8007364 <HAL_GetTick>
 80088dc:	eba0 0008 	sub.w	r0, r0, r8
 80088e0:	42a0      	cmp	r0, r4
 80088e2:	d329      	bcc.n	8008938 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088ec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ee:	686a      	ldr	r2, [r5, #4]
 80088f0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80088f4:	d10a      	bne.n	800890c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80088f6:	68aa      	ldr	r2, [r5, #8]
 80088f8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80088fc:	d002      	beq.n	8008904 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088fe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008902:	d103      	bne.n	800890c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800890a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800890c:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800890e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008912:	d107      	bne.n	8008924 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008922:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008924:	2301      	movs	r3, #1
 8008926:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800892a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800892c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800892e:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
}
 8008932:	b002      	add	sp, #8
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8008938:	9a01      	ldr	r2, [sp, #4]
      count--;
 800893a:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800893c:	2a00      	cmp	r2, #0
      count--;
 800893e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008942:	bf08      	it	eq
 8008944:	4614      	moveq	r4, r2
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	e7bd      	b.n	80088c6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 800894a:	bf00      	nop
 800894c:	20000004 	.word	0x20000004

08008950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008950:	b510      	push	{r4, lr}
 8008952:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008954:	460a      	mov	r2, r1
 8008956:	2180      	movs	r1, #128	@ 0x80
{
 8008958:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800895a:	f7ff ffa1 	bl	80088a0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800895e:	b120      	cbz	r0, 800896a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8008960:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008964:	f043 0320 	orr.w	r3, r3, #32
 8008968:	6563      	str	r3, [r4, #84]	@ 0x54
  }
  return HAL_OK;
}
 800896a:	bd10      	pop	{r4, pc}

0800896c <HAL_SPI_Init>:
{
 800896c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800896e:	4604      	mov	r4, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	d051      	beq.n	8008a18 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008974:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	d14a      	bne.n	8008a10 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800897a:	6842      	ldr	r2, [r0, #4]
 800897c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8008980:	d000      	beq.n	8008984 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008982:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008984:	2300      	movs	r3, #0
 8008986:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008988:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800898c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008990:	b923      	cbnz	r3, 800899c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8008992:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8008994:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8008998:	f7fe fb1c 	bl	8006fd4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800899c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800899e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80089a0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80089a4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089a6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80089a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ac:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80089b4:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80089b8:	4303      	orrs	r3, r0
 80089ba:	68e0      	ldr	r0, [r4, #12]
 80089bc:	69a1      	ldr	r1, [r4, #24]
 80089be:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80089c2:	4303      	orrs	r3, r0
 80089c4:	6920      	ldr	r0, [r4, #16]
 80089c6:	f000 0002 	and.w	r0, r0, #2
 80089ca:	4303      	orrs	r3, r0
 80089cc:	6960      	ldr	r0, [r4, #20]
 80089ce:	f000 0001 	and.w	r0, r0, #1
 80089d2:	4303      	orrs	r3, r0
 80089d4:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 80089d8:	4303      	orrs	r3, r0
 80089da:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80089dc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089de:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80089e2:	4303      	orrs	r3, r0
 80089e4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80089e6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089ea:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80089ee:	4303      	orrs	r3, r0
 80089f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80089f2:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80089f6:	4303      	orrs	r3, r0
 80089f8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80089fa:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089fc:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089fe:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a04:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8008a06:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a08:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a0a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8008a0e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a10:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a16:	e7b5      	b.n	8008984 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8008a18:	2001      	movs	r0, #1
 8008a1a:	e7f8      	b.n	8008a0e <HAL_SPI_Init+0xa2>

08008a1c <HAL_SPI_Transmit>:
{
 8008a1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8008a22:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8008a26:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008a28:	2b01      	cmp	r3, #1
{
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8008a2e:	f000 80a6 	beq.w	8008b7e <HAL_SPI_Transmit+0x162>
 8008a32:	2301      	movs	r3, #1
 8008a34:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8008a38:	f7fe fc94 	bl	8007364 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8008a3c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8008a40:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	fa5f f983 	uxtb.w	r9, r3
 8008a48:	f040 8096 	bne.w	8008b78 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8008a4c:	2d00      	cmp	r5, #0
 8008a4e:	d067      	beq.n	8008b20 <HAL_SPI_Transmit+0x104>
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d064      	beq.n	8008b20 <HAL_SPI_Transmit+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a56:	2303      	movs	r3, #3
 8008a58:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8008a60:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8008a64:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a68:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008a6a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008a6c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a6e:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8008a70:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a76:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008a78:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a7c:	d107      	bne.n	8008a8e <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8008a7e:	6833      	ldr	r3, [r6, #0]
 8008a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a84:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8008a86:	6833      	ldr	r3, [r6, #0]
 8008a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a8c:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a8e:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a90:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a92:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8008a94:	bf5e      	ittt	pl
 8008a96:	6833      	ldrpl	r3, [r6, #0]
 8008a98:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8008a9c:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a9e:	68e3      	ldr	r3, [r4, #12]
 8008aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aa4:	d143      	bne.n	8008b2e <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aa6:	b112      	cbz	r2, 8008aae <HAL_SPI_Transmit+0x92>
 8008aa8:	f1b8 0f01 	cmp.w	r8, #1
 8008aac:	d107      	bne.n	8008abe <HAL_SPI_Transmit+0xa2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aae:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008ab2:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ab4:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ab6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8008abe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	b9b3      	cbnz	r3, 8008af2 <HAL_SPI_Transmit+0xd6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7ff ff41 	bl	8008950 <SPI_EndRxTxTransaction>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d14f      	bne.n	8008b72 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	b933      	cbnz	r3, 8008ae4 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	9201      	str	r2, [sp, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ae4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008ae6:	b9db      	cbnz	r3, 8008b20 <HAL_SPI_Transmit+0x104>
    hspi->State = HAL_SPI_STATE_READY;
 8008ae8:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aea:	4699      	mov	r9, r3
    hspi->State = HAL_SPI_STATE_READY;
 8008aec:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 8008af0:	e016      	b.n	8008b20 <HAL_SPI_Transmit+0x104>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	6893      	ldr	r3, [r2, #8]
 8008af6:	0798      	lsls	r0, r3, #30
 8008af8:	d505      	bpl.n	8008b06 <HAL_SPI_Transmit+0xea>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008afa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008afc:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008b00:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b02:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b04:	e7d7      	b.n	8008ab6 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b06:	f7fe fc2d 	bl	8007364 <HAL_GetTick>
 8008b0a:	eba0 000a 	sub.w	r0, r0, sl
 8008b0e:	42b8      	cmp	r0, r7
 8008b10:	d3d5      	bcc.n	8008abe <HAL_SPI_Transmit+0xa2>
 8008b12:	1c79      	adds	r1, r7, #1
 8008b14:	d0d3      	beq.n	8008abe <HAL_SPI_Transmit+0xa2>
          hspi->State = HAL_SPI_STATE_READY;
 8008b16:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8008b18:	f04f 0903 	mov.w	r9, #3
          hspi->State = HAL_SPI_STATE_READY;
 8008b1c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008b20:	2300      	movs	r3, #0
 8008b22:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8008b26:	4648      	mov	r0, r9
 8008b28:	b002      	add	sp, #8
 8008b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2e:	b112      	cbz	r2, 8008b36 <HAL_SPI_Transmit+0x11a>
 8008b30:	f1b8 0f01 	cmp.w	r8, #1
 8008b34:	d108      	bne.n	8008b48 <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b36:	782b      	ldrb	r3, [r5, #0]
 8008b38:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b40:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8008b48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0b9      	beq.n	8008ac4 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	0792      	lsls	r2, r2, #30
 8008b56:	d503      	bpl.n	8008b60 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	731a      	strb	r2, [r3, #12]
 8008b5e:	e7ec      	b.n	8008b3a <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b60:	f7fe fc00 	bl	8007364 <HAL_GetTick>
 8008b64:	eba0 000a 	sub.w	r0, r0, sl
 8008b68:	42b8      	cmp	r0, r7
 8008b6a:	d3ed      	bcc.n	8008b48 <HAL_SPI_Transmit+0x12c>
 8008b6c:	1c7b      	adds	r3, r7, #1
 8008b6e:	d0eb      	beq.n	8008b48 <HAL_SPI_Transmit+0x12c>
 8008b70:	e7d1      	b.n	8008b16 <HAL_SPI_Transmit+0xfa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b72:	2320      	movs	r3, #32
 8008b74:	6563      	str	r3, [r4, #84]	@ 0x54
 8008b76:	e7ac      	b.n	8008ad2 <HAL_SPI_Transmit+0xb6>
    errorcode = HAL_BUSY;
 8008b78:	f04f 0902 	mov.w	r9, #2
 8008b7c:	e7d0      	b.n	8008b20 <HAL_SPI_Transmit+0x104>
  __HAL_LOCK(hspi);
 8008b7e:	f04f 0902 	mov.w	r9, #2
 8008b82:	e7d0      	b.n	8008b26 <HAL_SPI_Transmit+0x10a>

08008b84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b84:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b86:	6a02      	ldr	r2, [r0, #32]
{
 8008b88:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b92:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b96:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008b9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b9c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008b9e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008ba2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ba4:	4d0a      	ldr	r5, [pc, #40]	@ (8008bd0 <TIM_OC1_SetConfig+0x4c>)
 8008ba6:	42a8      	cmp	r0, r5
 8008ba8:	d10b      	bne.n	8008bc2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008baa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008bb0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bb2:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bb6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8008bba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bbc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bc0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bc6:	684a      	ldr	r2, [r1, #4]
 8008bc8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bca:	6203      	str	r3, [r0, #32]
}
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	bf00      	nop
 8008bd0:	40012c00 	.word	0x40012c00

08008bd4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bd6:	6a02      	ldr	r2, [r0, #32]
{
 8008bd8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008bde:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008be2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008be6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008bea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008bee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bf2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bf6:	4d0b      	ldr	r5, [pc, #44]	@ (8008c24 <TIM_OC3_SetConfig+0x50>)
 8008bf8:	42a8      	cmp	r0, r5
 8008bfa:	d10d      	bne.n	8008c18 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bfc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c06:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c0a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8008c0e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c14:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c1a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c1c:	684a      	ldr	r2, [r1, #4]
 8008c1e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c20:	6203      	str	r3, [r0, #32]
}
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	40012c00 	.word	0x40012c00

08008c28 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c28:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c2a:	6a02      	ldr	r2, [r0, #32]
{
 8008c2c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c32:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c36:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c3a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c42:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008c44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c48:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c4c:	4d06      	ldr	r5, [pc, #24]	@ (8008c68 <TIM_OC4_SetConfig+0x40>)
 8008c4e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c50:	bf02      	ittt	eq
 8008c52:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c54:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c58:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c5e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c60:	684a      	ldr	r2, [r1, #4]
 8008c62:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c64:	6203      	str	r3, [r0, #32]
}
 8008c66:	bd30      	pop	{r4, r5, pc}
 8008c68:	40012c00 	.word	0x40012c00

08008c6c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008c6c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d120      	bne.n	8008cb6 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008c74:	2302      	movs	r3, #2
 8008c76:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c7a:	6803      	ldr	r3, [r0, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	f042 0201 	orr.w	r2, r2, #1
 8008c82:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c84:	4a0d      	ldr	r2, [pc, #52]	@ (8008cbc <HAL_TIM_Base_Start_IT+0x50>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00a      	beq.n	8008ca0 <HAL_TIM_Base_Start_IT+0x34>
 8008c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8e:	d007      	beq.n	8008ca0 <HAL_TIM_Base_Start_IT+0x34>
 8008c90:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d003      	beq.n	8008ca0 <HAL_TIM_Base_Start_IT+0x34>
 8008c98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d104      	bne.n	8008caa <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca6:	2a06      	cmp	r2, #6
 8008ca8:	d003      	beq.n	8008cb2 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f042 0201 	orr.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	4770      	bx	lr
    return HAL_ERROR;
 8008cb6:	2001      	movs	r0, #1
}
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40012c00 	.word	0x40012c00

08008cc0 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8008cc0:	4770      	bx	lr

08008cc2 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8008cc4:	4770      	bx	lr

08008cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8008cc8:	4770      	bx	lr

08008cca <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cca:	6803      	ldr	r3, [r0, #0]
{
 8008ccc:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cce:	691a      	ldr	r2, [r3, #16]
{
 8008cd0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cd2:	0791      	lsls	r1, r2, #30
 8008cd4:	d50e      	bpl.n	8008cf4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	0792      	lsls	r2, r2, #30
 8008cda:	d50b      	bpl.n	8008cf4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cdc:	f06f 0202 	mvn.w	r2, #2
 8008ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	079b      	lsls	r3, r3, #30
 8008cea:	d077      	beq.n	8008ddc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8008cec:	f7ff ffea 	bl	8008cc4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	0750      	lsls	r0, r2, #29
 8008cfa:	d510      	bpl.n	8008d1e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	0751      	lsls	r1, r2, #29
 8008d00:	d50d      	bpl.n	8008d1e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d02:	f06f 0204 	mvn.w	r2, #4
 8008d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d08:	2202      	movs	r2, #2
 8008d0a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d0c:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d10:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008d14:	d068      	beq.n	8008de8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d16:	f7ff ffd5 	bl	8008cc4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	0712      	lsls	r2, r2, #28
 8008d24:	d50f      	bpl.n	8008d46 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	0710      	lsls	r0, r2, #28
 8008d2a:	d50c      	bpl.n	8008d46 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d2c:	f06f 0208 	mvn.w	r2, #8
 8008d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d32:	2204      	movs	r2, #4
 8008d34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d36:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008d38:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d3a:	0799      	lsls	r1, r3, #30
 8008d3c:	d05a      	beq.n	8008df4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3e:	f7ff ffc1 	bl	8008cc4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	2300      	movs	r3, #0
 8008d44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	691a      	ldr	r2, [r3, #16]
 8008d4a:	06d2      	lsls	r2, r2, #27
 8008d4c:	d510      	bpl.n	8008d70 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	06d0      	lsls	r0, r2, #27
 8008d52:	d50d      	bpl.n	8008d70 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d54:	f06f 0210 	mvn.w	r2, #16
 8008d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d5e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008d60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d62:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008d66:	d04b      	beq.n	8008e00 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d68:	f7ff ffac 	bl	8008cc4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	07d1      	lsls	r1, r2, #31
 8008d76:	d508      	bpl.n	8008d8a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	07d2      	lsls	r2, r2, #31
 8008d7c:	d505      	bpl.n	8008d8a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d7e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d86:	f7fd fc3f 	bl	8006608 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	0610      	lsls	r0, r2, #24
 8008d90:	d508      	bpl.n	8008da4 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	0611      	lsls	r1, r2, #24
 8008d96:	d505      	bpl.n	8008da4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8008d9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008da0:	f000 fa7b 	bl	800929a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	0652      	lsls	r2, r2, #25
 8008daa:	d508      	bpl.n	8008dbe <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	0650      	lsls	r0, r2, #25
 8008db0:	d505      	bpl.n	8008dbe <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008db2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8008db6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008db8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008dba:	f7ff ff85 	bl	8008cc8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	0691      	lsls	r1, r2, #26
 8008dc4:	d522      	bpl.n	8008e0c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	0692      	lsls	r2, r2, #26
 8008dca:	d51f      	bpl.n	8008e0c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dcc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008dd0:	4620      	mov	r0, r4
}
 8008dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008dd8:	f000 ba5e 	b.w	8009298 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ddc:	f7ff ff71 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff ff70 	bl	8008cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8008de6:	e783      	b.n	8008cf0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de8:	f7ff ff6b 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7ff ff6a 	bl	8008cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8008df2:	e792      	b.n	8008d1a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df4:	f7ff ff65 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f7ff ff64 	bl	8008cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8008dfe:	e7a0      	b.n	8008d42 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e00:	f7ff ff5f 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7ff ff5e 	bl	8008cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8008e0a:	e7af      	b.n	8008d6c <HAL_TIM_IRQHandler+0xa2>
}
 8008e0c:	bd10      	pop	{r4, pc}
	...

08008e10 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e10:	4a1a      	ldr	r2, [pc, #104]	@ (8008e7c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8008e12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e14:	4290      	cmp	r0, r2
 8008e16:	d00a      	beq.n	8008e2e <TIM_Base_SetConfig+0x1e>
 8008e18:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008e1c:	d007      	beq.n	8008e2e <TIM_Base_SetConfig+0x1e>
 8008e1e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008e22:	4290      	cmp	r0, r2
 8008e24:	d003      	beq.n	8008e2e <TIM_Base_SetConfig+0x1e>
 8008e26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e2a:	4290      	cmp	r0, r2
 8008e2c:	d115      	bne.n	8008e5a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8008e2e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008e34:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e36:	4a11      	ldr	r2, [pc, #68]	@ (8008e7c <TIM_Base_SetConfig+0x6c>)
 8008e38:	4290      	cmp	r0, r2
 8008e3a:	d00a      	beq.n	8008e52 <TIM_Base_SetConfig+0x42>
 8008e3c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008e40:	d007      	beq.n	8008e52 <TIM_Base_SetConfig+0x42>
 8008e42:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008e46:	4290      	cmp	r0, r2
 8008e48:	d003      	beq.n	8008e52 <TIM_Base_SetConfig+0x42>
 8008e4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e4e:	4290      	cmp	r0, r2
 8008e50:	d103      	bne.n	8008e5a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e52:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e5a:	694a      	ldr	r2, [r1, #20]
 8008e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e60:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008e62:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e64:	688b      	ldr	r3, [r1, #8]
 8008e66:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008e68:	680b      	ldr	r3, [r1, #0]
 8008e6a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e6c:	4b03      	ldr	r3, [pc, #12]	@ (8008e7c <TIM_Base_SetConfig+0x6c>)
 8008e6e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8008e70:	bf04      	itt	eq
 8008e72:	690b      	ldreq	r3, [r1, #16]
 8008e74:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008e76:	2301      	movs	r3, #1
 8008e78:	6143      	str	r3, [r0, #20]
}
 8008e7a:	4770      	bx	lr
 8008e7c:	40012c00 	.word	0x40012c00

08008e80 <HAL_TIM_Base_Init>:
{
 8008e80:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008e82:	4604      	mov	r4, r0
 8008e84:	b330      	cbz	r0, 8008ed4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008e86:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008e8a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008e8e:	b91b      	cbnz	r3, 8008e98 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008e90:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008e94:	f7fe f8ce 	bl	8007034 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008e98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e9a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008e9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ea0:	1d21      	adds	r1, r4, #4
 8008ea2:	f7ff ffb5 	bl	8008e10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea6:	2301      	movs	r3, #1
  return HAL_OK;
 8008ea8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eaa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008eb2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008eb6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008eba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ebe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008eca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008ece:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8008ed2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e7fc      	b.n	8008ed2 <HAL_TIM_Base_Init+0x52>

08008ed8 <HAL_TIM_PWM_Init>:
{
 8008ed8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008eda:	4604      	mov	r4, r0
 8008edc:	b330      	cbz	r0, 8008f2c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ede:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008ee2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008ee6:	b91b      	cbnz	r3, 8008ef0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008ee8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008eec:	f7ff fee8 	bl	8008cc0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef8:	1d21      	adds	r1, r4, #4
 8008efa:	f7ff ff89 	bl	8008e10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008efe:	2301      	movs	r3, #1
  return HAL_OK;
 8008f00:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f02:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008f0a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008f0e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008f12:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f16:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f1e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008f22:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008f26:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8008f2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	e7fc      	b.n	8008f2a <HAL_TIM_PWM_Init+0x52>

08008f30 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8008f30:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f32:	6a02      	ldr	r2, [r0, #32]
{
 8008f34:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f36:	f022 0210 	bic.w	r2, r2, #16
 8008f3a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008f3c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008f3e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f42:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008f4c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f54:	4d0b      	ldr	r5, [pc, #44]	@ (8008f84 <TIM_OC2_SetConfig+0x54>)
 8008f56:	42a8      	cmp	r0, r5
 8008f58:	d10d      	bne.n	8008f76 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f64:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f68:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8008f6c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f72:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8008f76:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008f78:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008f7a:	684a      	ldr	r2, [r1, #4]
 8008f7c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008f7e:	6203      	str	r3, [r0, #32]
}
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	bf00      	nop
 8008f84:	40012c00 	.word	0x40012c00

08008f88 <HAL_TIM_PWM_ConfigChannel>:
{
 8008f88:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008f8a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8008f8e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d04f      	beq.n	8009034 <HAL_TIM_PWM_ConfigChannel+0xac>
 8008f94:	2001      	movs	r0, #1
  switch (Channel)
 8008f96:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8008f98:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8008f9c:	d03a      	beq.n	8009014 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008f9e:	d806      	bhi.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x26>
 8008fa0:	b1ba      	cbz	r2, 8008fd2 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8008fa2:	2a04      	cmp	r2, #4
 8008fa4:	d026      	beq.n	8008ff4 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8008fae:	2a0c      	cmp	r2, #12
 8008fb0:	d1f9      	bne.n	8008fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	f7ff fe38 	bl	8008c28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fb8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fba:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008fc0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fc2:	69c3      	ldr	r3, [r0, #28]
 8008fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fc8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fca:	69c3      	ldr	r3, [r0, #28]
 8008fcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fd0:	e02e      	b.n	8009030 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fd2:	6820      	ldr	r0, [r4, #0]
 8008fd4:	f7ff fdd6 	bl	8008b84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fd8:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fda:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fdc:	f043 0308 	orr.w	r3, r3, #8
 8008fe0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fe2:	6983      	ldr	r3, [r0, #24]
 8008fe4:	f023 0304 	bic.w	r3, r3, #4
 8008fe8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fea:	6983      	ldr	r3, [r0, #24]
 8008fec:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fee:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7d8      	b.n	8008fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	f7ff ff9b 	bl	8008f30 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ffa:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ffc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ffe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009002:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009004:	6983      	ldr	r3, [r0, #24]
 8009006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800900a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800900c:	6983      	ldr	r3, [r0, #24]
 800900e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009012:	e7ec      	b.n	8008fee <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	f7ff fddd 	bl	8008bd4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800901a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800901c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800901e:	f043 0308 	orr.w	r3, r3, #8
 8009022:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009024:	69c3      	ldr	r3, [r0, #28]
 8009026:	f023 0304 	bic.w	r3, r3, #4
 800902a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800902c:	69c3      	ldr	r3, [r0, #28]
 800902e:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009030:	61c3      	str	r3, [r0, #28]
      break;
 8009032:	e7dd      	b.n	8008ff0 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 8009034:	2002      	movs	r0, #2
 8009036:	e7b9      	b.n	8008fac <HAL_TIM_PWM_ConfigChannel+0x24>

08009038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009038:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800903a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800903c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800903e:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009042:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009046:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009048:	6082      	str	r2, [r0, #8]
}
 800904a:	bd10      	pop	{r4, pc}

0800904c <HAL_TIM_ConfigClockSource>:
{
 800904c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800904e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009052:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009054:	2b01      	cmp	r3, #1
 8009056:	f04f 0002 	mov.w	r0, #2
 800905a:	f000 808e 	beq.w	800917a <HAL_TIM_ConfigClockSource+0x12e>
 800905e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009060:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009064:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8009066:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800906a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800906c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009070:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8009074:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009076:	680b      	ldr	r3, [r1, #0]
 8009078:	2b60      	cmp	r3, #96	@ 0x60
 800907a:	d04f      	beq.n	800911c <HAL_TIM_ConfigClockSource+0xd0>
 800907c:	d832      	bhi.n	80090e4 <HAL_TIM_ConfigClockSource+0x98>
 800907e:	2b40      	cmp	r3, #64	@ 0x40
 8009080:	d064      	beq.n	800914c <HAL_TIM_ConfigClockSource+0x100>
 8009082:	d816      	bhi.n	80090b2 <HAL_TIM_ConfigClockSource+0x66>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d00d      	beq.n	80090a4 <HAL_TIM_ConfigClockSource+0x58>
 8009088:	d80a      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x54>
 800908a:	f033 0110 	bics.w	r1, r3, #16
 800908e:	d009      	beq.n	80090a4 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8009090:	2301      	movs	r3, #1
 8009092:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009096:	2300      	movs	r3, #0
 8009098:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800909c:	4610      	mov	r0, r2
 800909e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80090a0:	2b30      	cmp	r3, #48	@ 0x30
 80090a2:	d1f5      	bne.n	8009090 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80090a4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80090a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80090b0:	e028      	b.n	8009104 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80090b2:	2b50      	cmp	r3, #80	@ 0x50
 80090b4:	d1ec      	bne.n	8009090 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80090b6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80090b8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80090ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090bc:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090be:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090c8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80090ca:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80090d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80090d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80090d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80090da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090de:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80090e2:	e00f      	b.n	8009104 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80090e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090e8:	d00d      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0xba>
 80090ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ee:	d00c      	beq.n	800910a <HAL_TIM_ConfigClockSource+0xbe>
 80090f0:	2b70      	cmp	r3, #112	@ 0x70
 80090f2:	d1cd      	bne.n	8009090 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80090f4:	68cb      	ldr	r3, [r1, #12]
 80090f6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80090fa:	f7ff ff9d 	bl	8009038 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090fe:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009100:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009104:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009106:	2200      	movs	r2, #0
 8009108:	e7c2      	b.n	8009090 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800910a:	68cb      	ldr	r3, [r1, #12]
 800910c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8009110:	f7ff ff92 	bl	8009038 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009114:	6883      	ldr	r3, [r0, #8]
 8009116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800911a:	e7f3      	b.n	8009104 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 800911c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800911e:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8009120:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009122:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8009126:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009128:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800912a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800912c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009130:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8009134:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009138:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800913c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800913e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009140:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009146:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800914a:	e7db      	b.n	8009104 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 800914c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800914e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009150:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009152:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009154:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009158:	f023 0301 	bic.w	r3, r3, #1
 800915c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800915e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8009160:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009166:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800916a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800916c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800916e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009174:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8009178:	e7c4      	b.n	8009104 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800917a:	4602      	mov	r2, r0
 800917c:	e78e      	b.n	800909c <HAL_TIM_ConfigClockSource+0x50>

0800917e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800917e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009180:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009182:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009184:	f001 011f 	and.w	r1, r1, #31
 8009188:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800918a:	ea23 0304 	bic.w	r3, r3, r4
 800918e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009190:	6a03      	ldr	r3, [r0, #32]
 8009192:	408a      	lsls	r2, r1
 8009194:	431a      	orrs	r2, r3
 8009196:	6202      	str	r2, [r0, #32]
}
 8009198:	bd10      	pop	{r4, pc}
	...

0800919c <HAL_TIM_OC_Start>:
{
 800919c:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800919e:	b929      	cbnz	r1, 80091ac <HAL_TIM_OC_Start+0x10>
 80091a0:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d01d      	beq.n	80091e4 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 80091a8:	2001      	movs	r0, #1
 80091aa:	e02e      	b.n	800920a <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091ac:	2904      	cmp	r1, #4
 80091ae:	d107      	bne.n	80091c0 <HAL_TIM_OC_Start+0x24>
 80091b0:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d1f7      	bne.n	80091a8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b8:	2302      	movs	r3, #2
 80091ba:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80091be:	e014      	b.n	80091ea <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091c0:	2908      	cmp	r1, #8
 80091c2:	d107      	bne.n	80091d4 <HAL_TIM_OC_Start+0x38>
 80091c4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d1ed      	bne.n	80091a8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091cc:	2302      	movs	r3, #2
 80091ce:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80091d2:	e00a      	b.n	80091ea <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091d4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d1e5      	bne.n	80091a8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091dc:	2302      	movs	r3, #2
 80091de:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 80091e2:	e002      	b.n	80091ea <HAL_TIM_OC_Start+0x4e>
 80091e4:	2302      	movs	r3, #2
 80091e6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091ea:	6800      	ldr	r0, [r0, #0]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f7ff ffc6 	bl	800917e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009230 <HAL_TIM_OC_Start+0x94>)
 80091f4:	4298      	cmp	r0, r3
 80091f6:	d009      	beq.n	800920c <HAL_TIM_OC_Start+0x70>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80091fc:	d10b      	bne.n	8009216 <HAL_TIM_OC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091fe:	6883      	ldr	r3, [r0, #8]
 8009200:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009204:	2b06      	cmp	r3, #6
 8009206:	d10d      	bne.n	8009224 <HAL_TIM_OC_Start+0x88>
  return HAL_OK;
 8009208:	2000      	movs	r0, #0
}
 800920a:	bd08      	pop	{r3, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800920c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800920e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009212:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009214:	e7f3      	b.n	80091fe <HAL_TIM_OC_Start+0x62>
 8009216:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <HAL_TIM_OC_Start+0x98>)
 8009218:	4298      	cmp	r0, r3
 800921a:	d0f0      	beq.n	80091fe <HAL_TIM_OC_Start+0x62>
 800921c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009220:	4298      	cmp	r0, r3
 8009222:	d0ec      	beq.n	80091fe <HAL_TIM_OC_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8009224:	6803      	ldr	r3, [r0, #0]
 8009226:	f043 0301 	orr.w	r3, r3, #1
 800922a:	6003      	str	r3, [r0, #0]
 800922c:	e7ec      	b.n	8009208 <HAL_TIM_OC_Start+0x6c>
 800922e:	bf00      	nop
 8009230:	40012c00 	.word	0x40012c00
 8009234:	40000400 	.word	0x40000400

08009238 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8009238:	f7ff bfb0 	b.w	800919c <HAL_TIM_OC_Start>

0800923c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800923c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800923e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009242:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8009244:	2b01      	cmp	r3, #1
 8009246:	f04f 0002 	mov.w	r0, #2
 800924a:	d022      	beq.n	8009292 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800924c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800924e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8009252:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009254:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009256:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800925a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800925c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800925e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009260:	4c0c      	ldr	r4, [pc, #48]	@ (8009294 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8009262:	42a3      	cmp	r3, r4
 8009264:	d00a      	beq.n	800927c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800926a:	d007      	beq.n	800927c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800926c:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8009270:	42a3      	cmp	r3, r4
 8009272:	d003      	beq.n	800927c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009274:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009278:	42a3      	cmp	r3, r4
 800927a:	d104      	bne.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800927c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800927e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009282:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009284:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009286:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8009288:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800928a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800928e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8009292:	bd30      	pop	{r4, r5, pc}
 8009294:	40012c00 	.word	0x40012c00

08009298 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8009298:	4770      	bx	lr

0800929a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800929a:	4770      	bx	lr

0800929c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800929c:	b510      	push	{r4, lr}
 800929e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a0:	6803      	ldr	r3, [r0, #0]
 80092a2:	68c1      	ldr	r1, [r0, #12]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80092aa:	430a      	orrs	r2, r1
 80092ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80092ae:	6882      	ldr	r2, [r0, #8]
 80092b0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80092b2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80092b4:	4302      	orrs	r2, r0
 80092b6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80092b8:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80092bc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80092c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80092c2:	430a      	orrs	r2, r1
 80092c4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092c6:	695a      	ldr	r2, [r3, #20]
 80092c8:	69a1      	ldr	r1, [r4, #24]
 80092ca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092ce:	430a      	orrs	r2, r1
 80092d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80092d2:	4a0e      	ldr	r2, [pc, #56]	@ (800930c <UART_SetConfig+0x70>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d115      	bne.n	8009304 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80092d8:	f7ff fa58 	bl	800878c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092dc:	2319      	movs	r3, #25
 80092de:	4343      	muls	r3, r0
 80092e0:	6862      	ldr	r2, [r4, #4]
 80092e2:	6820      	ldr	r0, [r4, #0]
 80092e4:	0092      	lsls	r2, r2, #2
 80092e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ea:	2264      	movs	r2, #100	@ 0x64
 80092ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80092f0:	fb02 3311 	mls	r3, r2, r1, r3
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	3332      	adds	r3, #50	@ 0x32
 80092f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009300:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8009302:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8009304:	f7ff fa32 	bl	800876c <HAL_RCC_GetPCLK1Freq>
 8009308:	e7e8      	b.n	80092dc <UART_SetConfig+0x40>
 800930a:	bf00      	nop
 800930c:	40013800 	.word	0x40013800

08009310 <HAL_UART_Init>:
{
 8009310:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009312:	4604      	mov	r4, r0
 8009314:	b348      	cbz	r0, 800936a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009316:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800931a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800931e:	b91b      	cbnz	r3, 8009328 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009320:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009324:	f7fd feec 	bl	8007100 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8009328:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800932a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800932c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009330:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8009332:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009334:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009338:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800933a:	f7ff ffaf 	bl	800929c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800933e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009340:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800934a:	695a      	ldr	r2, [r3, #20]
 800934c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009350:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009358:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800935a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800935e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009362:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009366:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8009368:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800936a:	2001      	movs	r0, #1
 800936c:	e7fc      	b.n	8009368 <HAL_UART_Init+0x58>

0800936e <_ZdlPvj>:
 800936e:	f000 b811 	b.w	8009394 <_ZdlPv>

08009372 <_Znwj>:
 8009372:	2801      	cmp	r0, #1
 8009374:	bf38      	it	cc
 8009376:	2001      	movcc	r0, #1
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
 800937c:	4620      	mov	r0, r4
 800937e:	f000 f81b 	bl	80093b8 <malloc>
 8009382:	b100      	cbz	r0, 8009386 <_Znwj+0x14>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	f000 f807 	bl	8009398 <_ZSt15get_new_handlerv>
 800938a:	b908      	cbnz	r0, 8009390 <_Znwj+0x1e>
 800938c:	f000 f80c 	bl	80093a8 <abort>
 8009390:	4780      	blx	r0
 8009392:	e7f3      	b.n	800937c <_Znwj+0xa>

08009394 <_ZdlPv>:
 8009394:	f000 b818 	b.w	80093c8 <free>

08009398 <_ZSt15get_new_handlerv>:
 8009398:	4b02      	ldr	r3, [pc, #8]	@ (80093a4 <_ZSt15get_new_handlerv+0xc>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	f3bf 8f5b 	dmb	ish
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000438 	.word	0x20000438

080093a8 <abort>:
 80093a8:	2006      	movs	r0, #6
 80093aa:	b508      	push	{r3, lr}
 80093ac:	f000 fe74 	bl	800a098 <raise>
 80093b0:	2001      	movs	r0, #1
 80093b2:	f7fd ff1e 	bl	80071f2 <_exit>
	...

080093b8 <malloc>:
 80093b8:	4b02      	ldr	r3, [pc, #8]	@ (80093c4 <malloc+0xc>)
 80093ba:	4601      	mov	r1, r0
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	f000 b82d 	b.w	800941c <_malloc_r>
 80093c2:	bf00      	nop
 80093c4:	2000001c 	.word	0x2000001c

080093c8 <free>:
 80093c8:	4b02      	ldr	r3, [pc, #8]	@ (80093d4 <free+0xc>)
 80093ca:	4601      	mov	r1, r0
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f001 bd6f 	b.w	800aeb0 <_free_r>
 80093d2:	bf00      	nop
 80093d4:	2000001c 	.word	0x2000001c

080093d8 <sbrk_aligned>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4e0f      	ldr	r6, [pc, #60]	@ (8009418 <sbrk_aligned+0x40>)
 80093dc:	460c      	mov	r4, r1
 80093de:	6831      	ldr	r1, [r6, #0]
 80093e0:	4605      	mov	r5, r0
 80093e2:	b911      	cbnz	r1, 80093ea <sbrk_aligned+0x12>
 80093e4:	f000 feac 	bl	800a140 <_sbrk_r>
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 fea7 	bl	800a140 <_sbrk_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d103      	bne.n	80093fe <sbrk_aligned+0x26>
 80093f6:	f04f 34ff 	mov.w	r4, #4294967295
 80093fa:	4620      	mov	r0, r4
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d0f8      	beq.n	80093fa <sbrk_aligned+0x22>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f000 fe98 	bl	800a140 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d1f2      	bne.n	80093fa <sbrk_aligned+0x22>
 8009414:	e7ef      	b.n	80093f6 <sbrk_aligned+0x1e>
 8009416:	bf00      	nop
 8009418:	2000043c 	.word	0x2000043c

0800941c <_malloc_r>:
 800941c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009420:	1ccd      	adds	r5, r1, #3
 8009422:	f025 0503 	bic.w	r5, r5, #3
 8009426:	3508      	adds	r5, #8
 8009428:	2d0c      	cmp	r5, #12
 800942a:	bf38      	it	cc
 800942c:	250c      	movcc	r5, #12
 800942e:	2d00      	cmp	r5, #0
 8009430:	4606      	mov	r6, r0
 8009432:	db01      	blt.n	8009438 <_malloc_r+0x1c>
 8009434:	42a9      	cmp	r1, r5
 8009436:	d904      	bls.n	8009442 <_malloc_r+0x26>
 8009438:	230c      	movs	r3, #12
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009518 <_malloc_r+0xfc>
 8009446:	f000 f869 	bl	800951c <__malloc_lock>
 800944a:	f8d8 3000 	ldr.w	r3, [r8]
 800944e:	461c      	mov	r4, r3
 8009450:	bb44      	cbnz	r4, 80094a4 <_malloc_r+0x88>
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ffbf 	bl	80093d8 <sbrk_aligned>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	4604      	mov	r4, r0
 800945e:	d158      	bne.n	8009512 <_malloc_r+0xf6>
 8009460:	f8d8 4000 	ldr.w	r4, [r8]
 8009464:	4627      	mov	r7, r4
 8009466:	2f00      	cmp	r7, #0
 8009468:	d143      	bne.n	80094f2 <_malloc_r+0xd6>
 800946a:	2c00      	cmp	r4, #0
 800946c:	d04b      	beq.n	8009506 <_malloc_r+0xea>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	4639      	mov	r1, r7
 8009472:	4630      	mov	r0, r6
 8009474:	eb04 0903 	add.w	r9, r4, r3
 8009478:	f000 fe62 	bl	800a140 <_sbrk_r>
 800947c:	4581      	cmp	r9, r0
 800947e:	d142      	bne.n	8009506 <_malloc_r+0xea>
 8009480:	6821      	ldr	r1, [r4, #0]
 8009482:	4630      	mov	r0, r6
 8009484:	1a6d      	subs	r5, r5, r1
 8009486:	4629      	mov	r1, r5
 8009488:	f7ff ffa6 	bl	80093d8 <sbrk_aligned>
 800948c:	3001      	adds	r0, #1
 800948e:	d03a      	beq.n	8009506 <_malloc_r+0xea>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	442b      	add	r3, r5
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	f8d8 3000 	ldr.w	r3, [r8]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	bb62      	cbnz	r2, 80094f8 <_malloc_r+0xdc>
 800949e:	f8c8 7000 	str.w	r7, [r8]
 80094a2:	e00f      	b.n	80094c4 <_malloc_r+0xa8>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	1b52      	subs	r2, r2, r5
 80094a8:	d420      	bmi.n	80094ec <_malloc_r+0xd0>
 80094aa:	2a0b      	cmp	r2, #11
 80094ac:	d917      	bls.n	80094de <_malloc_r+0xc2>
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	6025      	str	r5, [r4, #0]
 80094b4:	bf18      	it	ne
 80094b6:	6059      	strne	r1, [r3, #4]
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	bf08      	it	eq
 80094bc:	f8c8 1000 	streq.w	r1, [r8]
 80094c0:	5162      	str	r2, [r4, r5]
 80094c2:	604b      	str	r3, [r1, #4]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f82f 	bl	8009528 <__malloc_unlock>
 80094ca:	f104 000b 	add.w	r0, r4, #11
 80094ce:	1d23      	adds	r3, r4, #4
 80094d0:	f020 0007 	bic.w	r0, r0, #7
 80094d4:	1ac2      	subs	r2, r0, r3
 80094d6:	bf1c      	itt	ne
 80094d8:	1a1b      	subne	r3, r3, r0
 80094da:	50a3      	strne	r3, [r4, r2]
 80094dc:	e7af      	b.n	800943e <_malloc_r+0x22>
 80094de:	6862      	ldr	r2, [r4, #4]
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	bf0c      	ite	eq
 80094e4:	f8c8 2000 	streq.w	r2, [r8]
 80094e8:	605a      	strne	r2, [r3, #4]
 80094ea:	e7eb      	b.n	80094c4 <_malloc_r+0xa8>
 80094ec:	4623      	mov	r3, r4
 80094ee:	6864      	ldr	r4, [r4, #4]
 80094f0:	e7ae      	b.n	8009450 <_malloc_r+0x34>
 80094f2:	463c      	mov	r4, r7
 80094f4:	687f      	ldr	r7, [r7, #4]
 80094f6:	e7b6      	b.n	8009466 <_malloc_r+0x4a>
 80094f8:	461a      	mov	r2, r3
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d1fb      	bne.n	80094f8 <_malloc_r+0xdc>
 8009500:	2300      	movs	r3, #0
 8009502:	6053      	str	r3, [r2, #4]
 8009504:	e7de      	b.n	80094c4 <_malloc_r+0xa8>
 8009506:	230c      	movs	r3, #12
 8009508:	4630      	mov	r0, r6
 800950a:	6033      	str	r3, [r6, #0]
 800950c:	f000 f80c 	bl	8009528 <__malloc_unlock>
 8009510:	e794      	b.n	800943c <_malloc_r+0x20>
 8009512:	6005      	str	r5, [r0, #0]
 8009514:	e7d6      	b.n	80094c4 <_malloc_r+0xa8>
 8009516:	bf00      	nop
 8009518:	20000440 	.word	0x20000440

0800951c <__malloc_lock>:
 800951c:	4801      	ldr	r0, [pc, #4]	@ (8009524 <__malloc_lock+0x8>)
 800951e:	f000 be5c 	b.w	800a1da <__retarget_lock_acquire_recursive>
 8009522:	bf00      	nop
 8009524:	20000584 	.word	0x20000584

08009528 <__malloc_unlock>:
 8009528:	4801      	ldr	r0, [pc, #4]	@ (8009530 <__malloc_unlock+0x8>)
 800952a:	f000 be57 	b.w	800a1dc <__retarget_lock_release_recursive>
 800952e:	bf00      	nop
 8009530:	20000584 	.word	0x20000584

08009534 <__cvt>:
 8009534:	2b00      	cmp	r3, #0
 8009536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800953a:	461d      	mov	r5, r3
 800953c:	bfbb      	ittet	lt
 800953e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009542:	461d      	movlt	r5, r3
 8009544:	2300      	movge	r3, #0
 8009546:	232d      	movlt	r3, #45	@ 0x2d
 8009548:	b088      	sub	sp, #32
 800954a:	4614      	mov	r4, r2
 800954c:	bfb8      	it	lt
 800954e:	4614      	movlt	r4, r2
 8009550:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009552:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009554:	7013      	strb	r3, [r2, #0]
 8009556:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009558:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800955c:	f023 0820 	bic.w	r8, r3, #32
 8009560:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009564:	d005      	beq.n	8009572 <__cvt+0x3e>
 8009566:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800956a:	d100      	bne.n	800956e <__cvt+0x3a>
 800956c:	3601      	adds	r6, #1
 800956e:	2302      	movs	r3, #2
 8009570:	e000      	b.n	8009574 <__cvt+0x40>
 8009572:	2303      	movs	r3, #3
 8009574:	aa07      	add	r2, sp, #28
 8009576:	9204      	str	r2, [sp, #16]
 8009578:	aa06      	add	r2, sp, #24
 800957a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800957e:	e9cd 3600 	strd	r3, r6, [sp]
 8009582:	4622      	mov	r2, r4
 8009584:	462b      	mov	r3, r5
 8009586:	f000 fecb 	bl	800a320 <_dtoa_r>
 800958a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800958e:	4607      	mov	r7, r0
 8009590:	d119      	bne.n	80095c6 <__cvt+0x92>
 8009592:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009594:	07db      	lsls	r3, r3, #31
 8009596:	d50e      	bpl.n	80095b6 <__cvt+0x82>
 8009598:	eb00 0906 	add.w	r9, r0, r6
 800959c:	2200      	movs	r2, #0
 800959e:	2300      	movs	r3, #0
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f7 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80095a8:	b108      	cbz	r0, 80095ae <__cvt+0x7a>
 80095aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80095ae:	2230      	movs	r2, #48	@ 0x30
 80095b0:	9b07      	ldr	r3, [sp, #28]
 80095b2:	454b      	cmp	r3, r9
 80095b4:	d31e      	bcc.n	80095f4 <__cvt+0xc0>
 80095b6:	4638      	mov	r0, r7
 80095b8:	9b07      	ldr	r3, [sp, #28]
 80095ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80095bc:	1bdb      	subs	r3, r3, r7
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	b008      	add	sp, #32
 80095c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095ca:	eb00 0906 	add.w	r9, r0, r6
 80095ce:	d1e5      	bne.n	800959c <__cvt+0x68>
 80095d0:	7803      	ldrb	r3, [r0, #0]
 80095d2:	2b30      	cmp	r3, #48	@ 0x30
 80095d4:	d10a      	bne.n	80095ec <__cvt+0xb8>
 80095d6:	2200      	movs	r2, #0
 80095d8:	2300      	movs	r3, #0
 80095da:	4620      	mov	r0, r4
 80095dc:	4629      	mov	r1, r5
 80095de:	f7f7 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80095e2:	b918      	cbnz	r0, 80095ec <__cvt+0xb8>
 80095e4:	f1c6 0601 	rsb	r6, r6, #1
 80095e8:	f8ca 6000 	str.w	r6, [sl]
 80095ec:	f8da 3000 	ldr.w	r3, [sl]
 80095f0:	4499      	add	r9, r3
 80095f2:	e7d3      	b.n	800959c <__cvt+0x68>
 80095f4:	1c59      	adds	r1, r3, #1
 80095f6:	9107      	str	r1, [sp, #28]
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	e7d9      	b.n	80095b0 <__cvt+0x7c>

080095fc <__exponent>:
 80095fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095fe:	2900      	cmp	r1, #0
 8009600:	bfb6      	itet	lt
 8009602:	232d      	movlt	r3, #45	@ 0x2d
 8009604:	232b      	movge	r3, #43	@ 0x2b
 8009606:	4249      	neglt	r1, r1
 8009608:	2909      	cmp	r1, #9
 800960a:	7002      	strb	r2, [r0, #0]
 800960c:	7043      	strb	r3, [r0, #1]
 800960e:	dd29      	ble.n	8009664 <__exponent+0x68>
 8009610:	f10d 0307 	add.w	r3, sp, #7
 8009614:	461d      	mov	r5, r3
 8009616:	270a      	movs	r7, #10
 8009618:	fbb1 f6f7 	udiv	r6, r1, r7
 800961c:	461a      	mov	r2, r3
 800961e:	fb07 1416 	mls	r4, r7, r6, r1
 8009622:	3430      	adds	r4, #48	@ 0x30
 8009624:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009628:	460c      	mov	r4, r1
 800962a:	2c63      	cmp	r4, #99	@ 0x63
 800962c:	4631      	mov	r1, r6
 800962e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009632:	dcf1      	bgt.n	8009618 <__exponent+0x1c>
 8009634:	3130      	adds	r1, #48	@ 0x30
 8009636:	1e94      	subs	r4, r2, #2
 8009638:	f803 1c01 	strb.w	r1, [r3, #-1]
 800963c:	4623      	mov	r3, r4
 800963e:	1c41      	adds	r1, r0, #1
 8009640:	42ab      	cmp	r3, r5
 8009642:	d30a      	bcc.n	800965a <__exponent+0x5e>
 8009644:	f10d 0309 	add.w	r3, sp, #9
 8009648:	1a9b      	subs	r3, r3, r2
 800964a:	42ac      	cmp	r4, r5
 800964c:	bf88      	it	hi
 800964e:	2300      	movhi	r3, #0
 8009650:	3302      	adds	r3, #2
 8009652:	4403      	add	r3, r0
 8009654:	1a18      	subs	r0, r3, r0
 8009656:	b003      	add	sp, #12
 8009658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800965e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009662:	e7ed      	b.n	8009640 <__exponent+0x44>
 8009664:	2330      	movs	r3, #48	@ 0x30
 8009666:	3130      	adds	r1, #48	@ 0x30
 8009668:	7083      	strb	r3, [r0, #2]
 800966a:	70c1      	strb	r1, [r0, #3]
 800966c:	1d03      	adds	r3, r0, #4
 800966e:	e7f1      	b.n	8009654 <__exponent+0x58>

08009670 <_printf_float>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	b091      	sub	sp, #68	@ 0x44
 8009676:	460c      	mov	r4, r1
 8009678:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800967c:	4616      	mov	r6, r2
 800967e:	461f      	mov	r7, r3
 8009680:	4605      	mov	r5, r0
 8009682:	f000 fd11 	bl	800a0a8 <_localeconv_r>
 8009686:	6803      	ldr	r3, [r0, #0]
 8009688:	4618      	mov	r0, r3
 800968a:	9308      	str	r3, [sp, #32]
 800968c:	f7f6 fd60 	bl	8000150 <strlen>
 8009690:	2300      	movs	r3, #0
 8009692:	930e      	str	r3, [sp, #56]	@ 0x38
 8009694:	f8d8 3000 	ldr.w	r3, [r8]
 8009698:	9009      	str	r0, [sp, #36]	@ 0x24
 800969a:	3307      	adds	r3, #7
 800969c:	f023 0307 	bic.w	r3, r3, #7
 80096a0:	f103 0208 	add.w	r2, r3, #8
 80096a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096a8:	f8d4 b000 	ldr.w	fp, [r4]
 80096ac:	f8c8 2000 	str.w	r2, [r8]
 80096b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096ba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096ca:	4b9c      	ldr	r3, [pc, #624]	@ (800993c <_printf_float+0x2cc>)
 80096cc:	f7f7 f99e 	bl	8000a0c <__aeabi_dcmpun>
 80096d0:	bb70      	cbnz	r0, 8009730 <_printf_float+0xc0>
 80096d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	4b98      	ldr	r3, [pc, #608]	@ (800993c <_printf_float+0x2cc>)
 80096dc:	f7f7 f978 	bl	80009d0 <__aeabi_dcmple>
 80096e0:	bb30      	cbnz	r0, 8009730 <_printf_float+0xc0>
 80096e2:	2200      	movs	r2, #0
 80096e4:	2300      	movs	r3, #0
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f7 f967 	bl	80009bc <__aeabi_dcmplt>
 80096ee:	b110      	cbz	r0, 80096f6 <_printf_float+0x86>
 80096f0:	232d      	movs	r3, #45	@ 0x2d
 80096f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096f6:	4a92      	ldr	r2, [pc, #584]	@ (8009940 <_printf_float+0x2d0>)
 80096f8:	4b92      	ldr	r3, [pc, #584]	@ (8009944 <_printf_float+0x2d4>)
 80096fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096fe:	bf94      	ite	ls
 8009700:	4690      	movls	r8, r2
 8009702:	4698      	movhi	r8, r3
 8009704:	2303      	movs	r3, #3
 8009706:	f04f 0900 	mov.w	r9, #0
 800970a:	6123      	str	r3, [r4, #16]
 800970c:	f02b 0304 	bic.w	r3, fp, #4
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	4633      	mov	r3, r6
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	9700      	str	r7, [sp, #0]
 800971a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800971c:	f000 f9d4 	bl	8009ac8 <_printf_common>
 8009720:	3001      	adds	r0, #1
 8009722:	f040 8090 	bne.w	8009846 <_printf_float+0x1d6>
 8009726:	f04f 30ff 	mov.w	r0, #4294967295
 800972a:	b011      	add	sp, #68	@ 0x44
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	4642      	mov	r2, r8
 8009732:	464b      	mov	r3, r9
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f7 f968 	bl	8000a0c <__aeabi_dcmpun>
 800973c:	b148      	cbz	r0, 8009752 <_printf_float+0xe2>
 800973e:	464b      	mov	r3, r9
 8009740:	2b00      	cmp	r3, #0
 8009742:	bfb8      	it	lt
 8009744:	232d      	movlt	r3, #45	@ 0x2d
 8009746:	4a80      	ldr	r2, [pc, #512]	@ (8009948 <_printf_float+0x2d8>)
 8009748:	bfb8      	it	lt
 800974a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800974e:	4b7f      	ldr	r3, [pc, #508]	@ (800994c <_printf_float+0x2dc>)
 8009750:	e7d3      	b.n	80096fa <_printf_float+0x8a>
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	d13f      	bne.n	80097dc <_printf_float+0x16c>
 800975c:	2306      	movs	r3, #6
 800975e:	6063      	str	r3, [r4, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	9206      	str	r2, [sp, #24]
 800976a:	aa0e      	add	r2, sp, #56	@ 0x38
 800976c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009770:	aa0d      	add	r2, sp, #52	@ 0x34
 8009772:	9203      	str	r2, [sp, #12]
 8009774:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009778:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	4642      	mov	r2, r8
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	4628      	mov	r0, r5
 8009784:	464b      	mov	r3, r9
 8009786:	910a      	str	r1, [sp, #40]	@ 0x28
 8009788:	f7ff fed4 	bl	8009534 <__cvt>
 800978c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800978e:	4680      	mov	r8, r0
 8009790:	2947      	cmp	r1, #71	@ 0x47
 8009792:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009794:	d128      	bne.n	80097e8 <_printf_float+0x178>
 8009796:	1cc8      	adds	r0, r1, #3
 8009798:	db02      	blt.n	80097a0 <_printf_float+0x130>
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	4299      	cmp	r1, r3
 800979e:	dd40      	ble.n	8009822 <_printf_float+0x1b2>
 80097a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80097a4:	fa5f fa8a 	uxtb.w	sl, sl
 80097a8:	4652      	mov	r2, sl
 80097aa:	3901      	subs	r1, #1
 80097ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097b0:	910d      	str	r1, [sp, #52]	@ 0x34
 80097b2:	f7ff ff23 	bl	80095fc <__exponent>
 80097b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097b8:	4681      	mov	r9, r0
 80097ba:	1813      	adds	r3, r2, r0
 80097bc:	2a01      	cmp	r2, #1
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	dc02      	bgt.n	80097c8 <_printf_float+0x158>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	07d2      	lsls	r2, r2, #31
 80097c6:	d501      	bpl.n	80097cc <_printf_float+0x15c>
 80097c8:	3301      	adds	r3, #1
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d09e      	beq.n	8009712 <_printf_float+0xa2>
 80097d4:	232d      	movs	r3, #45	@ 0x2d
 80097d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097da:	e79a      	b.n	8009712 <_printf_float+0xa2>
 80097dc:	2947      	cmp	r1, #71	@ 0x47
 80097de:	d1bf      	bne.n	8009760 <_printf_float+0xf0>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1bd      	bne.n	8009760 <_printf_float+0xf0>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e7ba      	b.n	800975e <_printf_float+0xee>
 80097e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097ec:	d9dc      	bls.n	80097a8 <_printf_float+0x138>
 80097ee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80097f2:	d118      	bne.n	8009826 <_printf_float+0x1b6>
 80097f4:	2900      	cmp	r1, #0
 80097f6:	6863      	ldr	r3, [r4, #4]
 80097f8:	dd0b      	ble.n	8009812 <_printf_float+0x1a2>
 80097fa:	6121      	str	r1, [r4, #16]
 80097fc:	b913      	cbnz	r3, 8009804 <_printf_float+0x194>
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	07d0      	lsls	r0, r2, #31
 8009802:	d502      	bpl.n	800980a <_printf_float+0x19a>
 8009804:	3301      	adds	r3, #1
 8009806:	440b      	add	r3, r1
 8009808:	6123      	str	r3, [r4, #16]
 800980a:	f04f 0900 	mov.w	r9, #0
 800980e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009810:	e7dc      	b.n	80097cc <_printf_float+0x15c>
 8009812:	b913      	cbnz	r3, 800981a <_printf_float+0x1aa>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	07d2      	lsls	r2, r2, #31
 8009818:	d501      	bpl.n	800981e <_printf_float+0x1ae>
 800981a:	3302      	adds	r3, #2
 800981c:	e7f4      	b.n	8009808 <_printf_float+0x198>
 800981e:	2301      	movs	r3, #1
 8009820:	e7f2      	b.n	8009808 <_printf_float+0x198>
 8009822:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009828:	4299      	cmp	r1, r3
 800982a:	db05      	blt.n	8009838 <_printf_float+0x1c8>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	6121      	str	r1, [r4, #16]
 8009830:	07d8      	lsls	r0, r3, #31
 8009832:	d5ea      	bpl.n	800980a <_printf_float+0x19a>
 8009834:	1c4b      	adds	r3, r1, #1
 8009836:	e7e7      	b.n	8009808 <_printf_float+0x198>
 8009838:	2900      	cmp	r1, #0
 800983a:	bfcc      	ite	gt
 800983c:	2201      	movgt	r2, #1
 800983e:	f1c1 0202 	rsble	r2, r1, #2
 8009842:	4413      	add	r3, r2
 8009844:	e7e0      	b.n	8009808 <_printf_float+0x198>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	055a      	lsls	r2, r3, #21
 800984a:	d407      	bmi.n	800985c <_printf_float+0x1ec>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	4642      	mov	r2, r8
 8009850:	4631      	mov	r1, r6
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	d12b      	bne.n	80098b2 <_printf_float+0x242>
 800985a:	e764      	b.n	8009726 <_printf_float+0xb6>
 800985c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009860:	f240 80dc 	bls.w	8009a1c <_printf_float+0x3ac>
 8009864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	f7f7 f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8009870:	2800      	cmp	r0, #0
 8009872:	d033      	beq.n	80098dc <_printf_float+0x26c>
 8009874:	2301      	movs	r3, #1
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	4a35      	ldr	r2, [pc, #212]	@ (8009950 <_printf_float+0x2e0>)
 800987c:	47b8      	blx	r7
 800987e:	3001      	adds	r0, #1
 8009880:	f43f af51 	beq.w	8009726 <_printf_float+0xb6>
 8009884:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009888:	4543      	cmp	r3, r8
 800988a:	db02      	blt.n	8009892 <_printf_float+0x222>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	07d8      	lsls	r0, r3, #31
 8009890:	d50f      	bpl.n	80098b2 <_printf_float+0x242>
 8009892:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	f43f af42 	beq.w	8009726 <_printf_float+0xb6>
 80098a2:	f04f 0900 	mov.w	r9, #0
 80098a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80098aa:	f104 0a1a 	add.w	sl, r4, #26
 80098ae:	45c8      	cmp	r8, r9
 80098b0:	dc09      	bgt.n	80098c6 <_printf_float+0x256>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	079b      	lsls	r3, r3, #30
 80098b6:	f100 8102 	bmi.w	8009abe <_printf_float+0x44e>
 80098ba:	68e0      	ldr	r0, [r4, #12]
 80098bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098be:	4298      	cmp	r0, r3
 80098c0:	bfb8      	it	lt
 80098c2:	4618      	movlt	r0, r3
 80098c4:	e731      	b.n	800972a <_printf_float+0xba>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	f43f af28 	beq.w	8009726 <_printf_float+0xb6>
 80098d6:	f109 0901 	add.w	r9, r9, #1
 80098da:	e7e8      	b.n	80098ae <_printf_float+0x23e>
 80098dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dc38      	bgt.n	8009954 <_printf_float+0x2e4>
 80098e2:	2301      	movs	r3, #1
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	4a19      	ldr	r2, [pc, #100]	@ (8009950 <_printf_float+0x2e0>)
 80098ea:	47b8      	blx	r7
 80098ec:	3001      	adds	r0, #1
 80098ee:	f43f af1a 	beq.w	8009726 <_printf_float+0xb6>
 80098f2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80098f6:	ea59 0303 	orrs.w	r3, r9, r3
 80098fa:	d102      	bne.n	8009902 <_printf_float+0x292>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	07d9      	lsls	r1, r3, #31
 8009900:	d5d7      	bpl.n	80098b2 <_printf_float+0x242>
 8009902:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009906:	4631      	mov	r1, r6
 8009908:	4628      	mov	r0, r5
 800990a:	47b8      	blx	r7
 800990c:	3001      	adds	r0, #1
 800990e:	f43f af0a 	beq.w	8009726 <_printf_float+0xb6>
 8009912:	f04f 0a00 	mov.w	sl, #0
 8009916:	f104 0b1a 	add.w	fp, r4, #26
 800991a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800991c:	425b      	negs	r3, r3
 800991e:	4553      	cmp	r3, sl
 8009920:	dc01      	bgt.n	8009926 <_printf_float+0x2b6>
 8009922:	464b      	mov	r3, r9
 8009924:	e793      	b.n	800984e <_printf_float+0x1de>
 8009926:	2301      	movs	r3, #1
 8009928:	465a      	mov	r2, fp
 800992a:	4631      	mov	r1, r6
 800992c:	4628      	mov	r0, r5
 800992e:	47b8      	blx	r7
 8009930:	3001      	adds	r0, #1
 8009932:	f43f aef8 	beq.w	8009726 <_printf_float+0xb6>
 8009936:	f10a 0a01 	add.w	sl, sl, #1
 800993a:	e7ee      	b.n	800991a <_printf_float+0x2aa>
 800993c:	7fefffff 	.word	0x7fefffff
 8009940:	0800cbbe 	.word	0x0800cbbe
 8009944:	0800cbc2 	.word	0x0800cbc2
 8009948:	0800cbc6 	.word	0x0800cbc6
 800994c:	0800cbca 	.word	0x0800cbca
 8009950:	0800cbce 	.word	0x0800cbce
 8009954:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009956:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800995a:	4553      	cmp	r3, sl
 800995c:	bfa8      	it	ge
 800995e:	4653      	movge	r3, sl
 8009960:	2b00      	cmp	r3, #0
 8009962:	4699      	mov	r9, r3
 8009964:	dc36      	bgt.n	80099d4 <_printf_float+0x364>
 8009966:	f04f 0b00 	mov.w	fp, #0
 800996a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800996e:	f104 021a 	add.w	r2, r4, #26
 8009972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009974:	930a      	str	r3, [sp, #40]	@ 0x28
 8009976:	eba3 0309 	sub.w	r3, r3, r9
 800997a:	455b      	cmp	r3, fp
 800997c:	dc31      	bgt.n	80099e2 <_printf_float+0x372>
 800997e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009980:	459a      	cmp	sl, r3
 8009982:	dc3a      	bgt.n	80099fa <_printf_float+0x38a>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	07da      	lsls	r2, r3, #31
 8009988:	d437      	bmi.n	80099fa <_printf_float+0x38a>
 800998a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800998c:	ebaa 0903 	sub.w	r9, sl, r3
 8009990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009992:	ebaa 0303 	sub.w	r3, sl, r3
 8009996:	4599      	cmp	r9, r3
 8009998:	bfa8      	it	ge
 800999a:	4699      	movge	r9, r3
 800999c:	f1b9 0f00 	cmp.w	r9, #0
 80099a0:	dc33      	bgt.n	8009a0a <_printf_float+0x39a>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099aa:	f104 0b1a 	add.w	fp, r4, #26
 80099ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099b0:	ebaa 0303 	sub.w	r3, sl, r3
 80099b4:	eba3 0309 	sub.w	r3, r3, r9
 80099b8:	4543      	cmp	r3, r8
 80099ba:	f77f af7a 	ble.w	80098b2 <_printf_float+0x242>
 80099be:	2301      	movs	r3, #1
 80099c0:	465a      	mov	r2, fp
 80099c2:	4631      	mov	r1, r6
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b8      	blx	r7
 80099c8:	3001      	adds	r0, #1
 80099ca:	f43f aeac 	beq.w	8009726 <_printf_float+0xb6>
 80099ce:	f108 0801 	add.w	r8, r8, #1
 80099d2:	e7ec      	b.n	80099ae <_printf_float+0x33e>
 80099d4:	4642      	mov	r2, r8
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	d1c2      	bne.n	8009966 <_printf_float+0x2f6>
 80099e0:	e6a1      	b.n	8009726 <_printf_float+0xb6>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f ae9a 	beq.w	8009726 <_printf_float+0xb6>
 80099f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099f4:	f10b 0b01 	add.w	fp, fp, #1
 80099f8:	e7bb      	b.n	8009972 <_printf_float+0x302>
 80099fa:	4631      	mov	r1, r6
 80099fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	d1c0      	bne.n	800998a <_printf_float+0x31a>
 8009a08:	e68d      	b.n	8009726 <_printf_float+0xb6>
 8009a0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	4442      	add	r2, r8
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	d1c3      	bne.n	80099a2 <_printf_float+0x332>
 8009a1a:	e684      	b.n	8009726 <_printf_float+0xb6>
 8009a1c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009a20:	f1ba 0f01 	cmp.w	sl, #1
 8009a24:	dc01      	bgt.n	8009a2a <_printf_float+0x3ba>
 8009a26:	07db      	lsls	r3, r3, #31
 8009a28:	d536      	bpl.n	8009a98 <_printf_float+0x428>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4628      	mov	r0, r5
 8009a32:	47b8      	blx	r7
 8009a34:	3001      	adds	r0, #1
 8009a36:	f43f ae76 	beq.w	8009726 <_printf_float+0xb6>
 8009a3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b8      	blx	r7
 8009a44:	3001      	adds	r0, #1
 8009a46:	f43f ae6e 	beq.w	8009726 <_printf_float+0xb6>
 8009a4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2300      	movs	r3, #0
 8009a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a56:	f7f6 ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8009a5a:	b9c0      	cbnz	r0, 8009a8e <_printf_float+0x41e>
 8009a5c:	4653      	mov	r3, sl
 8009a5e:	f108 0201 	add.w	r2, r8, #1
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d10c      	bne.n	8009a86 <_printf_float+0x416>
 8009a6c:	e65b      	b.n	8009726 <_printf_float+0xb6>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	465a      	mov	r2, fp
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f ae54 	beq.w	8009726 <_printf_float+0xb6>
 8009a7e:	f108 0801 	add.w	r8, r8, #1
 8009a82:	45d0      	cmp	r8, sl
 8009a84:	dbf3      	blt.n	8009a6e <_printf_float+0x3fe>
 8009a86:	464b      	mov	r3, r9
 8009a88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a8c:	e6e0      	b.n	8009850 <_printf_float+0x1e0>
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	f104 0b1a 	add.w	fp, r4, #26
 8009a96:	e7f4      	b.n	8009a82 <_printf_float+0x412>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	4642      	mov	r2, r8
 8009a9c:	e7e1      	b.n	8009a62 <_printf_float+0x3f2>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	464a      	mov	r2, r9
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f ae3c 	beq.w	8009726 <_printf_float+0xb6>
 8009aae:	f108 0801 	add.w	r8, r8, #1
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ab6:	1a5b      	subs	r3, r3, r1
 8009ab8:	4543      	cmp	r3, r8
 8009aba:	dcf0      	bgt.n	8009a9e <_printf_float+0x42e>
 8009abc:	e6fd      	b.n	80098ba <_printf_float+0x24a>
 8009abe:	f04f 0800 	mov.w	r8, #0
 8009ac2:	f104 0919 	add.w	r9, r4, #25
 8009ac6:	e7f4      	b.n	8009ab2 <_printf_float+0x442>

08009ac8 <_printf_common>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	4616      	mov	r6, r2
 8009ace:	4698      	mov	r8, r3
 8009ad0:	688a      	ldr	r2, [r1, #8]
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	bfb8      	it	lt
 8009ada:	4613      	movlt	r3, r2
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ae8:	b10a      	cbz	r2, 8009aee <_printf_common+0x26>
 8009aea:	3301      	adds	r3, #1
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	0699      	lsls	r1, r3, #26
 8009af2:	bf42      	ittt	mi
 8009af4:	6833      	ldrmi	r3, [r6, #0]
 8009af6:	3302      	addmi	r3, #2
 8009af8:	6033      	strmi	r3, [r6, #0]
 8009afa:	6825      	ldr	r5, [r4, #0]
 8009afc:	f015 0506 	ands.w	r5, r5, #6
 8009b00:	d106      	bne.n	8009b10 <_printf_common+0x48>
 8009b02:	f104 0a19 	add.w	sl, r4, #25
 8009b06:	68e3      	ldr	r3, [r4, #12]
 8009b08:	6832      	ldr	r2, [r6, #0]
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dc2b      	bgt.n	8009b68 <_printf_common+0xa0>
 8009b10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b14:	6822      	ldr	r2, [r4, #0]
 8009b16:	3b00      	subs	r3, #0
 8009b18:	bf18      	it	ne
 8009b1a:	2301      	movne	r3, #1
 8009b1c:	0692      	lsls	r2, r2, #26
 8009b1e:	d430      	bmi.n	8009b82 <_printf_common+0xba>
 8009b20:	4641      	mov	r1, r8
 8009b22:	4638      	mov	r0, r7
 8009b24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b28:	47c8      	blx	r9
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d023      	beq.n	8009b76 <_printf_common+0xae>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	6922      	ldr	r2, [r4, #16]
 8009b32:	f003 0306 	and.w	r3, r3, #6
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	bf14      	ite	ne
 8009b3a:	2500      	movne	r5, #0
 8009b3c:	6833      	ldreq	r3, [r6, #0]
 8009b3e:	f04f 0600 	mov.w	r6, #0
 8009b42:	bf08      	it	eq
 8009b44:	68e5      	ldreq	r5, [r4, #12]
 8009b46:	f104 041a 	add.w	r4, r4, #26
 8009b4a:	bf08      	it	eq
 8009b4c:	1aed      	subeq	r5, r5, r3
 8009b4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009b52:	bf08      	it	eq
 8009b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	bfc4      	itt	gt
 8009b5c:	1a9b      	subgt	r3, r3, r2
 8009b5e:	18ed      	addgt	r5, r5, r3
 8009b60:	42b5      	cmp	r5, r6
 8009b62:	d11a      	bne.n	8009b9a <_printf_common+0xd2>
 8009b64:	2000      	movs	r0, #0
 8009b66:	e008      	b.n	8009b7a <_printf_common+0xb2>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	4641      	mov	r1, r8
 8009b6e:	4638      	mov	r0, r7
 8009b70:	47c8      	blx	r9
 8009b72:	3001      	adds	r0, #1
 8009b74:	d103      	bne.n	8009b7e <_printf_common+0xb6>
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7e:	3501      	adds	r5, #1
 8009b80:	e7c1      	b.n	8009b06 <_printf_common+0x3e>
 8009b82:	2030      	movs	r0, #48	@ 0x30
 8009b84:	18e1      	adds	r1, r4, r3
 8009b86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b90:	4422      	add	r2, r4
 8009b92:	3302      	adds	r3, #2
 8009b94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b98:	e7c2      	b.n	8009b20 <_printf_common+0x58>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	47c8      	blx	r9
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d0e6      	beq.n	8009b76 <_printf_common+0xae>
 8009ba8:	3601      	adds	r6, #1
 8009baa:	e7d9      	b.n	8009b60 <_printf_common+0x98>

08009bac <_printf_i>:
 8009bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb0:	7e0f      	ldrb	r7, [r1, #24]
 8009bb2:	4691      	mov	r9, r2
 8009bb4:	2f78      	cmp	r7, #120	@ 0x78
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	460c      	mov	r4, r1
 8009bba:	469a      	mov	sl, r3
 8009bbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bc2:	d807      	bhi.n	8009bd4 <_printf_i+0x28>
 8009bc4:	2f62      	cmp	r7, #98	@ 0x62
 8009bc6:	d80a      	bhi.n	8009bde <_printf_i+0x32>
 8009bc8:	2f00      	cmp	r7, #0
 8009bca:	f000 80d3 	beq.w	8009d74 <_printf_i+0x1c8>
 8009bce:	2f58      	cmp	r7, #88	@ 0x58
 8009bd0:	f000 80ba 	beq.w	8009d48 <_printf_i+0x19c>
 8009bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bdc:	e03a      	b.n	8009c54 <_printf_i+0xa8>
 8009bde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009be2:	2b15      	cmp	r3, #21
 8009be4:	d8f6      	bhi.n	8009bd4 <_printf_i+0x28>
 8009be6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bec <_printf_i+0x40>)
 8009be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bec:	08009c45 	.word	0x08009c45
 8009bf0:	08009c59 	.word	0x08009c59
 8009bf4:	08009bd5 	.word	0x08009bd5
 8009bf8:	08009bd5 	.word	0x08009bd5
 8009bfc:	08009bd5 	.word	0x08009bd5
 8009c00:	08009bd5 	.word	0x08009bd5
 8009c04:	08009c59 	.word	0x08009c59
 8009c08:	08009bd5 	.word	0x08009bd5
 8009c0c:	08009bd5 	.word	0x08009bd5
 8009c10:	08009bd5 	.word	0x08009bd5
 8009c14:	08009bd5 	.word	0x08009bd5
 8009c18:	08009d5b 	.word	0x08009d5b
 8009c1c:	08009c83 	.word	0x08009c83
 8009c20:	08009d15 	.word	0x08009d15
 8009c24:	08009bd5 	.word	0x08009bd5
 8009c28:	08009bd5 	.word	0x08009bd5
 8009c2c:	08009d7d 	.word	0x08009d7d
 8009c30:	08009bd5 	.word	0x08009bd5
 8009c34:	08009c83 	.word	0x08009c83
 8009c38:	08009bd5 	.word	0x08009bd5
 8009c3c:	08009bd5 	.word	0x08009bd5
 8009c40:	08009d1d 	.word	0x08009d1d
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	1d1a      	adds	r2, r3, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6032      	str	r2, [r6, #0]
 8009c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c54:	2301      	movs	r3, #1
 8009c56:	e09e      	b.n	8009d96 <_printf_i+0x1ea>
 8009c58:	6833      	ldr	r3, [r6, #0]
 8009c5a:	6820      	ldr	r0, [r4, #0]
 8009c5c:	1d19      	adds	r1, r3, #4
 8009c5e:	6031      	str	r1, [r6, #0]
 8009c60:	0606      	lsls	r6, r0, #24
 8009c62:	d501      	bpl.n	8009c68 <_printf_i+0xbc>
 8009c64:	681d      	ldr	r5, [r3, #0]
 8009c66:	e003      	b.n	8009c70 <_printf_i+0xc4>
 8009c68:	0645      	lsls	r5, r0, #25
 8009c6a:	d5fb      	bpl.n	8009c64 <_printf_i+0xb8>
 8009c6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	da03      	bge.n	8009c7c <_printf_i+0xd0>
 8009c74:	232d      	movs	r3, #45	@ 0x2d
 8009c76:	426d      	negs	r5, r5
 8009c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c7c:	230a      	movs	r3, #10
 8009c7e:	4859      	ldr	r0, [pc, #356]	@ (8009de4 <_printf_i+0x238>)
 8009c80:	e011      	b.n	8009ca6 <_printf_i+0xfa>
 8009c82:	6821      	ldr	r1, [r4, #0]
 8009c84:	6833      	ldr	r3, [r6, #0]
 8009c86:	0608      	lsls	r0, r1, #24
 8009c88:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c8c:	d402      	bmi.n	8009c94 <_printf_i+0xe8>
 8009c8e:	0649      	lsls	r1, r1, #25
 8009c90:	bf48      	it	mi
 8009c92:	b2ad      	uxthmi	r5, r5
 8009c94:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c96:	6033      	str	r3, [r6, #0]
 8009c98:	bf14      	ite	ne
 8009c9a:	230a      	movne	r3, #10
 8009c9c:	2308      	moveq	r3, #8
 8009c9e:	4851      	ldr	r0, [pc, #324]	@ (8009de4 <_printf_i+0x238>)
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ca6:	6866      	ldr	r6, [r4, #4]
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	bfa8      	it	ge
 8009cac:	6821      	ldrge	r1, [r4, #0]
 8009cae:	60a6      	str	r6, [r4, #8]
 8009cb0:	bfa4      	itt	ge
 8009cb2:	f021 0104 	bicge.w	r1, r1, #4
 8009cb6:	6021      	strge	r1, [r4, #0]
 8009cb8:	b90d      	cbnz	r5, 8009cbe <_printf_i+0x112>
 8009cba:	2e00      	cmp	r6, #0
 8009cbc:	d04b      	beq.n	8009d56 <_printf_i+0x1aa>
 8009cbe:	4616      	mov	r6, r2
 8009cc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cc4:	fb03 5711 	mls	r7, r3, r1, r5
 8009cc8:	5dc7      	ldrb	r7, [r0, r7]
 8009cca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cce:	462f      	mov	r7, r5
 8009cd0:	42bb      	cmp	r3, r7
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	d9f4      	bls.n	8009cc0 <_printf_i+0x114>
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d10b      	bne.n	8009cf2 <_printf_i+0x146>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	07df      	lsls	r7, r3, #31
 8009cde:	d508      	bpl.n	8009cf2 <_printf_i+0x146>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6861      	ldr	r1, [r4, #4]
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	bfde      	ittt	le
 8009ce8:	2330      	movle	r3, #48	@ 0x30
 8009cea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cf2:	1b92      	subs	r2, r2, r6
 8009cf4:	6122      	str	r2, [r4, #16]
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f8cd a000 	str.w	sl, [sp]
 8009d00:	aa03      	add	r2, sp, #12
 8009d02:	f7ff fee1 	bl	8009ac8 <_printf_common>
 8009d06:	3001      	adds	r0, #1
 8009d08:	d14a      	bne.n	8009da0 <_printf_i+0x1f4>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	b004      	add	sp, #16
 8009d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	f043 0320 	orr.w	r3, r3, #32
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	2778      	movs	r7, #120	@ 0x78
 8009d1e:	4832      	ldr	r0, [pc, #200]	@ (8009de8 <_printf_i+0x23c>)
 8009d20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	6831      	ldr	r1, [r6, #0]
 8009d28:	061f      	lsls	r7, r3, #24
 8009d2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d2e:	d402      	bmi.n	8009d36 <_printf_i+0x18a>
 8009d30:	065f      	lsls	r7, r3, #25
 8009d32:	bf48      	it	mi
 8009d34:	b2ad      	uxthmi	r5, r5
 8009d36:	6031      	str	r1, [r6, #0]
 8009d38:	07d9      	lsls	r1, r3, #31
 8009d3a:	bf44      	itt	mi
 8009d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d40:	6023      	strmi	r3, [r4, #0]
 8009d42:	b11d      	cbz	r5, 8009d4c <_printf_i+0x1a0>
 8009d44:	2310      	movs	r3, #16
 8009d46:	e7ab      	b.n	8009ca0 <_printf_i+0xf4>
 8009d48:	4826      	ldr	r0, [pc, #152]	@ (8009de4 <_printf_i+0x238>)
 8009d4a:	e7e9      	b.n	8009d20 <_printf_i+0x174>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	f023 0320 	bic.w	r3, r3, #32
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	e7f6      	b.n	8009d44 <_printf_i+0x198>
 8009d56:	4616      	mov	r6, r2
 8009d58:	e7bd      	b.n	8009cd6 <_printf_i+0x12a>
 8009d5a:	6833      	ldr	r3, [r6, #0]
 8009d5c:	6825      	ldr	r5, [r4, #0]
 8009d5e:	1d18      	adds	r0, r3, #4
 8009d60:	6961      	ldr	r1, [r4, #20]
 8009d62:	6030      	str	r0, [r6, #0]
 8009d64:	062e      	lsls	r6, r5, #24
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	d501      	bpl.n	8009d6e <_printf_i+0x1c2>
 8009d6a:	6019      	str	r1, [r3, #0]
 8009d6c:	e002      	b.n	8009d74 <_printf_i+0x1c8>
 8009d6e:	0668      	lsls	r0, r5, #25
 8009d70:	d5fb      	bpl.n	8009d6a <_printf_i+0x1be>
 8009d72:	8019      	strh	r1, [r3, #0]
 8009d74:	2300      	movs	r3, #0
 8009d76:	4616      	mov	r6, r2
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	e7bc      	b.n	8009cf6 <_printf_i+0x14a>
 8009d7c:	6833      	ldr	r3, [r6, #0]
 8009d7e:	2100      	movs	r1, #0
 8009d80:	1d1a      	adds	r2, r3, #4
 8009d82:	6032      	str	r2, [r6, #0]
 8009d84:	681e      	ldr	r6, [r3, #0]
 8009d86:	6862      	ldr	r2, [r4, #4]
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f000 fa30 	bl	800a1ee <memchr>
 8009d8e:	b108      	cbz	r0, 8009d94 <_printf_i+0x1e8>
 8009d90:	1b80      	subs	r0, r0, r6
 8009d92:	6060      	str	r0, [r4, #4]
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d9e:	e7aa      	b.n	8009cf6 <_printf_i+0x14a>
 8009da0:	4632      	mov	r2, r6
 8009da2:	4649      	mov	r1, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	47d0      	blx	sl
 8009daa:	3001      	adds	r0, #1
 8009dac:	d0ad      	beq.n	8009d0a <_printf_i+0x15e>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	079b      	lsls	r3, r3, #30
 8009db2:	d413      	bmi.n	8009ddc <_printf_i+0x230>
 8009db4:	68e0      	ldr	r0, [r4, #12]
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	4298      	cmp	r0, r3
 8009dba:	bfb8      	it	lt
 8009dbc:	4618      	movlt	r0, r3
 8009dbe:	e7a6      	b.n	8009d0e <_printf_i+0x162>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	47d0      	blx	sl
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d09d      	beq.n	8009d0a <_printf_i+0x15e>
 8009dce:	3501      	adds	r5, #1
 8009dd0:	68e3      	ldr	r3, [r4, #12]
 8009dd2:	9903      	ldr	r1, [sp, #12]
 8009dd4:	1a5b      	subs	r3, r3, r1
 8009dd6:	42ab      	cmp	r3, r5
 8009dd8:	dcf2      	bgt.n	8009dc0 <_printf_i+0x214>
 8009dda:	e7eb      	b.n	8009db4 <_printf_i+0x208>
 8009ddc:	2500      	movs	r5, #0
 8009dde:	f104 0619 	add.w	r6, r4, #25
 8009de2:	e7f5      	b.n	8009dd0 <_printf_i+0x224>
 8009de4:	0800cbd0 	.word	0x0800cbd0
 8009de8:	0800cbe1 	.word	0x0800cbe1

08009dec <std>:
 8009dec:	2300      	movs	r3, #0
 8009dee:	b510      	push	{r4, lr}
 8009df0:	4604      	mov	r4, r0
 8009df2:	e9c0 3300 	strd	r3, r3, [r0]
 8009df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dfa:	6083      	str	r3, [r0, #8]
 8009dfc:	8181      	strh	r1, [r0, #12]
 8009dfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e00:	81c2      	strh	r2, [r0, #14]
 8009e02:	6183      	str	r3, [r0, #24]
 8009e04:	4619      	mov	r1, r3
 8009e06:	2208      	movs	r2, #8
 8009e08:	305c      	adds	r0, #92	@ 0x5c
 8009e0a:	f000 f914 	bl	800a036 <memset>
 8009e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e44 <std+0x58>)
 8009e10:	6224      	str	r4, [r4, #32]
 8009e12:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e14:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <std+0x5c>)
 8009e16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e18:	4b0c      	ldr	r3, [pc, #48]	@ (8009e4c <std+0x60>)
 8009e1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <std+0x64>)
 8009e1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e20:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <std+0x68>)
 8009e22:	429c      	cmp	r4, r3
 8009e24:	d006      	beq.n	8009e34 <std+0x48>
 8009e26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e2a:	4294      	cmp	r4, r2
 8009e2c:	d002      	beq.n	8009e34 <std+0x48>
 8009e2e:	33d0      	adds	r3, #208	@ 0xd0
 8009e30:	429c      	cmp	r4, r3
 8009e32:	d105      	bne.n	8009e40 <std+0x54>
 8009e34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e3c:	f000 b9cc 	b.w	800a1d8 <__retarget_lock_init_recursive>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	bf00      	nop
 8009e44:	08009fb1 	.word	0x08009fb1
 8009e48:	08009fd3 	.word	0x08009fd3
 8009e4c:	0800a00b 	.word	0x0800a00b
 8009e50:	0800a02f 	.word	0x0800a02f
 8009e54:	20000444 	.word	0x20000444

08009e58 <stdio_exit_handler>:
 8009e58:	4a02      	ldr	r2, [pc, #8]	@ (8009e64 <stdio_exit_handler+0xc>)
 8009e5a:	4903      	ldr	r1, [pc, #12]	@ (8009e68 <stdio_exit_handler+0x10>)
 8009e5c:	4803      	ldr	r0, [pc, #12]	@ (8009e6c <stdio_exit_handler+0x14>)
 8009e5e:	f000 b869 	b.w	8009f34 <_fwalk_sglue>
 8009e62:	bf00      	nop
 8009e64:	20000010 	.word	0x20000010
 8009e68:	0800b9f1 	.word	0x0800b9f1
 8009e6c:	20000020 	.word	0x20000020

08009e70 <cleanup_stdio>:
 8009e70:	6841      	ldr	r1, [r0, #4]
 8009e72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <cleanup_stdio+0x34>)
 8009e74:	b510      	push	{r4, lr}
 8009e76:	4299      	cmp	r1, r3
 8009e78:	4604      	mov	r4, r0
 8009e7a:	d001      	beq.n	8009e80 <cleanup_stdio+0x10>
 8009e7c:	f001 fdb8 	bl	800b9f0 <_fflush_r>
 8009e80:	68a1      	ldr	r1, [r4, #8]
 8009e82:	4b09      	ldr	r3, [pc, #36]	@ (8009ea8 <cleanup_stdio+0x38>)
 8009e84:	4299      	cmp	r1, r3
 8009e86:	d002      	beq.n	8009e8e <cleanup_stdio+0x1e>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f001 fdb1 	bl	800b9f0 <_fflush_r>
 8009e8e:	68e1      	ldr	r1, [r4, #12]
 8009e90:	4b06      	ldr	r3, [pc, #24]	@ (8009eac <cleanup_stdio+0x3c>)
 8009e92:	4299      	cmp	r1, r3
 8009e94:	d004      	beq.n	8009ea0 <cleanup_stdio+0x30>
 8009e96:	4620      	mov	r0, r4
 8009e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e9c:	f001 bda8 	b.w	800b9f0 <_fflush_r>
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000444 	.word	0x20000444
 8009ea8:	200004ac 	.word	0x200004ac
 8009eac:	20000514 	.word	0x20000514

08009eb0 <global_stdio_init.part.0>:
 8009eb0:	b510      	push	{r4, lr}
 8009eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee0 <global_stdio_init.part.0+0x30>)
 8009eb4:	4c0b      	ldr	r4, [pc, #44]	@ (8009ee4 <global_stdio_init.part.0+0x34>)
 8009eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ee8 <global_stdio_init.part.0+0x38>)
 8009eb8:	4620      	mov	r0, r4
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	2104      	movs	r1, #4
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f7ff ff94 	bl	8009dec <std>
 8009ec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ec8:	2201      	movs	r2, #1
 8009eca:	2109      	movs	r1, #9
 8009ecc:	f7ff ff8e 	bl	8009dec <std>
 8009ed0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eda:	2112      	movs	r1, #18
 8009edc:	f7ff bf86 	b.w	8009dec <std>
 8009ee0:	2000057c 	.word	0x2000057c
 8009ee4:	20000444 	.word	0x20000444
 8009ee8:	08009e59 	.word	0x08009e59

08009eec <__sfp_lock_acquire>:
 8009eec:	4801      	ldr	r0, [pc, #4]	@ (8009ef4 <__sfp_lock_acquire+0x8>)
 8009eee:	f000 b974 	b.w	800a1da <__retarget_lock_acquire_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	20000585 	.word	0x20000585

08009ef8 <__sfp_lock_release>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	@ (8009f00 <__sfp_lock_release+0x8>)
 8009efa:	f000 b96f 	b.w	800a1dc <__retarget_lock_release_recursive>
 8009efe:	bf00      	nop
 8009f00:	20000585 	.word	0x20000585

08009f04 <__sinit>:
 8009f04:	b510      	push	{r4, lr}
 8009f06:	4604      	mov	r4, r0
 8009f08:	f7ff fff0 	bl	8009eec <__sfp_lock_acquire>
 8009f0c:	6a23      	ldr	r3, [r4, #32]
 8009f0e:	b11b      	cbz	r3, 8009f18 <__sinit+0x14>
 8009f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f14:	f7ff bff0 	b.w	8009ef8 <__sfp_lock_release>
 8009f18:	4b04      	ldr	r3, [pc, #16]	@ (8009f2c <__sinit+0x28>)
 8009f1a:	6223      	str	r3, [r4, #32]
 8009f1c:	4b04      	ldr	r3, [pc, #16]	@ (8009f30 <__sinit+0x2c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1f5      	bne.n	8009f10 <__sinit+0xc>
 8009f24:	f7ff ffc4 	bl	8009eb0 <global_stdio_init.part.0>
 8009f28:	e7f2      	b.n	8009f10 <__sinit+0xc>
 8009f2a:	bf00      	nop
 8009f2c:	08009e71 	.word	0x08009e71
 8009f30:	2000057c 	.word	0x2000057c

08009f34 <_fwalk_sglue>:
 8009f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f38:	4607      	mov	r7, r0
 8009f3a:	4688      	mov	r8, r1
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	2600      	movs	r6, #0
 8009f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f44:	f1b9 0901 	subs.w	r9, r9, #1
 8009f48:	d505      	bpl.n	8009f56 <_fwalk_sglue+0x22>
 8009f4a:	6824      	ldr	r4, [r4, #0]
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d1f7      	bne.n	8009f40 <_fwalk_sglue+0xc>
 8009f50:	4630      	mov	r0, r6
 8009f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d907      	bls.n	8009f6c <_fwalk_sglue+0x38>
 8009f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f60:	3301      	adds	r3, #1
 8009f62:	d003      	beq.n	8009f6c <_fwalk_sglue+0x38>
 8009f64:	4629      	mov	r1, r5
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c0      	blx	r8
 8009f6a:	4306      	orrs	r6, r0
 8009f6c:	3568      	adds	r5, #104	@ 0x68
 8009f6e:	e7e9      	b.n	8009f44 <_fwalk_sglue+0x10>

08009f70 <siprintf>:
 8009f70:	b40e      	push	{r1, r2, r3}
 8009f72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f76:	b500      	push	{lr}
 8009f78:	b09c      	sub	sp, #112	@ 0x70
 8009f7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f7c:	9002      	str	r0, [sp, #8]
 8009f7e:	9006      	str	r0, [sp, #24]
 8009f80:	9107      	str	r1, [sp, #28]
 8009f82:	9104      	str	r1, [sp, #16]
 8009f84:	4808      	ldr	r0, [pc, #32]	@ (8009fa8 <siprintf+0x38>)
 8009f86:	4909      	ldr	r1, [pc, #36]	@ (8009fac <siprintf+0x3c>)
 8009f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8c:	9105      	str	r1, [sp, #20]
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	a902      	add	r1, sp, #8
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	f001 fbb0 	bl	800b6f8 <_svfiprintf_r>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	9b02      	ldr	r3, [sp, #8]
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	b01c      	add	sp, #112	@ 0x70
 8009fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa4:	b003      	add	sp, #12
 8009fa6:	4770      	bx	lr
 8009fa8:	2000001c 	.word	0x2000001c
 8009fac:	ffff0208 	.word	0xffff0208

08009fb0 <__sread>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	f000 f89c 	bl	800a0f4 <_read_r>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	bfab      	itete	ge
 8009fc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc4:	181b      	addge	r3, r3, r0
 8009fc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fca:	bfac      	ite	ge
 8009fcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fce:	81a3      	strhlt	r3, [r4, #12]
 8009fd0:	bd10      	pop	{r4, pc}

08009fd2 <__swrite>:
 8009fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd6:	461f      	mov	r7, r3
 8009fd8:	898b      	ldrh	r3, [r1, #12]
 8009fda:	4605      	mov	r5, r0
 8009fdc:	05db      	lsls	r3, r3, #23
 8009fde:	460c      	mov	r4, r1
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	d505      	bpl.n	8009ff0 <__swrite+0x1e>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	f000 f870 	bl	800a0d0 <_lseek_r>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ff8:	81a3      	strh	r3, [r4, #12]
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a006:	f000 b8ab 	b.w	800a160 <_write_r>

0800a00a <__sseek>:
 800a00a:	b510      	push	{r4, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a012:	f000 f85d 	bl	800a0d0 <_lseek_r>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	bf15      	itete	ne
 800a01c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a01e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a026:	81a3      	strheq	r3, [r4, #12]
 800a028:	bf18      	it	ne
 800a02a:	81a3      	strhne	r3, [r4, #12]
 800a02c:	bd10      	pop	{r4, pc}

0800a02e <__sclose>:
 800a02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a032:	f000 b83d 	b.w	800a0b0 <_close_r>

0800a036 <memset>:
 800a036:	4603      	mov	r3, r0
 800a038:	4402      	add	r2, r0
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d100      	bne.n	800a040 <memset+0xa>
 800a03e:	4770      	bx	lr
 800a040:	f803 1b01 	strb.w	r1, [r3], #1
 800a044:	e7f9      	b.n	800a03a <memset+0x4>

0800a046 <_raise_r>:
 800a046:	291f      	cmp	r1, #31
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4605      	mov	r5, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	d904      	bls.n	800a05a <_raise_r+0x14>
 800a050:	2316      	movs	r3, #22
 800a052:	6003      	str	r3, [r0, #0]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a05c:	b112      	cbz	r2, 800a064 <_raise_r+0x1e>
 800a05e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a062:	b94b      	cbnz	r3, 800a078 <_raise_r+0x32>
 800a064:	4628      	mov	r0, r5
 800a066:	f000 f869 	bl	800a13c <_getpid_r>
 800a06a:	4622      	mov	r2, r4
 800a06c:	4601      	mov	r1, r0
 800a06e:	4628      	mov	r0, r5
 800a070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a074:	f000 b850 	b.w	800a118 <_kill_r>
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d00a      	beq.n	800a092 <_raise_r+0x4c>
 800a07c:	1c59      	adds	r1, r3, #1
 800a07e:	d103      	bne.n	800a088 <_raise_r+0x42>
 800a080:	2316      	movs	r3, #22
 800a082:	6003      	str	r3, [r0, #0]
 800a084:	2001      	movs	r0, #1
 800a086:	e7e7      	b.n	800a058 <_raise_r+0x12>
 800a088:	2100      	movs	r1, #0
 800a08a:	4620      	mov	r0, r4
 800a08c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a090:	4798      	blx	r3
 800a092:	2000      	movs	r0, #0
 800a094:	e7e0      	b.n	800a058 <_raise_r+0x12>
	...

0800a098 <raise>:
 800a098:	4b02      	ldr	r3, [pc, #8]	@ (800a0a4 <raise+0xc>)
 800a09a:	4601      	mov	r1, r0
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f7ff bfd2 	b.w	800a046 <_raise_r>
 800a0a2:	bf00      	nop
 800a0a4:	2000001c 	.word	0x2000001c

0800a0a8 <_localeconv_r>:
 800a0a8:	4800      	ldr	r0, [pc, #0]	@ (800a0ac <_localeconv_r+0x4>)
 800a0aa:	4770      	bx	lr
 800a0ac:	2000015c 	.word	0x2000015c

0800a0b0 <_close_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4d05      	ldr	r5, [pc, #20]	@ (800a0cc <_close_r+0x1c>)
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7fd f8bb 	bl	8007236 <_close>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_close_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_close_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20000580 	.word	0x20000580

0800a0d0 <_lseek_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4d05      	ldr	r5, [pc, #20]	@ (800a0f0 <_lseek_r+0x20>)
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7fd f8b3 	bl	800724a <_lseek>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_lseek_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_lseek_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20000580 	.word	0x20000580

0800a0f4 <_read_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4d05      	ldr	r5, [pc, #20]	@ (800a114 <_read_r+0x20>)
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7fd f87b 	bl	80071fe <_read>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_read_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_read_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000580 	.word	0x20000580

0800a118 <_kill_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	2300      	movs	r3, #0
 800a11c:	4d06      	ldr	r5, [pc, #24]	@ (800a138 <_kill_r+0x20>)
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	f7fd f85c 	bl	80071e2 <_kill>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d102      	bne.n	800a134 <_kill_r+0x1c>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	b103      	cbz	r3, 800a134 <_kill_r+0x1c>
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	bf00      	nop
 800a138:	20000580 	.word	0x20000580

0800a13c <_getpid_r>:
 800a13c:	f7fd b84f 	b.w	80071de <_getpid>

0800a140 <_sbrk_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	2300      	movs	r3, #0
 800a144:	4d05      	ldr	r5, [pc, #20]	@ (800a15c <_sbrk_r+0x1c>)
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	f7fd f880 	bl	8007250 <_sbrk>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_sbrk_r+0x1a>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_sbrk_r+0x1a>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20000580 	.word	0x20000580

0800a160 <_write_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	4611      	mov	r1, r2
 800a168:	2200      	movs	r2, #0
 800a16a:	4d05      	ldr	r5, [pc, #20]	@ (800a180 <_write_r+0x20>)
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	f7fd f853 	bl	800721a <_write>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d102      	bne.n	800a17e <_write_r+0x1e>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	b103      	cbz	r3, 800a17e <_write_r+0x1e>
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	20000580 	.word	0x20000580

0800a184 <__errno>:
 800a184:	4b01      	ldr	r3, [pc, #4]	@ (800a18c <__errno+0x8>)
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	2000001c 	.word	0x2000001c

0800a190 <__libc_init_array>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	2600      	movs	r6, #0
 800a194:	4d0c      	ldr	r5, [pc, #48]	@ (800a1c8 <__libc_init_array+0x38>)
 800a196:	4c0d      	ldr	r4, [pc, #52]	@ (800a1cc <__libc_init_array+0x3c>)
 800a198:	1b64      	subs	r4, r4, r5
 800a19a:	10a4      	asrs	r4, r4, #2
 800a19c:	42a6      	cmp	r6, r4
 800a19e:	d109      	bne.n	800a1b4 <__libc_init_array+0x24>
 800a1a0:	f001 ff68 	bl	800c074 <_init>
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	4d0a      	ldr	r5, [pc, #40]	@ (800a1d0 <__libc_init_array+0x40>)
 800a1a8:	4c0a      	ldr	r4, [pc, #40]	@ (800a1d4 <__libc_init_array+0x44>)
 800a1aa:	1b64      	subs	r4, r4, r5
 800a1ac:	10a4      	asrs	r4, r4, #2
 800a1ae:	42a6      	cmp	r6, r4
 800a1b0:	d105      	bne.n	800a1be <__libc_init_array+0x2e>
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b8:	4798      	blx	r3
 800a1ba:	3601      	adds	r6, #1
 800a1bc:	e7ee      	b.n	800a19c <__libc_init_array+0xc>
 800a1be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1c2:	4798      	blx	r3
 800a1c4:	3601      	adds	r6, #1
 800a1c6:	e7f2      	b.n	800a1ae <__libc_init_array+0x1e>
 800a1c8:	0800cf38 	.word	0x0800cf38
 800a1cc:	0800cf38 	.word	0x0800cf38
 800a1d0:	0800cf38 	.word	0x0800cf38
 800a1d4:	0800cf40 	.word	0x0800cf40

0800a1d8 <__retarget_lock_init_recursive>:
 800a1d8:	4770      	bx	lr

0800a1da <__retarget_lock_acquire_recursive>:
 800a1da:	4770      	bx	lr

0800a1dc <__retarget_lock_release_recursive>:
 800a1dc:	4770      	bx	lr

0800a1de <strcpy>:
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1e4:	f803 2b01 	strb.w	r2, [r3], #1
 800a1e8:	2a00      	cmp	r2, #0
 800a1ea:	d1f9      	bne.n	800a1e0 <strcpy+0x2>
 800a1ec:	4770      	bx	lr

0800a1ee <memchr>:
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	b2c9      	uxtb	r1, r1
 800a1f4:	4402      	add	r2, r0
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	d101      	bne.n	800a200 <memchr+0x12>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e003      	b.n	800a208 <memchr+0x1a>
 800a200:	7804      	ldrb	r4, [r0, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	428c      	cmp	r4, r1
 800a206:	d1f6      	bne.n	800a1f6 <memchr+0x8>
 800a208:	bd10      	pop	{r4, pc}

0800a20a <quorem>:
 800a20a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20e:	6903      	ldr	r3, [r0, #16]
 800a210:	690c      	ldr	r4, [r1, #16]
 800a212:	4607      	mov	r7, r0
 800a214:	42a3      	cmp	r3, r4
 800a216:	db7e      	blt.n	800a316 <quorem+0x10c>
 800a218:	3c01      	subs	r4, #1
 800a21a:	00a3      	lsls	r3, r4, #2
 800a21c:	f100 0514 	add.w	r5, r0, #20
 800a220:	f101 0814 	add.w	r8, r1, #20
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a234:	3301      	adds	r3, #1
 800a236:	429a      	cmp	r2, r3
 800a238:	fbb2 f6f3 	udiv	r6, r2, r3
 800a23c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a240:	d32e      	bcc.n	800a2a0 <quorem+0x96>
 800a242:	f04f 0a00 	mov.w	sl, #0
 800a246:	46c4      	mov	ip, r8
 800a248:	46ae      	mov	lr, r5
 800a24a:	46d3      	mov	fp, sl
 800a24c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a250:	b298      	uxth	r0, r3
 800a252:	fb06 a000 	mla	r0, r6, r0, sl
 800a256:	0c1b      	lsrs	r3, r3, #16
 800a258:	0c02      	lsrs	r2, r0, #16
 800a25a:	fb06 2303 	mla	r3, r6, r3, r2
 800a25e:	f8de 2000 	ldr.w	r2, [lr]
 800a262:	b280      	uxth	r0, r0
 800a264:	b292      	uxth	r2, r2
 800a266:	1a12      	subs	r2, r2, r0
 800a268:	445a      	add	r2, fp
 800a26a:	f8de 0000 	ldr.w	r0, [lr]
 800a26e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a272:	b29b      	uxth	r3, r3
 800a274:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a278:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a27c:	b292      	uxth	r2, r2
 800a27e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a282:	45e1      	cmp	r9, ip
 800a284:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a288:	f84e 2b04 	str.w	r2, [lr], #4
 800a28c:	d2de      	bcs.n	800a24c <quorem+0x42>
 800a28e:	9b00      	ldr	r3, [sp, #0]
 800a290:	58eb      	ldr	r3, [r5, r3]
 800a292:	b92b      	cbnz	r3, 800a2a0 <quorem+0x96>
 800a294:	9b01      	ldr	r3, [sp, #4]
 800a296:	3b04      	subs	r3, #4
 800a298:	429d      	cmp	r5, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	d32f      	bcc.n	800a2fe <quorem+0xf4>
 800a29e:	613c      	str	r4, [r7, #16]
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f001 f8c5 	bl	800b430 <__mcmp>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	db25      	blt.n	800a2f6 <quorem+0xec>
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2b2:	f8d1 c000 	ldr.w	ip, [r1]
 800a2b6:	fa1f fe82 	uxth.w	lr, r2
 800a2ba:	fa1f f38c 	uxth.w	r3, ip
 800a2be:	eba3 030e 	sub.w	r3, r3, lr
 800a2c2:	4403      	add	r3, r0
 800a2c4:	0c12      	lsrs	r2, r2, #16
 800a2c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a2ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2d4:	45c1      	cmp	r9, r8
 800a2d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a2da:	f841 3b04 	str.w	r3, [r1], #4
 800a2de:	d2e6      	bcs.n	800a2ae <quorem+0xa4>
 800a2e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2e8:	b922      	cbnz	r2, 800a2f4 <quorem+0xea>
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	d30b      	bcc.n	800a30a <quorem+0x100>
 800a2f2:	613c      	str	r4, [r7, #16]
 800a2f4:	3601      	adds	r6, #1
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	b003      	add	sp, #12
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	6812      	ldr	r2, [r2, #0]
 800a300:	3b04      	subs	r3, #4
 800a302:	2a00      	cmp	r2, #0
 800a304:	d1cb      	bne.n	800a29e <quorem+0x94>
 800a306:	3c01      	subs	r4, #1
 800a308:	e7c6      	b.n	800a298 <quorem+0x8e>
 800a30a:	6812      	ldr	r2, [r2, #0]
 800a30c:	3b04      	subs	r3, #4
 800a30e:	2a00      	cmp	r2, #0
 800a310:	d1ef      	bne.n	800a2f2 <quorem+0xe8>
 800a312:	3c01      	subs	r4, #1
 800a314:	e7ea      	b.n	800a2ec <quorem+0xe2>
 800a316:	2000      	movs	r0, #0
 800a318:	e7ee      	b.n	800a2f8 <quorem+0xee>
 800a31a:	0000      	movs	r0, r0
 800a31c:	0000      	movs	r0, r0
	...

0800a320 <_dtoa_r>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	4614      	mov	r4, r2
 800a326:	461d      	mov	r5, r3
 800a328:	69c7      	ldr	r7, [r0, #28]
 800a32a:	b097      	sub	sp, #92	@ 0x5c
 800a32c:	4683      	mov	fp, r0
 800a32e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a332:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a334:	b97f      	cbnz	r7, 800a356 <_dtoa_r+0x36>
 800a336:	2010      	movs	r0, #16
 800a338:	f7ff f83e 	bl	80093b8 <malloc>
 800a33c:	4602      	mov	r2, r0
 800a33e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a342:	b920      	cbnz	r0, 800a34e <_dtoa_r+0x2e>
 800a344:	21ef      	movs	r1, #239	@ 0xef
 800a346:	4ba8      	ldr	r3, [pc, #672]	@ (800a5e8 <_dtoa_r+0x2c8>)
 800a348:	48a8      	ldr	r0, [pc, #672]	@ (800a5ec <_dtoa_r+0x2cc>)
 800a34a:	f001 fba1 	bl	800ba90 <__assert_func>
 800a34e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a352:	6007      	str	r7, [r0, #0]
 800a354:	60c7      	str	r7, [r0, #12]
 800a356:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a35a:	6819      	ldr	r1, [r3, #0]
 800a35c:	b159      	cbz	r1, 800a376 <_dtoa_r+0x56>
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	2301      	movs	r3, #1
 800a362:	4093      	lsls	r3, r2
 800a364:	604a      	str	r2, [r1, #4]
 800a366:	608b      	str	r3, [r1, #8]
 800a368:	4658      	mov	r0, fp
 800a36a:	f000 fe29 	bl	800afc0 <_Bfree>
 800a36e:	2200      	movs	r2, #0
 800a370:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	1e2b      	subs	r3, r5, #0
 800a378:	bfaf      	iteee	ge
 800a37a:	2300      	movge	r3, #0
 800a37c:	2201      	movlt	r2, #1
 800a37e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a382:	9303      	strlt	r3, [sp, #12]
 800a384:	bfa8      	it	ge
 800a386:	6033      	strge	r3, [r6, #0]
 800a388:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a38c:	4b98      	ldr	r3, [pc, #608]	@ (800a5f0 <_dtoa_r+0x2d0>)
 800a38e:	bfb8      	it	lt
 800a390:	6032      	strlt	r2, [r6, #0]
 800a392:	ea33 0308 	bics.w	r3, r3, r8
 800a396:	d112      	bne.n	800a3be <_dtoa_r+0x9e>
 800a398:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a39c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a3a4:	4323      	orrs	r3, r4
 800a3a6:	f000 8550 	beq.w	800ae4a <_dtoa_r+0xb2a>
 800a3aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a3ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a5f4 <_dtoa_r+0x2d4>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 8552 	beq.w	800ae5a <_dtoa_r+0xb3a>
 800a3b6:	f10a 0303 	add.w	r3, sl, #3
 800a3ba:	f000 bd4c 	b.w	800ae56 <_dtoa_r+0xb36>
 800a3be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a3c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f7f6 faeb 	bl	80009a8 <__aeabi_dcmpeq>
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	b158      	cbz	r0, 800a3ee <_dtoa_r+0xce>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a3de:	b113      	cbz	r3, 800a3e6 <_dtoa_r+0xc6>
 800a3e0:	4b85      	ldr	r3, [pc, #532]	@ (800a5f8 <_dtoa_r+0x2d8>)
 800a3e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a5fc <_dtoa_r+0x2dc>
 800a3ea:	f000 bd36 	b.w	800ae5a <_dtoa_r+0xb3a>
 800a3ee:	ab14      	add	r3, sp, #80	@ 0x50
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	ab15      	add	r3, sp, #84	@ 0x54
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a3fc:	f001 f8c8 	bl	800b590 <__d2b>
 800a400:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a404:	4681      	mov	r9, r0
 800a406:	2e00      	cmp	r6, #0
 800a408:	d077      	beq.n	800a4fa <_dtoa_r+0x1da>
 800a40a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a40e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a410:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a418:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a41c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a420:	9712      	str	r7, [sp, #72]	@ 0x48
 800a422:	4619      	mov	r1, r3
 800a424:	2200      	movs	r2, #0
 800a426:	4b76      	ldr	r3, [pc, #472]	@ (800a600 <_dtoa_r+0x2e0>)
 800a428:	f7f5 fe9e 	bl	8000168 <__aeabi_dsub>
 800a42c:	a368      	add	r3, pc, #416	@ (adr r3, 800a5d0 <_dtoa_r+0x2b0>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	f7f6 f851 	bl	80004d8 <__aeabi_dmul>
 800a436:	a368      	add	r3, pc, #416	@ (adr r3, 800a5d8 <_dtoa_r+0x2b8>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f5 fe96 	bl	800016c <__adddf3>
 800a440:	4604      	mov	r4, r0
 800a442:	4630      	mov	r0, r6
 800a444:	460d      	mov	r5, r1
 800a446:	f7f5 ffdd 	bl	8000404 <__aeabi_i2d>
 800a44a:	a365      	add	r3, pc, #404	@ (adr r3, 800a5e0 <_dtoa_r+0x2c0>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f7f6 f842 	bl	80004d8 <__aeabi_dmul>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f5 fe86 	bl	800016c <__adddf3>
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	f7f6 fae8 	bl	8000a38 <__aeabi_d2iz>
 800a468:	2200      	movs	r2, #0
 800a46a:	4607      	mov	r7, r0
 800a46c:	2300      	movs	r3, #0
 800a46e:	4620      	mov	r0, r4
 800a470:	4629      	mov	r1, r5
 800a472:	f7f6 faa3 	bl	80009bc <__aeabi_dcmplt>
 800a476:	b140      	cbz	r0, 800a48a <_dtoa_r+0x16a>
 800a478:	4638      	mov	r0, r7
 800a47a:	f7f5 ffc3 	bl	8000404 <__aeabi_i2d>
 800a47e:	4622      	mov	r2, r4
 800a480:	462b      	mov	r3, r5
 800a482:	f7f6 fa91 	bl	80009a8 <__aeabi_dcmpeq>
 800a486:	b900      	cbnz	r0, 800a48a <_dtoa_r+0x16a>
 800a488:	3f01      	subs	r7, #1
 800a48a:	2f16      	cmp	r7, #22
 800a48c:	d853      	bhi.n	800a536 <_dtoa_r+0x216>
 800a48e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a492:	4b5c      	ldr	r3, [pc, #368]	@ (800a604 <_dtoa_r+0x2e4>)
 800a494:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f7f6 fa8e 	bl	80009bc <__aeabi_dcmplt>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d04a      	beq.n	800a53a <_dtoa_r+0x21a>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	3f01      	subs	r7, #1
 800a4a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4ac:	1b9b      	subs	r3, r3, r6
 800a4ae:	1e5a      	subs	r2, r3, #1
 800a4b0:	bf46      	itte	mi
 800a4b2:	f1c3 0801 	rsbmi	r8, r3, #1
 800a4b6:	2300      	movmi	r3, #0
 800a4b8:	f04f 0800 	movpl.w	r8, #0
 800a4bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4be:	bf48      	it	mi
 800a4c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a4c2:	2f00      	cmp	r7, #0
 800a4c4:	db3b      	blt.n	800a53e <_dtoa_r+0x21e>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c8:	970e      	str	r7, [sp, #56]	@ 0x38
 800a4ca:	443b      	add	r3, r7
 800a4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d866      	bhi.n	800a5a6 <_dtoa_r+0x286>
 800a4d8:	2b05      	cmp	r3, #5
 800a4da:	bfc4      	itt	gt
 800a4dc:	3b04      	subgt	r3, #4
 800a4de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a4e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a4e2:	bfc8      	it	gt
 800a4e4:	2400      	movgt	r4, #0
 800a4e6:	f1a3 0302 	sub.w	r3, r3, #2
 800a4ea:	bfd8      	it	le
 800a4ec:	2401      	movle	r4, #1
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d864      	bhi.n	800a5bc <_dtoa_r+0x29c>
 800a4f2:	e8df f003 	tbb	[pc, r3]
 800a4f6:	382b      	.short	0x382b
 800a4f8:	5636      	.short	0x5636
 800a4fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a4fe:	441e      	add	r6, r3
 800a500:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a504:	2b20      	cmp	r3, #32
 800a506:	bfc1      	itttt	gt
 800a508:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a50c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a510:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a514:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a518:	bfd6      	itet	le
 800a51a:	f1c3 0320 	rsble	r3, r3, #32
 800a51e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a522:	fa04 f003 	lslle.w	r0, r4, r3
 800a526:	f7f5 ff5d 	bl	80003e4 <__aeabi_ui2d>
 800a52a:	2201      	movs	r2, #1
 800a52c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a530:	3e01      	subs	r6, #1
 800a532:	9212      	str	r2, [sp, #72]	@ 0x48
 800a534:	e775      	b.n	800a422 <_dtoa_r+0x102>
 800a536:	2301      	movs	r3, #1
 800a538:	e7b6      	b.n	800a4a8 <_dtoa_r+0x188>
 800a53a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a53c:	e7b5      	b.n	800a4aa <_dtoa_r+0x18a>
 800a53e:	427b      	negs	r3, r7
 800a540:	930a      	str	r3, [sp, #40]	@ 0x28
 800a542:	2300      	movs	r3, #0
 800a544:	eba8 0807 	sub.w	r8, r8, r7
 800a548:	930e      	str	r3, [sp, #56]	@ 0x38
 800a54a:	e7c2      	b.n	800a4d2 <_dtoa_r+0x1b2>
 800a54c:	2300      	movs	r3, #0
 800a54e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a552:	2b00      	cmp	r3, #0
 800a554:	dc35      	bgt.n	800a5c2 <_dtoa_r+0x2a2>
 800a556:	2301      	movs	r3, #1
 800a558:	461a      	mov	r2, r3
 800a55a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a55e:	9221      	str	r2, [sp, #132]	@ 0x84
 800a560:	e00b      	b.n	800a57a <_dtoa_r+0x25a>
 800a562:	2301      	movs	r3, #1
 800a564:	e7f3      	b.n	800a54e <_dtoa_r+0x22e>
 800a566:	2300      	movs	r3, #0
 800a568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a56a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a56c:	18fb      	adds	r3, r7, r3
 800a56e:	9308      	str	r3, [sp, #32]
 800a570:	3301      	adds	r3, #1
 800a572:	2b01      	cmp	r3, #1
 800a574:	9307      	str	r3, [sp, #28]
 800a576:	bfb8      	it	lt
 800a578:	2301      	movlt	r3, #1
 800a57a:	2100      	movs	r1, #0
 800a57c:	2204      	movs	r2, #4
 800a57e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a582:	f102 0514 	add.w	r5, r2, #20
 800a586:	429d      	cmp	r5, r3
 800a588:	d91f      	bls.n	800a5ca <_dtoa_r+0x2aa>
 800a58a:	6041      	str	r1, [r0, #4]
 800a58c:	4658      	mov	r0, fp
 800a58e:	f000 fcd7 	bl	800af40 <_Balloc>
 800a592:	4682      	mov	sl, r0
 800a594:	2800      	cmp	r0, #0
 800a596:	d139      	bne.n	800a60c <_dtoa_r+0x2ec>
 800a598:	4602      	mov	r2, r0
 800a59a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a59e:	4b1a      	ldr	r3, [pc, #104]	@ (800a608 <_dtoa_r+0x2e8>)
 800a5a0:	e6d2      	b.n	800a348 <_dtoa_r+0x28>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e7e0      	b.n	800a568 <_dtoa_r+0x248>
 800a5a6:	2401      	movs	r4, #1
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a5ac:	9320      	str	r3, [sp, #128]	@ 0x80
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a5b8:	2312      	movs	r3, #18
 800a5ba:	e7d0      	b.n	800a55e <_dtoa_r+0x23e>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5c0:	e7f5      	b.n	800a5ae <_dtoa_r+0x28e>
 800a5c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a5c8:	e7d7      	b.n	800a57a <_dtoa_r+0x25a>
 800a5ca:	3101      	adds	r1, #1
 800a5cc:	0052      	lsls	r2, r2, #1
 800a5ce:	e7d8      	b.n	800a582 <_dtoa_r+0x262>
 800a5d0:	636f4361 	.word	0x636f4361
 800a5d4:	3fd287a7 	.word	0x3fd287a7
 800a5d8:	8b60c8b3 	.word	0x8b60c8b3
 800a5dc:	3fc68a28 	.word	0x3fc68a28
 800a5e0:	509f79fb 	.word	0x509f79fb
 800a5e4:	3fd34413 	.word	0x3fd34413
 800a5e8:	0800cbff 	.word	0x0800cbff
 800a5ec:	0800cc16 	.word	0x0800cc16
 800a5f0:	7ff00000 	.word	0x7ff00000
 800a5f4:	0800cbfb 	.word	0x0800cbfb
 800a5f8:	0800cbcf 	.word	0x0800cbcf
 800a5fc:	0800cbce 	.word	0x0800cbce
 800a600:	3ff80000 	.word	0x3ff80000
 800a604:	0800cd10 	.word	0x0800cd10
 800a608:	0800cc6e 	.word	0x0800cc6e
 800a60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a610:	6018      	str	r0, [r3, #0]
 800a612:	9b07      	ldr	r3, [sp, #28]
 800a614:	2b0e      	cmp	r3, #14
 800a616:	f200 80a4 	bhi.w	800a762 <_dtoa_r+0x442>
 800a61a:	2c00      	cmp	r4, #0
 800a61c:	f000 80a1 	beq.w	800a762 <_dtoa_r+0x442>
 800a620:	2f00      	cmp	r7, #0
 800a622:	dd33      	ble.n	800a68c <_dtoa_r+0x36c>
 800a624:	4b86      	ldr	r3, [pc, #536]	@ (800a840 <_dtoa_r+0x520>)
 800a626:	f007 020f 	and.w	r2, r7, #15
 800a62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a62e:	05f8      	lsls	r0, r7, #23
 800a630:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a634:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a638:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a63c:	d516      	bpl.n	800a66c <_dtoa_r+0x34c>
 800a63e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a642:	4b80      	ldr	r3, [pc, #512]	@ (800a844 <_dtoa_r+0x524>)
 800a644:	2603      	movs	r6, #3
 800a646:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a64a:	f7f6 f86f 	bl	800072c <__aeabi_ddiv>
 800a64e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a652:	f004 040f 	and.w	r4, r4, #15
 800a656:	4d7b      	ldr	r5, [pc, #492]	@ (800a844 <_dtoa_r+0x524>)
 800a658:	b954      	cbnz	r4, 800a670 <_dtoa_r+0x350>
 800a65a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a662:	f7f6 f863 	bl	800072c <__aeabi_ddiv>
 800a666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a66a:	e028      	b.n	800a6be <_dtoa_r+0x39e>
 800a66c:	2602      	movs	r6, #2
 800a66e:	e7f2      	b.n	800a656 <_dtoa_r+0x336>
 800a670:	07e1      	lsls	r1, r4, #31
 800a672:	d508      	bpl.n	800a686 <_dtoa_r+0x366>
 800a674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a67c:	f7f5 ff2c 	bl	80004d8 <__aeabi_dmul>
 800a680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a684:	3601      	adds	r6, #1
 800a686:	1064      	asrs	r4, r4, #1
 800a688:	3508      	adds	r5, #8
 800a68a:	e7e5      	b.n	800a658 <_dtoa_r+0x338>
 800a68c:	f000 80d2 	beq.w	800a834 <_dtoa_r+0x514>
 800a690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a694:	427c      	negs	r4, r7
 800a696:	4b6a      	ldr	r3, [pc, #424]	@ (800a840 <_dtoa_r+0x520>)
 800a698:	f004 020f 	and.w	r2, r4, #15
 800a69c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f7f5 ff18 	bl	80004d8 <__aeabi_dmul>
 800a6a8:	2602      	movs	r6, #2
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b0:	4d64      	ldr	r5, [pc, #400]	@ (800a844 <_dtoa_r+0x524>)
 800a6b2:	1124      	asrs	r4, r4, #4
 800a6b4:	2c00      	cmp	r4, #0
 800a6b6:	f040 80b2 	bne.w	800a81e <_dtoa_r+0x4fe>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1d3      	bne.n	800a666 <_dtoa_r+0x346>
 800a6be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 80b7 	beq.w	800a838 <_dtoa_r+0x518>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4b5d      	ldr	r3, [pc, #372]	@ (800a848 <_dtoa_r+0x528>)
 800a6d2:	f7f6 f973 	bl	80009bc <__aeabi_dcmplt>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	f000 80ae 	beq.w	800a838 <_dtoa_r+0x518>
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 80aa 	beq.w	800a838 <_dtoa_r+0x518>
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dd37      	ble.n	800a75a <_dtoa_r+0x43a>
 800a6ea:	1e7b      	subs	r3, r7, #1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	9304      	str	r3, [sp, #16]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4b55      	ldr	r3, [pc, #340]	@ (800a84c <_dtoa_r+0x52c>)
 800a6f6:	f7f5 feef 	bl	80004d8 <__aeabi_dmul>
 800a6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6fe:	9c08      	ldr	r4, [sp, #32]
 800a700:	3601      	adds	r6, #1
 800a702:	4630      	mov	r0, r6
 800a704:	f7f5 fe7e 	bl	8000404 <__aeabi_i2d>
 800a708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a70c:	f7f5 fee4 	bl	80004d8 <__aeabi_dmul>
 800a710:	2200      	movs	r2, #0
 800a712:	4b4f      	ldr	r3, [pc, #316]	@ (800a850 <_dtoa_r+0x530>)
 800a714:	f7f5 fd2a 	bl	800016c <__adddf3>
 800a718:	4605      	mov	r5, r0
 800a71a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a71e:	2c00      	cmp	r4, #0
 800a720:	f040 809a 	bne.w	800a858 <_dtoa_r+0x538>
 800a724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a728:	2200      	movs	r2, #0
 800a72a:	4b4a      	ldr	r3, [pc, #296]	@ (800a854 <_dtoa_r+0x534>)
 800a72c:	f7f5 fd1c 	bl	8000168 <__aeabi_dsub>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a738:	462a      	mov	r2, r5
 800a73a:	4633      	mov	r3, r6
 800a73c:	f7f6 f95c 	bl	80009f8 <__aeabi_dcmpgt>
 800a740:	2800      	cmp	r0, #0
 800a742:	f040 828e 	bne.w	800ac62 <_dtoa_r+0x942>
 800a746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a74a:	462a      	mov	r2, r5
 800a74c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a750:	f7f6 f934 	bl	80009bc <__aeabi_dcmplt>
 800a754:	2800      	cmp	r0, #0
 800a756:	f040 8127 	bne.w	800a9a8 <_dtoa_r+0x688>
 800a75a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a75e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a762:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a764:	2b00      	cmp	r3, #0
 800a766:	f2c0 8163 	blt.w	800aa30 <_dtoa_r+0x710>
 800a76a:	2f0e      	cmp	r7, #14
 800a76c:	f300 8160 	bgt.w	800aa30 <_dtoa_r+0x710>
 800a770:	4b33      	ldr	r3, [pc, #204]	@ (800a840 <_dtoa_r+0x520>)
 800a772:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a77a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a77e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a780:	2b00      	cmp	r3, #0
 800a782:	da03      	bge.n	800a78c <_dtoa_r+0x46c>
 800a784:	9b07      	ldr	r3, [sp, #28]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f340 8100 	ble.w	800a98c <_dtoa_r+0x66c>
 800a78c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a790:	4656      	mov	r6, sl
 800a792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 ffc7 	bl	800072c <__aeabi_ddiv>
 800a79e:	f7f6 f94b 	bl	8000a38 <__aeabi_d2iz>
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	f7f5 fe2e 	bl	8000404 <__aeabi_i2d>
 800a7a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ac:	f7f5 fe94 	bl	80004d8 <__aeabi_dmul>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7f5 fcd6 	bl	8000168 <__aeabi_dsub>
 800a7bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a7c0:	9d07      	ldr	r5, [sp, #28]
 800a7c2:	f806 4b01 	strb.w	r4, [r6], #1
 800a7c6:	eba6 040a 	sub.w	r4, r6, sl
 800a7ca:	42a5      	cmp	r5, r4
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	f040 8116 	bne.w	800aa00 <_dtoa_r+0x6e0>
 800a7d4:	f7f5 fcca 	bl	800016c <__adddf3>
 800a7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	f7f6 f90a 	bl	80009f8 <__aeabi_dcmpgt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f040 80f8 	bne.w	800a9da <_dtoa_r+0x6ba>
 800a7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f6 f8d9 	bl	80009a8 <__aeabi_dcmpeq>
 800a7f6:	b118      	cbz	r0, 800a800 <_dtoa_r+0x4e0>
 800a7f8:	f018 0f01 	tst.w	r8, #1
 800a7fc:	f040 80ed 	bne.w	800a9da <_dtoa_r+0x6ba>
 800a800:	4649      	mov	r1, r9
 800a802:	4658      	mov	r0, fp
 800a804:	f000 fbdc 	bl	800afc0 <_Bfree>
 800a808:	2300      	movs	r3, #0
 800a80a:	7033      	strb	r3, [r6, #0]
 800a80c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a80e:	3701      	adds	r7, #1
 800a810:	601f      	str	r7, [r3, #0]
 800a812:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 8320 	beq.w	800ae5a <_dtoa_r+0xb3a>
 800a81a:	601e      	str	r6, [r3, #0]
 800a81c:	e31d      	b.n	800ae5a <_dtoa_r+0xb3a>
 800a81e:	07e2      	lsls	r2, r4, #31
 800a820:	d505      	bpl.n	800a82e <_dtoa_r+0x50e>
 800a822:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a826:	f7f5 fe57 	bl	80004d8 <__aeabi_dmul>
 800a82a:	2301      	movs	r3, #1
 800a82c:	3601      	adds	r6, #1
 800a82e:	1064      	asrs	r4, r4, #1
 800a830:	3508      	adds	r5, #8
 800a832:	e73f      	b.n	800a6b4 <_dtoa_r+0x394>
 800a834:	2602      	movs	r6, #2
 800a836:	e742      	b.n	800a6be <_dtoa_r+0x39e>
 800a838:	9c07      	ldr	r4, [sp, #28]
 800a83a:	9704      	str	r7, [sp, #16]
 800a83c:	e761      	b.n	800a702 <_dtoa_r+0x3e2>
 800a83e:	bf00      	nop
 800a840:	0800cd10 	.word	0x0800cd10
 800a844:	0800cce8 	.word	0x0800cce8
 800a848:	3ff00000 	.word	0x3ff00000
 800a84c:	40240000 	.word	0x40240000
 800a850:	401c0000 	.word	0x401c0000
 800a854:	40140000 	.word	0x40140000
 800a858:	4b70      	ldr	r3, [pc, #448]	@ (800aa1c <_dtoa_r+0x6fc>)
 800a85a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a85c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a864:	4454      	add	r4, sl
 800a866:	2900      	cmp	r1, #0
 800a868:	d045      	beq.n	800a8f6 <_dtoa_r+0x5d6>
 800a86a:	2000      	movs	r0, #0
 800a86c:	496c      	ldr	r1, [pc, #432]	@ (800aa20 <_dtoa_r+0x700>)
 800a86e:	f7f5 ff5d 	bl	800072c <__aeabi_ddiv>
 800a872:	4633      	mov	r3, r6
 800a874:	462a      	mov	r2, r5
 800a876:	f7f5 fc77 	bl	8000168 <__aeabi_dsub>
 800a87a:	4656      	mov	r6, sl
 800a87c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a884:	f7f6 f8d8 	bl	8000a38 <__aeabi_d2iz>
 800a888:	4605      	mov	r5, r0
 800a88a:	f7f5 fdbb 	bl	8000404 <__aeabi_i2d>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a896:	f7f5 fc67 	bl	8000168 <__aeabi_dsub>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	3530      	adds	r5, #48	@ 0x30
 800a8a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8a8:	f806 5b01 	strb.w	r5, [r6], #1
 800a8ac:	f7f6 f886 	bl	80009bc <__aeabi_dcmplt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d163      	bne.n	800a97c <_dtoa_r+0x65c>
 800a8b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	495a      	ldr	r1, [pc, #360]	@ (800aa24 <_dtoa_r+0x704>)
 800a8bc:	f7f5 fc54 	bl	8000168 <__aeabi_dsub>
 800a8c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8c4:	f7f6 f87a 	bl	80009bc <__aeabi_dcmplt>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f040 8087 	bne.w	800a9dc <_dtoa_r+0x6bc>
 800a8ce:	42a6      	cmp	r6, r4
 800a8d0:	f43f af43 	beq.w	800a75a <_dtoa_r+0x43a>
 800a8d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4b53      	ldr	r3, [pc, #332]	@ (800aa28 <_dtoa_r+0x708>)
 800a8dc:	f7f5 fdfc 	bl	80004d8 <__aeabi_dmul>
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ea:	4b4f      	ldr	r3, [pc, #316]	@ (800aa28 <_dtoa_r+0x708>)
 800a8ec:	f7f5 fdf4 	bl	80004d8 <__aeabi_dmul>
 800a8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f4:	e7c4      	b.n	800a880 <_dtoa_r+0x560>
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f7f5 fded 	bl	80004d8 <__aeabi_dmul>
 800a8fe:	4656      	mov	r6, sl
 800a900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a904:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a90a:	f7f6 f895 	bl	8000a38 <__aeabi_d2iz>
 800a90e:	4605      	mov	r5, r0
 800a910:	f7f5 fd78 	bl	8000404 <__aeabi_i2d>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a91c:	f7f5 fc24 	bl	8000168 <__aeabi_dsub>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	3530      	adds	r5, #48	@ 0x30
 800a926:	f806 5b01 	strb.w	r5, [r6], #1
 800a92a:	42a6      	cmp	r6, r4
 800a92c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	d124      	bne.n	800a980 <_dtoa_r+0x660>
 800a936:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a93a:	4b39      	ldr	r3, [pc, #228]	@ (800aa20 <_dtoa_r+0x700>)
 800a93c:	f7f5 fc16 	bl	800016c <__adddf3>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a948:	f7f6 f856 	bl	80009f8 <__aeabi_dcmpgt>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d145      	bne.n	800a9dc <_dtoa_r+0x6bc>
 800a950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a954:	2000      	movs	r0, #0
 800a956:	4932      	ldr	r1, [pc, #200]	@ (800aa20 <_dtoa_r+0x700>)
 800a958:	f7f5 fc06 	bl	8000168 <__aeabi_dsub>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a964:	f7f6 f82a 	bl	80009bc <__aeabi_dcmplt>
 800a968:	2800      	cmp	r0, #0
 800a96a:	f43f aef6 	beq.w	800a75a <_dtoa_r+0x43a>
 800a96e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a970:	1e73      	subs	r3, r6, #1
 800a972:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a974:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a978:	2b30      	cmp	r3, #48	@ 0x30
 800a97a:	d0f8      	beq.n	800a96e <_dtoa_r+0x64e>
 800a97c:	9f04      	ldr	r7, [sp, #16]
 800a97e:	e73f      	b.n	800a800 <_dtoa_r+0x4e0>
 800a980:	4b29      	ldr	r3, [pc, #164]	@ (800aa28 <_dtoa_r+0x708>)
 800a982:	f7f5 fda9 	bl	80004d8 <__aeabi_dmul>
 800a986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a98a:	e7bc      	b.n	800a906 <_dtoa_r+0x5e6>
 800a98c:	d10c      	bne.n	800a9a8 <_dtoa_r+0x688>
 800a98e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a992:	2200      	movs	r2, #0
 800a994:	4b25      	ldr	r3, [pc, #148]	@ (800aa2c <_dtoa_r+0x70c>)
 800a996:	f7f5 fd9f 	bl	80004d8 <__aeabi_dmul>
 800a99a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a99e:	f7f6 f821 	bl	80009e4 <__aeabi_dcmpge>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f000 815b 	beq.w	800ac5e <_dtoa_r+0x93e>
 800a9a8:	2400      	movs	r4, #0
 800a9aa:	4625      	mov	r5, r4
 800a9ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9ae:	4656      	mov	r6, sl
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	2700      	movs	r7, #0
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	4658      	mov	r0, fp
 800a9ba:	f000 fb01 	bl	800afc0 <_Bfree>
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	d0dc      	beq.n	800a97c <_dtoa_r+0x65c>
 800a9c2:	b12f      	cbz	r7, 800a9d0 <_dtoa_r+0x6b0>
 800a9c4:	42af      	cmp	r7, r5
 800a9c6:	d003      	beq.n	800a9d0 <_dtoa_r+0x6b0>
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4658      	mov	r0, fp
 800a9cc:	f000 faf8 	bl	800afc0 <_Bfree>
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	4658      	mov	r0, fp
 800a9d4:	f000 faf4 	bl	800afc0 <_Bfree>
 800a9d8:	e7d0      	b.n	800a97c <_dtoa_r+0x65c>
 800a9da:	9704      	str	r7, [sp, #16]
 800a9dc:	4633      	mov	r3, r6
 800a9de:	461e      	mov	r6, r3
 800a9e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9e4:	2a39      	cmp	r2, #57	@ 0x39
 800a9e6:	d107      	bne.n	800a9f8 <_dtoa_r+0x6d8>
 800a9e8:	459a      	cmp	sl, r3
 800a9ea:	d1f8      	bne.n	800a9de <_dtoa_r+0x6be>
 800a9ec:	9a04      	ldr	r2, [sp, #16]
 800a9ee:	3201      	adds	r2, #1
 800a9f0:	9204      	str	r2, [sp, #16]
 800a9f2:	2230      	movs	r2, #48	@ 0x30
 800a9f4:	f88a 2000 	strb.w	r2, [sl]
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	3201      	adds	r2, #1
 800a9fc:	701a      	strb	r2, [r3, #0]
 800a9fe:	e7bd      	b.n	800a97c <_dtoa_r+0x65c>
 800aa00:	2200      	movs	r2, #0
 800aa02:	4b09      	ldr	r3, [pc, #36]	@ (800aa28 <_dtoa_r+0x708>)
 800aa04:	f7f5 fd68 	bl	80004d8 <__aeabi_dmul>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	460d      	mov	r5, r1
 800aa10:	f7f5 ffca 	bl	80009a8 <__aeabi_dcmpeq>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f43f aebc 	beq.w	800a792 <_dtoa_r+0x472>
 800aa1a:	e6f1      	b.n	800a800 <_dtoa_r+0x4e0>
 800aa1c:	0800cd10 	.word	0x0800cd10
 800aa20:	3fe00000 	.word	0x3fe00000
 800aa24:	3ff00000 	.word	0x3ff00000
 800aa28:	40240000 	.word	0x40240000
 800aa2c:	40140000 	.word	0x40140000
 800aa30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	f000 80db 	beq.w	800abee <_dtoa_r+0x8ce>
 800aa38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	f300 80bf 	bgt.w	800abbe <_dtoa_r+0x89e>
 800aa40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	f000 80b7 	beq.w	800abb6 <_dtoa_r+0x896>
 800aa48:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aa4c:	4646      	mov	r6, r8
 800aa4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa52:	2101      	movs	r1, #1
 800aa54:	441a      	add	r2, r3
 800aa56:	4658      	mov	r0, fp
 800aa58:	4498      	add	r8, r3
 800aa5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa5c:	f000 fb64 	bl	800b128 <__i2b>
 800aa60:	4605      	mov	r5, r0
 800aa62:	b15e      	cbz	r6, 800aa7c <_dtoa_r+0x75c>
 800aa64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd08      	ble.n	800aa7c <_dtoa_r+0x75c>
 800aa6a:	42b3      	cmp	r3, r6
 800aa6c:	bfa8      	it	ge
 800aa6e:	4633      	movge	r3, r6
 800aa70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa72:	eba8 0803 	sub.w	r8, r8, r3
 800aa76:	1af6      	subs	r6, r6, r3
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa7e:	b1f3      	cbz	r3, 800aabe <_dtoa_r+0x79e>
 800aa80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 80b7 	beq.w	800abf6 <_dtoa_r+0x8d6>
 800aa88:	b18c      	cbz	r4, 800aaae <_dtoa_r+0x78e>
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4658      	mov	r0, fp
 800aa90:	f000 fc08 	bl	800b2a4 <__pow5mult>
 800aa94:	464a      	mov	r2, r9
 800aa96:	4601      	mov	r1, r0
 800aa98:	4605      	mov	r5, r0
 800aa9a:	4658      	mov	r0, fp
 800aa9c:	f000 fb5a 	bl	800b154 <__multiply>
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	9004      	str	r0, [sp, #16]
 800aaa4:	4658      	mov	r0, fp
 800aaa6:	f000 fa8b 	bl	800afc0 <_Bfree>
 800aaaa:	9b04      	ldr	r3, [sp, #16]
 800aaac:	4699      	mov	r9, r3
 800aaae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aab0:	1b1a      	subs	r2, r3, r4
 800aab2:	d004      	beq.n	800aabe <_dtoa_r+0x79e>
 800aab4:	4649      	mov	r1, r9
 800aab6:	4658      	mov	r0, fp
 800aab8:	f000 fbf4 	bl	800b2a4 <__pow5mult>
 800aabc:	4681      	mov	r9, r0
 800aabe:	2101      	movs	r1, #1
 800aac0:	4658      	mov	r0, fp
 800aac2:	f000 fb31 	bl	800b128 <__i2b>
 800aac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aac8:	4604      	mov	r4, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 81c9 	beq.w	800ae62 <_dtoa_r+0xb42>
 800aad0:	461a      	mov	r2, r3
 800aad2:	4601      	mov	r1, r0
 800aad4:	4658      	mov	r0, fp
 800aad6:	f000 fbe5 	bl	800b2a4 <__pow5mult>
 800aada:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aadc:	4604      	mov	r4, r0
 800aade:	2b01      	cmp	r3, #1
 800aae0:	f300 808f 	bgt.w	800ac02 <_dtoa_r+0x8e2>
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f040 8087 	bne.w	800abfa <_dtoa_r+0x8da>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f040 8083 	bne.w	800abfe <_dtoa_r+0x8de>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aafe:	0d1b      	lsrs	r3, r3, #20
 800ab00:	051b      	lsls	r3, r3, #20
 800ab02:	b12b      	cbz	r3, 800ab10 <_dtoa_r+0x7f0>
 800ab04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab06:	f108 0801 	add.w	r8, r8, #1
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab0e:	2301      	movs	r3, #1
 800ab10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 81aa 	beq.w	800ae6e <_dtoa_r+0xb4e>
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab20:	6918      	ldr	r0, [r3, #16]
 800ab22:	f000 fab5 	bl	800b090 <__hi0bits>
 800ab26:	f1c0 0020 	rsb	r0, r0, #32
 800ab2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab2c:	4418      	add	r0, r3
 800ab2e:	f010 001f 	ands.w	r0, r0, #31
 800ab32:	d071      	beq.n	800ac18 <_dtoa_r+0x8f8>
 800ab34:	f1c0 0320 	rsb	r3, r0, #32
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	dd65      	ble.n	800ac08 <_dtoa_r+0x8e8>
 800ab3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab3e:	f1c0 001c 	rsb	r0, r0, #28
 800ab42:	4403      	add	r3, r0
 800ab44:	4480      	add	r8, r0
 800ab46:	4406      	add	r6, r0
 800ab48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab4a:	f1b8 0f00 	cmp.w	r8, #0
 800ab4e:	dd05      	ble.n	800ab5c <_dtoa_r+0x83c>
 800ab50:	4649      	mov	r1, r9
 800ab52:	4642      	mov	r2, r8
 800ab54:	4658      	mov	r0, fp
 800ab56:	f000 fbff 	bl	800b358 <__lshift>
 800ab5a:	4681      	mov	r9, r0
 800ab5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dd05      	ble.n	800ab6e <_dtoa_r+0x84e>
 800ab62:	4621      	mov	r1, r4
 800ab64:	461a      	mov	r2, r3
 800ab66:	4658      	mov	r0, fp
 800ab68:	f000 fbf6 	bl	800b358 <__lshift>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d053      	beq.n	800ac1c <_dtoa_r+0x8fc>
 800ab74:	4621      	mov	r1, r4
 800ab76:	4648      	mov	r0, r9
 800ab78:	f000 fc5a 	bl	800b430 <__mcmp>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	da4d      	bge.n	800ac1c <_dtoa_r+0x8fc>
 800ab80:	1e7b      	subs	r3, r7, #1
 800ab82:	4649      	mov	r1, r9
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	220a      	movs	r2, #10
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4658      	mov	r0, fp
 800ab8c:	f000 fa3a 	bl	800b004 <__multadd>
 800ab90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab92:	4681      	mov	r9, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 816c 	beq.w	800ae72 <_dtoa_r+0xb52>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	220a      	movs	r2, #10
 800aba0:	4658      	mov	r0, fp
 800aba2:	f000 fa2f 	bl	800b004 <__multadd>
 800aba6:	9b08      	ldr	r3, [sp, #32]
 800aba8:	4605      	mov	r5, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dc61      	bgt.n	800ac72 <_dtoa_r+0x952>
 800abae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	dc3b      	bgt.n	800ac2c <_dtoa_r+0x90c>
 800abb4:	e05d      	b.n	800ac72 <_dtoa_r+0x952>
 800abb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abb8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800abbc:	e746      	b.n	800aa4c <_dtoa_r+0x72c>
 800abbe:	9b07      	ldr	r3, [sp, #28]
 800abc0:	1e5c      	subs	r4, r3, #1
 800abc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	bfbf      	itttt	lt
 800abc8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800abca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800abcc:	1ae3      	sublt	r3, r4, r3
 800abce:	18d2      	addlt	r2, r2, r3
 800abd0:	bfa8      	it	ge
 800abd2:	1b1c      	subge	r4, r3, r4
 800abd4:	9b07      	ldr	r3, [sp, #28]
 800abd6:	bfbe      	ittt	lt
 800abd8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800abda:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800abdc:	2400      	movlt	r4, #0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfb5      	itete	lt
 800abe2:	eba8 0603 	sublt.w	r6, r8, r3
 800abe6:	4646      	movge	r6, r8
 800abe8:	2300      	movlt	r3, #0
 800abea:	9b07      	ldrge	r3, [sp, #28]
 800abec:	e730      	b.n	800aa50 <_dtoa_r+0x730>
 800abee:	4646      	mov	r6, r8
 800abf0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800abf2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800abf4:	e735      	b.n	800aa62 <_dtoa_r+0x742>
 800abf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abf8:	e75c      	b.n	800aab4 <_dtoa_r+0x794>
 800abfa:	2300      	movs	r3, #0
 800abfc:	e788      	b.n	800ab10 <_dtoa_r+0x7f0>
 800abfe:	9b02      	ldr	r3, [sp, #8]
 800ac00:	e786      	b.n	800ab10 <_dtoa_r+0x7f0>
 800ac02:	2300      	movs	r3, #0
 800ac04:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac06:	e788      	b.n	800ab1a <_dtoa_r+0x7fa>
 800ac08:	d09f      	beq.n	800ab4a <_dtoa_r+0x82a>
 800ac0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac0c:	331c      	adds	r3, #28
 800ac0e:	441a      	add	r2, r3
 800ac10:	4498      	add	r8, r3
 800ac12:	441e      	add	r6, r3
 800ac14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac16:	e798      	b.n	800ab4a <_dtoa_r+0x82a>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	e7f6      	b.n	800ac0a <_dtoa_r+0x8ea>
 800ac1c:	9b07      	ldr	r3, [sp, #28]
 800ac1e:	9704      	str	r7, [sp, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dc20      	bgt.n	800ac66 <_dtoa_r+0x946>
 800ac24:	9308      	str	r3, [sp, #32]
 800ac26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	dd1e      	ble.n	800ac6a <_dtoa_r+0x94a>
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f47f aebc 	bne.w	800a9ac <_dtoa_r+0x68c>
 800ac34:	4621      	mov	r1, r4
 800ac36:	2205      	movs	r2, #5
 800ac38:	4658      	mov	r0, fp
 800ac3a:	f000 f9e3 	bl	800b004 <__multadd>
 800ac3e:	4601      	mov	r1, r0
 800ac40:	4604      	mov	r4, r0
 800ac42:	4648      	mov	r0, r9
 800ac44:	f000 fbf4 	bl	800b430 <__mcmp>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	f77f aeaf 	ble.w	800a9ac <_dtoa_r+0x68c>
 800ac4e:	2331      	movs	r3, #49	@ 0x31
 800ac50:	4656      	mov	r6, sl
 800ac52:	f806 3b01 	strb.w	r3, [r6], #1
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	e6aa      	b.n	800a9b4 <_dtoa_r+0x694>
 800ac5e:	9c07      	ldr	r4, [sp, #28]
 800ac60:	9704      	str	r7, [sp, #16]
 800ac62:	4625      	mov	r5, r4
 800ac64:	e7f3      	b.n	800ac4e <_dtoa_r+0x92e>
 800ac66:	9b07      	ldr	r3, [sp, #28]
 800ac68:	9308      	str	r3, [sp, #32]
 800ac6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8104 	beq.w	800ae7a <_dtoa_r+0xb5a>
 800ac72:	2e00      	cmp	r6, #0
 800ac74:	dd05      	ble.n	800ac82 <_dtoa_r+0x962>
 800ac76:	4629      	mov	r1, r5
 800ac78:	4632      	mov	r2, r6
 800ac7a:	4658      	mov	r0, fp
 800ac7c:	f000 fb6c 	bl	800b358 <__lshift>
 800ac80:	4605      	mov	r5, r0
 800ac82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d05a      	beq.n	800ad3e <_dtoa_r+0xa1e>
 800ac88:	4658      	mov	r0, fp
 800ac8a:	6869      	ldr	r1, [r5, #4]
 800ac8c:	f000 f958 	bl	800af40 <_Balloc>
 800ac90:	4606      	mov	r6, r0
 800ac92:	b928      	cbnz	r0, 800aca0 <_dtoa_r+0x980>
 800ac94:	4602      	mov	r2, r0
 800ac96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac9a:	4b83      	ldr	r3, [pc, #524]	@ (800aea8 <_dtoa_r+0xb88>)
 800ac9c:	f7ff bb54 	b.w	800a348 <_dtoa_r+0x28>
 800aca0:	692a      	ldr	r2, [r5, #16]
 800aca2:	f105 010c 	add.w	r1, r5, #12
 800aca6:	3202      	adds	r2, #2
 800aca8:	0092      	lsls	r2, r2, #2
 800acaa:	300c      	adds	r0, #12
 800acac:	f000 fee2 	bl	800ba74 <memcpy>
 800acb0:	2201      	movs	r2, #1
 800acb2:	4631      	mov	r1, r6
 800acb4:	4658      	mov	r0, fp
 800acb6:	f000 fb4f 	bl	800b358 <__lshift>
 800acba:	462f      	mov	r7, r5
 800acbc:	4605      	mov	r5, r0
 800acbe:	f10a 0301 	add.w	r3, sl, #1
 800acc2:	9307      	str	r3, [sp, #28]
 800acc4:	9b08      	ldr	r3, [sp, #32]
 800acc6:	4453      	add	r3, sl
 800acc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd2:	9b07      	ldr	r3, [sp, #28]
 800acd4:	4621      	mov	r1, r4
 800acd6:	3b01      	subs	r3, #1
 800acd8:	4648      	mov	r0, r9
 800acda:	9302      	str	r3, [sp, #8]
 800acdc:	f7ff fa95 	bl	800a20a <quorem>
 800ace0:	4639      	mov	r1, r7
 800ace2:	9008      	str	r0, [sp, #32]
 800ace4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ace8:	4648      	mov	r0, r9
 800acea:	f000 fba1 	bl	800b430 <__mcmp>
 800acee:	462a      	mov	r2, r5
 800acf0:	9009      	str	r0, [sp, #36]	@ 0x24
 800acf2:	4621      	mov	r1, r4
 800acf4:	4658      	mov	r0, fp
 800acf6:	f000 fbb7 	bl	800b468 <__mdiff>
 800acfa:	68c2      	ldr	r2, [r0, #12]
 800acfc:	4606      	mov	r6, r0
 800acfe:	bb02      	cbnz	r2, 800ad42 <_dtoa_r+0xa22>
 800ad00:	4601      	mov	r1, r0
 800ad02:	4648      	mov	r0, r9
 800ad04:	f000 fb94 	bl	800b430 <__mcmp>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4658      	mov	r0, fp
 800ad0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad10:	f000 f956 	bl	800afc0 <_Bfree>
 800ad14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad18:	9e07      	ldr	r6, [sp, #28]
 800ad1a:	ea43 0102 	orr.w	r1, r3, r2
 800ad1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad20:	4319      	orrs	r1, r3
 800ad22:	d110      	bne.n	800ad46 <_dtoa_r+0xa26>
 800ad24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad28:	d029      	beq.n	800ad7e <_dtoa_r+0xa5e>
 800ad2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dd02      	ble.n	800ad36 <_dtoa_r+0xa16>
 800ad30:	9b08      	ldr	r3, [sp, #32]
 800ad32:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ad36:	9b02      	ldr	r3, [sp, #8]
 800ad38:	f883 8000 	strb.w	r8, [r3]
 800ad3c:	e63b      	b.n	800a9b6 <_dtoa_r+0x696>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	e7bb      	b.n	800acba <_dtoa_r+0x99a>
 800ad42:	2201      	movs	r2, #1
 800ad44:	e7e1      	b.n	800ad0a <_dtoa_r+0x9ea>
 800ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	db04      	blt.n	800ad56 <_dtoa_r+0xa36>
 800ad4c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad52:	430b      	orrs	r3, r1
 800ad54:	d120      	bne.n	800ad98 <_dtoa_r+0xa78>
 800ad56:	2a00      	cmp	r2, #0
 800ad58:	dded      	ble.n	800ad36 <_dtoa_r+0xa16>
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	4658      	mov	r0, fp
 800ad60:	f000 fafa 	bl	800b358 <__lshift>
 800ad64:	4621      	mov	r1, r4
 800ad66:	4681      	mov	r9, r0
 800ad68:	f000 fb62 	bl	800b430 <__mcmp>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	dc03      	bgt.n	800ad78 <_dtoa_r+0xa58>
 800ad70:	d1e1      	bne.n	800ad36 <_dtoa_r+0xa16>
 800ad72:	f018 0f01 	tst.w	r8, #1
 800ad76:	d0de      	beq.n	800ad36 <_dtoa_r+0xa16>
 800ad78:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad7c:	d1d8      	bne.n	800ad30 <_dtoa_r+0xa10>
 800ad7e:	2339      	movs	r3, #57	@ 0x39
 800ad80:	9a02      	ldr	r2, [sp, #8]
 800ad82:	7013      	strb	r3, [r2, #0]
 800ad84:	4633      	mov	r3, r6
 800ad86:	461e      	mov	r6, r3
 800ad88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	2a39      	cmp	r2, #57	@ 0x39
 800ad90:	d052      	beq.n	800ae38 <_dtoa_r+0xb18>
 800ad92:	3201      	adds	r2, #1
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	e60e      	b.n	800a9b6 <_dtoa_r+0x696>
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	dd07      	ble.n	800adac <_dtoa_r+0xa8c>
 800ad9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ada0:	d0ed      	beq.n	800ad7e <_dtoa_r+0xa5e>
 800ada2:	9a02      	ldr	r2, [sp, #8]
 800ada4:	f108 0301 	add.w	r3, r8, #1
 800ada8:	7013      	strb	r3, [r2, #0]
 800adaa:	e604      	b.n	800a9b6 <_dtoa_r+0x696>
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800adb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d028      	beq.n	800ae0c <_dtoa_r+0xaec>
 800adba:	4649      	mov	r1, r9
 800adbc:	2300      	movs	r3, #0
 800adbe:	220a      	movs	r2, #10
 800adc0:	4658      	mov	r0, fp
 800adc2:	f000 f91f 	bl	800b004 <__multadd>
 800adc6:	42af      	cmp	r7, r5
 800adc8:	4681      	mov	r9, r0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	f04f 020a 	mov.w	r2, #10
 800add2:	4639      	mov	r1, r7
 800add4:	4658      	mov	r0, fp
 800add6:	d107      	bne.n	800ade8 <_dtoa_r+0xac8>
 800add8:	f000 f914 	bl	800b004 <__multadd>
 800addc:	4607      	mov	r7, r0
 800adde:	4605      	mov	r5, r0
 800ade0:	9b07      	ldr	r3, [sp, #28]
 800ade2:	3301      	adds	r3, #1
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	e774      	b.n	800acd2 <_dtoa_r+0x9b2>
 800ade8:	f000 f90c 	bl	800b004 <__multadd>
 800adec:	4629      	mov	r1, r5
 800adee:	4607      	mov	r7, r0
 800adf0:	2300      	movs	r3, #0
 800adf2:	220a      	movs	r2, #10
 800adf4:	4658      	mov	r0, fp
 800adf6:	f000 f905 	bl	800b004 <__multadd>
 800adfa:	4605      	mov	r5, r0
 800adfc:	e7f0      	b.n	800ade0 <_dtoa_r+0xac0>
 800adfe:	9b08      	ldr	r3, [sp, #32]
 800ae00:	2700      	movs	r7, #0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfcc      	ite	gt
 800ae06:	461e      	movgt	r6, r3
 800ae08:	2601      	movle	r6, #1
 800ae0a:	4456      	add	r6, sl
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4658      	mov	r0, fp
 800ae12:	f000 faa1 	bl	800b358 <__lshift>
 800ae16:	4621      	mov	r1, r4
 800ae18:	4681      	mov	r9, r0
 800ae1a:	f000 fb09 	bl	800b430 <__mcmp>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	dcb0      	bgt.n	800ad84 <_dtoa_r+0xa64>
 800ae22:	d102      	bne.n	800ae2a <_dtoa_r+0xb0a>
 800ae24:	f018 0f01 	tst.w	r8, #1
 800ae28:	d1ac      	bne.n	800ad84 <_dtoa_r+0xa64>
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	461e      	mov	r6, r3
 800ae2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae32:	2a30      	cmp	r2, #48	@ 0x30
 800ae34:	d0fa      	beq.n	800ae2c <_dtoa_r+0xb0c>
 800ae36:	e5be      	b.n	800a9b6 <_dtoa_r+0x696>
 800ae38:	459a      	cmp	sl, r3
 800ae3a:	d1a4      	bne.n	800ad86 <_dtoa_r+0xa66>
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	2331      	movs	r3, #49	@ 0x31
 800ae44:	f88a 3000 	strb.w	r3, [sl]
 800ae48:	e5b5      	b.n	800a9b6 <_dtoa_r+0x696>
 800ae4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ae4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aeac <_dtoa_r+0xb8c>
 800ae50:	b11b      	cbz	r3, 800ae5a <_dtoa_r+0xb3a>
 800ae52:	f10a 0308 	add.w	r3, sl, #8
 800ae56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	b017      	add	sp, #92	@ 0x5c
 800ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	f77f ae3d 	ble.w	800aae4 <_dtoa_r+0x7c4>
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae6e:	2001      	movs	r0, #1
 800ae70:	e65b      	b.n	800ab2a <_dtoa_r+0x80a>
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f77f aed6 	ble.w	800ac26 <_dtoa_r+0x906>
 800ae7a:	4656      	mov	r6, sl
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4648      	mov	r0, r9
 800ae80:	f7ff f9c3 	bl	800a20a <quorem>
 800ae84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	f806 8b01 	strb.w	r8, [r6], #1
 800ae8e:	eba6 020a 	sub.w	r2, r6, sl
 800ae92:	4293      	cmp	r3, r2
 800ae94:	ddb3      	ble.n	800adfe <_dtoa_r+0xade>
 800ae96:	4649      	mov	r1, r9
 800ae98:	2300      	movs	r3, #0
 800ae9a:	220a      	movs	r2, #10
 800ae9c:	4658      	mov	r0, fp
 800ae9e:	f000 f8b1 	bl	800b004 <__multadd>
 800aea2:	4681      	mov	r9, r0
 800aea4:	e7ea      	b.n	800ae7c <_dtoa_r+0xb5c>
 800aea6:	bf00      	nop
 800aea8:	0800cc6e 	.word	0x0800cc6e
 800aeac:	0800cbf2 	.word	0x0800cbf2

0800aeb0 <_free_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	d040      	beq.n	800af3a <_free_r+0x8a>
 800aeb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aebc:	1f0c      	subs	r4, r1, #4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfb8      	it	lt
 800aec2:	18e4      	addlt	r4, r4, r3
 800aec4:	f7fe fb2a 	bl	800951c <__malloc_lock>
 800aec8:	4a1c      	ldr	r2, [pc, #112]	@ (800af3c <_free_r+0x8c>)
 800aeca:	6813      	ldr	r3, [r2, #0]
 800aecc:	b933      	cbnz	r3, 800aedc <_free_r+0x2c>
 800aece:	6063      	str	r3, [r4, #4]
 800aed0:	6014      	str	r4, [r2, #0]
 800aed2:	4628      	mov	r0, r5
 800aed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aed8:	f7fe bb26 	b.w	8009528 <__malloc_unlock>
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d908      	bls.n	800aef2 <_free_r+0x42>
 800aee0:	6820      	ldr	r0, [r4, #0]
 800aee2:	1821      	adds	r1, r4, r0
 800aee4:	428b      	cmp	r3, r1
 800aee6:	bf01      	itttt	eq
 800aee8:	6819      	ldreq	r1, [r3, #0]
 800aeea:	685b      	ldreq	r3, [r3, #4]
 800aeec:	1809      	addeq	r1, r1, r0
 800aeee:	6021      	streq	r1, [r4, #0]
 800aef0:	e7ed      	b.n	800aece <_free_r+0x1e>
 800aef2:	461a      	mov	r2, r3
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	b10b      	cbz	r3, 800aefc <_free_r+0x4c>
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	d9fa      	bls.n	800aef2 <_free_r+0x42>
 800aefc:	6811      	ldr	r1, [r2, #0]
 800aefe:	1850      	adds	r0, r2, r1
 800af00:	42a0      	cmp	r0, r4
 800af02:	d10b      	bne.n	800af1c <_free_r+0x6c>
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	4401      	add	r1, r0
 800af08:	1850      	adds	r0, r2, r1
 800af0a:	4283      	cmp	r3, r0
 800af0c:	6011      	str	r1, [r2, #0]
 800af0e:	d1e0      	bne.n	800aed2 <_free_r+0x22>
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4408      	add	r0, r1
 800af16:	6010      	str	r0, [r2, #0]
 800af18:	6053      	str	r3, [r2, #4]
 800af1a:	e7da      	b.n	800aed2 <_free_r+0x22>
 800af1c:	d902      	bls.n	800af24 <_free_r+0x74>
 800af1e:	230c      	movs	r3, #12
 800af20:	602b      	str	r3, [r5, #0]
 800af22:	e7d6      	b.n	800aed2 <_free_r+0x22>
 800af24:	6820      	ldr	r0, [r4, #0]
 800af26:	1821      	adds	r1, r4, r0
 800af28:	428b      	cmp	r3, r1
 800af2a:	bf01      	itttt	eq
 800af2c:	6819      	ldreq	r1, [r3, #0]
 800af2e:	685b      	ldreq	r3, [r3, #4]
 800af30:	1809      	addeq	r1, r1, r0
 800af32:	6021      	streq	r1, [r4, #0]
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	6054      	str	r4, [r2, #4]
 800af38:	e7cb      	b.n	800aed2 <_free_r+0x22>
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20000440 	.word	0x20000440

0800af40 <_Balloc>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	69c6      	ldr	r6, [r0, #28]
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	b976      	cbnz	r6, 800af68 <_Balloc+0x28>
 800af4a:	2010      	movs	r0, #16
 800af4c:	f7fe fa34 	bl	80093b8 <malloc>
 800af50:	4602      	mov	r2, r0
 800af52:	61e0      	str	r0, [r4, #28]
 800af54:	b920      	cbnz	r0, 800af60 <_Balloc+0x20>
 800af56:	216b      	movs	r1, #107	@ 0x6b
 800af58:	4b17      	ldr	r3, [pc, #92]	@ (800afb8 <_Balloc+0x78>)
 800af5a:	4818      	ldr	r0, [pc, #96]	@ (800afbc <_Balloc+0x7c>)
 800af5c:	f000 fd98 	bl	800ba90 <__assert_func>
 800af60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af64:	6006      	str	r6, [r0, #0]
 800af66:	60c6      	str	r6, [r0, #12]
 800af68:	69e6      	ldr	r6, [r4, #28]
 800af6a:	68f3      	ldr	r3, [r6, #12]
 800af6c:	b183      	cbz	r3, 800af90 <_Balloc+0x50>
 800af6e:	69e3      	ldr	r3, [r4, #28]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af76:	b9b8      	cbnz	r0, 800afa8 <_Balloc+0x68>
 800af78:	2101      	movs	r1, #1
 800af7a:	fa01 f605 	lsl.w	r6, r1, r5
 800af7e:	1d72      	adds	r2, r6, #5
 800af80:	4620      	mov	r0, r4
 800af82:	0092      	lsls	r2, r2, #2
 800af84:	f000 fda2 	bl	800bacc <_calloc_r>
 800af88:	b160      	cbz	r0, 800afa4 <_Balloc+0x64>
 800af8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af8e:	e00e      	b.n	800afae <_Balloc+0x6e>
 800af90:	2221      	movs	r2, #33	@ 0x21
 800af92:	2104      	movs	r1, #4
 800af94:	4620      	mov	r0, r4
 800af96:	f000 fd99 	bl	800bacc <_calloc_r>
 800af9a:	69e3      	ldr	r3, [r4, #28]
 800af9c:	60f0      	str	r0, [r6, #12]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e4      	bne.n	800af6e <_Balloc+0x2e>
 800afa4:	2000      	movs	r0, #0
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	6802      	ldr	r2, [r0, #0]
 800afaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afae:	2300      	movs	r3, #0
 800afb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afb4:	e7f7      	b.n	800afa6 <_Balloc+0x66>
 800afb6:	bf00      	nop
 800afb8:	0800cbff 	.word	0x0800cbff
 800afbc:	0800cc7f 	.word	0x0800cc7f

0800afc0 <_Bfree>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	69c6      	ldr	r6, [r0, #28]
 800afc4:	4605      	mov	r5, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	b976      	cbnz	r6, 800afe8 <_Bfree+0x28>
 800afca:	2010      	movs	r0, #16
 800afcc:	f7fe f9f4 	bl	80093b8 <malloc>
 800afd0:	4602      	mov	r2, r0
 800afd2:	61e8      	str	r0, [r5, #28]
 800afd4:	b920      	cbnz	r0, 800afe0 <_Bfree+0x20>
 800afd6:	218f      	movs	r1, #143	@ 0x8f
 800afd8:	4b08      	ldr	r3, [pc, #32]	@ (800affc <_Bfree+0x3c>)
 800afda:	4809      	ldr	r0, [pc, #36]	@ (800b000 <_Bfree+0x40>)
 800afdc:	f000 fd58 	bl	800ba90 <__assert_func>
 800afe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afe4:	6006      	str	r6, [r0, #0]
 800afe6:	60c6      	str	r6, [r0, #12]
 800afe8:	b13c      	cbz	r4, 800affa <_Bfree+0x3a>
 800afea:	69eb      	ldr	r3, [r5, #28]
 800afec:	6862      	ldr	r2, [r4, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aff4:	6021      	str	r1, [r4, #0]
 800aff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	0800cbff 	.word	0x0800cbff
 800b000:	0800cc7f 	.word	0x0800cc7f

0800b004 <__multadd>:
 800b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b008:	4607      	mov	r7, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	461e      	mov	r6, r3
 800b00e:	2000      	movs	r0, #0
 800b010:	690d      	ldr	r5, [r1, #16]
 800b012:	f101 0c14 	add.w	ip, r1, #20
 800b016:	f8dc 3000 	ldr.w	r3, [ip]
 800b01a:	3001      	adds	r0, #1
 800b01c:	b299      	uxth	r1, r3
 800b01e:	fb02 6101 	mla	r1, r2, r1, r6
 800b022:	0c1e      	lsrs	r6, r3, #16
 800b024:	0c0b      	lsrs	r3, r1, #16
 800b026:	fb02 3306 	mla	r3, r2, r6, r3
 800b02a:	b289      	uxth	r1, r1
 800b02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b030:	4285      	cmp	r5, r0
 800b032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b036:	f84c 1b04 	str.w	r1, [ip], #4
 800b03a:	dcec      	bgt.n	800b016 <__multadd+0x12>
 800b03c:	b30e      	cbz	r6, 800b082 <__multadd+0x7e>
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc19      	bgt.n	800b078 <__multadd+0x74>
 800b044:	6861      	ldr	r1, [r4, #4]
 800b046:	4638      	mov	r0, r7
 800b048:	3101      	adds	r1, #1
 800b04a:	f7ff ff79 	bl	800af40 <_Balloc>
 800b04e:	4680      	mov	r8, r0
 800b050:	b928      	cbnz	r0, 800b05e <__multadd+0x5a>
 800b052:	4602      	mov	r2, r0
 800b054:	21ba      	movs	r1, #186	@ 0xba
 800b056:	4b0c      	ldr	r3, [pc, #48]	@ (800b088 <__multadd+0x84>)
 800b058:	480c      	ldr	r0, [pc, #48]	@ (800b08c <__multadd+0x88>)
 800b05a:	f000 fd19 	bl	800ba90 <__assert_func>
 800b05e:	6922      	ldr	r2, [r4, #16]
 800b060:	f104 010c 	add.w	r1, r4, #12
 800b064:	3202      	adds	r2, #2
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	300c      	adds	r0, #12
 800b06a:	f000 fd03 	bl	800ba74 <memcpy>
 800b06e:	4621      	mov	r1, r4
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff ffa5 	bl	800afc0 <_Bfree>
 800b076:	4644      	mov	r4, r8
 800b078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b07c:	3501      	adds	r5, #1
 800b07e:	615e      	str	r6, [r3, #20]
 800b080:	6125      	str	r5, [r4, #16]
 800b082:	4620      	mov	r0, r4
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	0800cc6e 	.word	0x0800cc6e
 800b08c:	0800cc7f 	.word	0x0800cc7f

0800b090 <__hi0bits>:
 800b090:	4603      	mov	r3, r0
 800b092:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b096:	bf3a      	itte	cc
 800b098:	0403      	lslcc	r3, r0, #16
 800b09a:	2010      	movcc	r0, #16
 800b09c:	2000      	movcs	r0, #0
 800b09e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0a2:	bf3c      	itt	cc
 800b0a4:	021b      	lslcc	r3, r3, #8
 800b0a6:	3008      	addcc	r0, #8
 800b0a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0ac:	bf3c      	itt	cc
 800b0ae:	011b      	lslcc	r3, r3, #4
 800b0b0:	3004      	addcc	r0, #4
 800b0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b6:	bf3c      	itt	cc
 800b0b8:	009b      	lslcc	r3, r3, #2
 800b0ba:	3002      	addcc	r0, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	db05      	blt.n	800b0cc <__hi0bits+0x3c>
 800b0c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0c4:	f100 0001 	add.w	r0, r0, #1
 800b0c8:	bf08      	it	eq
 800b0ca:	2020      	moveq	r0, #32
 800b0cc:	4770      	bx	lr

0800b0ce <__lo0bits>:
 800b0ce:	6803      	ldr	r3, [r0, #0]
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	f013 0007 	ands.w	r0, r3, #7
 800b0d6:	d00b      	beq.n	800b0f0 <__lo0bits+0x22>
 800b0d8:	07d9      	lsls	r1, r3, #31
 800b0da:	d421      	bmi.n	800b120 <__lo0bits+0x52>
 800b0dc:	0798      	lsls	r0, r3, #30
 800b0de:	bf49      	itett	mi
 800b0e0:	085b      	lsrmi	r3, r3, #1
 800b0e2:	089b      	lsrpl	r3, r3, #2
 800b0e4:	2001      	movmi	r0, #1
 800b0e6:	6013      	strmi	r3, [r2, #0]
 800b0e8:	bf5c      	itt	pl
 800b0ea:	2002      	movpl	r0, #2
 800b0ec:	6013      	strpl	r3, [r2, #0]
 800b0ee:	4770      	bx	lr
 800b0f0:	b299      	uxth	r1, r3
 800b0f2:	b909      	cbnz	r1, 800b0f8 <__lo0bits+0x2a>
 800b0f4:	2010      	movs	r0, #16
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	b2d9      	uxtb	r1, r3
 800b0fa:	b909      	cbnz	r1, 800b100 <__lo0bits+0x32>
 800b0fc:	3008      	adds	r0, #8
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	0719      	lsls	r1, r3, #28
 800b102:	bf04      	itt	eq
 800b104:	091b      	lsreq	r3, r3, #4
 800b106:	3004      	addeq	r0, #4
 800b108:	0799      	lsls	r1, r3, #30
 800b10a:	bf04      	itt	eq
 800b10c:	089b      	lsreq	r3, r3, #2
 800b10e:	3002      	addeq	r0, #2
 800b110:	07d9      	lsls	r1, r3, #31
 800b112:	d403      	bmi.n	800b11c <__lo0bits+0x4e>
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	f100 0001 	add.w	r0, r0, #1
 800b11a:	d003      	beq.n	800b124 <__lo0bits+0x56>
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	4770      	bx	lr
 800b120:	2000      	movs	r0, #0
 800b122:	4770      	bx	lr
 800b124:	2020      	movs	r0, #32
 800b126:	4770      	bx	lr

0800b128 <__i2b>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	460c      	mov	r4, r1
 800b12c:	2101      	movs	r1, #1
 800b12e:	f7ff ff07 	bl	800af40 <_Balloc>
 800b132:	4602      	mov	r2, r0
 800b134:	b928      	cbnz	r0, 800b142 <__i2b+0x1a>
 800b136:	f240 1145 	movw	r1, #325	@ 0x145
 800b13a:	4b04      	ldr	r3, [pc, #16]	@ (800b14c <__i2b+0x24>)
 800b13c:	4804      	ldr	r0, [pc, #16]	@ (800b150 <__i2b+0x28>)
 800b13e:	f000 fca7 	bl	800ba90 <__assert_func>
 800b142:	2301      	movs	r3, #1
 800b144:	6144      	str	r4, [r0, #20]
 800b146:	6103      	str	r3, [r0, #16]
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop
 800b14c:	0800cc6e 	.word	0x0800cc6e
 800b150:	0800cc7f 	.word	0x0800cc7f

0800b154 <__multiply>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	4614      	mov	r4, r2
 800b15a:	690a      	ldr	r2, [r1, #16]
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	460f      	mov	r7, r1
 800b160:	429a      	cmp	r2, r3
 800b162:	bfa2      	ittt	ge
 800b164:	4623      	movge	r3, r4
 800b166:	460c      	movge	r4, r1
 800b168:	461f      	movge	r7, r3
 800b16a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b16e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b172:	68a3      	ldr	r3, [r4, #8]
 800b174:	6861      	ldr	r1, [r4, #4]
 800b176:	eb0a 0609 	add.w	r6, sl, r9
 800b17a:	42b3      	cmp	r3, r6
 800b17c:	b085      	sub	sp, #20
 800b17e:	bfb8      	it	lt
 800b180:	3101      	addlt	r1, #1
 800b182:	f7ff fedd 	bl	800af40 <_Balloc>
 800b186:	b930      	cbnz	r0, 800b196 <__multiply+0x42>
 800b188:	4602      	mov	r2, r0
 800b18a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b18e:	4b43      	ldr	r3, [pc, #268]	@ (800b29c <__multiply+0x148>)
 800b190:	4843      	ldr	r0, [pc, #268]	@ (800b2a0 <__multiply+0x14c>)
 800b192:	f000 fc7d 	bl	800ba90 <__assert_func>
 800b196:	f100 0514 	add.w	r5, r0, #20
 800b19a:	462b      	mov	r3, r5
 800b19c:	2200      	movs	r2, #0
 800b19e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1a2:	4543      	cmp	r3, r8
 800b1a4:	d321      	bcc.n	800b1ea <__multiply+0x96>
 800b1a6:	f107 0114 	add.w	r1, r7, #20
 800b1aa:	f104 0214 	add.w	r2, r4, #20
 800b1ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b1b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b1b6:	9302      	str	r3, [sp, #8]
 800b1b8:	1b13      	subs	r3, r2, r4
 800b1ba:	3b15      	subs	r3, #21
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	f104 0715 	add.w	r7, r4, #21
 800b1c6:	42ba      	cmp	r2, r7
 800b1c8:	bf38      	it	cc
 800b1ca:	2304      	movcc	r3, #4
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	9b02      	ldr	r3, [sp, #8]
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	428b      	cmp	r3, r1
 800b1d4:	d80c      	bhi.n	800b1f0 <__multiply+0x9c>
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	dd03      	ble.n	800b1e2 <__multiply+0x8e>
 800b1da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d05a      	beq.n	800b298 <__multiply+0x144>
 800b1e2:	6106      	str	r6, [r0, #16]
 800b1e4:	b005      	add	sp, #20
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	f843 2b04 	str.w	r2, [r3], #4
 800b1ee:	e7d8      	b.n	800b1a2 <__multiply+0x4e>
 800b1f0:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1f4:	f1ba 0f00 	cmp.w	sl, #0
 800b1f8:	d023      	beq.n	800b242 <__multiply+0xee>
 800b1fa:	46a9      	mov	r9, r5
 800b1fc:	f04f 0c00 	mov.w	ip, #0
 800b200:	f104 0e14 	add.w	lr, r4, #20
 800b204:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b208:	f8d9 3000 	ldr.w	r3, [r9]
 800b20c:	fa1f fb87 	uxth.w	fp, r7
 800b210:	b29b      	uxth	r3, r3
 800b212:	fb0a 330b 	mla	r3, sl, fp, r3
 800b216:	4463      	add	r3, ip
 800b218:	f8d9 c000 	ldr.w	ip, [r9]
 800b21c:	0c3f      	lsrs	r7, r7, #16
 800b21e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b222:	fb0a c707 	mla	r7, sl, r7, ip
 800b226:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b230:	4572      	cmp	r2, lr
 800b232:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b236:	f849 3b04 	str.w	r3, [r9], #4
 800b23a:	d8e3      	bhi.n	800b204 <__multiply+0xb0>
 800b23c:	9b01      	ldr	r3, [sp, #4]
 800b23e:	f845 c003 	str.w	ip, [r5, r3]
 800b242:	9b03      	ldr	r3, [sp, #12]
 800b244:	3104      	adds	r1, #4
 800b246:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b24a:	f1b9 0f00 	cmp.w	r9, #0
 800b24e:	d021      	beq.n	800b294 <__multiply+0x140>
 800b250:	46ae      	mov	lr, r5
 800b252:	f04f 0a00 	mov.w	sl, #0
 800b256:	682b      	ldr	r3, [r5, #0]
 800b258:	f104 0c14 	add.w	ip, r4, #20
 800b25c:	f8bc b000 	ldrh.w	fp, [ip]
 800b260:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b264:	b29b      	uxth	r3, r3
 800b266:	fb09 770b 	mla	r7, r9, fp, r7
 800b26a:	4457      	add	r7, sl
 800b26c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b270:	f84e 3b04 	str.w	r3, [lr], #4
 800b274:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b27c:	f8be 3000 	ldrh.w	r3, [lr]
 800b280:	4562      	cmp	r2, ip
 800b282:	fb09 330a 	mla	r3, r9, sl, r3
 800b286:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b28a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b28e:	d8e5      	bhi.n	800b25c <__multiply+0x108>
 800b290:	9f01      	ldr	r7, [sp, #4]
 800b292:	51eb      	str	r3, [r5, r7]
 800b294:	3504      	adds	r5, #4
 800b296:	e79a      	b.n	800b1ce <__multiply+0x7a>
 800b298:	3e01      	subs	r6, #1
 800b29a:	e79c      	b.n	800b1d6 <__multiply+0x82>
 800b29c:	0800cc6e 	.word	0x0800cc6e
 800b2a0:	0800cc7f 	.word	0x0800cc7f

0800b2a4 <__pow5mult>:
 800b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	f012 0203 	ands.w	r2, r2, #3
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	d007      	beq.n	800b2c4 <__pow5mult+0x20>
 800b2b4:	4c25      	ldr	r4, [pc, #148]	@ (800b34c <__pow5mult+0xa8>)
 800b2b6:	3a01      	subs	r2, #1
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2be:	f7ff fea1 	bl	800b004 <__multadd>
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	10ad      	asrs	r5, r5, #2
 800b2c6:	d03d      	beq.n	800b344 <__pow5mult+0xa0>
 800b2c8:	69fc      	ldr	r4, [r7, #28]
 800b2ca:	b97c      	cbnz	r4, 800b2ec <__pow5mult+0x48>
 800b2cc:	2010      	movs	r0, #16
 800b2ce:	f7fe f873 	bl	80093b8 <malloc>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	61f8      	str	r0, [r7, #28]
 800b2d6:	b928      	cbnz	r0, 800b2e4 <__pow5mult+0x40>
 800b2d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b350 <__pow5mult+0xac>)
 800b2de:	481d      	ldr	r0, [pc, #116]	@ (800b354 <__pow5mult+0xb0>)
 800b2e0:	f000 fbd6 	bl	800ba90 <__assert_func>
 800b2e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2e8:	6004      	str	r4, [r0, #0]
 800b2ea:	60c4      	str	r4, [r0, #12]
 800b2ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2f4:	b94c      	cbnz	r4, 800b30a <__pow5mult+0x66>
 800b2f6:	f240 2171 	movw	r1, #625	@ 0x271
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f7ff ff14 	bl	800b128 <__i2b>
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	f8c8 0008 	str.w	r0, [r8, #8]
 800b308:	6003      	str	r3, [r0, #0]
 800b30a:	f04f 0900 	mov.w	r9, #0
 800b30e:	07eb      	lsls	r3, r5, #31
 800b310:	d50a      	bpl.n	800b328 <__pow5mult+0x84>
 800b312:	4631      	mov	r1, r6
 800b314:	4622      	mov	r2, r4
 800b316:	4638      	mov	r0, r7
 800b318:	f7ff ff1c 	bl	800b154 <__multiply>
 800b31c:	4680      	mov	r8, r0
 800b31e:	4631      	mov	r1, r6
 800b320:	4638      	mov	r0, r7
 800b322:	f7ff fe4d 	bl	800afc0 <_Bfree>
 800b326:	4646      	mov	r6, r8
 800b328:	106d      	asrs	r5, r5, #1
 800b32a:	d00b      	beq.n	800b344 <__pow5mult+0xa0>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	b938      	cbnz	r0, 800b340 <__pow5mult+0x9c>
 800b330:	4622      	mov	r2, r4
 800b332:	4621      	mov	r1, r4
 800b334:	4638      	mov	r0, r7
 800b336:	f7ff ff0d 	bl	800b154 <__multiply>
 800b33a:	6020      	str	r0, [r4, #0]
 800b33c:	f8c0 9000 	str.w	r9, [r0]
 800b340:	4604      	mov	r4, r0
 800b342:	e7e4      	b.n	800b30e <__pow5mult+0x6a>
 800b344:	4630      	mov	r0, r6
 800b346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34a:	bf00      	nop
 800b34c:	0800ccd8 	.word	0x0800ccd8
 800b350:	0800cbff 	.word	0x0800cbff
 800b354:	0800cc7f 	.word	0x0800cc7f

0800b358 <__lshift>:
 800b358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b35c:	460c      	mov	r4, r1
 800b35e:	4607      	mov	r7, r0
 800b360:	4691      	mov	r9, r2
 800b362:	6923      	ldr	r3, [r4, #16]
 800b364:	6849      	ldr	r1, [r1, #4]
 800b366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b370:	f108 0601 	add.w	r6, r8, #1
 800b374:	42b3      	cmp	r3, r6
 800b376:	db0b      	blt.n	800b390 <__lshift+0x38>
 800b378:	4638      	mov	r0, r7
 800b37a:	f7ff fde1 	bl	800af40 <_Balloc>
 800b37e:	4605      	mov	r5, r0
 800b380:	b948      	cbnz	r0, 800b396 <__lshift+0x3e>
 800b382:	4602      	mov	r2, r0
 800b384:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b388:	4b27      	ldr	r3, [pc, #156]	@ (800b428 <__lshift+0xd0>)
 800b38a:	4828      	ldr	r0, [pc, #160]	@ (800b42c <__lshift+0xd4>)
 800b38c:	f000 fb80 	bl	800ba90 <__assert_func>
 800b390:	3101      	adds	r1, #1
 800b392:	005b      	lsls	r3, r3, #1
 800b394:	e7ee      	b.n	800b374 <__lshift+0x1c>
 800b396:	2300      	movs	r3, #0
 800b398:	f100 0114 	add.w	r1, r0, #20
 800b39c:	f100 0210 	add.w	r2, r0, #16
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	4553      	cmp	r3, sl
 800b3a4:	db33      	blt.n	800b40e <__lshift+0xb6>
 800b3a6:	6920      	ldr	r0, [r4, #16]
 800b3a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3ac:	f104 0314 	add.w	r3, r4, #20
 800b3b0:	f019 091f 	ands.w	r9, r9, #31
 800b3b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3bc:	d02b      	beq.n	800b416 <__lshift+0xbe>
 800b3be:	468a      	mov	sl, r1
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	fa00 f009 	lsl.w	r0, r0, r9
 800b3cc:	4310      	orrs	r0, r2
 800b3ce:	f84a 0b04 	str.w	r0, [sl], #4
 800b3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d6:	459c      	cmp	ip, r3
 800b3d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3dc:	d8f3      	bhi.n	800b3c6 <__lshift+0x6e>
 800b3de:	ebac 0304 	sub.w	r3, ip, r4
 800b3e2:	3b15      	subs	r3, #21
 800b3e4:	f023 0303 	bic.w	r3, r3, #3
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	f104 0015 	add.w	r0, r4, #21
 800b3ee:	4584      	cmp	ip, r0
 800b3f0:	bf38      	it	cc
 800b3f2:	2304      	movcc	r3, #4
 800b3f4:	50ca      	str	r2, [r1, r3]
 800b3f6:	b10a      	cbz	r2, 800b3fc <__lshift+0xa4>
 800b3f8:	f108 0602 	add.w	r6, r8, #2
 800b3fc:	3e01      	subs	r6, #1
 800b3fe:	4638      	mov	r0, r7
 800b400:	4621      	mov	r1, r4
 800b402:	612e      	str	r6, [r5, #16]
 800b404:	f7ff fddc 	bl	800afc0 <_Bfree>
 800b408:	4628      	mov	r0, r5
 800b40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b412:	3301      	adds	r3, #1
 800b414:	e7c5      	b.n	800b3a2 <__lshift+0x4a>
 800b416:	3904      	subs	r1, #4
 800b418:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41c:	459c      	cmp	ip, r3
 800b41e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b422:	d8f9      	bhi.n	800b418 <__lshift+0xc0>
 800b424:	e7ea      	b.n	800b3fc <__lshift+0xa4>
 800b426:	bf00      	nop
 800b428:	0800cc6e 	.word	0x0800cc6e
 800b42c:	0800cc7f 	.word	0x0800cc7f

0800b430 <__mcmp>:
 800b430:	4603      	mov	r3, r0
 800b432:	690a      	ldr	r2, [r1, #16]
 800b434:	6900      	ldr	r0, [r0, #16]
 800b436:	b530      	push	{r4, r5, lr}
 800b438:	1a80      	subs	r0, r0, r2
 800b43a:	d10e      	bne.n	800b45a <__mcmp+0x2a>
 800b43c:	3314      	adds	r3, #20
 800b43e:	3114      	adds	r1, #20
 800b440:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b444:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b44c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b450:	4295      	cmp	r5, r2
 800b452:	d003      	beq.n	800b45c <__mcmp+0x2c>
 800b454:	d205      	bcs.n	800b462 <__mcmp+0x32>
 800b456:	f04f 30ff 	mov.w	r0, #4294967295
 800b45a:	bd30      	pop	{r4, r5, pc}
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	d3f3      	bcc.n	800b448 <__mcmp+0x18>
 800b460:	e7fb      	b.n	800b45a <__mcmp+0x2a>
 800b462:	2001      	movs	r0, #1
 800b464:	e7f9      	b.n	800b45a <__mcmp+0x2a>
	...

0800b468 <__mdiff>:
 800b468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	4689      	mov	r9, r1
 800b46e:	4606      	mov	r6, r0
 800b470:	4611      	mov	r1, r2
 800b472:	4648      	mov	r0, r9
 800b474:	4614      	mov	r4, r2
 800b476:	f7ff ffdb 	bl	800b430 <__mcmp>
 800b47a:	1e05      	subs	r5, r0, #0
 800b47c:	d112      	bne.n	800b4a4 <__mdiff+0x3c>
 800b47e:	4629      	mov	r1, r5
 800b480:	4630      	mov	r0, r6
 800b482:	f7ff fd5d 	bl	800af40 <_Balloc>
 800b486:	4602      	mov	r2, r0
 800b488:	b928      	cbnz	r0, 800b496 <__mdiff+0x2e>
 800b48a:	f240 2137 	movw	r1, #567	@ 0x237
 800b48e:	4b3e      	ldr	r3, [pc, #248]	@ (800b588 <__mdiff+0x120>)
 800b490:	483e      	ldr	r0, [pc, #248]	@ (800b58c <__mdiff+0x124>)
 800b492:	f000 fafd 	bl	800ba90 <__assert_func>
 800b496:	2301      	movs	r3, #1
 800b498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b49c:	4610      	mov	r0, r2
 800b49e:	b003      	add	sp, #12
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	bfbc      	itt	lt
 800b4a6:	464b      	movlt	r3, r9
 800b4a8:	46a1      	movlt	r9, r4
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4b0:	bfba      	itte	lt
 800b4b2:	461c      	movlt	r4, r3
 800b4b4:	2501      	movlt	r5, #1
 800b4b6:	2500      	movge	r5, #0
 800b4b8:	f7ff fd42 	bl	800af40 <_Balloc>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	b918      	cbnz	r0, 800b4c8 <__mdiff+0x60>
 800b4c0:	f240 2145 	movw	r1, #581	@ 0x245
 800b4c4:	4b30      	ldr	r3, [pc, #192]	@ (800b588 <__mdiff+0x120>)
 800b4c6:	e7e3      	b.n	800b490 <__mdiff+0x28>
 800b4c8:	f100 0b14 	add.w	fp, r0, #20
 800b4cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4d0:	f109 0310 	add.w	r3, r9, #16
 800b4d4:	60c5      	str	r5, [r0, #12]
 800b4d6:	f04f 0c00 	mov.w	ip, #0
 800b4da:	f109 0514 	add.w	r5, r9, #20
 800b4de:	46d9      	mov	r9, fp
 800b4e0:	6926      	ldr	r6, [r4, #16]
 800b4e2:	f104 0e14 	add.w	lr, r4, #20
 800b4e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	9b01      	ldr	r3, [sp, #4]
 800b4f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4fa:	b281      	uxth	r1, r0
 800b4fc:	9301      	str	r3, [sp, #4]
 800b4fe:	fa1f f38a 	uxth.w	r3, sl
 800b502:	1a5b      	subs	r3, r3, r1
 800b504:	0c00      	lsrs	r0, r0, #16
 800b506:	4463      	add	r3, ip
 800b508:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b50c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b510:	b29b      	uxth	r3, r3
 800b512:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b516:	4576      	cmp	r6, lr
 800b518:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b51c:	f849 3b04 	str.w	r3, [r9], #4
 800b520:	d8e6      	bhi.n	800b4f0 <__mdiff+0x88>
 800b522:	1b33      	subs	r3, r6, r4
 800b524:	3b15      	subs	r3, #21
 800b526:	f023 0303 	bic.w	r3, r3, #3
 800b52a:	3415      	adds	r4, #21
 800b52c:	3304      	adds	r3, #4
 800b52e:	42a6      	cmp	r6, r4
 800b530:	bf38      	it	cc
 800b532:	2304      	movcc	r3, #4
 800b534:	441d      	add	r5, r3
 800b536:	445b      	add	r3, fp
 800b538:	461e      	mov	r6, r3
 800b53a:	462c      	mov	r4, r5
 800b53c:	4544      	cmp	r4, r8
 800b53e:	d30e      	bcc.n	800b55e <__mdiff+0xf6>
 800b540:	f108 0103 	add.w	r1, r8, #3
 800b544:	1b49      	subs	r1, r1, r5
 800b546:	f021 0103 	bic.w	r1, r1, #3
 800b54a:	3d03      	subs	r5, #3
 800b54c:	45a8      	cmp	r8, r5
 800b54e:	bf38      	it	cc
 800b550:	2100      	movcc	r1, #0
 800b552:	440b      	add	r3, r1
 800b554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b558:	b199      	cbz	r1, 800b582 <__mdiff+0x11a>
 800b55a:	6117      	str	r7, [r2, #16]
 800b55c:	e79e      	b.n	800b49c <__mdiff+0x34>
 800b55e:	46e6      	mov	lr, ip
 800b560:	f854 1b04 	ldr.w	r1, [r4], #4
 800b564:	fa1f fc81 	uxth.w	ip, r1
 800b568:	44f4      	add	ip, lr
 800b56a:	0c08      	lsrs	r0, r1, #16
 800b56c:	4471      	add	r1, lr
 800b56e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b572:	b289      	uxth	r1, r1
 800b574:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b578:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b57c:	f846 1b04 	str.w	r1, [r6], #4
 800b580:	e7dc      	b.n	800b53c <__mdiff+0xd4>
 800b582:	3f01      	subs	r7, #1
 800b584:	e7e6      	b.n	800b554 <__mdiff+0xec>
 800b586:	bf00      	nop
 800b588:	0800cc6e 	.word	0x0800cc6e
 800b58c:	0800cc7f 	.word	0x0800cc7f

0800b590 <__d2b>:
 800b590:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b594:	2101      	movs	r1, #1
 800b596:	4690      	mov	r8, r2
 800b598:	4699      	mov	r9, r3
 800b59a:	9e08      	ldr	r6, [sp, #32]
 800b59c:	f7ff fcd0 	bl	800af40 <_Balloc>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	b930      	cbnz	r0, 800b5b2 <__d2b+0x22>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5aa:	4b23      	ldr	r3, [pc, #140]	@ (800b638 <__d2b+0xa8>)
 800b5ac:	4823      	ldr	r0, [pc, #140]	@ (800b63c <__d2b+0xac>)
 800b5ae:	f000 fa6f 	bl	800ba90 <__assert_func>
 800b5b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ba:	b10d      	cbz	r5, 800b5c0 <__d2b+0x30>
 800b5bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f1b8 0300 	subs.w	r3, r8, #0
 800b5c6:	d024      	beq.n	800b612 <__d2b+0x82>
 800b5c8:	4668      	mov	r0, sp
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	f7ff fd7f 	bl	800b0ce <__lo0bits>
 800b5d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5d4:	b1d8      	cbz	r0, 800b60e <__d2b+0x7e>
 800b5d6:	f1c0 0320 	rsb	r3, r0, #32
 800b5da:	fa02 f303 	lsl.w	r3, r2, r3
 800b5de:	430b      	orrs	r3, r1
 800b5e0:	40c2      	lsrs	r2, r0
 800b5e2:	6163      	str	r3, [r4, #20]
 800b5e4:	9201      	str	r2, [sp, #4]
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2201      	moveq	r2, #1
 800b5ee:	2202      	movne	r2, #2
 800b5f0:	61a3      	str	r3, [r4, #24]
 800b5f2:	6122      	str	r2, [r4, #16]
 800b5f4:	b1ad      	cbz	r5, 800b622 <__d2b+0x92>
 800b5f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5fa:	4405      	add	r5, r0
 800b5fc:	6035      	str	r5, [r6, #0]
 800b5fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b604:	6018      	str	r0, [r3, #0]
 800b606:	4620      	mov	r0, r4
 800b608:	b002      	add	sp, #8
 800b60a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b60e:	6161      	str	r1, [r4, #20]
 800b610:	e7e9      	b.n	800b5e6 <__d2b+0x56>
 800b612:	a801      	add	r0, sp, #4
 800b614:	f7ff fd5b 	bl	800b0ce <__lo0bits>
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	3020      	adds	r0, #32
 800b620:	e7e7      	b.n	800b5f2 <__d2b+0x62>
 800b622:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b62a:	6030      	str	r0, [r6, #0]
 800b62c:	6918      	ldr	r0, [r3, #16]
 800b62e:	f7ff fd2f 	bl	800b090 <__hi0bits>
 800b632:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b636:	e7e4      	b.n	800b602 <__d2b+0x72>
 800b638:	0800cc6e 	.word	0x0800cc6e
 800b63c:	0800cc7f 	.word	0x0800cc7f

0800b640 <__ssputs_r>:
 800b640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b644:	461f      	mov	r7, r3
 800b646:	688e      	ldr	r6, [r1, #8]
 800b648:	4682      	mov	sl, r0
 800b64a:	42be      	cmp	r6, r7
 800b64c:	460c      	mov	r4, r1
 800b64e:	4690      	mov	r8, r2
 800b650:	680b      	ldr	r3, [r1, #0]
 800b652:	d82d      	bhi.n	800b6b0 <__ssputs_r+0x70>
 800b654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b658:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b65c:	d026      	beq.n	800b6ac <__ssputs_r+0x6c>
 800b65e:	6965      	ldr	r5, [r4, #20]
 800b660:	6909      	ldr	r1, [r1, #16]
 800b662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b666:	eba3 0901 	sub.w	r9, r3, r1
 800b66a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b66e:	1c7b      	adds	r3, r7, #1
 800b670:	444b      	add	r3, r9
 800b672:	106d      	asrs	r5, r5, #1
 800b674:	429d      	cmp	r5, r3
 800b676:	bf38      	it	cc
 800b678:	461d      	movcc	r5, r3
 800b67a:	0553      	lsls	r3, r2, #21
 800b67c:	d527      	bpl.n	800b6ce <__ssputs_r+0x8e>
 800b67e:	4629      	mov	r1, r5
 800b680:	f7fd fecc 	bl	800941c <_malloc_r>
 800b684:	4606      	mov	r6, r0
 800b686:	b360      	cbz	r0, 800b6e2 <__ssputs_r+0xa2>
 800b688:	464a      	mov	r2, r9
 800b68a:	6921      	ldr	r1, [r4, #16]
 800b68c:	f000 f9f2 	bl	800ba74 <memcpy>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	6126      	str	r6, [r4, #16]
 800b69e:	444e      	add	r6, r9
 800b6a0:	6026      	str	r6, [r4, #0]
 800b6a2:	463e      	mov	r6, r7
 800b6a4:	6165      	str	r5, [r4, #20]
 800b6a6:	eba5 0509 	sub.w	r5, r5, r9
 800b6aa:	60a5      	str	r5, [r4, #8]
 800b6ac:	42be      	cmp	r6, r7
 800b6ae:	d900      	bls.n	800b6b2 <__ssputs_r+0x72>
 800b6b0:	463e      	mov	r6, r7
 800b6b2:	4632      	mov	r2, r6
 800b6b4:	4641      	mov	r1, r8
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	f000 f9c2 	bl	800ba40 <memmove>
 800b6bc:	2000      	movs	r0, #0
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	1b9b      	subs	r3, r3, r6
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	4433      	add	r3, r6
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ce:	462a      	mov	r2, r5
 800b6d0:	f000 fa22 	bl	800bb18 <_realloc_r>
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d1e0      	bne.n	800b69c <__ssputs_r+0x5c>
 800b6da:	4650      	mov	r0, sl
 800b6dc:	6921      	ldr	r1, [r4, #16]
 800b6de:	f7ff fbe7 	bl	800aeb0 <_free_r>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	f8ca 3000 	str.w	r3, [sl]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f2:	81a3      	strh	r3, [r4, #12]
 800b6f4:	e7e9      	b.n	800b6ca <__ssputs_r+0x8a>
	...

0800b6f8 <_svfiprintf_r>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	4698      	mov	r8, r3
 800b6fe:	898b      	ldrh	r3, [r1, #12]
 800b700:	4607      	mov	r7, r0
 800b702:	061b      	lsls	r3, r3, #24
 800b704:	460d      	mov	r5, r1
 800b706:	4614      	mov	r4, r2
 800b708:	b09d      	sub	sp, #116	@ 0x74
 800b70a:	d510      	bpl.n	800b72e <_svfiprintf_r+0x36>
 800b70c:	690b      	ldr	r3, [r1, #16]
 800b70e:	b973      	cbnz	r3, 800b72e <_svfiprintf_r+0x36>
 800b710:	2140      	movs	r1, #64	@ 0x40
 800b712:	f7fd fe83 	bl	800941c <_malloc_r>
 800b716:	6028      	str	r0, [r5, #0]
 800b718:	6128      	str	r0, [r5, #16]
 800b71a:	b930      	cbnz	r0, 800b72a <_svfiprintf_r+0x32>
 800b71c:	230c      	movs	r3, #12
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	f04f 30ff 	mov.w	r0, #4294967295
 800b724:	b01d      	add	sp, #116	@ 0x74
 800b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72a:	2340      	movs	r3, #64	@ 0x40
 800b72c:	616b      	str	r3, [r5, #20]
 800b72e:	2300      	movs	r3, #0
 800b730:	9309      	str	r3, [sp, #36]	@ 0x24
 800b732:	2320      	movs	r3, #32
 800b734:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b738:	2330      	movs	r3, #48	@ 0x30
 800b73a:	f04f 0901 	mov.w	r9, #1
 800b73e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b742:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b8dc <_svfiprintf_r+0x1e4>
 800b746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b74a:	4623      	mov	r3, r4
 800b74c:	469a      	mov	sl, r3
 800b74e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b752:	b10a      	cbz	r2, 800b758 <_svfiprintf_r+0x60>
 800b754:	2a25      	cmp	r2, #37	@ 0x25
 800b756:	d1f9      	bne.n	800b74c <_svfiprintf_r+0x54>
 800b758:	ebba 0b04 	subs.w	fp, sl, r4
 800b75c:	d00b      	beq.n	800b776 <_svfiprintf_r+0x7e>
 800b75e:	465b      	mov	r3, fp
 800b760:	4622      	mov	r2, r4
 800b762:	4629      	mov	r1, r5
 800b764:	4638      	mov	r0, r7
 800b766:	f7ff ff6b 	bl	800b640 <__ssputs_r>
 800b76a:	3001      	adds	r0, #1
 800b76c:	f000 80a7 	beq.w	800b8be <_svfiprintf_r+0x1c6>
 800b770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b772:	445a      	add	r2, fp
 800b774:	9209      	str	r2, [sp, #36]	@ 0x24
 800b776:	f89a 3000 	ldrb.w	r3, [sl]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 809f 	beq.w	800b8be <_svfiprintf_r+0x1c6>
 800b780:	2300      	movs	r3, #0
 800b782:	f04f 32ff 	mov.w	r2, #4294967295
 800b786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b78a:	f10a 0a01 	add.w	sl, sl, #1
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	9307      	str	r3, [sp, #28]
 800b792:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b796:	931a      	str	r3, [sp, #104]	@ 0x68
 800b798:	4654      	mov	r4, sl
 800b79a:	2205      	movs	r2, #5
 800b79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a0:	484e      	ldr	r0, [pc, #312]	@ (800b8dc <_svfiprintf_r+0x1e4>)
 800b7a2:	f7fe fd24 	bl	800a1ee <memchr>
 800b7a6:	9a04      	ldr	r2, [sp, #16]
 800b7a8:	b9d8      	cbnz	r0, 800b7e2 <_svfiprintf_r+0xea>
 800b7aa:	06d0      	lsls	r0, r2, #27
 800b7ac:	bf44      	itt	mi
 800b7ae:	2320      	movmi	r3, #32
 800b7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7b4:	0711      	lsls	r1, r2, #28
 800b7b6:	bf44      	itt	mi
 800b7b8:	232b      	movmi	r3, #43	@ 0x2b
 800b7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7be:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7c4:	d015      	beq.n	800b7f2 <_svfiprintf_r+0xfa>
 800b7c6:	4654      	mov	r4, sl
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f04f 0c0a 	mov.w	ip, #10
 800b7ce:	9a07      	ldr	r2, [sp, #28]
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d6:	3b30      	subs	r3, #48	@ 0x30
 800b7d8:	2b09      	cmp	r3, #9
 800b7da:	d94b      	bls.n	800b874 <_svfiprintf_r+0x17c>
 800b7dc:	b1b0      	cbz	r0, 800b80c <_svfiprintf_r+0x114>
 800b7de:	9207      	str	r2, [sp, #28]
 800b7e0:	e014      	b.n	800b80c <_svfiprintf_r+0x114>
 800b7e2:	eba0 0308 	sub.w	r3, r0, r8
 800b7e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	46a2      	mov	sl, r4
 800b7ee:	9304      	str	r3, [sp, #16]
 800b7f0:	e7d2      	b.n	800b798 <_svfiprintf_r+0xa0>
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	1d19      	adds	r1, r3, #4
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	9103      	str	r1, [sp, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bfbb      	ittet	lt
 800b7fe:	425b      	neglt	r3, r3
 800b800:	f042 0202 	orrlt.w	r2, r2, #2
 800b804:	9307      	strge	r3, [sp, #28]
 800b806:	9307      	strlt	r3, [sp, #28]
 800b808:	bfb8      	it	lt
 800b80a:	9204      	strlt	r2, [sp, #16]
 800b80c:	7823      	ldrb	r3, [r4, #0]
 800b80e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b810:	d10a      	bne.n	800b828 <_svfiprintf_r+0x130>
 800b812:	7863      	ldrb	r3, [r4, #1]
 800b814:	2b2a      	cmp	r3, #42	@ 0x2a
 800b816:	d132      	bne.n	800b87e <_svfiprintf_r+0x186>
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	3402      	adds	r4, #2
 800b81c:	1d1a      	adds	r2, r3, #4
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	9203      	str	r2, [sp, #12]
 800b822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b826:	9305      	str	r3, [sp, #20]
 800b828:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b8e0 <_svfiprintf_r+0x1e8>
 800b82c:	2203      	movs	r2, #3
 800b82e:	4650      	mov	r0, sl
 800b830:	7821      	ldrb	r1, [r4, #0]
 800b832:	f7fe fcdc 	bl	800a1ee <memchr>
 800b836:	b138      	cbz	r0, 800b848 <_svfiprintf_r+0x150>
 800b838:	2240      	movs	r2, #64	@ 0x40
 800b83a:	9b04      	ldr	r3, [sp, #16]
 800b83c:	eba0 000a 	sub.w	r0, r0, sl
 800b840:	4082      	lsls	r2, r0
 800b842:	4313      	orrs	r3, r2
 800b844:	3401      	adds	r4, #1
 800b846:	9304      	str	r3, [sp, #16]
 800b848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84c:	2206      	movs	r2, #6
 800b84e:	4825      	ldr	r0, [pc, #148]	@ (800b8e4 <_svfiprintf_r+0x1ec>)
 800b850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b854:	f7fe fccb 	bl	800a1ee <memchr>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d036      	beq.n	800b8ca <_svfiprintf_r+0x1d2>
 800b85c:	4b22      	ldr	r3, [pc, #136]	@ (800b8e8 <_svfiprintf_r+0x1f0>)
 800b85e:	bb1b      	cbnz	r3, 800b8a8 <_svfiprintf_r+0x1b0>
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	3307      	adds	r3, #7
 800b864:	f023 0307 	bic.w	r3, r3, #7
 800b868:	3308      	adds	r3, #8
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b86e:	4433      	add	r3, r6
 800b870:	9309      	str	r3, [sp, #36]	@ 0x24
 800b872:	e76a      	b.n	800b74a <_svfiprintf_r+0x52>
 800b874:	460c      	mov	r4, r1
 800b876:	2001      	movs	r0, #1
 800b878:	fb0c 3202 	mla	r2, ip, r2, r3
 800b87c:	e7a8      	b.n	800b7d0 <_svfiprintf_r+0xd8>
 800b87e:	2300      	movs	r3, #0
 800b880:	f04f 0c0a 	mov.w	ip, #10
 800b884:	4619      	mov	r1, r3
 800b886:	3401      	adds	r4, #1
 800b888:	9305      	str	r3, [sp, #20]
 800b88a:	4620      	mov	r0, r4
 800b88c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b890:	3a30      	subs	r2, #48	@ 0x30
 800b892:	2a09      	cmp	r2, #9
 800b894:	d903      	bls.n	800b89e <_svfiprintf_r+0x1a6>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0c6      	beq.n	800b828 <_svfiprintf_r+0x130>
 800b89a:	9105      	str	r1, [sp, #20]
 800b89c:	e7c4      	b.n	800b828 <_svfiprintf_r+0x130>
 800b89e:	4604      	mov	r4, r0
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a6:	e7f0      	b.n	800b88a <_svfiprintf_r+0x192>
 800b8a8:	ab03      	add	r3, sp, #12
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	462a      	mov	r2, r5
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b8ec <_svfiprintf_r+0x1f4>)
 800b8b2:	a904      	add	r1, sp, #16
 800b8b4:	f7fd fedc 	bl	8009670 <_printf_float>
 800b8b8:	1c42      	adds	r2, r0, #1
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	d1d6      	bne.n	800b86c <_svfiprintf_r+0x174>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	065b      	lsls	r3, r3, #25
 800b8c2:	f53f af2d 	bmi.w	800b720 <_svfiprintf_r+0x28>
 800b8c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8c8:	e72c      	b.n	800b724 <_svfiprintf_r+0x2c>
 800b8ca:	ab03      	add	r3, sp, #12
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	4b06      	ldr	r3, [pc, #24]	@ (800b8ec <_svfiprintf_r+0x1f4>)
 800b8d4:	a904      	add	r1, sp, #16
 800b8d6:	f7fe f969 	bl	8009bac <_printf_i>
 800b8da:	e7ed      	b.n	800b8b8 <_svfiprintf_r+0x1c0>
 800b8dc:	0800cdd8 	.word	0x0800cdd8
 800b8e0:	0800cdde 	.word	0x0800cdde
 800b8e4:	0800cde2 	.word	0x0800cde2
 800b8e8:	08009671 	.word	0x08009671
 800b8ec:	0800b641 	.word	0x0800b641

0800b8f0 <__sflush_r>:
 800b8f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	0716      	lsls	r6, r2, #28
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	d454      	bmi.n	800b9a8 <__sflush_r+0xb8>
 800b8fe:	684b      	ldr	r3, [r1, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dc02      	bgt.n	800b90a <__sflush_r+0x1a>
 800b904:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	dd48      	ble.n	800b99c <__sflush_r+0xac>
 800b90a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b90c:	2e00      	cmp	r6, #0
 800b90e:	d045      	beq.n	800b99c <__sflush_r+0xac>
 800b910:	2300      	movs	r3, #0
 800b912:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b916:	682f      	ldr	r7, [r5, #0]
 800b918:	6a21      	ldr	r1, [r4, #32]
 800b91a:	602b      	str	r3, [r5, #0]
 800b91c:	d030      	beq.n	800b980 <__sflush_r+0x90>
 800b91e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	0759      	lsls	r1, r3, #29
 800b924:	d505      	bpl.n	800b932 <__sflush_r+0x42>
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	1ad2      	subs	r2, r2, r3
 800b92a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b92c:	b10b      	cbz	r3, 800b932 <__sflush_r+0x42>
 800b92e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	2300      	movs	r3, #0
 800b934:	4628      	mov	r0, r5
 800b936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b938:	6a21      	ldr	r1, [r4, #32]
 800b93a:	47b0      	blx	r6
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	d106      	bne.n	800b950 <__sflush_r+0x60>
 800b942:	6829      	ldr	r1, [r5, #0]
 800b944:	291d      	cmp	r1, #29
 800b946:	d82b      	bhi.n	800b9a0 <__sflush_r+0xb0>
 800b948:	4a28      	ldr	r2, [pc, #160]	@ (800b9ec <__sflush_r+0xfc>)
 800b94a:	410a      	asrs	r2, r1
 800b94c:	07d6      	lsls	r6, r2, #31
 800b94e:	d427      	bmi.n	800b9a0 <__sflush_r+0xb0>
 800b950:	2200      	movs	r2, #0
 800b952:	6062      	str	r2, [r4, #4]
 800b954:	6922      	ldr	r2, [r4, #16]
 800b956:	04d9      	lsls	r1, r3, #19
 800b958:	6022      	str	r2, [r4, #0]
 800b95a:	d504      	bpl.n	800b966 <__sflush_r+0x76>
 800b95c:	1c42      	adds	r2, r0, #1
 800b95e:	d101      	bne.n	800b964 <__sflush_r+0x74>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b903      	cbnz	r3, 800b966 <__sflush_r+0x76>
 800b964:	6560      	str	r0, [r4, #84]	@ 0x54
 800b966:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b968:	602f      	str	r7, [r5, #0]
 800b96a:	b1b9      	cbz	r1, 800b99c <__sflush_r+0xac>
 800b96c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b970:	4299      	cmp	r1, r3
 800b972:	d002      	beq.n	800b97a <__sflush_r+0x8a>
 800b974:	4628      	mov	r0, r5
 800b976:	f7ff fa9b 	bl	800aeb0 <_free_r>
 800b97a:	2300      	movs	r3, #0
 800b97c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b97e:	e00d      	b.n	800b99c <__sflush_r+0xac>
 800b980:	2301      	movs	r3, #1
 800b982:	4628      	mov	r0, r5
 800b984:	47b0      	blx	r6
 800b986:	4602      	mov	r2, r0
 800b988:	1c50      	adds	r0, r2, #1
 800b98a:	d1c9      	bne.n	800b920 <__sflush_r+0x30>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d0c6      	beq.n	800b920 <__sflush_r+0x30>
 800b992:	2b1d      	cmp	r3, #29
 800b994:	d001      	beq.n	800b99a <__sflush_r+0xaa>
 800b996:	2b16      	cmp	r3, #22
 800b998:	d11d      	bne.n	800b9d6 <__sflush_r+0xe6>
 800b99a:	602f      	str	r7, [r5, #0]
 800b99c:	2000      	movs	r0, #0
 800b99e:	e021      	b.n	800b9e4 <__sflush_r+0xf4>
 800b9a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a4:	b21b      	sxth	r3, r3
 800b9a6:	e01a      	b.n	800b9de <__sflush_r+0xee>
 800b9a8:	690f      	ldr	r7, [r1, #16]
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	d0f6      	beq.n	800b99c <__sflush_r+0xac>
 800b9ae:	0793      	lsls	r3, r2, #30
 800b9b0:	bf18      	it	ne
 800b9b2:	2300      	movne	r3, #0
 800b9b4:	680e      	ldr	r6, [r1, #0]
 800b9b6:	bf08      	it	eq
 800b9b8:	694b      	ldreq	r3, [r1, #20]
 800b9ba:	1bf6      	subs	r6, r6, r7
 800b9bc:	600f      	str	r7, [r1, #0]
 800b9be:	608b      	str	r3, [r1, #8]
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	ddeb      	ble.n	800b99c <__sflush_r+0xac>
 800b9c4:	4633      	mov	r3, r6
 800b9c6:	463a      	mov	r2, r7
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	6a21      	ldr	r1, [r4, #32]
 800b9cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b9d0:	47e0      	blx	ip
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	dc07      	bgt.n	800b9e6 <__sflush_r+0xf6>
 800b9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9de:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e6:	4407      	add	r7, r0
 800b9e8:	1a36      	subs	r6, r6, r0
 800b9ea:	e7e9      	b.n	800b9c0 <__sflush_r+0xd0>
 800b9ec:	dfbffffe 	.word	0xdfbffffe

0800b9f0 <_fflush_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	690b      	ldr	r3, [r1, #16]
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b913      	cbnz	r3, 800ba00 <_fflush_r+0x10>
 800b9fa:	2500      	movs	r5, #0
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	b118      	cbz	r0, 800ba0a <_fflush_r+0x1a>
 800ba02:	6a03      	ldr	r3, [r0, #32]
 800ba04:	b90b      	cbnz	r3, 800ba0a <_fflush_r+0x1a>
 800ba06:	f7fe fa7d 	bl	8009f04 <__sinit>
 800ba0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d0f3      	beq.n	800b9fa <_fflush_r+0xa>
 800ba12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba14:	07d0      	lsls	r0, r2, #31
 800ba16:	d404      	bmi.n	800ba22 <_fflush_r+0x32>
 800ba18:	0599      	lsls	r1, r3, #22
 800ba1a:	d402      	bmi.n	800ba22 <_fflush_r+0x32>
 800ba1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba1e:	f7fe fbdc 	bl	800a1da <__retarget_lock_acquire_recursive>
 800ba22:	4628      	mov	r0, r5
 800ba24:	4621      	mov	r1, r4
 800ba26:	f7ff ff63 	bl	800b8f0 <__sflush_r>
 800ba2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	07da      	lsls	r2, r3, #31
 800ba30:	d4e4      	bmi.n	800b9fc <_fflush_r+0xc>
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	059b      	lsls	r3, r3, #22
 800ba36:	d4e1      	bmi.n	800b9fc <_fflush_r+0xc>
 800ba38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba3a:	f7fe fbcf 	bl	800a1dc <__retarget_lock_release_recursive>
 800ba3e:	e7dd      	b.n	800b9fc <_fflush_r+0xc>

0800ba40 <memmove>:
 800ba40:	4288      	cmp	r0, r1
 800ba42:	b510      	push	{r4, lr}
 800ba44:	eb01 0402 	add.w	r4, r1, r2
 800ba48:	d902      	bls.n	800ba50 <memmove+0x10>
 800ba4a:	4284      	cmp	r4, r0
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	d807      	bhi.n	800ba60 <memmove+0x20>
 800ba50:	1e43      	subs	r3, r0, #1
 800ba52:	42a1      	cmp	r1, r4
 800ba54:	d008      	beq.n	800ba68 <memmove+0x28>
 800ba56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba5e:	e7f8      	b.n	800ba52 <memmove+0x12>
 800ba60:	4601      	mov	r1, r0
 800ba62:	4402      	add	r2, r0
 800ba64:	428a      	cmp	r2, r1
 800ba66:	d100      	bne.n	800ba6a <memmove+0x2a>
 800ba68:	bd10      	pop	{r4, pc}
 800ba6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba72:	e7f7      	b.n	800ba64 <memmove+0x24>

0800ba74 <memcpy>:
 800ba74:	440a      	add	r2, r1
 800ba76:	4291      	cmp	r1, r2
 800ba78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba7c:	d100      	bne.n	800ba80 <memcpy+0xc>
 800ba7e:	4770      	bx	lr
 800ba80:	b510      	push	{r4, lr}
 800ba82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba86:	4291      	cmp	r1, r2
 800ba88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba8c:	d1f9      	bne.n	800ba82 <memcpy+0xe>
 800ba8e:	bd10      	pop	{r4, pc}

0800ba90 <__assert_func>:
 800ba90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba92:	4614      	mov	r4, r2
 800ba94:	461a      	mov	r2, r3
 800ba96:	4b09      	ldr	r3, [pc, #36]	@ (800babc <__assert_func+0x2c>)
 800ba98:	4605      	mov	r5, r0
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68d8      	ldr	r0, [r3, #12]
 800ba9e:	b954      	cbnz	r4, 800bab6 <__assert_func+0x26>
 800baa0:	4b07      	ldr	r3, [pc, #28]	@ (800bac0 <__assert_func+0x30>)
 800baa2:	461c      	mov	r4, r3
 800baa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa8:	9100      	str	r1, [sp, #0]
 800baaa:	462b      	mov	r3, r5
 800baac:	4905      	ldr	r1, [pc, #20]	@ (800bac4 <__assert_func+0x34>)
 800baae:	f000 f86f 	bl	800bb90 <fiprintf>
 800bab2:	f7fd fc79 	bl	80093a8 <abort>
 800bab6:	4b04      	ldr	r3, [pc, #16]	@ (800bac8 <__assert_func+0x38>)
 800bab8:	e7f4      	b.n	800baa4 <__assert_func+0x14>
 800baba:	bf00      	nop
 800babc:	2000001c 	.word	0x2000001c
 800bac0:	0800ce2e 	.word	0x0800ce2e
 800bac4:	0800ce00 	.word	0x0800ce00
 800bac8:	0800cdf3 	.word	0x0800cdf3

0800bacc <_calloc_r>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	fba1 5402 	umull	r5, r4, r1, r2
 800bad2:	b93c      	cbnz	r4, 800bae4 <_calloc_r+0x18>
 800bad4:	4629      	mov	r1, r5
 800bad6:	f7fd fca1 	bl	800941c <_malloc_r>
 800bada:	4606      	mov	r6, r0
 800badc:	b928      	cbnz	r0, 800baea <_calloc_r+0x1e>
 800bade:	2600      	movs	r6, #0
 800bae0:	4630      	mov	r0, r6
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	220c      	movs	r2, #12
 800bae6:	6002      	str	r2, [r0, #0]
 800bae8:	e7f9      	b.n	800bade <_calloc_r+0x12>
 800baea:	462a      	mov	r2, r5
 800baec:	4621      	mov	r1, r4
 800baee:	f7fe faa2 	bl	800a036 <memset>
 800baf2:	e7f5      	b.n	800bae0 <_calloc_r+0x14>

0800baf4 <__ascii_mbtowc>:
 800baf4:	b082      	sub	sp, #8
 800baf6:	b901      	cbnz	r1, 800bafa <__ascii_mbtowc+0x6>
 800baf8:	a901      	add	r1, sp, #4
 800bafa:	b142      	cbz	r2, 800bb0e <__ascii_mbtowc+0x1a>
 800bafc:	b14b      	cbz	r3, 800bb12 <__ascii_mbtowc+0x1e>
 800bafe:	7813      	ldrb	r3, [r2, #0]
 800bb00:	600b      	str	r3, [r1, #0]
 800bb02:	7812      	ldrb	r2, [r2, #0]
 800bb04:	1e10      	subs	r0, r2, #0
 800bb06:	bf18      	it	ne
 800bb08:	2001      	movne	r0, #1
 800bb0a:	b002      	add	sp, #8
 800bb0c:	4770      	bx	lr
 800bb0e:	4610      	mov	r0, r2
 800bb10:	e7fb      	b.n	800bb0a <__ascii_mbtowc+0x16>
 800bb12:	f06f 0001 	mvn.w	r0, #1
 800bb16:	e7f8      	b.n	800bb0a <__ascii_mbtowc+0x16>

0800bb18 <_realloc_r>:
 800bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	4615      	mov	r5, r2
 800bb20:	460c      	mov	r4, r1
 800bb22:	b921      	cbnz	r1, 800bb2e <_realloc_r+0x16>
 800bb24:	4611      	mov	r1, r2
 800bb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	f7fd bc77 	b.w	800941c <_malloc_r>
 800bb2e:	b92a      	cbnz	r2, 800bb3c <_realloc_r+0x24>
 800bb30:	f7ff f9be 	bl	800aeb0 <_free_r>
 800bb34:	2400      	movs	r4, #0
 800bb36:	4620      	mov	r0, r4
 800bb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb3c:	f000 f83a 	bl	800bbb4 <_malloc_usable_size_r>
 800bb40:	4285      	cmp	r5, r0
 800bb42:	4606      	mov	r6, r0
 800bb44:	d802      	bhi.n	800bb4c <_realloc_r+0x34>
 800bb46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb4a:	d8f4      	bhi.n	800bb36 <_realloc_r+0x1e>
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	4640      	mov	r0, r8
 800bb50:	f7fd fc64 	bl	800941c <_malloc_r>
 800bb54:	4607      	mov	r7, r0
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0ec      	beq.n	800bb34 <_realloc_r+0x1c>
 800bb5a:	42b5      	cmp	r5, r6
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	4621      	mov	r1, r4
 800bb60:	bf28      	it	cs
 800bb62:	4632      	movcs	r2, r6
 800bb64:	f7ff ff86 	bl	800ba74 <memcpy>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	f7ff f9a0 	bl	800aeb0 <_free_r>
 800bb70:	463c      	mov	r4, r7
 800bb72:	e7e0      	b.n	800bb36 <_realloc_r+0x1e>

0800bb74 <__ascii_wctomb>:
 800bb74:	4603      	mov	r3, r0
 800bb76:	4608      	mov	r0, r1
 800bb78:	b141      	cbz	r1, 800bb8c <__ascii_wctomb+0x18>
 800bb7a:	2aff      	cmp	r2, #255	@ 0xff
 800bb7c:	d904      	bls.n	800bb88 <__ascii_wctomb+0x14>
 800bb7e:	228a      	movs	r2, #138	@ 0x8a
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	4770      	bx	lr
 800bb88:	2001      	movs	r0, #1
 800bb8a:	700a      	strb	r2, [r1, #0]
 800bb8c:	4770      	bx	lr
	...

0800bb90 <fiprintf>:
 800bb90:	b40e      	push	{r1, r2, r3}
 800bb92:	b503      	push	{r0, r1, lr}
 800bb94:	4601      	mov	r1, r0
 800bb96:	ab03      	add	r3, sp, #12
 800bb98:	4805      	ldr	r0, [pc, #20]	@ (800bbb0 <fiprintf+0x20>)
 800bb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9e:	6800      	ldr	r0, [r0, #0]
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	f000 f837 	bl	800bc14 <_vfiprintf_r>
 800bba6:	b002      	add	sp, #8
 800bba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbac:	b003      	add	sp, #12
 800bbae:	4770      	bx	lr
 800bbb0:	2000001c 	.word	0x2000001c

0800bbb4 <_malloc_usable_size_r>:
 800bbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb8:	1f18      	subs	r0, r3, #4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bfbc      	itt	lt
 800bbbe:	580b      	ldrlt	r3, [r1, r0]
 800bbc0:	18c0      	addlt	r0, r0, r3
 800bbc2:	4770      	bx	lr

0800bbc4 <__sfputc_r>:
 800bbc4:	6893      	ldr	r3, [r2, #8]
 800bbc6:	b410      	push	{r4}
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	6093      	str	r3, [r2, #8]
 800bbce:	da07      	bge.n	800bbe0 <__sfputc_r+0x1c>
 800bbd0:	6994      	ldr	r4, [r2, #24]
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	db01      	blt.n	800bbda <__sfputc_r+0x16>
 800bbd6:	290a      	cmp	r1, #10
 800bbd8:	d102      	bne.n	800bbe0 <__sfputc_r+0x1c>
 800bbda:	bc10      	pop	{r4}
 800bbdc:	f000 b932 	b.w	800be44 <__swbuf_r>
 800bbe0:	6813      	ldr	r3, [r2, #0]
 800bbe2:	1c58      	adds	r0, r3, #1
 800bbe4:	6010      	str	r0, [r2, #0]
 800bbe6:	7019      	strb	r1, [r3, #0]
 800bbe8:	4608      	mov	r0, r1
 800bbea:	bc10      	pop	{r4}
 800bbec:	4770      	bx	lr

0800bbee <__sfputs_r>:
 800bbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	460f      	mov	r7, r1
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	18d5      	adds	r5, r2, r3
 800bbf8:	42ac      	cmp	r4, r5
 800bbfa:	d101      	bne.n	800bc00 <__sfputs_r+0x12>
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	e007      	b.n	800bc10 <__sfputs_r+0x22>
 800bc00:	463a      	mov	r2, r7
 800bc02:	4630      	mov	r0, r6
 800bc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc08:	f7ff ffdc 	bl	800bbc4 <__sfputc_r>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d1f3      	bne.n	800bbf8 <__sfputs_r+0xa>
 800bc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc14 <_vfiprintf_r>:
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	460d      	mov	r5, r1
 800bc1a:	4614      	mov	r4, r2
 800bc1c:	4698      	mov	r8, r3
 800bc1e:	4606      	mov	r6, r0
 800bc20:	b09d      	sub	sp, #116	@ 0x74
 800bc22:	b118      	cbz	r0, 800bc2c <_vfiprintf_r+0x18>
 800bc24:	6a03      	ldr	r3, [r0, #32]
 800bc26:	b90b      	cbnz	r3, 800bc2c <_vfiprintf_r+0x18>
 800bc28:	f7fe f96c 	bl	8009f04 <__sinit>
 800bc2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc2e:	07d9      	lsls	r1, r3, #31
 800bc30:	d405      	bmi.n	800bc3e <_vfiprintf_r+0x2a>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	059a      	lsls	r2, r3, #22
 800bc36:	d402      	bmi.n	800bc3e <_vfiprintf_r+0x2a>
 800bc38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc3a:	f7fe face 	bl	800a1da <__retarget_lock_acquire_recursive>
 800bc3e:	89ab      	ldrh	r3, [r5, #12]
 800bc40:	071b      	lsls	r3, r3, #28
 800bc42:	d501      	bpl.n	800bc48 <_vfiprintf_r+0x34>
 800bc44:	692b      	ldr	r3, [r5, #16]
 800bc46:	b99b      	cbnz	r3, 800bc70 <_vfiprintf_r+0x5c>
 800bc48:	4629      	mov	r1, r5
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f000 f938 	bl	800bec0 <__swsetup_r>
 800bc50:	b170      	cbz	r0, 800bc70 <_vfiprintf_r+0x5c>
 800bc52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc54:	07dc      	lsls	r4, r3, #31
 800bc56:	d504      	bpl.n	800bc62 <_vfiprintf_r+0x4e>
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	b01d      	add	sp, #116	@ 0x74
 800bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	0598      	lsls	r0, r3, #22
 800bc66:	d4f7      	bmi.n	800bc58 <_vfiprintf_r+0x44>
 800bc68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc6a:	f7fe fab7 	bl	800a1dc <__retarget_lock_release_recursive>
 800bc6e:	e7f3      	b.n	800bc58 <_vfiprintf_r+0x44>
 800bc70:	2300      	movs	r3, #0
 800bc72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc74:	2320      	movs	r3, #32
 800bc76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc7a:	2330      	movs	r3, #48	@ 0x30
 800bc7c:	f04f 0901 	mov.w	r9, #1
 800bc80:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800be30 <_vfiprintf_r+0x21c>
 800bc88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	469a      	mov	sl, r3
 800bc90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc94:	b10a      	cbz	r2, 800bc9a <_vfiprintf_r+0x86>
 800bc96:	2a25      	cmp	r2, #37	@ 0x25
 800bc98:	d1f9      	bne.n	800bc8e <_vfiprintf_r+0x7a>
 800bc9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc9e:	d00b      	beq.n	800bcb8 <_vfiprintf_r+0xa4>
 800bca0:	465b      	mov	r3, fp
 800bca2:	4622      	mov	r2, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	4630      	mov	r0, r6
 800bca8:	f7ff ffa1 	bl	800bbee <__sfputs_r>
 800bcac:	3001      	adds	r0, #1
 800bcae:	f000 80a7 	beq.w	800be00 <_vfiprintf_r+0x1ec>
 800bcb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb4:	445a      	add	r2, fp
 800bcb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 809f 	beq.w	800be00 <_vfiprintf_r+0x1ec>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bccc:	f10a 0a01 	add.w	sl, sl, #1
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9307      	str	r3, [sp, #28]
 800bcd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcda:	4654      	mov	r4, sl
 800bcdc:	2205      	movs	r2, #5
 800bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce2:	4853      	ldr	r0, [pc, #332]	@ (800be30 <_vfiprintf_r+0x21c>)
 800bce4:	f7fe fa83 	bl	800a1ee <memchr>
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	b9d8      	cbnz	r0, 800bd24 <_vfiprintf_r+0x110>
 800bcec:	06d1      	lsls	r1, r2, #27
 800bcee:	bf44      	itt	mi
 800bcf0:	2320      	movmi	r3, #32
 800bcf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf6:	0713      	lsls	r3, r2, #28
 800bcf8:	bf44      	itt	mi
 800bcfa:	232b      	movmi	r3, #43	@ 0x2b
 800bcfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd00:	f89a 3000 	ldrb.w	r3, [sl]
 800bd04:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd06:	d015      	beq.n	800bd34 <_vfiprintf_r+0x120>
 800bd08:	4654      	mov	r4, sl
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f04f 0c0a 	mov.w	ip, #10
 800bd10:	9a07      	ldr	r2, [sp, #28]
 800bd12:	4621      	mov	r1, r4
 800bd14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd18:	3b30      	subs	r3, #48	@ 0x30
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d94b      	bls.n	800bdb6 <_vfiprintf_r+0x1a2>
 800bd1e:	b1b0      	cbz	r0, 800bd4e <_vfiprintf_r+0x13a>
 800bd20:	9207      	str	r2, [sp, #28]
 800bd22:	e014      	b.n	800bd4e <_vfiprintf_r+0x13a>
 800bd24:	eba0 0308 	sub.w	r3, r0, r8
 800bd28:	fa09 f303 	lsl.w	r3, r9, r3
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	46a2      	mov	sl, r4
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	e7d2      	b.n	800bcda <_vfiprintf_r+0xc6>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	1d19      	adds	r1, r3, #4
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	9103      	str	r1, [sp, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	bfbb      	ittet	lt
 800bd40:	425b      	neglt	r3, r3
 800bd42:	f042 0202 	orrlt.w	r2, r2, #2
 800bd46:	9307      	strge	r3, [sp, #28]
 800bd48:	9307      	strlt	r3, [sp, #28]
 800bd4a:	bfb8      	it	lt
 800bd4c:	9204      	strlt	r2, [sp, #16]
 800bd4e:	7823      	ldrb	r3, [r4, #0]
 800bd50:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd52:	d10a      	bne.n	800bd6a <_vfiprintf_r+0x156>
 800bd54:	7863      	ldrb	r3, [r4, #1]
 800bd56:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd58:	d132      	bne.n	800bdc0 <_vfiprintf_r+0x1ac>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	3402      	adds	r4, #2
 800bd5e:	1d1a      	adds	r2, r3, #4
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	9203      	str	r2, [sp, #12]
 800bd64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd68:	9305      	str	r3, [sp, #20]
 800bd6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800be34 <_vfiprintf_r+0x220>
 800bd6e:	2203      	movs	r2, #3
 800bd70:	4650      	mov	r0, sl
 800bd72:	7821      	ldrb	r1, [r4, #0]
 800bd74:	f7fe fa3b 	bl	800a1ee <memchr>
 800bd78:	b138      	cbz	r0, 800bd8a <_vfiprintf_r+0x176>
 800bd7a:	2240      	movs	r2, #64	@ 0x40
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	eba0 000a 	sub.w	r0, r0, sl
 800bd82:	4082      	lsls	r2, r0
 800bd84:	4313      	orrs	r3, r2
 800bd86:	3401      	adds	r4, #1
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8e:	2206      	movs	r2, #6
 800bd90:	4829      	ldr	r0, [pc, #164]	@ (800be38 <_vfiprintf_r+0x224>)
 800bd92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd96:	f7fe fa2a 	bl	800a1ee <memchr>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d03f      	beq.n	800be1e <_vfiprintf_r+0x20a>
 800bd9e:	4b27      	ldr	r3, [pc, #156]	@ (800be3c <_vfiprintf_r+0x228>)
 800bda0:	bb1b      	cbnz	r3, 800bdea <_vfiprintf_r+0x1d6>
 800bda2:	9b03      	ldr	r3, [sp, #12]
 800bda4:	3307      	adds	r3, #7
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	3308      	adds	r3, #8
 800bdac:	9303      	str	r3, [sp, #12]
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	443b      	add	r3, r7
 800bdb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb4:	e76a      	b.n	800bc8c <_vfiprintf_r+0x78>
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	2001      	movs	r0, #1
 800bdba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdbe:	e7a8      	b.n	800bd12 <_vfiprintf_r+0xfe>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f04f 0c0a 	mov.w	ip, #10
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	3401      	adds	r4, #1
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd2:	3a30      	subs	r2, #48	@ 0x30
 800bdd4:	2a09      	cmp	r2, #9
 800bdd6:	d903      	bls.n	800bde0 <_vfiprintf_r+0x1cc>
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d0c6      	beq.n	800bd6a <_vfiprintf_r+0x156>
 800bddc:	9105      	str	r1, [sp, #20]
 800bdde:	e7c4      	b.n	800bd6a <_vfiprintf_r+0x156>
 800bde0:	4604      	mov	r4, r0
 800bde2:	2301      	movs	r3, #1
 800bde4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde8:	e7f0      	b.n	800bdcc <_vfiprintf_r+0x1b8>
 800bdea:	ab03      	add	r3, sp, #12
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	462a      	mov	r2, r5
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4b13      	ldr	r3, [pc, #76]	@ (800be40 <_vfiprintf_r+0x22c>)
 800bdf4:	a904      	add	r1, sp, #16
 800bdf6:	f7fd fc3b 	bl	8009670 <_printf_float>
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	1c78      	adds	r0, r7, #1
 800bdfe:	d1d6      	bne.n	800bdae <_vfiprintf_r+0x19a>
 800be00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be02:	07d9      	lsls	r1, r3, #31
 800be04:	d405      	bmi.n	800be12 <_vfiprintf_r+0x1fe>
 800be06:	89ab      	ldrh	r3, [r5, #12]
 800be08:	059a      	lsls	r2, r3, #22
 800be0a:	d402      	bmi.n	800be12 <_vfiprintf_r+0x1fe>
 800be0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be0e:	f7fe f9e5 	bl	800a1dc <__retarget_lock_release_recursive>
 800be12:	89ab      	ldrh	r3, [r5, #12]
 800be14:	065b      	lsls	r3, r3, #25
 800be16:	f53f af1f 	bmi.w	800bc58 <_vfiprintf_r+0x44>
 800be1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be1c:	e71e      	b.n	800bc5c <_vfiprintf_r+0x48>
 800be1e:	ab03      	add	r3, sp, #12
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	462a      	mov	r2, r5
 800be24:	4630      	mov	r0, r6
 800be26:	4b06      	ldr	r3, [pc, #24]	@ (800be40 <_vfiprintf_r+0x22c>)
 800be28:	a904      	add	r1, sp, #16
 800be2a:	f7fd febf 	bl	8009bac <_printf_i>
 800be2e:	e7e4      	b.n	800bdfa <_vfiprintf_r+0x1e6>
 800be30:	0800cdd8 	.word	0x0800cdd8
 800be34:	0800cdde 	.word	0x0800cdde
 800be38:	0800cde2 	.word	0x0800cde2
 800be3c:	08009671 	.word	0x08009671
 800be40:	0800bbef 	.word	0x0800bbef

0800be44 <__swbuf_r>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	460e      	mov	r6, r1
 800be48:	4614      	mov	r4, r2
 800be4a:	4605      	mov	r5, r0
 800be4c:	b118      	cbz	r0, 800be56 <__swbuf_r+0x12>
 800be4e:	6a03      	ldr	r3, [r0, #32]
 800be50:	b90b      	cbnz	r3, 800be56 <__swbuf_r+0x12>
 800be52:	f7fe f857 	bl	8009f04 <__sinit>
 800be56:	69a3      	ldr	r3, [r4, #24]
 800be58:	60a3      	str	r3, [r4, #8]
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	071a      	lsls	r2, r3, #28
 800be5e:	d501      	bpl.n	800be64 <__swbuf_r+0x20>
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	b943      	cbnz	r3, 800be76 <__swbuf_r+0x32>
 800be64:	4621      	mov	r1, r4
 800be66:	4628      	mov	r0, r5
 800be68:	f000 f82a 	bl	800bec0 <__swsetup_r>
 800be6c:	b118      	cbz	r0, 800be76 <__swbuf_r+0x32>
 800be6e:	f04f 37ff 	mov.w	r7, #4294967295
 800be72:	4638      	mov	r0, r7
 800be74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	6922      	ldr	r2, [r4, #16]
 800be7a:	b2f6      	uxtb	r6, r6
 800be7c:	1a98      	subs	r0, r3, r2
 800be7e:	6963      	ldr	r3, [r4, #20]
 800be80:	4637      	mov	r7, r6
 800be82:	4283      	cmp	r3, r0
 800be84:	dc05      	bgt.n	800be92 <__swbuf_r+0x4e>
 800be86:	4621      	mov	r1, r4
 800be88:	4628      	mov	r0, r5
 800be8a:	f7ff fdb1 	bl	800b9f0 <_fflush_r>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d1ed      	bne.n	800be6e <__swbuf_r+0x2a>
 800be92:	68a3      	ldr	r3, [r4, #8]
 800be94:	3b01      	subs	r3, #1
 800be96:	60a3      	str	r3, [r4, #8]
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	6022      	str	r2, [r4, #0]
 800be9e:	701e      	strb	r6, [r3, #0]
 800bea0:	6962      	ldr	r2, [r4, #20]
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d004      	beq.n	800beb2 <__swbuf_r+0x6e>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	07db      	lsls	r3, r3, #31
 800beac:	d5e1      	bpl.n	800be72 <__swbuf_r+0x2e>
 800beae:	2e0a      	cmp	r6, #10
 800beb0:	d1df      	bne.n	800be72 <__swbuf_r+0x2e>
 800beb2:	4621      	mov	r1, r4
 800beb4:	4628      	mov	r0, r5
 800beb6:	f7ff fd9b 	bl	800b9f0 <_fflush_r>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d0d9      	beq.n	800be72 <__swbuf_r+0x2e>
 800bebe:	e7d6      	b.n	800be6e <__swbuf_r+0x2a>

0800bec0 <__swsetup_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4b29      	ldr	r3, [pc, #164]	@ (800bf68 <__swsetup_r+0xa8>)
 800bec4:	4605      	mov	r5, r0
 800bec6:	6818      	ldr	r0, [r3, #0]
 800bec8:	460c      	mov	r4, r1
 800beca:	b118      	cbz	r0, 800bed4 <__swsetup_r+0x14>
 800becc:	6a03      	ldr	r3, [r0, #32]
 800bece:	b90b      	cbnz	r3, 800bed4 <__swsetup_r+0x14>
 800bed0:	f7fe f818 	bl	8009f04 <__sinit>
 800bed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed8:	0719      	lsls	r1, r3, #28
 800beda:	d422      	bmi.n	800bf22 <__swsetup_r+0x62>
 800bedc:	06da      	lsls	r2, r3, #27
 800bede:	d407      	bmi.n	800bef0 <__swsetup_r+0x30>
 800bee0:	2209      	movs	r2, #9
 800bee2:	602a      	str	r2, [r5, #0]
 800bee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295
 800beec:	81a3      	strh	r3, [r4, #12]
 800beee:	e033      	b.n	800bf58 <__swsetup_r+0x98>
 800bef0:	0758      	lsls	r0, r3, #29
 800bef2:	d512      	bpl.n	800bf1a <__swsetup_r+0x5a>
 800bef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bef6:	b141      	cbz	r1, 800bf0a <__swsetup_r+0x4a>
 800bef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800befc:	4299      	cmp	r1, r3
 800befe:	d002      	beq.n	800bf06 <__swsetup_r+0x46>
 800bf00:	4628      	mov	r0, r5
 800bf02:	f7fe ffd5 	bl	800aeb0 <_free_r>
 800bf06:	2300      	movs	r3, #0
 800bf08:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	2300      	movs	r3, #0
 800bf14:	6063      	str	r3, [r4, #4]
 800bf16:	6923      	ldr	r3, [r4, #16]
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f043 0308 	orr.w	r3, r3, #8
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	6923      	ldr	r3, [r4, #16]
 800bf24:	b94b      	cbnz	r3, 800bf3a <__swsetup_r+0x7a>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf30:	d003      	beq.n	800bf3a <__swsetup_r+0x7a>
 800bf32:	4621      	mov	r1, r4
 800bf34:	4628      	mov	r0, r5
 800bf36:	f000 f83e 	bl	800bfb6 <__smakebuf_r>
 800bf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3e:	f013 0201 	ands.w	r2, r3, #1
 800bf42:	d00a      	beq.n	800bf5a <__swsetup_r+0x9a>
 800bf44:	2200      	movs	r2, #0
 800bf46:	60a2      	str	r2, [r4, #8]
 800bf48:	6962      	ldr	r2, [r4, #20]
 800bf4a:	4252      	negs	r2, r2
 800bf4c:	61a2      	str	r2, [r4, #24]
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	b942      	cbnz	r2, 800bf64 <__swsetup_r+0xa4>
 800bf52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf56:	d1c5      	bne.n	800bee4 <__swsetup_r+0x24>
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
 800bf5a:	0799      	lsls	r1, r3, #30
 800bf5c:	bf58      	it	pl
 800bf5e:	6962      	ldrpl	r2, [r4, #20]
 800bf60:	60a2      	str	r2, [r4, #8]
 800bf62:	e7f4      	b.n	800bf4e <__swsetup_r+0x8e>
 800bf64:	2000      	movs	r0, #0
 800bf66:	e7f7      	b.n	800bf58 <__swsetup_r+0x98>
 800bf68:	2000001c 	.word	0x2000001c

0800bf6c <__swhatbuf_r>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	460c      	mov	r4, r1
 800bf70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf74:	4615      	mov	r5, r2
 800bf76:	2900      	cmp	r1, #0
 800bf78:	461e      	mov	r6, r3
 800bf7a:	b096      	sub	sp, #88	@ 0x58
 800bf7c:	da0c      	bge.n	800bf98 <__swhatbuf_r+0x2c>
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	2100      	movs	r1, #0
 800bf82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf86:	bf14      	ite	ne
 800bf88:	2340      	movne	r3, #64	@ 0x40
 800bf8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf8e:	2000      	movs	r0, #0
 800bf90:	6031      	str	r1, [r6, #0]
 800bf92:	602b      	str	r3, [r5, #0]
 800bf94:	b016      	add	sp, #88	@ 0x58
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	466a      	mov	r2, sp
 800bf9a:	f000 f849 	bl	800c030 <_fstat_r>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	dbed      	blt.n	800bf7e <__swhatbuf_r+0x12>
 800bfa2:	9901      	ldr	r1, [sp, #4]
 800bfa4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfa8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfac:	4259      	negs	r1, r3
 800bfae:	4159      	adcs	r1, r3
 800bfb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfb4:	e7eb      	b.n	800bf8e <__swhatbuf_r+0x22>

0800bfb6 <__smakebuf_r>:
 800bfb6:	898b      	ldrh	r3, [r1, #12]
 800bfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfba:	079d      	lsls	r5, r3, #30
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	d507      	bpl.n	800bfd2 <__smakebuf_r+0x1c>
 800bfc2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfc6:	6023      	str	r3, [r4, #0]
 800bfc8:	6123      	str	r3, [r4, #16]
 800bfca:	2301      	movs	r3, #1
 800bfcc:	6163      	str	r3, [r4, #20]
 800bfce:	b003      	add	sp, #12
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd2:	466a      	mov	r2, sp
 800bfd4:	ab01      	add	r3, sp, #4
 800bfd6:	f7ff ffc9 	bl	800bf6c <__swhatbuf_r>
 800bfda:	9f00      	ldr	r7, [sp, #0]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	4639      	mov	r1, r7
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f7fd fa1b 	bl	800941c <_malloc_r>
 800bfe6:	b948      	cbnz	r0, 800bffc <__smakebuf_r+0x46>
 800bfe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfec:	059a      	lsls	r2, r3, #22
 800bfee:	d4ee      	bmi.n	800bfce <__smakebuf_r+0x18>
 800bff0:	f023 0303 	bic.w	r3, r3, #3
 800bff4:	f043 0302 	orr.w	r3, r3, #2
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	e7e2      	b.n	800bfc2 <__smakebuf_r+0xc>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c006:	81a3      	strh	r3, [r4, #12]
 800c008:	9b01      	ldr	r3, [sp, #4]
 800c00a:	6020      	str	r0, [r4, #0]
 800c00c:	b15b      	cbz	r3, 800c026 <__smakebuf_r+0x70>
 800c00e:	4630      	mov	r0, r6
 800c010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c014:	f000 f81e 	bl	800c054 <_isatty_r>
 800c018:	b128      	cbz	r0, 800c026 <__smakebuf_r+0x70>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f023 0303 	bic.w	r3, r3, #3
 800c020:	f043 0301 	orr.w	r3, r3, #1
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	431d      	orrs	r5, r3
 800c02a:	81a5      	strh	r5, [r4, #12]
 800c02c:	e7cf      	b.n	800bfce <__smakebuf_r+0x18>
	...

0800c030 <_fstat_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	2300      	movs	r3, #0
 800c034:	4d06      	ldr	r5, [pc, #24]	@ (800c050 <_fstat_r+0x20>)
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	4611      	mov	r1, r2
 800c03c:	602b      	str	r3, [r5, #0]
 800c03e:	f7fb f8fd 	bl	800723c <_fstat>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d102      	bne.n	800c04c <_fstat_r+0x1c>
 800c046:	682b      	ldr	r3, [r5, #0]
 800c048:	b103      	cbz	r3, 800c04c <_fstat_r+0x1c>
 800c04a:	6023      	str	r3, [r4, #0]
 800c04c:	bd38      	pop	{r3, r4, r5, pc}
 800c04e:	bf00      	nop
 800c050:	20000580 	.word	0x20000580

0800c054 <_isatty_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	2300      	movs	r3, #0
 800c058:	4d05      	ldr	r5, [pc, #20]	@ (800c070 <_isatty_r+0x1c>)
 800c05a:	4604      	mov	r4, r0
 800c05c:	4608      	mov	r0, r1
 800c05e:	602b      	str	r3, [r5, #0]
 800c060:	f7fb f8f1 	bl	8007246 <_isatty>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	d102      	bne.n	800c06e <_isatty_r+0x1a>
 800c068:	682b      	ldr	r3, [r5, #0]
 800c06a:	b103      	cbz	r3, 800c06e <_isatty_r+0x1a>
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
 800c070:	20000580 	.word	0x20000580

0800c074 <_init>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr

0800c080 <_fini>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr

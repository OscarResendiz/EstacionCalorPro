
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08006360  08006360  00007360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006830  08006830  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006830  08006830  00007830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08006838  08006838  00007838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006840  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  08006a14  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006a14  00008478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c1  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002668  00000000  00000000  000124be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00014b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000721  00000000  00000000  000154b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aca  00000000  00000000  00015bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd79  00000000  00000000  0002f69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfb0  00000000  00000000  0003c414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c83c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000c8408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cba7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006344 	.word	0x08006344

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006344 	.word	0x08006344

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <_ZN15CManejadorBotonC1Ev+0x38>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	08006478 	.word	0x08006478

08000e48 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	08006478 	.word	0x08006478

08000e68 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
}
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ffe9 	bl	8000e48 <_ZN15CManejadorBotonD1Ev>
 8000e76:	2120      	movs	r1, #32
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f002 fc03 	bl	8003684 <_ZdlPvj>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,
		uint8_t identificador)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	460b      	mov	r3, r1
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	797a      	ldrb	r2, [r7, #5]
 8000eae:	729a      	strb	r2, [r3, #10]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	891b      	ldrh	r3, [r3, #8]
 8000ed4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f107 0208 	add.w	r2, r7, #8
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fc37 	bl	800275c <HAL_GPIO_Init>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	891b      	ldrh	r3, [r3, #8]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f001 fdab 	bl	8002a64 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0

}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	08006488 	.word	0x08006488

08000f38 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	08006488 	.word	0x08006488

08000f58 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
}
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffe9 	bl	8000f38 <_ZN20ControlVelocidadAireD1Ev>
 8000f66:	2134      	movs	r1, #52	@ 0x34
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f002 fb8b 	bl	8003684 <_ZdlPvj>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	 ADC_ChannelConfTypeDef sConfig = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a23      	ldr	r2, [pc, #140]	@ (800101c <_ZN20ControlVelocidadAire10InicializaEv+0xa4>)
 8000f90:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000faa:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
	 hadc1.Init.NbrOfConversion = 1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 ffc3 	bl	8001f48 <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <_ZN20ControlVelocidadAire10InicializaEv+0x60>
	 {
	 Error_Handler();
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f840 	bl	8001058 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	f107 020c 	add.w	r2, r7, #12
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f93c 	bl	800226c <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf14      	ite	ne
 8000ffa:	2301      	movne	r3, #1
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <_ZN20ControlVelocidadAire10InicializaEv+0x92>
	 {
	 Error_Handler();
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f827 	bl	8001058 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f001 f872 	bl	80020f8 <HAL_ADC_Start>
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40012400 	.word	0x40012400

08001020 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3304      	adds	r3, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f911 	bl	8002254 <HAL_ADC_GetValue>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	(int)(valor*100/4095);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2264      	movs	r2, #100	@ 0x64
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x34>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	441a      	add	r2, r3
 8001046:	12d2      	asrs	r2, r2, #11
 8001048:	17db      	asrs	r3, r3, #31
 800104a:	1ad3      	subs	r3, r2, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	80080081 	.word	0x80080081

08001058 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
	...

0800106c <_Z17delay_us_dwt_initv>:


#if __CORTEX_M !=0

void delay_us_dwt_init()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <_Z17delay_us_dwt_initv+0x34>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <_Z17delay_us_dwt_initv+0x34>)
 8001076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800107a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <_Z17delay_us_dwt_initv+0x38>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <_Z17delay_us_dwt_initv+0x38>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]
    pasos=( HAL_RCC_GetHCLKFreq()/1000000);//le el cristal pasa a us
 8001088:	f002 f8dc 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 800108c:	4603      	mov	r3, r0
 800108e:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <_Z17delay_us_dwt_initv+0x3c>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <_Z17delay_us_dwt_initv+0x40>)
 8001098:	6013      	str	r3, [r2, #0]

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000edf0 	.word	0xe000edf0
 80010a4:	e0001000 	.word	0xe0001000
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	200001f0 	.word	0x200001f0

080010b0 <_Z12delay_us_dwtm>:

//retardo por debbuger
void delay_us_dwt(uint32_t reta)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

DWT->CYCCNT=0;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <_Z12delay_us_dwtm+0x38>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
while( DWT->CYCCNT<=pasos*reta);//multiplica por us
 80010be:	bf00      	nop
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <_Z12delay_us_dwtm+0x38>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <_Z12delay_us_dwtm+0x3c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	429a      	cmp	r2, r3
 80010d0:	bf94      	ite	ls
 80010d2:	2301      	movls	r3, #1
 80010d4:	2300      	movhi	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f1      	bne.n	80010c0 <_Z12delay_us_dwtm+0x10>
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e0001000 	.word	0xe0001000
 80010ec:	200001f0 	.word	0x200001f0

080010f0 <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */


#include "Max6675/Max6675.hpp"
MAX6675::MAX6675()
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
{

}
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef * portDat,uint16_t pinDat)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	4613      	mov	r3, r2
 8001110:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port=portDat;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin=pinDat;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	819a      	strh	r2, [r3, #12]

}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef * portCk,uint16_t pinCk)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	4613      	mov	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port=portCk;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin=pinCk;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	81da      	strh	r2, [r3, #14]

}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef * portCs,uint16_t pinCs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	4613      	mov	r3, r2
 8001158:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port=portCs;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin=pinCs;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	821a      	strh	r2, [r3, #16]

}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <_ZN7MAX667512MAX6675_initEv>:

void MAX6675::MAX6675_init()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,GPIO_PinState::GPIO_PIN_RESET);//SACA UN 0 reloj
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6858      	ldr	r0, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	89db      	ldrh	r3, [r3, #14]
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	f001 fc85 	bl	8002a92 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	8a1b      	ldrh	r3, [r3, #16]
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f001 fc7d 	bl	8002a92 <HAL_GPIO_WritePin>
	   HAL_Delay(100);
 8001198:	2064      	movs	r0, #100	@ 0x64
 800119a:	f000 feb1 	bl	8001f00 <HAL_Delay>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN7MAX667513MAX6675_pulsoEv>:


uint8_t MAX6675::MAX6675_pulso()
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,GPIO_PinState::GPIO_PIN_SET);//SACA UN 1 reloj
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6858      	ldr	r0, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	89db      	ldrh	r3, [r3, #14]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	f001 fc6a 	bl	8002a92 <HAL_GPIO_WritePin>
	Delay_us(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f7ff ff76 	bl	80010b0 <_Z12delay_us_dwtm>
	lei=HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin);// lee el pin
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	899b      	ldrh	r3, [r3, #12]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f001 fc48 	bl	8002a64 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,GPIO_PinState::GPIO_PIN_RESET);//SACA UN 0 reloj
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6858      	ldr	r0, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	89db      	ldrh	r3, [r3, #14]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 fc55 	bl	8002a92 <HAL_GPIO_WritePin>
	Delay_us(10);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f7ff ff61 	bl	80010b0 <_Z12delay_us_dwtm>
	return lei;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN7MAX667511MAX6675_leeEv>:

float MAX6675::MAX6675_lee()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	uint16_t sensor_dato;
	uint16_t max6675_dato=0;
 8001200:	2300      	movs	r3, #0
 8001202:	81fb      	strh	r3, [r7, #14]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6898      	ldr	r0, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	8a1b      	ldrh	r3, [r3, #16]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f001 fc3f 	bl	8002a92 <HAL_GPIO_WritePin>
   for (cont=15;cont>=0;cont--)
 8001214:	230f      	movs	r3, #15
 8001216:	737b      	strb	r3, [r7, #13]
 8001218:	e01b      	b.n	8001252 <_ZN7MAX667511MAX6675_leeEv+0x5a>
   {
      if (MAX6675_pulso()==1)  max6675_dato=max6675_dato | 1<<cont ;
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffc3 	bl	80011a6 <_ZN7MAX667513MAX6675_pulsoEv>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00a      	beq.n	8001246 <_ZN7MAX667511MAX6675_leeEv+0x4e>
 8001230:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001234:	2201      	movs	r2, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	b21a      	sxth	r2, r3
 800123c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	81fb      	strh	r3, [r7, #14]
   for (cont=15;cont>=0;cont--)
 8001246:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	737b      	strb	r3, [r7, #13]
 8001252:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001256:	2b00      	cmp	r3, #0
 8001258:	dadf      	bge.n	800121a <_ZN7MAX667511MAX6675_leeEv+0x22>

   }

   HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6898      	ldr	r0, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	8a1b      	ldrh	r3, [r3, #16]
 8001262:	2201      	movs	r2, #1
 8001264:	4619      	mov	r1, r3
 8001266:	f001 fc14 	bl	8002a92 <HAL_GPIO_WritePin>
    sensor_dato=(max6675_dato>>3 ); //desplaz 3 veces
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	08db      	lsrs	r3, r3, #3
 800126e:	817b      	strh	r3, [r7, #10]
    return(((float)sensor_dato*0.25));
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd72 	bl	8000d5c <__aeabi_ui2f>
 8001278:	4603      	mov	r3, r0
 800127a:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ff6e 	bl	8000160 <__aeabi_fmul>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin|CS_MAX_Pin, GPIO_PIN_RESET);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	89da      	ldrh	r2, [r3, #14]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	8a1b      	ldrh	r3, [r3, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4816      	ldr	r0, [pc, #88]	@ (8001310 <_ZN7MAX66754InitEv+0x80>)
 80012b8:	f001 fbeb 	bl	8002a92 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : DAT_MAX_Pin */
	  GPIO_InitStruct.Pin = DAT_MAX_Pin;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	899b      	ldrh	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f107 0208 	add.w	r2, r7, #8
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fa41 	bl	800275c <HAL_GPIO_Init>
	  /*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	  GPIO_InitStruct.Pin = CK_MAX_Pin|CS_MAX_Pin;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	89da      	ldrh	r2, [r3, #14]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8a1b      	ldrh	r3, [r3, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <_ZN7MAX66754InitEv+0x80>)
 80012fc:	f001 fa2e 	bl	800275c <HAL_GPIO_Init>
	  MAX6675_init();
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff35 	bl	8001170 <_ZN7MAX667512MAX6675_initEv>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40010800 	.word	0x40010800

08001314 <_Z11uartx_writec>:
#include "string.h"
#include "stm32f1xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 800131e:	1df9      	adds	r1, r7, #7
 8001320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001324:	2201      	movs	r2, #1
 8001326:	4803      	ldr	r0, [pc, #12]	@ (8001334 <_Z11uartx_writec+0x20>)
 8001328:	f002 f82c 	bl	8003384 <HAL_UART_Transmit>

}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001f4 	.word	0x200001f4

08001338 <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 8001340:	e006      	b.n	8001350 <_Z16uartx_write_textPc+0x18>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffe2 	bl	8001314 <_Z11uartx_writec>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f4      	bne.n	8001342 <_Z16uartx_write_textPc+0xa>

}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <_Z16USART1_UART_Initv+0x58>)
 800136c:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 800139a:	4807      	ldr	r0, [pc, #28]	@ (80013b8 <_Z16USART1_UART_Initv+0x54>)
 800139c:	f001 ffa2 	bl	80032e4 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 80013b0:	f000 f806 	bl	80013c0 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001f4 	.word	0x200001f4
 80013bc:	40013800 	.word	0x40013800

080013c0 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <_Z12ErrorHandlerv+0x8>

080013cc <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char *formato, ...)
{
 80013cc:	b40f      	push	{r0, r1, r2, r3}
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b0be      	sub	sp, #248	@ 0xf8
 80013d2:	af00      	add	r7, sp, #0
    char buffer[100];
//    for(int i=0;i<100;i++)
  //  	buffer[i]='\0';

    char formatoFlotante[20];
    int posisionFormato=0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    float a;
    va_start(pa, formato);
 80013ec:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80013f0:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 80013f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80013f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013fa:	e136      	b.n	800166a <_Z12SerialPrintfPcz+0x29e>
    {

      if (*p != '%')
 80013fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b25      	cmp	r3, #37	@ 0x25
 8001404:	d00f      	beq.n	8001426 <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 8001406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800140a:	7819      	ldrb	r1, [r3, #0]
 800140c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001414:	4413      	add	r3, r2
 8001416:	460a      	mov	r2, r1
 8001418:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 800141a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 8001424:	e11c      	b.n	8001660 <_Z12SerialPrintfPcz+0x294>
      }
      encontrado=0;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 800142c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001430:	3301      	adds	r3, #1
 8001432:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b2e      	cmp	r3, #46	@ 0x2e
 800143e:	f000 8096 	beq.w	800156e <_Z12SerialPrintfPcz+0x1a2>
 8001442:	2b2e      	cmp	r3, #46	@ 0x2e
 8001444:	f2c0 80d5 	blt.w	80015f2 <_Z12SerialPrintfPcz+0x226>
 8001448:	2b78      	cmp	r3, #120	@ 0x78
 800144a:	f300 80d2 	bgt.w	80015f2 <_Z12SerialPrintfPcz+0x226>
 800144e:	2b63      	cmp	r3, #99	@ 0x63
 8001450:	f2c0 80cf 	blt.w	80015f2 <_Z12SerialPrintfPcz+0x226>
 8001454:	3b63      	subs	r3, #99	@ 0x63
 8001456:	2b15      	cmp	r3, #21
 8001458:	f200 80cb 	bhi.w	80015f2 <_Z12SerialPrintfPcz+0x226>
 800145c:	a201      	add	r2, pc, #4	@ (adr r2, 8001464 <_Z12SerialPrintfPcz+0x98>)
 800145e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001462:	bf00      	nop
 8001464:	0800152d 	.word	0x0800152d
 8001468:	080014bd 	.word	0x080014bd
 800146c:	080015f3 	.word	0x080015f3
 8001470:	0800152f 	.word	0x0800152f
 8001474:	080015f3 	.word	0x080015f3
 8001478:	080015f3 	.word	0x080015f3
 800147c:	080014d9 	.word	0x080014d9
 8001480:	080015f3 	.word	0x080015f3
 8001484:	080015f3 	.word	0x080015f3
 8001488:	080015f3 	.word	0x080015f3
 800148c:	080015f3 	.word	0x080015f3
 8001490:	080015f3 	.word	0x080015f3
 8001494:	080015f3 	.word	0x080015f3
 8001498:	08001511 	.word	0x08001511
 800149c:	080015f3 	.word	0x080015f3
 80014a0:	080015f3 	.word	0x080015f3
 80014a4:	08001553 	.word	0x08001553
 80014a8:	080015f3 	.word	0x080015f3
 80014ac:	080015f3 	.word	0x080015f3
 80014b0:	080015f3 	.word	0x080015f3
 80014b4:	080015f3 	.word	0x080015f3
 80014b8:	080014f5 	.word	0x080014f5
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	1d1a      	adds	r2, r3, #4
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4974      	ldr	r1, [pc, #464]	@ (800169c <_Z12SerialPrintfPcz+0x2d0>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fec2 	bl	8004254 <siprintf>
          encontrado=1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80014d6:	e09c      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	1d1a      	adds	r2, r3, #4
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	496e      	ldr	r1, [pc, #440]	@ (80016a0 <_Z12SerialPrintfPcz+0x2d4>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 feb4 	bl	8004254 <siprintf>
          encontrado=1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80014f2:	e08e      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	1d1a      	adds	r2, r3, #4
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4968      	ldr	r1, [pc, #416]	@ (80016a4 <_Z12SerialPrintfPcz+0x2d8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fea6 	bl	8004254 <siprintf>
          encontrado=1;
 8001508:	2301      	movs	r3, #1
 800150a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800150e:	e080      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, int));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1d1a      	adds	r2, r3, #4
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4962      	ldr	r1, [pc, #392]	@ (80016a8 <_Z12SerialPrintfPcz+0x2dc>)
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fe98 	bl	8004254 <siprintf>
          encontrado=1;
 8001524:	2301      	movs	r3, #1
 8001526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800152a:	e072      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, char));
 800152c:	deff      	udf	#255	@ 0xff
          encontrado=1;
          break;
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3307      	adds	r3, #7
 8001532:	f023 0307 	bic.w	r3, r3, #7
 8001536:	f103 0208 	add.w	r2, r3, #8
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f107 0008 	add.w	r0, r7, #8
 8001544:	4959      	ldr	r1, [pc, #356]	@ (80016ac <_Z12SerialPrintfPcz+0x2e0>)
 8001546:	f002 fe85 	bl	8004254 <siprintf>
          encontrado=1;
 800154a:	2301      	movs	r3, #1
 800154c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 8001550:	e05f      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1d1a      	adds	r2, r3, #4
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4954      	ldr	r1, [pc, #336]	@ (80016b0 <_Z12SerialPrintfPcz+0x2e4>)
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fe77 	bl	8004254 <siprintf>
          encontrado=1;
 8001566:	2301      	movs	r3, #1
 8001568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800156c:	e051      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 800156e:	2325      	movs	r3, #37	@ 0x25
 8001570:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 8001574:	2301      	movs	r3, #1
 8001576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800157a:	e013      	b.n	80015a4 <_Z12SerialPrintfPcz+0x1d8>
        	{
        		formatoFlotante[posisionFormato]=*p;
 800157c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001580:	7819      	ldrb	r1, [r3, #0]
 8001582:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001586:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800158a:	4413      	add	r3, r2
 800158c:	460a      	mov	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
        		p++;
 8001590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 800159a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800159e:	3301      	adds	r3, #1
 80015a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 80015a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b66      	cmp	r3, #102	@ 0x66
 80015ac:	d1e6      	bne.n	800157c <_Z12SerialPrintfPcz+0x1b0>
        	}
        	formatoFlotante[posisionFormato]='f';
 80015ae:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80015b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80015b6:	4413      	add	r3, r2
 80015b8:	2266      	movs	r2, #102	@ 0x66
 80015ba:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 80015bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80015c0:	3301      	adds	r3, #1
 80015c2:	33f8      	adds	r3, #248	@ 0xf8
 80015c4:	443b      	add	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3307      	adds	r3, #7
 80015d0:	f023 0307 	bic.w	r3, r3, #7
 80015d4:	f103 0208 	add.w	r2, r3, #8
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80015e2:	f107 0008 	add.w	r0, r7, #8
 80015e6:	f002 fe35 	bl	8004254 <siprintf>
            encontrado=1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 80015f0:	e00f      	b.n	8001612 <_Z12SerialPrintfPcz+0x246>
        default:
          buffer[posbuffer] = *p;
 80015f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80015f6:	7819      	ldrb	r1, [r3, #0]
 80015f8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80015fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001600:	4413      	add	r3, r2
 8001602:	460a      	mov	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 8001606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800160a:	3301      	adds	r3, #1
 800160c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 8001610:	bf00      	nop
      }
      if(encontrado==1)
 8001612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001616:	2b01      	cmp	r3, #1
 8001618:	d122      	bne.n	8001660 <_Z12SerialPrintfPcz+0x294>
      {
          postmp=0;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 8001620:	e016      	b.n	8001650 <_Z12SerialPrintfPcz+0x284>
          {
          buffer[posbuffer] = tmp[postmp];
 8001622:	f107 0208 	add.w	r2, r7, #8
 8001626:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800162a:	4413      	add	r3, r2
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001636:	4413      	add	r3, r2
 8001638:	460a      	mov	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800163c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001640:	3301      	adds	r3, #1
 8001642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 8001646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800164a:	3301      	adds	r3, #1
 800164c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e0      	bne.n	8001622 <_Z12SerialPrintfPcz+0x256>
    for (p = formato; *p; p++)
 8001660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001664:	3301      	adds	r3, #1
 8001666:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800166a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f47f aec3 	bne.w	80013fc <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 8001676:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800167a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800167e:	4413      	add	r3, r2
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 8001684:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe55 	bl	8001338 <_Z16uartx_write_textPc>
}
 800168e:	bf00      	nop
 8001690:	37f8      	adds	r7, #248	@ 0xf8
 8001692:	46bd      	mov	sp, r7
 8001694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001698:	b004      	add	sp, #16
 800169a:	4770      	bx	lr
 800169c:	08006360 	.word	0x08006360
 80016a0:	08006364 	.word	0x08006364
 80016a4:	08006368 	.word	0x08006368
 80016a8:	0800636c 	.word	0x0800636c
 80016ac:	08006370 	.word	0x08006370
 80016b0:	08006374 	.word	0x08006374

080016b4 <_Z16IncializaSistemav>:
CManejadorBoton boton2;
CManejadorBoton boton3;
CManejadorBoton boton4;
CManejadorBoton botonEncoder;
void IncializaSistema()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	USART1_UART_Init();
 80016b8:	f7ff fe54 	bl	8001364 <_Z16USART1_UART_Initv>
	  max6675.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 80016bc:	2202      	movs	r2, #2
 80016be:	4923      	ldr	r1, [pc, #140]	@ (800174c <_Z16IncializaSistemav+0x98>)
 80016c0:	4823      	ldr	r0, [pc, #140]	@ (8001750 <_Z16IncializaSistemav+0x9c>)
 80016c2:	f7ff fd31 	bl	8001128 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	  max6675.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 80016c6:	2204      	movs	r2, #4
 80016c8:	4920      	ldr	r1, [pc, #128]	@ (800174c <_Z16IncializaSistemav+0x98>)
 80016ca:	4821      	ldr	r0, [pc, #132]	@ (8001750 <_Z16IncializaSistemav+0x9c>)
 80016cc:	f7ff fd3e 	bl	800114c <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	  max6675.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 80016d0:	2201      	movs	r2, #1
 80016d2:	491e      	ldr	r1, [pc, #120]	@ (800174c <_Z16IncializaSistemav+0x98>)
 80016d4:	481e      	ldr	r0, [pc, #120]	@ (8001750 <_Z16IncializaSistemav+0x9c>)
 80016d6:	f7ff fd15 	bl	8001104 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	  max6675.Init();
 80016da:	481d      	ldr	r0, [pc, #116]	@ (8001750 <_Z16IncializaSistemav+0x9c>)
 80016dc:	f7ff fdd8 	bl	8001290 <_ZN7MAX66754InitEv>
	  controlVelocidadAire.Inicializa();
 80016e0:	481c      	ldr	r0, [pc, #112]	@ (8001754 <_Z16IncializaSistemav+0xa0>)
 80016e2:	f7ff fc49 	bl	8000f78 <_ZN20ControlVelocidadAire10InicializaEv>
	  boton1.Configurar(GPIOA, GPIO_PIN_4,1);
 80016e6:	2301      	movs	r3, #1
 80016e8:	2210      	movs	r2, #16
 80016ea:	4918      	ldr	r1, [pc, #96]	@ (800174c <_Z16IncializaSistemav+0x98>)
 80016ec:	481a      	ldr	r0, [pc, #104]	@ (8001758 <_Z16IncializaSistemav+0xa4>)
 80016ee:	f7ff fbcb 	bl	8000e88 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	  boton1.Init();
 80016f2:	4819      	ldr	r0, [pc, #100]	@ (8001758 <_Z16IncializaSistemav+0xa4>)
 80016f4:	f7ff fbe1 	bl	8000eba <_ZN15CManejadorBoton4InitEv>

	  boton2.Configurar(GPIOA, GPIO_PIN_6,2);
 80016f8:	2302      	movs	r3, #2
 80016fa:	2240      	movs	r2, #64	@ 0x40
 80016fc:	4913      	ldr	r1, [pc, #76]	@ (800174c <_Z16IncializaSistemav+0x98>)
 80016fe:	4817      	ldr	r0, [pc, #92]	@ (800175c <_Z16IncializaSistemav+0xa8>)
 8001700:	f7ff fbc2 	bl	8000e88 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	  boton2.Init();
 8001704:	4815      	ldr	r0, [pc, #84]	@ (800175c <_Z16IncializaSistemav+0xa8>)
 8001706:	f7ff fbd8 	bl	8000eba <_ZN15CManejadorBoton4InitEv>

	  boton3.Configurar(GPIOB, GPIO_PIN_10,3);
 800170a:	2303      	movs	r3, #3
 800170c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001710:	4913      	ldr	r1, [pc, #76]	@ (8001760 <_Z16IncializaSistemav+0xac>)
 8001712:	4814      	ldr	r0, [pc, #80]	@ (8001764 <_Z16IncializaSistemav+0xb0>)
 8001714:	f7ff fbb8 	bl	8000e88 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	  boton3.Init();
 8001718:	4812      	ldr	r0, [pc, #72]	@ (8001764 <_Z16IncializaSistemav+0xb0>)
 800171a:	f7ff fbce 	bl	8000eba <_ZN15CManejadorBoton4InitEv>

	  boton4.Configurar(GPIOB, GPIO_PIN_14,4);
 800171e:	2304      	movs	r3, #4
 8001720:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <_Z16IncializaSistemav+0xac>)
 8001726:	4810      	ldr	r0, [pc, #64]	@ (8001768 <_Z16IncializaSistemav+0xb4>)
 8001728:	f7ff fbae 	bl	8000e88 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	  boton4.Init();
 800172c:	480e      	ldr	r0, [pc, #56]	@ (8001768 <_Z16IncializaSistemav+0xb4>)
 800172e:	f7ff fbc4 	bl	8000eba <_ZN15CManejadorBoton4InitEv>

	  botonEncoder.Configurar(GPIOB, GPIO_PIN_13,5);
 8001732:	2305      	movs	r3, #5
 8001734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001738:	4909      	ldr	r1, [pc, #36]	@ (8001760 <_Z16IncializaSistemav+0xac>)
 800173a:	480c      	ldr	r0, [pc, #48]	@ (800176c <_Z16IncializaSistemav+0xb8>)
 800173c:	f7ff fba4 	bl	8000e88 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	  botonEncoder.Init();
 8001740:	480a      	ldr	r0, [pc, #40]	@ (800176c <_Z16IncializaSistemav+0xb8>)
 8001742:	f7ff fbba 	bl	8000eba <_ZN15CManejadorBoton4InitEv>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40010800 	.word	0x40010800
 8001750:	20000270 	.word	0x20000270
 8001754:	2000023c 	.word	0x2000023c
 8001758:	20000284 	.word	0x20000284
 800175c:	200002a4 	.word	0x200002a4
 8001760:	40010c00 	.word	0x40010c00
 8001764:	200002c4 	.word	0x200002c4
 8001768:	200002e4 	.word	0x200002e4
 800176c:	20000304 	.word	0x20000304

08001770 <_Z14EjecutaSistemav>:
void EjecutaSistema()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09c      	sub	sp, #112	@ 0x70
 8001774:	af00      	add	r7, sp, #0
	float temperatura;
	char texto[100];
	int x=0;
 8001776:	2300      	movs	r3, #0
 8001778:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int velocidadAire=0;
 800177a:	2300      	movs	r3, #0
 800177c:	66bb      	str	r3, [r7, #104]	@ 0x68
	  while (1)
	  {
		  temperatura=max6675.MAX6675_lee();
 800177e:	483d      	ldr	r0, [pc, #244]	@ (8001874 <_Z14EjecutaSistemav+0x104>)
 8001780:	f7ff fd3a 	bl	80011f8 <_ZN7MAX667511MAX6675_leeEv>
 8001784:	6678      	str	r0, [r7, #100]	@ 0x64
		  SerialPrintf((char*)"temperatura %.2f \n\r",temperatura);
 8001786:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001788:	f7fe ff02 	bl	8000590 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4839      	ldr	r0, [pc, #228]	@ (8001878 <_Z14EjecutaSistemav+0x108>)
 8001792:	f7ff fe1b 	bl	80013cc <_Z12SerialPrintfPcz>
		  velocidadAire=controlVelocidadAire.LeeVelocidad();
 8001796:	4839      	ldr	r0, [pc, #228]	@ (800187c <_Z14EjecutaSistemav+0x10c>)
 8001798:	f7ff fc42 	bl	8001020 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 800179c:	66b8      	str	r0, [r7, #104]	@ 0x68
		  SerialPrintf("Velicidad de aire: %d \n\r",velocidadAire);
 800179e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80017a0:	4837      	ldr	r0, [pc, #220]	@ (8001880 <_Z14EjecutaSistemav+0x110>)
 80017a2:	f7ff fe13 	bl	80013cc <_Z12SerialPrintfPcz>

		  if(boton1.Leer()==0)
 80017a6:	4837      	ldr	r0, [pc, #220]	@ (8001884 <_Z14EjecutaSistemav+0x114>)
 80017a8:	f7ff fba5 	bl	8000ef6 <_ZN15CManejadorBoton4LeerEv>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <_Z14EjecutaSistemav+0x54>
			   SerialPrintf("Boton1 Presionado\r\n");
 80017bc:	4832      	ldr	r0, [pc, #200]	@ (8001888 <_Z14EjecutaSistemav+0x118>)
 80017be:	f7ff fe05 	bl	80013cc <_Z12SerialPrintfPcz>
 80017c2:	e002      	b.n	80017ca <_Z14EjecutaSistemav+0x5a>
		   else
			   SerialPrintf("Boton1 Suelto\r\n");
 80017c4:	4831      	ldr	r0, [pc, #196]	@ (800188c <_Z14EjecutaSistemav+0x11c>)
 80017c6:	f7ff fe01 	bl	80013cc <_Z12SerialPrintfPcz>

		  if(boton2.Leer()==0)
 80017ca:	4831      	ldr	r0, [pc, #196]	@ (8001890 <_Z14EjecutaSistemav+0x120>)
 80017cc:	f7ff fb93 	bl	8000ef6 <_ZN15CManejadorBoton4LeerEv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf0c      	ite	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2300      	movne	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <_Z14EjecutaSistemav+0x78>
			   SerialPrintf("Boton2 Presionado\r\n");
 80017e0:	482c      	ldr	r0, [pc, #176]	@ (8001894 <_Z14EjecutaSistemav+0x124>)
 80017e2:	f7ff fdf3 	bl	80013cc <_Z12SerialPrintfPcz>
 80017e6:	e002      	b.n	80017ee <_Z14EjecutaSistemav+0x7e>
		   else
			   SerialPrintf("Boton2 Suelto\r\n");
 80017e8:	482b      	ldr	r0, [pc, #172]	@ (8001898 <_Z14EjecutaSistemav+0x128>)
 80017ea:	f7ff fdef 	bl	80013cc <_Z12SerialPrintfPcz>

		  if(boton3.Leer()==0)
 80017ee:	482b      	ldr	r0, [pc, #172]	@ (800189c <_Z14EjecutaSistemav+0x12c>)
 80017f0:	f7ff fb81 	bl	8000ef6 <_ZN15CManejadorBoton4LeerEv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf0c      	ite	eq
 80017fa:	2301      	moveq	r3, #1
 80017fc:	2300      	movne	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <_Z14EjecutaSistemav+0x9c>
			   SerialPrintf("Boton3 Presionado\r\n");
 8001804:	4826      	ldr	r0, [pc, #152]	@ (80018a0 <_Z14EjecutaSistemav+0x130>)
 8001806:	f7ff fde1 	bl	80013cc <_Z12SerialPrintfPcz>
 800180a:	e002      	b.n	8001812 <_Z14EjecutaSistemav+0xa2>
		   else
			   SerialPrintf("Boton3 Suelto\r\n");
 800180c:	4825      	ldr	r0, [pc, #148]	@ (80018a4 <_Z14EjecutaSistemav+0x134>)
 800180e:	f7ff fddd 	bl	80013cc <_Z12SerialPrintfPcz>

		  if(boton4.Leer()==0)
 8001812:	4825      	ldr	r0, [pc, #148]	@ (80018a8 <_Z14EjecutaSistemav+0x138>)
 8001814:	f7ff fb6f 	bl	8000ef6 <_ZN15CManejadorBoton4LeerEv>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <_Z14EjecutaSistemav+0xc0>
			   SerialPrintf("Boton4 Presionado\r\n");
 8001828:	4820      	ldr	r0, [pc, #128]	@ (80018ac <_Z14EjecutaSistemav+0x13c>)
 800182a:	f7ff fdcf 	bl	80013cc <_Z12SerialPrintfPcz>
 800182e:	e002      	b.n	8001836 <_Z14EjecutaSistemav+0xc6>
		   else
			   SerialPrintf("Boton4 Suelto\r\n");
 8001830:	481f      	ldr	r0, [pc, #124]	@ (80018b0 <_Z14EjecutaSistemav+0x140>)
 8001832:	f7ff fdcb 	bl	80013cc <_Z12SerialPrintfPcz>

		  if(botonEncoder.Leer()==0)
 8001836:	481f      	ldr	r0, [pc, #124]	@ (80018b4 <_Z14EjecutaSistemav+0x144>)
 8001838:	f7ff fb5d 	bl	8000ef6 <_ZN15CManejadorBoton4LeerEv>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <_Z14EjecutaSistemav+0xe4>
			   SerialPrintf("Encoder Presionado\r\n");
 800184c:	481a      	ldr	r0, [pc, #104]	@ (80018b8 <_Z14EjecutaSistemav+0x148>)
 800184e:	f7ff fdbd 	bl	80013cc <_Z12SerialPrintfPcz>
 8001852:	e002      	b.n	800185a <_Z14EjecutaSistemav+0xea>
		   else
			   SerialPrintf("Encoder Suelto\r\n");
 8001854:	4819      	ldr	r0, [pc, #100]	@ (80018bc <_Z14EjecutaSistemav+0x14c>)
 8001856:	f7ff fdb9 	bl	80013cc <_Z12SerialPrintfPcz>
		  x=HAL_GetTick();
 800185a:	f000 fb47 	bl	8001eec <HAL_GetTick>
 800185e:	4603      	mov	r3, r0
 8001860:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  SerialPrintf("Ticks=%d\r\n",x);
 8001862:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001864:	4816      	ldr	r0, [pc, #88]	@ (80018c0 <_Z14EjecutaSistemav+0x150>)
 8001866:	f7ff fdb1 	bl	80013cc <_Z12SerialPrintfPcz>
		  HAL_Delay(500);
 800186a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800186e:	f000 fb47 	bl	8001f00 <HAL_Delay>
		  temperatura=max6675.MAX6675_lee();
 8001872:	e784      	b.n	800177e <_Z14EjecutaSistemav+0xe>
 8001874:	20000270 	.word	0x20000270
 8001878:	08006378 	.word	0x08006378
 800187c:	2000023c 	.word	0x2000023c
 8001880:	0800638c 	.word	0x0800638c
 8001884:	20000284 	.word	0x20000284
 8001888:	080063a8 	.word	0x080063a8
 800188c:	080063bc 	.word	0x080063bc
 8001890:	200002a4 	.word	0x200002a4
 8001894:	080063cc 	.word	0x080063cc
 8001898:	080063e0 	.word	0x080063e0
 800189c:	200002c4 	.word	0x200002c4
 80018a0:	080063f0 	.word	0x080063f0
 80018a4:	08006404 	.word	0x08006404
 80018a8:	200002e4 	.word	0x200002e4
 80018ac:	08006414 	.word	0x08006414
 80018b0:	08006428 	.word	0x08006428
 80018b4:	20000304 	.word	0x20000304
 80018b8:	08006438 	.word	0x08006438
 80018bc:	08006450 	.word	0x08006450
 80018c0:	08006464 	.word	0x08006464

080018c4 <_Z41__static_initialization_and_destruction_0ii>:
	  }
}
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d119      	bne.n	8001908 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018da:	4293      	cmp	r3, r2
 80018dc:	d114      	bne.n	8001908 <_Z41__static_initialization_and_destruction_0ii+0x44>
ControlVelocidadAire controlVelocidadAire;
 80018de:	4819      	ldr	r0, [pc, #100]	@ (8001944 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80018e0:	f7ff fb1a 	bl	8000f18 <_ZN20ControlVelocidadAireC1Ev>
MAX6675 max6675;
 80018e4:	4818      	ldr	r0, [pc, #96]	@ (8001948 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80018e6:	f7ff fc03 	bl	80010f0 <_ZN7MAX6675C1Ev>
CManejadorBoton boton1;
 80018ea:	4818      	ldr	r0, [pc, #96]	@ (800194c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80018ec:	f7ff fa8e 	bl	8000e0c <_ZN15CManejadorBotonC1Ev>
CManejadorBoton boton2;
 80018f0:	4817      	ldr	r0, [pc, #92]	@ (8001950 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80018f2:	f7ff fa8b 	bl	8000e0c <_ZN15CManejadorBotonC1Ev>
CManejadorBoton boton3;
 80018f6:	4817      	ldr	r0, [pc, #92]	@ (8001954 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80018f8:	f7ff fa88 	bl	8000e0c <_ZN15CManejadorBotonC1Ev>
CManejadorBoton boton4;
 80018fc:	4816      	ldr	r0, [pc, #88]	@ (8001958 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80018fe:	f7ff fa85 	bl	8000e0c <_ZN15CManejadorBotonC1Ev>
CManejadorBoton botonEncoder;
 8001902:	4816      	ldr	r0, [pc, #88]	@ (800195c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001904:	f7ff fa82 	bl	8000e0c <_ZN15CManejadorBotonC1Ev>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <_Z41__static_initialization_and_destruction_0ii+0x78>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <_Z41__static_initialization_and_destruction_0ii+0x78>
 8001918:	4810      	ldr	r0, [pc, #64]	@ (800195c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800191a:	f7ff fa95 	bl	8000e48 <_ZN15CManejadorBotonD1Ev>
CManejadorBoton boton4;
 800191e:	480e      	ldr	r0, [pc, #56]	@ (8001958 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001920:	f7ff fa92 	bl	8000e48 <_ZN15CManejadorBotonD1Ev>
CManejadorBoton boton3;
 8001924:	480b      	ldr	r0, [pc, #44]	@ (8001954 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001926:	f7ff fa8f 	bl	8000e48 <_ZN15CManejadorBotonD1Ev>
CManejadorBoton boton2;
 800192a:	4809      	ldr	r0, [pc, #36]	@ (8001950 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800192c:	f7ff fa8c 	bl	8000e48 <_ZN15CManejadorBotonD1Ev>
CManejadorBoton boton1;
 8001930:	4806      	ldr	r0, [pc, #24]	@ (800194c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001932:	f7ff fa89 	bl	8000e48 <_ZN15CManejadorBotonD1Ev>
ControlVelocidadAire controlVelocidadAire;
 8001936:	4803      	ldr	r0, [pc, #12]	@ (8001944 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001938:	f7ff fafe 	bl	8000f38 <_ZN20ControlVelocidadAireD1Ev>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000023c 	.word	0x2000023c
 8001948:	20000270 	.word	0x20000270
 800194c:	20000284 	.word	0x20000284
 8001950:	200002a4 	.word	0x200002a4
 8001954:	200002c4 	.word	0x200002c4
 8001958:	200002e4 	.word	0x200002e4
 800195c:	20000304 	.word	0x20000304

08001960 <_GLOBAL__sub_I_controlVelocidadAire>:
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
 8001964:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff ffab 	bl	80018c4 <_Z41__static_initialization_and_destruction_0ii>
 800196e:	bd80      	pop	{r7, pc}

08001970 <_GLOBAL__sub_D_controlVelocidadAire>:
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
 8001974:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff ffa3 	bl	80018c4 <_Z41__static_initialization_and_destruction_0ii>
 800197e:	bd80      	pop	{r7, pc}

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b092      	sub	sp, #72	@ 0x48
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001986:	f000 fa59 	bl	8001e3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198a:	f000 f80f 	bl	80019ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198e:	f000 f843 	bl	8001a18 <_ZL12MX_GPIO_Initv>
  delay_us_dwt_init();
 8001992:	f7ff fb6b 	bl	800106c <_Z17delay_us_dwt_initv>
	IncializaSistema();
 8001996:	f7ff fe8d 	bl	80016b4 <_Z16IncializaSistemav>
	EjecutaSistema();
 800199a:	f7ff fee9 	bl	8001770 <_Z14EjecutaSistemav>
  /* USER CODE BEGIN 2 */
  delay_us_dwt_init();
 800199e:	f7ff fb65 	bl	800106c <_Z17delay_us_dwt_initv>
  while (1)
  {
	  HAL_Delay(1000);
 80019a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a6:	f000 faab 	bl	8001f00 <HAL_Delay>
 80019aa:	e7fa      	b.n	80019a2 <main+0x22>

080019ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b090      	sub	sp, #64	@ 0x40
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	2228      	movs	r2, #40	@ 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fcad 	bl	800431a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d6:	2310      	movs	r3, #16
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 f86e 	bl	8002ac4 <HAL_RCC_OscConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
//    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 fadf 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
  {
//    Error_Handler();
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3740      	adds	r7, #64	@ 0x40
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x74>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x74>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x74>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x74>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x74>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <_ZL12MX_GPIO_Initv+0x74>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Diaplay_CS_Pin|Display_DC_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2103      	movs	r1, #3
 8001a60:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <_ZL12MX_GPIO_Initv+0x78>)
 8001a62:	f001 f816 	bl	8002a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Diaplay_CS_Pin Display_DC_Pin */
  GPIO_InitStruct.Pin = Diaplay_CS_Pin|Display_DC_Pin;
 8001a66:	2303      	movs	r3, #3
 8001a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2302      	movs	r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <_ZL12MX_GPIO_Initv+0x78>)
 8001a7e:	f000 fe6d 	bl	800275c <HAL_GPIO_Init>
  /* GPIO Ports Clock Enable */

  /*Configure GPIO pin Output Level */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010c00 	.word	0x40010c00

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_MspInit+0x5c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <HAL_MspInit+0x5c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6193      	str	r3, [r2, #24]
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_MspInit+0x5c>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_MspInit+0x5c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8001af0 <HAL_MspInit+0x5c>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_MspInit+0x5c>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_MspInit+0x60>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_MspInit+0x60>)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000

08001af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <HAL_ADC_MspInit+0x6c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d121      	bne.n	8001b5c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <HAL_ADC_MspInit+0x70>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <HAL_ADC_MspInit+0x70>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_ADC_MspInit+0x70>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <HAL_ADC_MspInit+0x70>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <HAL_ADC_MspInit+0x70>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_ADC_MspInit+0x70>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <HAL_ADC_MspInit+0x74>)
 8001b58:	f000 fe00 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40012400 	.word	0x40012400
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_UART_MspInit+0x8c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d131      	bne.n	8001bf4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_UART_MspInit+0x90>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a1a      	ldr	r2, [pc, #104]	@ (8001c00 <HAL_UART_MspInit+0x90>)
 8001b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_UART_MspInit+0x90>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <HAL_UART_MspInit+0x90>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <HAL_UART_MspInit+0x90>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_UART_MspInit+0x90>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <HAL_UART_MspInit+0x94>)
 8001bd6:	f000 fdc1 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <HAL_UART_MspInit+0x94>)
 8001bf0:	f000 fdb4 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010800 	.word	0x40010800

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <NMI_Handler+0x4>

08001c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f936 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return 1;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <_kill>:

int _kill(int pid, int sig)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c78:	f002 fbf6 	bl	8004468 <__errno>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2216      	movs	r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
  return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_exit>:

void _exit (int status)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c96:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffe7 	bl	8001c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <_exit+0x12>

08001ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e00a      	b.n	8001ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb6:	f3af 8000 	nop.w
 8001cba:	4601      	mov	r1, r0
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	b2ca      	uxtb	r2, r1
 8001cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf0      	blt.n	8001cb6 <_read+0x12>
  }

  return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e009      	b.n	8001d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf1      	blt.n	8001cf0 <_write+0x12>
  }
  return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_close>:

int _close(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_isatty>:

int _isatty(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f002 fb5e 	bl	8004468 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20005000 	.word	0x20005000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	20000324 	.word	0x20000324
 8001de0:	20000478 	.word	0x20000478

08001de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df0:	f7ff fff8 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df4:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001df6:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001df8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e0c:	4c09      	ldr	r4, [pc, #36]	@ (8001e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f002 fb2b 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1e:	f7ff fdaf 	bl	8001980 <main>
  bx lr
 8001e22:	4770      	bx	lr
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e2c:	08006840 	.word	0x08006840
  ldr r2, =_sbss
 8001e30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e34:	20000478 	.word	0x20000478

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fc51 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	200f      	movs	r0, #15
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fe1c 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fc5b 	bl	8002742 <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 fc31 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	@ (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_IncTick+0x1c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a03      	ldr	r2, [pc, #12]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000328 	.word	0x20000328

08001eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	@ (8001efc <HAL_GetTick+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000328 	.word	0x20000328

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff fff0 	bl	8001eec <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffe0 	bl	8001eec <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008

08001f48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0be      	b.n	80020e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fdb6 	bl	8001af8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fabf 	bl	8002510 <ADC_ConversionStop_Disable>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8099 	bne.w	80020d6 <HAL_ADC_Init+0x18e>
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8095 	bne.w	80020d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fb4:	f023 0302 	bic.w	r3, r3, #2
 8001fb8:	f043 0202 	orr.w	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7b1b      	ldrb	r3, [r3, #12]
 8001fce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe0:	d003      	beq.n	8001fea <HAL_ADC_Init+0xa2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_ADC_Init+0xa8>
 8001fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_Init+0xaa>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7d1b      	ldrb	r3, [r3, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d119      	bne.n	8002034 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	3b01      	subs	r3, #1
 800200e:	035a      	lsls	r2, r3, #13
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e00b      	b.n	8002034 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_ADC_Init+0x1a8>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	430b      	orrs	r3, r1
 800205a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002064:	d003      	beq.n	800206e <HAL_ADC_Init+0x126>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d104      	bne.n	8002078 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	3b01      	subs	r3, #1
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	430a      	orrs	r2, r1
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_ADC_Init+0x1ac>)
 8002094:	4013      	ands	r3, r2
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b2:	e018      	b.n	80020e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f023 0312 	bic.w	r3, r3, #18
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020d4:	e007      	b.n	80020e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	ffe1f7fd 	.word	0xffe1f7fd
 80020f4:	ff1f0efe 	.word	0xff1f0efe

080020f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Start+0x1a>
 800210e:	2302      	movs	r3, #2
 8002110:	e098      	b.n	8002244 <HAL_ADC_Start+0x14c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f99e 	bl	800245c <ADC_Enable>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 8087 	bne.w	800223a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a41      	ldr	r2, [pc, #260]	@ (800224c <HAL_ADC_Start+0x154>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d105      	bne.n	8002156 <HAL_ADC_Start+0x5e>
 800214a:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_ADC_Start+0x158>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d026      	beq.n	80021be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002178:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002180:	e01d      	b.n	80021be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2f      	ldr	r2, [pc, #188]	@ (8002250 <HAL_ADC_Start+0x158>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_Start+0xaa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <HAL_ADC_Start+0x154>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_ADC_Start+0xc6>
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_ADC_Start+0x158>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	f023 0206 	bic.w	r2, r3, #6
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021d6:	e002      	b.n	80021de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0202 	mvn.w	r2, #2
 80021ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021fe:	d113      	bne.n	8002228 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002204:	4a11      	ldr	r2, [pc, #68]	@ (800224c <HAL_ADC_Start+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d105      	bne.n	8002216 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_ADC_Start+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	e00c      	b.n	8002242 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e003      	b.n	8002242 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40012800 	.word	0x40012800
 8002250:	40012400 	.word	0x40012400

08002254 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x20>
 8002288:	2302      	movs	r3, #2
 800228a:	e0dc      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1da>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d81c      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b05      	subs	r3, #5
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b05      	subs	r3, #5
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d4:	e03c      	b.n	8002350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d81c      	bhi.n	8002318 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b23      	subs	r3, #35	@ 0x23
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4019      	ands	r1, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	3b23      	subs	r3, #35	@ 0x23
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
 8002316:	e01b      	b.n	8002350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b41      	subs	r3, #65	@ 0x41
 800232a:	221f      	movs	r2, #31
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	@ 0x41
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b09      	cmp	r3, #9
 8002356:	d91c      	bls.n	8002392 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	3b1e      	subs	r3, #30
 800236a:	2207      	movs	r2, #7
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	e019      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	2207      	movs	r2, #7
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4019      	ands	r1, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6898      	ldr	r0, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	fa00 f203 	lsl.w	r2, r0, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d003      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d2:	2b11      	cmp	r3, #17
 80023d4:	d132      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_ADC_ConfigChannel+0x1e4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d125      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d126      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d11a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_ADC_ConfigChannel+0x1e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a13      	ldr	r2, [pc, #76]	@ (8002458 <HAL_ADC_ConfigChannel+0x1ec>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9a      	lsrs	r2, r3, #18
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800241c:	e002      	b.n	8002424 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_ConfigChannel+0x1b2>
 800242a:	e007      	b.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40012400 	.word	0x40012400
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d040      	beq.n	80024fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <ADC_Enable+0xac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <ADC_Enable+0xb0>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002498:	e002      	b.n	80024a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024a6:	f7ff fd21 	bl	8001eec <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	e01f      	b.n	80024ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ae:	f7ff fd1d 	bl	8001eec <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d918      	bls.n	80024ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d011      	beq.n	80024ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e007      	b.n	80024fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d1d8      	bne.n	80024ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12e      	bne.n	8002588 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800253a:	f7ff fcd7 	bl	8001eec <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002540:	e01b      	b.n	800257a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002542:	f7ff fcd3 	bl	8001eec <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d914      	bls.n	800257a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10d      	bne.n	800257a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d0dc      	beq.n	8002542 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	@ (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	@ (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	@ 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff90 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff49 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff5e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff90 	bl	800264c <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5f 	bl	80025f8 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffb0 	bl	80026b0 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b08b      	sub	sp, #44	@ 0x2c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e169      	b.n	8002a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002770:	2201      	movs	r2, #1
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8158 	bne.w	8002a3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a9a      	ldr	r2, [pc, #616]	@ (80029fc <HAL_GPIO_Init+0x2a0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05e      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 8002798:	4a98      	ldr	r2, [pc, #608]	@ (80029fc <HAL_GPIO_Init+0x2a0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d875      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 800279e:	4a98      	ldr	r2, [pc, #608]	@ (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d058      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027a4:	4a96      	ldr	r2, [pc, #600]	@ (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d86f      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027aa:	4a96      	ldr	r2, [pc, #600]	@ (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d052      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027b0:	4a94      	ldr	r2, [pc, #592]	@ (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d869      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027b6:	4a94      	ldr	r2, [pc, #592]	@ (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04c      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027bc:	4a92      	ldr	r2, [pc, #584]	@ (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d863      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027c2:	4a92      	ldr	r2, [pc, #584]	@ (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d046      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027c8:	4a90      	ldr	r2, [pc, #576]	@ (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d85d      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d82a      	bhi.n	8002828 <HAL_GPIO_Init+0xcc>
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	d859      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027d6:	a201      	add	r2, pc, #4	@ (adr r2, 80027dc <HAL_GPIO_Init+0x80>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002831 	.word	0x08002831
 80027e4:	08002843 	.word	0x08002843
 80027e8:	08002885 	.word	0x08002885
 80027ec:	0800288b 	.word	0x0800288b
 80027f0:	0800288b 	.word	0x0800288b
 80027f4:	0800288b 	.word	0x0800288b
 80027f8:	0800288b 	.word	0x0800288b
 80027fc:	0800288b 	.word	0x0800288b
 8002800:	0800288b 	.word	0x0800288b
 8002804:	0800288b 	.word	0x0800288b
 8002808:	0800288b 	.word	0x0800288b
 800280c:	0800288b 	.word	0x0800288b
 8002810:	0800288b 	.word	0x0800288b
 8002814:	0800288b 	.word	0x0800288b
 8002818:	0800288b 	.word	0x0800288b
 800281c:	0800288b 	.word	0x0800288b
 8002820:	08002839 	.word	0x08002839
 8002824:	0800284d 	.word	0x0800284d
 8002828:	4a79      	ldr	r2, [pc, #484]	@ (8002a10 <HAL_GPIO_Init+0x2b4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282e:	e02c      	b.n	800288a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e029      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	3304      	adds	r3, #4
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	e024      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	3308      	adds	r3, #8
 8002848:	623b      	str	r3, [r7, #32]
          break;
 800284a:	e01f      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	330c      	adds	r3, #12
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e01a      	b.n	800288c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800285e:	2304      	movs	r3, #4
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e013      	b.n	800288c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800286c:	2308      	movs	r3, #8
 800286e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	611a      	str	r2, [r3, #16]
          break;
 8002876:	e009      	b.n	800288c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002878:	2308      	movs	r3, #8
 800287a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	615a      	str	r2, [r3, #20]
          break;
 8002882:	e003      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x130>
          break;
 800288a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2bff      	cmp	r3, #255	@ 0xff
 8002890:	d801      	bhi.n	8002896 <HAL_GPIO_Init+0x13a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e001      	b.n	800289a <HAL_GPIO_Init+0x13e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2bff      	cmp	r3, #255	@ 0xff
 80028a0:	d802      	bhi.n	80028a8 <HAL_GPIO_Init+0x14c>
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x152>
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	3b08      	subs	r3, #8
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	210f      	movs	r1, #15
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80b1 	beq.w	8002a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f4:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <HAL_GPIO_Init+0x2bc>)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a40      	ldr	r2, [pc, #256]	@ (8002a1c <HAL_GPIO_Init+0x2c0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_GPIO_Init+0x1ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3f      	ldr	r2, [pc, #252]	@ (8002a20 <HAL_GPIO_Init+0x2c4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00d      	beq.n	8002944 <HAL_GPIO_Init+0x1e8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a24 <HAL_GPIO_Init+0x2c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x1e4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3d      	ldr	r2, [pc, #244]	@ (8002a28 <HAL_GPIO_Init+0x2cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_GPIO_Init+0x1e0>
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 800293c:	2304      	movs	r3, #4
 800293e:	e004      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002940:	2302      	movs	r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002948:	2300      	movs	r3, #0
 800294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800295a:	492f      	ldr	r1, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x2bc>)
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	492c      	ldr	r1, [pc, #176]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4928      	ldr	r1, [pc, #160]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 800298c:	4013      	ands	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	4922      	ldr	r1, [pc, #136]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	491e      	ldr	r1, [pc, #120]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4918      	ldr	r1, [pc, #96]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4914      	ldr	r1, [pc, #80]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d021      	beq.n	8002a30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	490e      	ldr	r1, [pc, #56]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e021      	b.n	8002a3e <HAL_GPIO_Init+0x2e2>
 80029fa:	bf00      	nop
 80029fc:	10320000 	.word	0x10320000
 8002a00:	10310000 	.word	0x10310000
 8002a04:	10220000 	.word	0x10220000
 8002a08:	10210000 	.word	0x10210000
 8002a0c:	10120000 	.word	0x10120000
 8002a10:	10110000 	.word	0x10110000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <HAL_GPIO_Init+0x304>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4909      	ldr	r1, [pc, #36]	@ (8002a60 <HAL_GPIO_Init+0x304>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ae8e 	bne.w	8002770 <HAL_GPIO_Init+0x14>
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	372c      	adds	r7, #44	@ 0x2c
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa2:	787b      	ldrb	r3, [r7, #1]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aae:	e003      	b.n	8002ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e272      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8087 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae4:	4b92      	ldr	r3, [pc, #584]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af0:	4b8f      	ldr	r3, [pc, #572]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d112      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5e>
 8002afc:	4b8c      	ldr	r3, [pc, #560]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b08:	d10b      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	4b89      	ldr	r3, [pc, #548]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x12c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d168      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e24c      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x76>
 8002b2c:	4b80      	ldr	r3, [pc, #512]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a7f      	ldr	r2, [pc, #508]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x98>
 8002b42:	4b7b      	ldr	r3, [pc, #492]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7a      	ldr	r2, [pc, #488]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a77      	ldr	r2, [pc, #476]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0xbc>
 8002b66:	4b72      	ldr	r3, [pc, #456]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a71      	ldr	r2, [pc, #452]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b6f      	ldr	r3, [pc, #444]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6e      	ldr	r2, [pc, #440]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b80:	4b6b      	ldr	r3, [pc, #428]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a67      	ldr	r2, [pc, #412]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f9a4 	bl	8001eec <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7ff f9a0 	bl	8001eec <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e200      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b5d      	ldr	r3, [pc, #372]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xe4>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f990 	bl	8001eec <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7ff f98c 	bl	8001eec <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1ec      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x10c>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0a:	4b49      	ldr	r3, [pc, #292]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x18c>
 8002c16:	4b46      	ldr	r3, [pc, #280]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x176>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1c0      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4939      	ldr	r1, [pc, #228]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e03a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7ff f945 	bl	8001eec <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff f941 	bl	8001eec <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1a1      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	4b2d      	ldr	r3, [pc, #180]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4927      	ldr	r1, [pc, #156]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f924 	bl	8001eec <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca8:	f7ff f920 	bl	8001eec <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e180      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d03a      	beq.n	8002d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7ff f904 	bl	8001eec <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7ff f900 	bl	8001eec <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e160      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 face 	bl	80032a8 <RCC_Delay>
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7ff f8ea 	bl	8001eec <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7ff f8e6 	bl	8001eec <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e146      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	42420000 	.word	0x42420000
 8002d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	4b92      	ldr	r3, [pc, #584]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e9      	bne.n	8002d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a6 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b88      	ldr	r3, [pc, #544]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a87      	ldr	r2, [pc, #540]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b85      	ldr	r3, [pc, #532]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b82      	ldr	r3, [pc, #520]	@ (8002f8c <HAL_RCC_OscConfig+0x4c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f8c <HAL_RCC_OscConfig+0x4c8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7e      	ldr	r2, [pc, #504]	@ (8002f8c <HAL_RCC_OscConfig+0x4c8>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f8a7 	bl	8001eec <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7ff f8a3 	bl	8001eec <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	@ 0x64
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e103      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	4b75      	ldr	r3, [pc, #468]	@ (8002f8c <HAL_RCC_OscConfig+0x4c8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x312>
 8002dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	e02d      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x334>
 8002dde:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a69      	ldr	r2, [pc, #420]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b67      	ldr	r3, [pc, #412]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a66      	ldr	r2, [pc, #408]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	e01c      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x356>
 8002e00:	4b61      	ldr	r3, [pc, #388]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a60      	ldr	r2, [pc, #384]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	4b58      	ldr	r3, [pc, #352]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a57      	ldr	r2, [pc, #348]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff f857 	bl	8001eec <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7ff f853 	bl	8001eec <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0b1      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	4b4b      	ldr	r3, [pc, #300]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ee      	beq.n	8002e42 <HAL_RCC_OscConfig+0x37e>
 8002e64:	e014      	b.n	8002e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7ff f841 	bl	8001eec <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7ff f83d 	bl	8001eec <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e09b      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	4b40      	ldr	r3, [pc, #256]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ee      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b3c      	ldr	r3, [pc, #240]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8087 	beq.w	8002fba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eac:	4b36      	ldr	r3, [pc, #216]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d061      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d146      	bne.n	8002f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec0:	4b33      	ldr	r3, [pc, #204]	@ (8002f90 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7ff f811 	bl	8001eec <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7ff f80d 	bl	8001eec <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e06d      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee0:	4b29      	ldr	r3, [pc, #164]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4921      	ldr	r1, [pc, #132]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f08:	4b1f      	ldr	r3, [pc, #124]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a19      	ldr	r1, [r3, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	491b      	ldr	r1, [pc, #108]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x4cc>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe ffe1 	bl	8001eec <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe ffdd 	bl	8001eec <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e03d      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x46a>
 8002f4c:	e035      	b.n	8002fba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <HAL_RCC_OscConfig+0x4cc>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe ffca 	bl	8001eec <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe ffc6 	bl	8001eec <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e026      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x498>
 8002f7a:	e01e      	b.n	8002fba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e019      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_OscConfig+0x500>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0d0      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b67      	ldr	r3, [pc, #412]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4965      	ldr	r1, [pc, #404]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b63      	ldr	r3, [pc, #396]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b8      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4b59      	ldr	r3, [pc, #356]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a58      	ldr	r2, [pc, #352]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800302e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303c:	4b53      	ldr	r3, [pc, #332]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a52      	ldr	r2, [pc, #328]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003046:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b50      	ldr	r3, [pc, #320]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	494d      	ldr	r1, [pc, #308]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d040      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b47      	ldr	r3, [pc, #284]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07f      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e073      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06b      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b39      	ldr	r3, [pc, #228]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4936      	ldr	r1, [pc, #216]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe ff18 	bl	8001eec <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe ff14 	bl	8001eec <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e053      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b27      	ldr	r3, [pc, #156]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d210      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4922      	ldr	r1, [pc, #136]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b20      	ldr	r3, [pc, #128]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e032      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4916      	ldr	r1, [pc, #88]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003142:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490e      	ldr	r1, [pc, #56]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003156:	f000 f821 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490a      	ldr	r1, [pc, #40]	@ (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_RCC_ClockConfig+0x1cc>)
 8003170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003172:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <HAL_RCC_ClockConfig+0x1d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fe76 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40022000 	.word	0x40022000
 800318c:	40021000 	.word	0x40021000
 8003190:	08006490 	.word	0x08006490
 8003194:	20000000 	.word	0x20000000
 8003198:	20000004 	.word	0x20000004

0800319c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x94>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x30>
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ca:	e027      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ce:	613b      	str	r3, [r7, #16]
      break;
 80031d0:	e027      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0c9b      	lsrs	r3, r3, #18
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x94>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	0c5b      	lsrs	r3, r3, #17
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	4a11      	ldr	r2, [pc, #68]	@ (800323c <HAL_RCC_GetSysClockFreq+0xa0>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fe:	fb03 f202 	mul.w	r2, r3, r2
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e004      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0c      	ldr	r2, [pc, #48]	@ (8003240 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	613b      	str	r3, [r7, #16]
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x98>)
 800321e:	613b      	str	r3, [r7, #16]
      break;
 8003220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003222:	693b      	ldr	r3, [r7, #16]
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	007a1200 	.word	0x007a1200
 8003238:	080064a8 	.word	0x080064a8
 800323c:	080064b8 	.word	0x080064b8
 8003240:	003d0900 	.word	0x003d0900

08003244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b02      	ldr	r3, [pc, #8]	@ (8003254 <HAL_RCC_GetHCLKFreq+0x10>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff2 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	080064a0 	.word	0x080064a0

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffde 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	080064a0 	.word	0x080064a0

080032a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b0:	4b0a      	ldr	r3, [pc, #40]	@ (80032dc <RCC_Delay+0x34>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <RCC_Delay+0x38>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0a5b      	lsrs	r3, r3, #9
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032c4:	bf00      	nop
  }
  while (Delay --);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	60fa      	str	r2, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f9      	bne.n	80032c4 <RCC_Delay+0x1c>
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	20000000 	.word	0x20000000
 80032e0:	10624dd3 	.word	0x10624dd3

080032e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e042      	b.n	800337c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe fc30 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	@ 0x24
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f91d 	bl	8003568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800333c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800334c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800335c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d16d      	bne.n	8003480 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Transmit+0x2c>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e066      	b.n	8003482 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2221      	movs	r2, #33	@ 0x21
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c2:	f7fe fd93 	bl	8001eec <HAL_GetTick>
 80033c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	88fa      	ldrh	r2, [r7, #6]
 80033d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033dc:	d108      	bne.n	80033f0 <HAL_UART_Transmit+0x6c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	e003      	b.n	80033f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033f8:	e02a      	b.n	8003450 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2180      	movs	r1, #128	@ 0x80
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f840 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e036      	b.n	8003482 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3302      	adds	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e007      	b.n	8003442 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1cf      	bne.n	80033fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	2140      	movs	r1, #64	@ 0x40
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f810 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e006      	b.n	8003482 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b090      	sub	sp, #64	@ 0x40
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349a:	e050      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d04c      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <UART_WaitOnFlagUntilTimeout+0x30>
 80034aa:	f7fe fd1f 	bl	8001eec <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d241      	bcs.n	800353e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034da:	637a      	str	r2, [r7, #52]	@ 0x34
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80034e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	613b      	str	r3, [r7, #16]
   return(result);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800350e:	623a      	str	r2, [r7, #32]
 8003510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	69f9      	ldr	r1, [r7, #28]
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	61bb      	str	r3, [r7, #24]
   return(result);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e5      	bne.n	80034ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00f      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	429a      	cmp	r2, r3
 800355a:	d09f      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3740      	adds	r7, #64	@ 0x40
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035a2:	f023 030c 	bic.w	r3, r3, #12
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2c      	ldr	r2, [pc, #176]	@ (800367c <UART_SetConfig+0x114>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d103      	bne.n	80035d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035d0:	f7ff fe56 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	e002      	b.n	80035de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff fe3e 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 80035dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009a      	lsls	r2, r3, #2
 80035e8:	441a      	add	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <UART_SetConfig+0x118>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	0119      	lsls	r1, r3, #4
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009a      	lsls	r2, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <UART_SetConfig+0x118>)
 8003616:	fba3 0302 	umull	r0, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2064      	movs	r0, #100	@ 0x64
 800361e:	fb00 f303 	mul.w	r3, r0, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	3332      	adds	r3, #50	@ 0x32
 8003628:	4a15      	ldr	r2, [pc, #84]	@ (8003680 <UART_SetConfig+0x118>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003634:	4419      	add	r1, r3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fbb2 f2f3 	udiv	r2, r2, r3
 800364c:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <UART_SetConfig+0x118>)
 800364e:	fba3 0302 	umull	r0, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2064      	movs	r0, #100	@ 0x64
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	@ 0x32
 8003660:	4a07      	ldr	r2, [pc, #28]	@ (8003680 <UART_SetConfig+0x118>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 020f 	and.w	r2, r3, #15
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	440a      	add	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40013800 	.word	0x40013800
 8003680:	51eb851f 	.word	0x51eb851f

08003684 <_ZdlPvj>:
 8003684:	f000 b800 	b.w	8003688 <_ZdlPv>

08003688 <_ZdlPv>:
 8003688:	f000 b810 	b.w	80036ac <free>

0800368c <abort>:
 800368c:	2006      	movs	r0, #6
 800368e:	b508      	push	{r3, lr}
 8003690:	f000 fe74 	bl	800437c <raise>
 8003694:	2001      	movs	r0, #1
 8003696:	f7fe fafa 	bl	8001c8e <_exit>
	...

0800369c <malloc>:
 800369c:	4b02      	ldr	r3, [pc, #8]	@ (80036a8 <malloc+0xc>)
 800369e:	4601      	mov	r1, r0
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	f000 b82d 	b.w	8003700 <_malloc_r>
 80036a6:	bf00      	nop
 80036a8:	20000018 	.word	0x20000018

080036ac <free>:
 80036ac:	4b02      	ldr	r3, [pc, #8]	@ (80036b8 <free+0xc>)
 80036ae:	4601      	mov	r1, r0
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f001 bd65 	b.w	8005180 <_free_r>
 80036b6:	bf00      	nop
 80036b8:	20000018 	.word	0x20000018

080036bc <sbrk_aligned>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	4e0f      	ldr	r6, [pc, #60]	@ (80036fc <sbrk_aligned+0x40>)
 80036c0:	460c      	mov	r4, r1
 80036c2:	6831      	ldr	r1, [r6, #0]
 80036c4:	4605      	mov	r5, r0
 80036c6:	b911      	cbnz	r1, 80036ce <sbrk_aligned+0x12>
 80036c8:	f000 feac 	bl	8004424 <_sbrk_r>
 80036cc:	6030      	str	r0, [r6, #0]
 80036ce:	4621      	mov	r1, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	f000 fea7 	bl	8004424 <_sbrk_r>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	d103      	bne.n	80036e2 <sbrk_aligned+0x26>
 80036da:	f04f 34ff 	mov.w	r4, #4294967295
 80036de:	4620      	mov	r0, r4
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	1cc4      	adds	r4, r0, #3
 80036e4:	f024 0403 	bic.w	r4, r4, #3
 80036e8:	42a0      	cmp	r0, r4
 80036ea:	d0f8      	beq.n	80036de <sbrk_aligned+0x22>
 80036ec:	1a21      	subs	r1, r4, r0
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 fe98 	bl	8004424 <_sbrk_r>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d1f2      	bne.n	80036de <sbrk_aligned+0x22>
 80036f8:	e7ef      	b.n	80036da <sbrk_aligned+0x1e>
 80036fa:	bf00      	nop
 80036fc:	2000032c 	.word	0x2000032c

08003700 <_malloc_r>:
 8003700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003704:	1ccd      	adds	r5, r1, #3
 8003706:	f025 0503 	bic.w	r5, r5, #3
 800370a:	3508      	adds	r5, #8
 800370c:	2d0c      	cmp	r5, #12
 800370e:	bf38      	it	cc
 8003710:	250c      	movcc	r5, #12
 8003712:	2d00      	cmp	r5, #0
 8003714:	4606      	mov	r6, r0
 8003716:	db01      	blt.n	800371c <_malloc_r+0x1c>
 8003718:	42a9      	cmp	r1, r5
 800371a:	d904      	bls.n	8003726 <_malloc_r+0x26>
 800371c:	230c      	movs	r3, #12
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	2000      	movs	r0, #0
 8003722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037fc <_malloc_r+0xfc>
 800372a:	f000 f869 	bl	8003800 <__malloc_lock>
 800372e:	f8d8 3000 	ldr.w	r3, [r8]
 8003732:	461c      	mov	r4, r3
 8003734:	bb44      	cbnz	r4, 8003788 <_malloc_r+0x88>
 8003736:	4629      	mov	r1, r5
 8003738:	4630      	mov	r0, r6
 800373a:	f7ff ffbf 	bl	80036bc <sbrk_aligned>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	4604      	mov	r4, r0
 8003742:	d158      	bne.n	80037f6 <_malloc_r+0xf6>
 8003744:	f8d8 4000 	ldr.w	r4, [r8]
 8003748:	4627      	mov	r7, r4
 800374a:	2f00      	cmp	r7, #0
 800374c:	d143      	bne.n	80037d6 <_malloc_r+0xd6>
 800374e:	2c00      	cmp	r4, #0
 8003750:	d04b      	beq.n	80037ea <_malloc_r+0xea>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	4639      	mov	r1, r7
 8003756:	4630      	mov	r0, r6
 8003758:	eb04 0903 	add.w	r9, r4, r3
 800375c:	f000 fe62 	bl	8004424 <_sbrk_r>
 8003760:	4581      	cmp	r9, r0
 8003762:	d142      	bne.n	80037ea <_malloc_r+0xea>
 8003764:	6821      	ldr	r1, [r4, #0]
 8003766:	4630      	mov	r0, r6
 8003768:	1a6d      	subs	r5, r5, r1
 800376a:	4629      	mov	r1, r5
 800376c:	f7ff ffa6 	bl	80036bc <sbrk_aligned>
 8003770:	3001      	adds	r0, #1
 8003772:	d03a      	beq.n	80037ea <_malloc_r+0xea>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	442b      	add	r3, r5
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	f8d8 3000 	ldr.w	r3, [r8]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	bb62      	cbnz	r2, 80037dc <_malloc_r+0xdc>
 8003782:	f8c8 7000 	str.w	r7, [r8]
 8003786:	e00f      	b.n	80037a8 <_malloc_r+0xa8>
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	1b52      	subs	r2, r2, r5
 800378c:	d420      	bmi.n	80037d0 <_malloc_r+0xd0>
 800378e:	2a0b      	cmp	r2, #11
 8003790:	d917      	bls.n	80037c2 <_malloc_r+0xc2>
 8003792:	1961      	adds	r1, r4, r5
 8003794:	42a3      	cmp	r3, r4
 8003796:	6025      	str	r5, [r4, #0]
 8003798:	bf18      	it	ne
 800379a:	6059      	strne	r1, [r3, #4]
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	bf08      	it	eq
 80037a0:	f8c8 1000 	streq.w	r1, [r8]
 80037a4:	5162      	str	r2, [r4, r5]
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	4630      	mov	r0, r6
 80037aa:	f000 f82f 	bl	800380c <__malloc_unlock>
 80037ae:	f104 000b 	add.w	r0, r4, #11
 80037b2:	1d23      	adds	r3, r4, #4
 80037b4:	f020 0007 	bic.w	r0, r0, #7
 80037b8:	1ac2      	subs	r2, r0, r3
 80037ba:	bf1c      	itt	ne
 80037bc:	1a1b      	subne	r3, r3, r0
 80037be:	50a3      	strne	r3, [r4, r2]
 80037c0:	e7af      	b.n	8003722 <_malloc_r+0x22>
 80037c2:	6862      	ldr	r2, [r4, #4]
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	bf0c      	ite	eq
 80037c8:	f8c8 2000 	streq.w	r2, [r8]
 80037cc:	605a      	strne	r2, [r3, #4]
 80037ce:	e7eb      	b.n	80037a8 <_malloc_r+0xa8>
 80037d0:	4623      	mov	r3, r4
 80037d2:	6864      	ldr	r4, [r4, #4]
 80037d4:	e7ae      	b.n	8003734 <_malloc_r+0x34>
 80037d6:	463c      	mov	r4, r7
 80037d8:	687f      	ldr	r7, [r7, #4]
 80037da:	e7b6      	b.n	800374a <_malloc_r+0x4a>
 80037dc:	461a      	mov	r2, r3
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	d1fb      	bne.n	80037dc <_malloc_r+0xdc>
 80037e4:	2300      	movs	r3, #0
 80037e6:	6053      	str	r3, [r2, #4]
 80037e8:	e7de      	b.n	80037a8 <_malloc_r+0xa8>
 80037ea:	230c      	movs	r3, #12
 80037ec:	4630      	mov	r0, r6
 80037ee:	6033      	str	r3, [r6, #0]
 80037f0:	f000 f80c 	bl	800380c <__malloc_unlock>
 80037f4:	e794      	b.n	8003720 <_malloc_r+0x20>
 80037f6:	6005      	str	r5, [r0, #0]
 80037f8:	e7d6      	b.n	80037a8 <_malloc_r+0xa8>
 80037fa:	bf00      	nop
 80037fc:	20000330 	.word	0x20000330

08003800 <__malloc_lock>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__malloc_lock+0x8>)
 8003802:	f000 be5c 	b.w	80044be <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	20000474 	.word	0x20000474

0800380c <__malloc_unlock>:
 800380c:	4801      	ldr	r0, [pc, #4]	@ (8003814 <__malloc_unlock+0x8>)
 800380e:	f000 be57 	b.w	80044c0 <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	20000474 	.word	0x20000474

08003818 <__cvt>:
 8003818:	2b00      	cmp	r3, #0
 800381a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381e:	461d      	mov	r5, r3
 8003820:	bfbb      	ittet	lt
 8003822:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003826:	461d      	movlt	r5, r3
 8003828:	2300      	movge	r3, #0
 800382a:	232d      	movlt	r3, #45	@ 0x2d
 800382c:	b088      	sub	sp, #32
 800382e:	4614      	mov	r4, r2
 8003830:	bfb8      	it	lt
 8003832:	4614      	movlt	r4, r2
 8003834:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003836:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003838:	7013      	strb	r3, [r2, #0]
 800383a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800383c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003840:	f023 0820 	bic.w	r8, r3, #32
 8003844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003848:	d005      	beq.n	8003856 <__cvt+0x3e>
 800384a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800384e:	d100      	bne.n	8003852 <__cvt+0x3a>
 8003850:	3601      	adds	r6, #1
 8003852:	2302      	movs	r3, #2
 8003854:	e000      	b.n	8003858 <__cvt+0x40>
 8003856:	2303      	movs	r3, #3
 8003858:	aa07      	add	r2, sp, #28
 800385a:	9204      	str	r2, [sp, #16]
 800385c:	aa06      	add	r2, sp, #24
 800385e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003862:	e9cd 3600 	strd	r3, r6, [sp]
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	f000 fec1 	bl	80045f0 <_dtoa_r>
 800386e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003872:	4607      	mov	r7, r0
 8003874:	d119      	bne.n	80038aa <__cvt+0x92>
 8003876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d50e      	bpl.n	800389a <__cvt+0x82>
 800387c:	eb00 0906 	add.w	r9, r0, r6
 8003880:	2200      	movs	r2, #0
 8003882:	2300      	movs	r3, #0
 8003884:	4620      	mov	r0, r4
 8003886:	4629      	mov	r1, r5
 8003888:	f7fd f942 	bl	8000b10 <__aeabi_dcmpeq>
 800388c:	b108      	cbz	r0, 8003892 <__cvt+0x7a>
 800388e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003892:	2230      	movs	r2, #48	@ 0x30
 8003894:	9b07      	ldr	r3, [sp, #28]
 8003896:	454b      	cmp	r3, r9
 8003898:	d31e      	bcc.n	80038d8 <__cvt+0xc0>
 800389a:	4638      	mov	r0, r7
 800389c:	9b07      	ldr	r3, [sp, #28]
 800389e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80038a0:	1bdb      	subs	r3, r3, r7
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	b008      	add	sp, #32
 80038a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038ae:	eb00 0906 	add.w	r9, r0, r6
 80038b2:	d1e5      	bne.n	8003880 <__cvt+0x68>
 80038b4:	7803      	ldrb	r3, [r0, #0]
 80038b6:	2b30      	cmp	r3, #48	@ 0x30
 80038b8:	d10a      	bne.n	80038d0 <__cvt+0xb8>
 80038ba:	2200      	movs	r2, #0
 80038bc:	2300      	movs	r3, #0
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fd f925 	bl	8000b10 <__aeabi_dcmpeq>
 80038c6:	b918      	cbnz	r0, 80038d0 <__cvt+0xb8>
 80038c8:	f1c6 0601 	rsb	r6, r6, #1
 80038cc:	f8ca 6000 	str.w	r6, [sl]
 80038d0:	f8da 3000 	ldr.w	r3, [sl]
 80038d4:	4499      	add	r9, r3
 80038d6:	e7d3      	b.n	8003880 <__cvt+0x68>
 80038d8:	1c59      	adds	r1, r3, #1
 80038da:	9107      	str	r1, [sp, #28]
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e7d9      	b.n	8003894 <__cvt+0x7c>

080038e0 <__exponent>:
 80038e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038e2:	2900      	cmp	r1, #0
 80038e4:	bfb6      	itet	lt
 80038e6:	232d      	movlt	r3, #45	@ 0x2d
 80038e8:	232b      	movge	r3, #43	@ 0x2b
 80038ea:	4249      	neglt	r1, r1
 80038ec:	2909      	cmp	r1, #9
 80038ee:	7002      	strb	r2, [r0, #0]
 80038f0:	7043      	strb	r3, [r0, #1]
 80038f2:	dd29      	ble.n	8003948 <__exponent+0x68>
 80038f4:	f10d 0307 	add.w	r3, sp, #7
 80038f8:	461d      	mov	r5, r3
 80038fa:	270a      	movs	r7, #10
 80038fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003900:	461a      	mov	r2, r3
 8003902:	fb07 1416 	mls	r4, r7, r6, r1
 8003906:	3430      	adds	r4, #48	@ 0x30
 8003908:	f802 4c01 	strb.w	r4, [r2, #-1]
 800390c:	460c      	mov	r4, r1
 800390e:	2c63      	cmp	r4, #99	@ 0x63
 8003910:	4631      	mov	r1, r6
 8003912:	f103 33ff 	add.w	r3, r3, #4294967295
 8003916:	dcf1      	bgt.n	80038fc <__exponent+0x1c>
 8003918:	3130      	adds	r1, #48	@ 0x30
 800391a:	1e94      	subs	r4, r2, #2
 800391c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003920:	4623      	mov	r3, r4
 8003922:	1c41      	adds	r1, r0, #1
 8003924:	42ab      	cmp	r3, r5
 8003926:	d30a      	bcc.n	800393e <__exponent+0x5e>
 8003928:	f10d 0309 	add.w	r3, sp, #9
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	42ac      	cmp	r4, r5
 8003930:	bf88      	it	hi
 8003932:	2300      	movhi	r3, #0
 8003934:	3302      	adds	r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	1a18      	subs	r0, r3, r0
 800393a:	b003      	add	sp, #12
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003942:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003946:	e7ed      	b.n	8003924 <__exponent+0x44>
 8003948:	2330      	movs	r3, #48	@ 0x30
 800394a:	3130      	adds	r1, #48	@ 0x30
 800394c:	7083      	strb	r3, [r0, #2]
 800394e:	70c1      	strb	r1, [r0, #3]
 8003950:	1d03      	adds	r3, r0, #4
 8003952:	e7f1      	b.n	8003938 <__exponent+0x58>

08003954 <_printf_float>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b091      	sub	sp, #68	@ 0x44
 800395a:	460c      	mov	r4, r1
 800395c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003960:	4616      	mov	r6, r2
 8003962:	461f      	mov	r7, r3
 8003964:	4605      	mov	r5, r0
 8003966:	f000 fd11 	bl	800438c <_localeconv_r>
 800396a:	6803      	ldr	r3, [r0, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	9308      	str	r3, [sp, #32]
 8003970:	f7fc fbee 	bl	8000150 <strlen>
 8003974:	2300      	movs	r3, #0
 8003976:	930e      	str	r3, [sp, #56]	@ 0x38
 8003978:	f8d8 3000 	ldr.w	r3, [r8]
 800397c:	9009      	str	r0, [sp, #36]	@ 0x24
 800397e:	3307      	adds	r3, #7
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	f103 0208 	add.w	r2, r3, #8
 8003988:	f894 a018 	ldrb.w	sl, [r4, #24]
 800398c:	f8d4 b000 	ldr.w	fp, [r4]
 8003990:	f8c8 2000 	str.w	r2, [r8]
 8003994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003998:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800399c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800399e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003c20 <_printf_float+0x2cc>)
 80039b0:	f7fd f8e0 	bl	8000b74 <__aeabi_dcmpun>
 80039b4:	bb70      	cbnz	r0, 8003a14 <_printf_float+0xc0>
 80039b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295
 80039be:	4b98      	ldr	r3, [pc, #608]	@ (8003c20 <_printf_float+0x2cc>)
 80039c0:	f7fd f8ba 	bl	8000b38 <__aeabi_dcmple>
 80039c4:	bb30      	cbnz	r0, 8003a14 <_printf_float+0xc0>
 80039c6:	2200      	movs	r2, #0
 80039c8:	2300      	movs	r3, #0
 80039ca:	4640      	mov	r0, r8
 80039cc:	4649      	mov	r1, r9
 80039ce:	f7fd f8a9 	bl	8000b24 <__aeabi_dcmplt>
 80039d2:	b110      	cbz	r0, 80039da <_printf_float+0x86>
 80039d4:	232d      	movs	r3, #45	@ 0x2d
 80039d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039da:	4a92      	ldr	r2, [pc, #584]	@ (8003c24 <_printf_float+0x2d0>)
 80039dc:	4b92      	ldr	r3, [pc, #584]	@ (8003c28 <_printf_float+0x2d4>)
 80039de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80039e2:	bf94      	ite	ls
 80039e4:	4690      	movls	r8, r2
 80039e6:	4698      	movhi	r8, r3
 80039e8:	2303      	movs	r3, #3
 80039ea:	f04f 0900 	mov.w	r9, #0
 80039ee:	6123      	str	r3, [r4, #16]
 80039f0:	f02b 0304 	bic.w	r3, fp, #4
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	4633      	mov	r3, r6
 80039f8:	4621      	mov	r1, r4
 80039fa:	4628      	mov	r0, r5
 80039fc:	9700      	str	r7, [sp, #0]
 80039fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003a00:	f000 f9d4 	bl	8003dac <_printf_common>
 8003a04:	3001      	adds	r0, #1
 8003a06:	f040 8090 	bne.w	8003b2a <_printf_float+0x1d6>
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0e:	b011      	add	sp, #68	@ 0x44
 8003a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	4640      	mov	r0, r8
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	f7fd f8aa 	bl	8000b74 <__aeabi_dcmpun>
 8003a20:	b148      	cbz	r0, 8003a36 <_printf_float+0xe2>
 8003a22:	464b      	mov	r3, r9
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bfb8      	it	lt
 8003a28:	232d      	movlt	r3, #45	@ 0x2d
 8003a2a:	4a80      	ldr	r2, [pc, #512]	@ (8003c2c <_printf_float+0x2d8>)
 8003a2c:	bfb8      	it	lt
 8003a2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <_printf_float+0x2dc>)
 8003a34:	e7d3      	b.n	80039de <_printf_float+0x8a>
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	d13f      	bne.n	8003ac0 <_printf_float+0x16c>
 8003a40:	2306      	movs	r3, #6
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	9206      	str	r2, [sp, #24]
 8003a4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003a50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003a54:	aa0d      	add	r2, sp, #52	@ 0x34
 8003a56:	9203      	str	r2, [sp, #12]
 8003a58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003a5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	4642      	mov	r2, r8
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4628      	mov	r0, r5
 8003a68:	464b      	mov	r3, r9
 8003a6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003a6c:	f7ff fed4 	bl	8003818 <__cvt>
 8003a70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003a72:	4680      	mov	r8, r0
 8003a74:	2947      	cmp	r1, #71	@ 0x47
 8003a76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003a78:	d128      	bne.n	8003acc <_printf_float+0x178>
 8003a7a:	1cc8      	adds	r0, r1, #3
 8003a7c:	db02      	blt.n	8003a84 <_printf_float+0x130>
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	4299      	cmp	r1, r3
 8003a82:	dd40      	ble.n	8003b06 <_printf_float+0x1b2>
 8003a84:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a88:	fa5f fa8a 	uxtb.w	sl, sl
 8003a8c:	4652      	mov	r2, sl
 8003a8e:	3901      	subs	r1, #1
 8003a90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003a94:	910d      	str	r1, [sp, #52]	@ 0x34
 8003a96:	f7ff ff23 	bl	80038e0 <__exponent>
 8003a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a9c:	4681      	mov	r9, r0
 8003a9e:	1813      	adds	r3, r2, r0
 8003aa0:	2a01      	cmp	r2, #1
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	dc02      	bgt.n	8003aac <_printf_float+0x158>
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	07d2      	lsls	r2, r2, #31
 8003aaa:	d501      	bpl.n	8003ab0 <_printf_float+0x15c>
 8003aac:	3301      	adds	r3, #1
 8003aae:	6123      	str	r3, [r4, #16]
 8003ab0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d09e      	beq.n	80039f6 <_printf_float+0xa2>
 8003ab8:	232d      	movs	r3, #45	@ 0x2d
 8003aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003abe:	e79a      	b.n	80039f6 <_printf_float+0xa2>
 8003ac0:	2947      	cmp	r1, #71	@ 0x47
 8003ac2:	d1bf      	bne.n	8003a44 <_printf_float+0xf0>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1bd      	bne.n	8003a44 <_printf_float+0xf0>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e7ba      	b.n	8003a42 <_printf_float+0xee>
 8003acc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ad0:	d9dc      	bls.n	8003a8c <_printf_float+0x138>
 8003ad2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ad6:	d118      	bne.n	8003b0a <_printf_float+0x1b6>
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	6863      	ldr	r3, [r4, #4]
 8003adc:	dd0b      	ble.n	8003af6 <_printf_float+0x1a2>
 8003ade:	6121      	str	r1, [r4, #16]
 8003ae0:	b913      	cbnz	r3, 8003ae8 <_printf_float+0x194>
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d502      	bpl.n	8003aee <_printf_float+0x19a>
 8003ae8:	3301      	adds	r3, #1
 8003aea:	440b      	add	r3, r1
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	f04f 0900 	mov.w	r9, #0
 8003af2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003af4:	e7dc      	b.n	8003ab0 <_printf_float+0x15c>
 8003af6:	b913      	cbnz	r3, 8003afe <_printf_float+0x1aa>
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	07d2      	lsls	r2, r2, #31
 8003afc:	d501      	bpl.n	8003b02 <_printf_float+0x1ae>
 8003afe:	3302      	adds	r3, #2
 8003b00:	e7f4      	b.n	8003aec <_printf_float+0x198>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e7f2      	b.n	8003aec <_printf_float+0x198>
 8003b06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	db05      	blt.n	8003b1c <_printf_float+0x1c8>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	6121      	str	r1, [r4, #16]
 8003b14:	07d8      	lsls	r0, r3, #31
 8003b16:	d5ea      	bpl.n	8003aee <_printf_float+0x19a>
 8003b18:	1c4b      	adds	r3, r1, #1
 8003b1a:	e7e7      	b.n	8003aec <_printf_float+0x198>
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	bfcc      	ite	gt
 8003b20:	2201      	movgt	r2, #1
 8003b22:	f1c1 0202 	rsble	r2, r1, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	e7e0      	b.n	8003aec <_printf_float+0x198>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	055a      	lsls	r2, r3, #21
 8003b2e:	d407      	bmi.n	8003b40 <_printf_float+0x1ec>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	4642      	mov	r2, r8
 8003b34:	4631      	mov	r1, r6
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b8      	blx	r7
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d12b      	bne.n	8003b96 <_printf_float+0x242>
 8003b3e:	e764      	b.n	8003a0a <_printf_float+0xb6>
 8003b40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b44:	f240 80dc 	bls.w	8003d00 <_printf_float+0x3ac>
 8003b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f7fc ffde 	bl	8000b10 <__aeabi_dcmpeq>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d033      	beq.n	8003bc0 <_printf_float+0x26c>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	4a35      	ldr	r2, [pc, #212]	@ (8003c34 <_printf_float+0x2e0>)
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f af51 	beq.w	8003a0a <_printf_float+0xb6>
 8003b68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003b6c:	4543      	cmp	r3, r8
 8003b6e:	db02      	blt.n	8003b76 <_printf_float+0x222>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	07d8      	lsls	r0, r3, #31
 8003b74:	d50f      	bpl.n	8003b96 <_printf_float+0x242>
 8003b76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b8      	blx	r7
 8003b80:	3001      	adds	r0, #1
 8003b82:	f43f af42 	beq.w	8003a0a <_printf_float+0xb6>
 8003b86:	f04f 0900 	mov.w	r9, #0
 8003b8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b8e:	f104 0a1a 	add.w	sl, r4, #26
 8003b92:	45c8      	cmp	r8, r9
 8003b94:	dc09      	bgt.n	8003baa <_printf_float+0x256>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	079b      	lsls	r3, r3, #30
 8003b9a:	f100 8102 	bmi.w	8003da2 <_printf_float+0x44e>
 8003b9e:	68e0      	ldr	r0, [r4, #12]
 8003ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ba2:	4298      	cmp	r0, r3
 8003ba4:	bfb8      	it	lt
 8003ba6:	4618      	movlt	r0, r3
 8003ba8:	e731      	b.n	8003a0e <_printf_float+0xba>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4652      	mov	r2, sl
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	47b8      	blx	r7
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	f43f af28 	beq.w	8003a0a <_printf_float+0xb6>
 8003bba:	f109 0901 	add.w	r9, r9, #1
 8003bbe:	e7e8      	b.n	8003b92 <_printf_float+0x23e>
 8003bc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dc38      	bgt.n	8003c38 <_printf_float+0x2e4>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4631      	mov	r1, r6
 8003bca:	4628      	mov	r0, r5
 8003bcc:	4a19      	ldr	r2, [pc, #100]	@ (8003c34 <_printf_float+0x2e0>)
 8003bce:	47b8      	blx	r7
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	f43f af1a 	beq.w	8003a0a <_printf_float+0xb6>
 8003bd6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003bda:	ea59 0303 	orrs.w	r3, r9, r3
 8003bde:	d102      	bne.n	8003be6 <_printf_float+0x292>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	07d9      	lsls	r1, r3, #31
 8003be4:	d5d7      	bpl.n	8003b96 <_printf_float+0x242>
 8003be6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f af0a 	beq.w	8003a0a <_printf_float+0xb6>
 8003bf6:	f04f 0a00 	mov.w	sl, #0
 8003bfa:	f104 0b1a 	add.w	fp, r4, #26
 8003bfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c00:	425b      	negs	r3, r3
 8003c02:	4553      	cmp	r3, sl
 8003c04:	dc01      	bgt.n	8003c0a <_printf_float+0x2b6>
 8003c06:	464b      	mov	r3, r9
 8003c08:	e793      	b.n	8003b32 <_printf_float+0x1de>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	465a      	mov	r2, fp
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4628      	mov	r0, r5
 8003c12:	47b8      	blx	r7
 8003c14:	3001      	adds	r0, #1
 8003c16:	f43f aef8 	beq.w	8003a0a <_printf_float+0xb6>
 8003c1a:	f10a 0a01 	add.w	sl, sl, #1
 8003c1e:	e7ee      	b.n	8003bfe <_printf_float+0x2aa>
 8003c20:	7fefffff 	.word	0x7fefffff
 8003c24:	080064ba 	.word	0x080064ba
 8003c28:	080064be 	.word	0x080064be
 8003c2c:	080064c2 	.word	0x080064c2
 8003c30:	080064c6 	.word	0x080064c6
 8003c34:	080064ca 	.word	0x080064ca
 8003c38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c3e:	4553      	cmp	r3, sl
 8003c40:	bfa8      	it	ge
 8003c42:	4653      	movge	r3, sl
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	4699      	mov	r9, r3
 8003c48:	dc36      	bgt.n	8003cb8 <_printf_float+0x364>
 8003c4a:	f04f 0b00 	mov.w	fp, #0
 8003c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c52:	f104 021a 	add.w	r2, r4, #26
 8003c56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c5a:	eba3 0309 	sub.w	r3, r3, r9
 8003c5e:	455b      	cmp	r3, fp
 8003c60:	dc31      	bgt.n	8003cc6 <_printf_float+0x372>
 8003c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c64:	459a      	cmp	sl, r3
 8003c66:	dc3a      	bgt.n	8003cde <_printf_float+0x38a>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	07da      	lsls	r2, r3, #31
 8003c6c:	d437      	bmi.n	8003cde <_printf_float+0x38a>
 8003c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c70:	ebaa 0903 	sub.w	r9, sl, r3
 8003c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c76:	ebaa 0303 	sub.w	r3, sl, r3
 8003c7a:	4599      	cmp	r9, r3
 8003c7c:	bfa8      	it	ge
 8003c7e:	4699      	movge	r9, r3
 8003c80:	f1b9 0f00 	cmp.w	r9, #0
 8003c84:	dc33      	bgt.n	8003cee <_printf_float+0x39a>
 8003c86:	f04f 0800 	mov.w	r8, #0
 8003c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c8e:	f104 0b1a 	add.w	fp, r4, #26
 8003c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c94:	ebaa 0303 	sub.w	r3, sl, r3
 8003c98:	eba3 0309 	sub.w	r3, r3, r9
 8003c9c:	4543      	cmp	r3, r8
 8003c9e:	f77f af7a 	ble.w	8003b96 <_printf_float+0x242>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	465a      	mov	r2, fp
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	4628      	mov	r0, r5
 8003caa:	47b8      	blx	r7
 8003cac:	3001      	adds	r0, #1
 8003cae:	f43f aeac 	beq.w	8003a0a <_printf_float+0xb6>
 8003cb2:	f108 0801 	add.w	r8, r8, #1
 8003cb6:	e7ec      	b.n	8003c92 <_printf_float+0x33e>
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d1c2      	bne.n	8003c4a <_printf_float+0x2f6>
 8003cc4:	e6a1      	b.n	8003a0a <_printf_float+0xb6>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	920a      	str	r2, [sp, #40]	@ 0x28
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f ae9a 	beq.w	8003a0a <_printf_float+0xb6>
 8003cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cd8:	f10b 0b01 	add.w	fp, fp, #1
 8003cdc:	e7bb      	b.n	8003c56 <_printf_float+0x302>
 8003cde:	4631      	mov	r1, r6
 8003ce0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b8      	blx	r7
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d1c0      	bne.n	8003c6e <_printf_float+0x31a>
 8003cec:	e68d      	b.n	8003a0a <_printf_float+0xb6>
 8003cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	4442      	add	r2, r8
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d1c3      	bne.n	8003c86 <_printf_float+0x332>
 8003cfe:	e684      	b.n	8003a0a <_printf_float+0xb6>
 8003d00:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003d04:	f1ba 0f01 	cmp.w	sl, #1
 8003d08:	dc01      	bgt.n	8003d0e <_printf_float+0x3ba>
 8003d0a:	07db      	lsls	r3, r3, #31
 8003d0c:	d536      	bpl.n	8003d7c <_printf_float+0x428>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4642      	mov	r2, r8
 8003d12:	4631      	mov	r1, r6
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b8      	blx	r7
 8003d18:	3001      	adds	r0, #1
 8003d1a:	f43f ae76 	beq.w	8003a0a <_printf_float+0xb6>
 8003d1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d22:	4631      	mov	r1, r6
 8003d24:	4628      	mov	r0, r5
 8003d26:	47b8      	blx	r7
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f43f ae6e 	beq.w	8003a0a <_printf_float+0xb6>
 8003d2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d32:	2200      	movs	r2, #0
 8003d34:	2300      	movs	r3, #0
 8003d36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d3a:	f7fc fee9 	bl	8000b10 <__aeabi_dcmpeq>
 8003d3e:	b9c0      	cbnz	r0, 8003d72 <_printf_float+0x41e>
 8003d40:	4653      	mov	r3, sl
 8003d42:	f108 0201 	add.w	r2, r8, #1
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d10c      	bne.n	8003d6a <_printf_float+0x416>
 8003d50:	e65b      	b.n	8003a0a <_printf_float+0xb6>
 8003d52:	2301      	movs	r3, #1
 8003d54:	465a      	mov	r2, fp
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f43f ae54 	beq.w	8003a0a <_printf_float+0xb6>
 8003d62:	f108 0801 	add.w	r8, r8, #1
 8003d66:	45d0      	cmp	r8, sl
 8003d68:	dbf3      	blt.n	8003d52 <_printf_float+0x3fe>
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003d70:	e6e0      	b.n	8003b34 <_printf_float+0x1e0>
 8003d72:	f04f 0800 	mov.w	r8, #0
 8003d76:	f104 0b1a 	add.w	fp, r4, #26
 8003d7a:	e7f4      	b.n	8003d66 <_printf_float+0x412>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4642      	mov	r2, r8
 8003d80:	e7e1      	b.n	8003d46 <_printf_float+0x3f2>
 8003d82:	2301      	movs	r3, #1
 8003d84:	464a      	mov	r2, r9
 8003d86:	4631      	mov	r1, r6
 8003d88:	4628      	mov	r0, r5
 8003d8a:	47b8      	blx	r7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f43f ae3c 	beq.w	8003a0a <_printf_float+0xb6>
 8003d92:	f108 0801 	add.w	r8, r8, #1
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003d9a:	1a5b      	subs	r3, r3, r1
 8003d9c:	4543      	cmp	r3, r8
 8003d9e:	dcf0      	bgt.n	8003d82 <_printf_float+0x42e>
 8003da0:	e6fd      	b.n	8003b9e <_printf_float+0x24a>
 8003da2:	f04f 0800 	mov.w	r8, #0
 8003da6:	f104 0919 	add.w	r9, r4, #25
 8003daa:	e7f4      	b.n	8003d96 <_printf_float+0x442>

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4698      	mov	r8, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	4607      	mov	r7, r0
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bfb8      	it	lt
 8003dbe:	4613      	movlt	r3, r2
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc2b      	bgt.n	8003e4c <_printf_common+0xa0>
 8003df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	3b00      	subs	r3, #0
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d430      	bmi.n	8003e66 <_printf_common+0xba>
 8003e04:	4641      	mov	r1, r8
 8003e06:	4638      	mov	r0, r7
 8003e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e0c:	47c8      	blx	r9
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d023      	beq.n	8003e5a <_printf_common+0xae>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	6922      	ldr	r2, [r4, #16]
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf14      	ite	ne
 8003e1e:	2500      	movne	r5, #0
 8003e20:	6833      	ldreq	r3, [r6, #0]
 8003e22:	f04f 0600 	mov.w	r6, #0
 8003e26:	bf08      	it	eq
 8003e28:	68e5      	ldreq	r5, [r4, #12]
 8003e2a:	f104 041a 	add.w	r4, r4, #26
 8003e2e:	bf08      	it	eq
 8003e30:	1aed      	subeq	r5, r5, r3
 8003e32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e36:	bf08      	it	eq
 8003e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bfc4      	itt	gt
 8003e40:	1a9b      	subgt	r3, r3, r2
 8003e42:	18ed      	addgt	r5, r5, r3
 8003e44:	42b5      	cmp	r5, r6
 8003e46:	d11a      	bne.n	8003e7e <_printf_common+0xd2>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e008      	b.n	8003e5e <_printf_common+0xb2>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4652      	mov	r2, sl
 8003e50:	4641      	mov	r1, r8
 8003e52:	4638      	mov	r0, r7
 8003e54:	47c8      	blx	r9
 8003e56:	3001      	adds	r0, #1
 8003e58:	d103      	bne.n	8003e62 <_printf_common+0xb6>
 8003e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7c1      	b.n	8003dea <_printf_common+0x3e>
 8003e66:	2030      	movs	r0, #48	@ 0x30
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e74:	4422      	add	r2, r4
 8003e76:	3302      	adds	r3, #2
 8003e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e7c:	e7c2      	b.n	8003e04 <_printf_common+0x58>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4622      	mov	r2, r4
 8003e82:	4641      	mov	r1, r8
 8003e84:	4638      	mov	r0, r7
 8003e86:	47c8      	blx	r9
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d0e6      	beq.n	8003e5a <_printf_common+0xae>
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7d9      	b.n	8003e44 <_printf_common+0x98>

08003e90 <_printf_i>:
 8003e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	7e0f      	ldrb	r7, [r1, #24]
 8003e96:	4691      	mov	r9, r2
 8003e98:	2f78      	cmp	r7, #120	@ 0x78
 8003e9a:	4680      	mov	r8, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	469a      	mov	sl, r3
 8003ea0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ea6:	d807      	bhi.n	8003eb8 <_printf_i+0x28>
 8003ea8:	2f62      	cmp	r7, #98	@ 0x62
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x32>
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	f000 80d3 	beq.w	8004058 <_printf_i+0x1c8>
 8003eb2:	2f58      	cmp	r7, #88	@ 0x58
 8003eb4:	f000 80ba 	beq.w	800402c <_printf_i+0x19c>
 8003eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ec0:	e03a      	b.n	8003f38 <_printf_i+0xa8>
 8003ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ec6:	2b15      	cmp	r3, #21
 8003ec8:	d8f6      	bhi.n	8003eb8 <_printf_i+0x28>
 8003eca:	a101      	add	r1, pc, #4	@ (adr r1, 8003ed0 <_printf_i+0x40>)
 8003ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003eb9 	.word	0x08003eb9
 8003edc:	08003eb9 	.word	0x08003eb9
 8003ee0:	08003eb9 	.word	0x08003eb9
 8003ee4:	08003eb9 	.word	0x08003eb9
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003eb9 	.word	0x08003eb9
 8003ef0:	08003eb9 	.word	0x08003eb9
 8003ef4:	08003eb9 	.word	0x08003eb9
 8003ef8:	08003eb9 	.word	0x08003eb9
 8003efc:	0800403f 	.word	0x0800403f
 8003f00:	08003f67 	.word	0x08003f67
 8003f04:	08003ff9 	.word	0x08003ff9
 8003f08:	08003eb9 	.word	0x08003eb9
 8003f0c:	08003eb9 	.word	0x08003eb9
 8003f10:	08004061 	.word	0x08004061
 8003f14:	08003eb9 	.word	0x08003eb9
 8003f18:	08003f67 	.word	0x08003f67
 8003f1c:	08003eb9 	.word	0x08003eb9
 8003f20:	08003eb9 	.word	0x08003eb9
 8003f24:	08004001 	.word	0x08004001
 8003f28:	6833      	ldr	r3, [r6, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6032      	str	r2, [r6, #0]
 8003f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e09e      	b.n	800407a <_printf_i+0x1ea>
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	6820      	ldr	r0, [r4, #0]
 8003f40:	1d19      	adds	r1, r3, #4
 8003f42:	6031      	str	r1, [r6, #0]
 8003f44:	0606      	lsls	r6, r0, #24
 8003f46:	d501      	bpl.n	8003f4c <_printf_i+0xbc>
 8003f48:	681d      	ldr	r5, [r3, #0]
 8003f4a:	e003      	b.n	8003f54 <_printf_i+0xc4>
 8003f4c:	0645      	lsls	r5, r0, #25
 8003f4e:	d5fb      	bpl.n	8003f48 <_printf_i+0xb8>
 8003f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	da03      	bge.n	8003f60 <_printf_i+0xd0>
 8003f58:	232d      	movs	r3, #45	@ 0x2d
 8003f5a:	426d      	negs	r5, r5
 8003f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f60:	230a      	movs	r3, #10
 8003f62:	4859      	ldr	r0, [pc, #356]	@ (80040c8 <_printf_i+0x238>)
 8003f64:	e011      	b.n	8003f8a <_printf_i+0xfa>
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	6833      	ldr	r3, [r6, #0]
 8003f6a:	0608      	lsls	r0, r1, #24
 8003f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f70:	d402      	bmi.n	8003f78 <_printf_i+0xe8>
 8003f72:	0649      	lsls	r1, r1, #25
 8003f74:	bf48      	it	mi
 8003f76:	b2ad      	uxthmi	r5, r5
 8003f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	bf14      	ite	ne
 8003f7e:	230a      	movne	r3, #10
 8003f80:	2308      	moveq	r3, #8
 8003f82:	4851      	ldr	r0, [pc, #324]	@ (80040c8 <_printf_i+0x238>)
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f8a:	6866      	ldr	r6, [r4, #4]
 8003f8c:	2e00      	cmp	r6, #0
 8003f8e:	bfa8      	it	ge
 8003f90:	6821      	ldrge	r1, [r4, #0]
 8003f92:	60a6      	str	r6, [r4, #8]
 8003f94:	bfa4      	itt	ge
 8003f96:	f021 0104 	bicge.w	r1, r1, #4
 8003f9a:	6021      	strge	r1, [r4, #0]
 8003f9c:	b90d      	cbnz	r5, 8003fa2 <_printf_i+0x112>
 8003f9e:	2e00      	cmp	r6, #0
 8003fa0:	d04b      	beq.n	800403a <_printf_i+0x1aa>
 8003fa2:	4616      	mov	r6, r2
 8003fa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa8:	fb03 5711 	mls	r7, r3, r1, r5
 8003fac:	5dc7      	ldrb	r7, [r0, r7]
 8003fae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fb2:	462f      	mov	r7, r5
 8003fb4:	42bb      	cmp	r3, r7
 8003fb6:	460d      	mov	r5, r1
 8003fb8:	d9f4      	bls.n	8003fa4 <_printf_i+0x114>
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d10b      	bne.n	8003fd6 <_printf_i+0x146>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	07df      	lsls	r7, r3, #31
 8003fc2:	d508      	bpl.n	8003fd6 <_printf_i+0x146>
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	6861      	ldr	r1, [r4, #4]
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	bfde      	ittt	le
 8003fcc:	2330      	movle	r3, #48	@ 0x30
 8003fce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd6:	1b92      	subs	r2, r2, r6
 8003fd8:	6122      	str	r2, [r4, #16]
 8003fda:	464b      	mov	r3, r9
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4640      	mov	r0, r8
 8003fe0:	f8cd a000 	str.w	sl, [sp]
 8003fe4:	aa03      	add	r2, sp, #12
 8003fe6:	f7ff fee1 	bl	8003dac <_printf_common>
 8003fea:	3001      	adds	r0, #1
 8003fec:	d14a      	bne.n	8004084 <_printf_i+0x1f4>
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff2:	b004      	add	sp, #16
 8003ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	f043 0320 	orr.w	r3, r3, #32
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	2778      	movs	r7, #120	@ 0x78
 8004002:	4832      	ldr	r0, [pc, #200]	@ (80040cc <_printf_i+0x23c>)
 8004004:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	6831      	ldr	r1, [r6, #0]
 800400c:	061f      	lsls	r7, r3, #24
 800400e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004012:	d402      	bmi.n	800401a <_printf_i+0x18a>
 8004014:	065f      	lsls	r7, r3, #25
 8004016:	bf48      	it	mi
 8004018:	b2ad      	uxthmi	r5, r5
 800401a:	6031      	str	r1, [r6, #0]
 800401c:	07d9      	lsls	r1, r3, #31
 800401e:	bf44      	itt	mi
 8004020:	f043 0320 	orrmi.w	r3, r3, #32
 8004024:	6023      	strmi	r3, [r4, #0]
 8004026:	b11d      	cbz	r5, 8004030 <_printf_i+0x1a0>
 8004028:	2310      	movs	r3, #16
 800402a:	e7ab      	b.n	8003f84 <_printf_i+0xf4>
 800402c:	4826      	ldr	r0, [pc, #152]	@ (80040c8 <_printf_i+0x238>)
 800402e:	e7e9      	b.n	8004004 <_printf_i+0x174>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f023 0320 	bic.w	r3, r3, #32
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	e7f6      	b.n	8004028 <_printf_i+0x198>
 800403a:	4616      	mov	r6, r2
 800403c:	e7bd      	b.n	8003fba <_printf_i+0x12a>
 800403e:	6833      	ldr	r3, [r6, #0]
 8004040:	6825      	ldr	r5, [r4, #0]
 8004042:	1d18      	adds	r0, r3, #4
 8004044:	6961      	ldr	r1, [r4, #20]
 8004046:	6030      	str	r0, [r6, #0]
 8004048:	062e      	lsls	r6, r5, #24
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	d501      	bpl.n	8004052 <_printf_i+0x1c2>
 800404e:	6019      	str	r1, [r3, #0]
 8004050:	e002      	b.n	8004058 <_printf_i+0x1c8>
 8004052:	0668      	lsls	r0, r5, #25
 8004054:	d5fb      	bpl.n	800404e <_printf_i+0x1be>
 8004056:	8019      	strh	r1, [r3, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	4616      	mov	r6, r2
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	e7bc      	b.n	8003fda <_printf_i+0x14a>
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	2100      	movs	r1, #0
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	6032      	str	r2, [r6, #0]
 8004068:	681e      	ldr	r6, [r3, #0]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	4630      	mov	r0, r6
 800406e:	f000 fa28 	bl	80044c2 <memchr>
 8004072:	b108      	cbz	r0, 8004078 <_printf_i+0x1e8>
 8004074:	1b80      	subs	r0, r0, r6
 8004076:	6060      	str	r0, [r4, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004082:	e7aa      	b.n	8003fda <_printf_i+0x14a>
 8004084:	4632      	mov	r2, r6
 8004086:	4649      	mov	r1, r9
 8004088:	4640      	mov	r0, r8
 800408a:	6923      	ldr	r3, [r4, #16]
 800408c:	47d0      	blx	sl
 800408e:	3001      	adds	r0, #1
 8004090:	d0ad      	beq.n	8003fee <_printf_i+0x15e>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	079b      	lsls	r3, r3, #30
 8004096:	d413      	bmi.n	80040c0 <_printf_i+0x230>
 8004098:	68e0      	ldr	r0, [r4, #12]
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	4298      	cmp	r0, r3
 800409e:	bfb8      	it	lt
 80040a0:	4618      	movlt	r0, r3
 80040a2:	e7a6      	b.n	8003ff2 <_printf_i+0x162>
 80040a4:	2301      	movs	r3, #1
 80040a6:	4632      	mov	r2, r6
 80040a8:	4649      	mov	r1, r9
 80040aa:	4640      	mov	r0, r8
 80040ac:	47d0      	blx	sl
 80040ae:	3001      	adds	r0, #1
 80040b0:	d09d      	beq.n	8003fee <_printf_i+0x15e>
 80040b2:	3501      	adds	r5, #1
 80040b4:	68e3      	ldr	r3, [r4, #12]
 80040b6:	9903      	ldr	r1, [sp, #12]
 80040b8:	1a5b      	subs	r3, r3, r1
 80040ba:	42ab      	cmp	r3, r5
 80040bc:	dcf2      	bgt.n	80040a4 <_printf_i+0x214>
 80040be:	e7eb      	b.n	8004098 <_printf_i+0x208>
 80040c0:	2500      	movs	r5, #0
 80040c2:	f104 0619 	add.w	r6, r4, #25
 80040c6:	e7f5      	b.n	80040b4 <_printf_i+0x224>
 80040c8:	080064cc 	.word	0x080064cc
 80040cc:	080064dd 	.word	0x080064dd

080040d0 <std>:
 80040d0:	2300      	movs	r3, #0
 80040d2:	b510      	push	{r4, lr}
 80040d4:	4604      	mov	r4, r0
 80040d6:	e9c0 3300 	strd	r3, r3, [r0]
 80040da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040de:	6083      	str	r3, [r0, #8]
 80040e0:	8181      	strh	r1, [r0, #12]
 80040e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80040e4:	81c2      	strh	r2, [r0, #14]
 80040e6:	6183      	str	r3, [r0, #24]
 80040e8:	4619      	mov	r1, r3
 80040ea:	2208      	movs	r2, #8
 80040ec:	305c      	adds	r0, #92	@ 0x5c
 80040ee:	f000 f914 	bl	800431a <memset>
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <std+0x58>)
 80040f4:	6224      	str	r4, [r4, #32]
 80040f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80040f8:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <std+0x5c>)
 80040fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <std+0x60>)
 80040fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004100:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <std+0x64>)
 8004102:	6323      	str	r3, [r4, #48]	@ 0x30
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <std+0x68>)
 8004106:	429c      	cmp	r4, r3
 8004108:	d006      	beq.n	8004118 <std+0x48>
 800410a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800410e:	4294      	cmp	r4, r2
 8004110:	d002      	beq.n	8004118 <std+0x48>
 8004112:	33d0      	adds	r3, #208	@ 0xd0
 8004114:	429c      	cmp	r4, r3
 8004116:	d105      	bne.n	8004124 <std+0x54>
 8004118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800411c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004120:	f000 b9cc 	b.w	80044bc <__retarget_lock_init_recursive>
 8004124:	bd10      	pop	{r4, pc}
 8004126:	bf00      	nop
 8004128:	08004295 	.word	0x08004295
 800412c:	080042b7 	.word	0x080042b7
 8004130:	080042ef 	.word	0x080042ef
 8004134:	08004313 	.word	0x08004313
 8004138:	20000334 	.word	0x20000334

0800413c <stdio_exit_handler>:
 800413c:	4a02      	ldr	r2, [pc, #8]	@ (8004148 <stdio_exit_handler+0xc>)
 800413e:	4903      	ldr	r1, [pc, #12]	@ (800414c <stdio_exit_handler+0x10>)
 8004140:	4803      	ldr	r0, [pc, #12]	@ (8004150 <stdio_exit_handler+0x14>)
 8004142:	f000 b869 	b.w	8004218 <_fwalk_sglue>
 8004146:	bf00      	nop
 8004148:	2000000c 	.word	0x2000000c
 800414c:	08005cc1 	.word	0x08005cc1
 8004150:	2000001c 	.word	0x2000001c

08004154 <cleanup_stdio>:
 8004154:	6841      	ldr	r1, [r0, #4]
 8004156:	4b0c      	ldr	r3, [pc, #48]	@ (8004188 <cleanup_stdio+0x34>)
 8004158:	b510      	push	{r4, lr}
 800415a:	4299      	cmp	r1, r3
 800415c:	4604      	mov	r4, r0
 800415e:	d001      	beq.n	8004164 <cleanup_stdio+0x10>
 8004160:	f001 fdae 	bl	8005cc0 <_fflush_r>
 8004164:	68a1      	ldr	r1, [r4, #8]
 8004166:	4b09      	ldr	r3, [pc, #36]	@ (800418c <cleanup_stdio+0x38>)
 8004168:	4299      	cmp	r1, r3
 800416a:	d002      	beq.n	8004172 <cleanup_stdio+0x1e>
 800416c:	4620      	mov	r0, r4
 800416e:	f001 fda7 	bl	8005cc0 <_fflush_r>
 8004172:	68e1      	ldr	r1, [r4, #12]
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <cleanup_stdio+0x3c>)
 8004176:	4299      	cmp	r1, r3
 8004178:	d004      	beq.n	8004184 <cleanup_stdio+0x30>
 800417a:	4620      	mov	r0, r4
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f001 bd9e 	b.w	8005cc0 <_fflush_r>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	bf00      	nop
 8004188:	20000334 	.word	0x20000334
 800418c:	2000039c 	.word	0x2000039c
 8004190:	20000404 	.word	0x20000404

08004194 <global_stdio_init.part.0>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <global_stdio_init.part.0+0x30>)
 8004198:	4c0b      	ldr	r4, [pc, #44]	@ (80041c8 <global_stdio_init.part.0+0x34>)
 800419a:	4a0c      	ldr	r2, [pc, #48]	@ (80041cc <global_stdio_init.part.0+0x38>)
 800419c:	4620      	mov	r0, r4
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	2104      	movs	r1, #4
 80041a2:	2200      	movs	r2, #0
 80041a4:	f7ff ff94 	bl	80040d0 <std>
 80041a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041ac:	2201      	movs	r2, #1
 80041ae:	2109      	movs	r1, #9
 80041b0:	f7ff ff8e 	bl	80040d0 <std>
 80041b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041b8:	2202      	movs	r2, #2
 80041ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041be:	2112      	movs	r1, #18
 80041c0:	f7ff bf86 	b.w	80040d0 <std>
 80041c4:	2000046c 	.word	0x2000046c
 80041c8:	20000334 	.word	0x20000334
 80041cc:	0800413d 	.word	0x0800413d

080041d0 <__sfp_lock_acquire>:
 80041d0:	4801      	ldr	r0, [pc, #4]	@ (80041d8 <__sfp_lock_acquire+0x8>)
 80041d2:	f000 b974 	b.w	80044be <__retarget_lock_acquire_recursive>
 80041d6:	bf00      	nop
 80041d8:	20000475 	.word	0x20000475

080041dc <__sfp_lock_release>:
 80041dc:	4801      	ldr	r0, [pc, #4]	@ (80041e4 <__sfp_lock_release+0x8>)
 80041de:	f000 b96f 	b.w	80044c0 <__retarget_lock_release_recursive>
 80041e2:	bf00      	nop
 80041e4:	20000475 	.word	0x20000475

080041e8 <__sinit>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4604      	mov	r4, r0
 80041ec:	f7ff fff0 	bl	80041d0 <__sfp_lock_acquire>
 80041f0:	6a23      	ldr	r3, [r4, #32]
 80041f2:	b11b      	cbz	r3, 80041fc <__sinit+0x14>
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f8:	f7ff bff0 	b.w	80041dc <__sfp_lock_release>
 80041fc:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <__sinit+0x28>)
 80041fe:	6223      	str	r3, [r4, #32]
 8004200:	4b04      	ldr	r3, [pc, #16]	@ (8004214 <__sinit+0x2c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f5      	bne.n	80041f4 <__sinit+0xc>
 8004208:	f7ff ffc4 	bl	8004194 <global_stdio_init.part.0>
 800420c:	e7f2      	b.n	80041f4 <__sinit+0xc>
 800420e:	bf00      	nop
 8004210:	08004155 	.word	0x08004155
 8004214:	2000046c 	.word	0x2000046c

08004218 <_fwalk_sglue>:
 8004218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800421c:	4607      	mov	r7, r0
 800421e:	4688      	mov	r8, r1
 8004220:	4614      	mov	r4, r2
 8004222:	2600      	movs	r6, #0
 8004224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004228:	f1b9 0901 	subs.w	r9, r9, #1
 800422c:	d505      	bpl.n	800423a <_fwalk_sglue+0x22>
 800422e:	6824      	ldr	r4, [r4, #0]
 8004230:	2c00      	cmp	r4, #0
 8004232:	d1f7      	bne.n	8004224 <_fwalk_sglue+0xc>
 8004234:	4630      	mov	r0, r6
 8004236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423a:	89ab      	ldrh	r3, [r5, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d907      	bls.n	8004250 <_fwalk_sglue+0x38>
 8004240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004244:	3301      	adds	r3, #1
 8004246:	d003      	beq.n	8004250 <_fwalk_sglue+0x38>
 8004248:	4629      	mov	r1, r5
 800424a:	4638      	mov	r0, r7
 800424c:	47c0      	blx	r8
 800424e:	4306      	orrs	r6, r0
 8004250:	3568      	adds	r5, #104	@ 0x68
 8004252:	e7e9      	b.n	8004228 <_fwalk_sglue+0x10>

08004254 <siprintf>:
 8004254:	b40e      	push	{r1, r2, r3}
 8004256:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800425a:	b500      	push	{lr}
 800425c:	b09c      	sub	sp, #112	@ 0x70
 800425e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004260:	9002      	str	r0, [sp, #8]
 8004262:	9006      	str	r0, [sp, #24]
 8004264:	9107      	str	r1, [sp, #28]
 8004266:	9104      	str	r1, [sp, #16]
 8004268:	4808      	ldr	r0, [pc, #32]	@ (800428c <siprintf+0x38>)
 800426a:	4909      	ldr	r1, [pc, #36]	@ (8004290 <siprintf+0x3c>)
 800426c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004270:	9105      	str	r1, [sp, #20]
 8004272:	6800      	ldr	r0, [r0, #0]
 8004274:	a902      	add	r1, sp, #8
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	f001 fba6 	bl	80059c8 <_svfiprintf_r>
 800427c:	2200      	movs	r2, #0
 800427e:	9b02      	ldr	r3, [sp, #8]
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	b01c      	add	sp, #112	@ 0x70
 8004284:	f85d eb04 	ldr.w	lr, [sp], #4
 8004288:	b003      	add	sp, #12
 800428a:	4770      	bx	lr
 800428c:	20000018 	.word	0x20000018
 8004290:	ffff0208 	.word	0xffff0208

08004294 <__sread>:
 8004294:	b510      	push	{r4, lr}
 8004296:	460c      	mov	r4, r1
 8004298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429c:	f000 f89c 	bl	80043d8 <_read_r>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	bfab      	itete	ge
 80042a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042a6:	89a3      	ldrhlt	r3, [r4, #12]
 80042a8:	181b      	addge	r3, r3, r0
 80042aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042ae:	bfac      	ite	ge
 80042b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042b2:	81a3      	strhlt	r3, [r4, #12]
 80042b4:	bd10      	pop	{r4, pc}

080042b6 <__swrite>:
 80042b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ba:	461f      	mov	r7, r3
 80042bc:	898b      	ldrh	r3, [r1, #12]
 80042be:	4605      	mov	r5, r0
 80042c0:	05db      	lsls	r3, r3, #23
 80042c2:	460c      	mov	r4, r1
 80042c4:	4616      	mov	r6, r2
 80042c6:	d505      	bpl.n	80042d4 <__swrite+0x1e>
 80042c8:	2302      	movs	r3, #2
 80042ca:	2200      	movs	r2, #0
 80042cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d0:	f000 f870 	bl	80043b4 <_lseek_r>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	4632      	mov	r2, r6
 80042d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	4628      	mov	r0, r5
 80042e0:	463b      	mov	r3, r7
 80042e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ea:	f000 b8ab 	b.w	8004444 <_write_r>

080042ee <__sseek>:
 80042ee:	b510      	push	{r4, lr}
 80042f0:	460c      	mov	r4, r1
 80042f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f6:	f000 f85d 	bl	80043b4 <_lseek_r>
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	bf15      	itete	ne
 8004300:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004302:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004306:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800430a:	81a3      	strheq	r3, [r4, #12]
 800430c:	bf18      	it	ne
 800430e:	81a3      	strhne	r3, [r4, #12]
 8004310:	bd10      	pop	{r4, pc}

08004312 <__sclose>:
 8004312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004316:	f000 b83d 	b.w	8004394 <_close_r>

0800431a <memset>:
 800431a:	4603      	mov	r3, r0
 800431c:	4402      	add	r2, r0
 800431e:	4293      	cmp	r3, r2
 8004320:	d100      	bne.n	8004324 <memset+0xa>
 8004322:	4770      	bx	lr
 8004324:	f803 1b01 	strb.w	r1, [r3], #1
 8004328:	e7f9      	b.n	800431e <memset+0x4>

0800432a <_raise_r>:
 800432a:	291f      	cmp	r1, #31
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4605      	mov	r5, r0
 8004330:	460c      	mov	r4, r1
 8004332:	d904      	bls.n	800433e <_raise_r+0x14>
 8004334:	2316      	movs	r3, #22
 8004336:	6003      	str	r3, [r0, #0]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004340:	b112      	cbz	r2, 8004348 <_raise_r+0x1e>
 8004342:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004346:	b94b      	cbnz	r3, 800435c <_raise_r+0x32>
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f869 	bl	8004420 <_getpid_r>
 800434e:	4622      	mov	r2, r4
 8004350:	4601      	mov	r1, r0
 8004352:	4628      	mov	r0, r5
 8004354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004358:	f000 b850 	b.w	80043fc <_kill_r>
 800435c:	2b01      	cmp	r3, #1
 800435e:	d00a      	beq.n	8004376 <_raise_r+0x4c>
 8004360:	1c59      	adds	r1, r3, #1
 8004362:	d103      	bne.n	800436c <_raise_r+0x42>
 8004364:	2316      	movs	r3, #22
 8004366:	6003      	str	r3, [r0, #0]
 8004368:	2001      	movs	r0, #1
 800436a:	e7e7      	b.n	800433c <_raise_r+0x12>
 800436c:	2100      	movs	r1, #0
 800436e:	4620      	mov	r0, r4
 8004370:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004374:	4798      	blx	r3
 8004376:	2000      	movs	r0, #0
 8004378:	e7e0      	b.n	800433c <_raise_r+0x12>
	...

0800437c <raise>:
 800437c:	4b02      	ldr	r3, [pc, #8]	@ (8004388 <raise+0xc>)
 800437e:	4601      	mov	r1, r0
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	f7ff bfd2 	b.w	800432a <_raise_r>
 8004386:	bf00      	nop
 8004388:	20000018 	.word	0x20000018

0800438c <_localeconv_r>:
 800438c:	4800      	ldr	r0, [pc, #0]	@ (8004390 <_localeconv_r+0x4>)
 800438e:	4770      	bx	lr
 8004390:	20000158 	.word	0x20000158

08004394 <_close_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	2300      	movs	r3, #0
 8004398:	4d05      	ldr	r5, [pc, #20]	@ (80043b0 <_close_r+0x1c>)
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fd fcb9 	bl	8001d16 <_close>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_close_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_close_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000470 	.word	0x20000470

080043b4 <_lseek_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	2200      	movs	r2, #0
 80043be:	4d05      	ldr	r5, [pc, #20]	@ (80043d4 <_lseek_r+0x20>)
 80043c0:	602a      	str	r2, [r5, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7fd fccb 	bl	8001d5e <_lseek>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d102      	bne.n	80043d2 <_lseek_r+0x1e>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b103      	cbz	r3, 80043d2 <_lseek_r+0x1e>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	20000470 	.word	0x20000470

080043d8 <_read_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4604      	mov	r4, r0
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	2200      	movs	r2, #0
 80043e2:	4d05      	ldr	r5, [pc, #20]	@ (80043f8 <_read_r+0x20>)
 80043e4:	602a      	str	r2, [r5, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f7fd fc5c 	bl	8001ca4 <_read>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_read_r+0x1e>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_read_r+0x1e>
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	20000470 	.word	0x20000470

080043fc <_kill_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	2300      	movs	r3, #0
 8004400:	4d06      	ldr	r5, [pc, #24]	@ (800441c <_kill_r+0x20>)
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	602b      	str	r3, [r5, #0]
 800440a:	f7fd fc30 	bl	8001c6e <_kill>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	d102      	bne.n	8004418 <_kill_r+0x1c>
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	b103      	cbz	r3, 8004418 <_kill_r+0x1c>
 8004416:	6023      	str	r3, [r4, #0]
 8004418:	bd38      	pop	{r3, r4, r5, pc}
 800441a:	bf00      	nop
 800441c:	20000470 	.word	0x20000470

08004420 <_getpid_r>:
 8004420:	f7fd bc1e 	b.w	8001c60 <_getpid>

08004424 <_sbrk_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	2300      	movs	r3, #0
 8004428:	4d05      	ldr	r5, [pc, #20]	@ (8004440 <_sbrk_r+0x1c>)
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	f7fd fca2 	bl	8001d78 <_sbrk>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_sbrk_r+0x1a>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_sbrk_r+0x1a>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	20000470 	.word	0x20000470

08004444 <_write_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	2200      	movs	r2, #0
 800444e:	4d05      	ldr	r5, [pc, #20]	@ (8004464 <_write_r+0x20>)
 8004450:	602a      	str	r2, [r5, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f7fd fc43 	bl	8001cde <_write>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_write_r+0x1e>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_write_r+0x1e>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	20000470 	.word	0x20000470

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	@ (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000018 	.word	0x20000018

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	2600      	movs	r6, #0
 8004478:	4d0c      	ldr	r5, [pc, #48]	@ (80044ac <__libc_init_array+0x38>)
 800447a:	4c0d      	ldr	r4, [pc, #52]	@ (80044b0 <__libc_init_array+0x3c>)
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	f001 ff5e 	bl	8006344 <_init>
 8004488:	2600      	movs	r6, #0
 800448a:	4d0a      	ldr	r5, [pc, #40]	@ (80044b4 <__libc_init_array+0x40>)
 800448c:	4c0a      	ldr	r4, [pc, #40]	@ (80044b8 <__libc_init_array+0x44>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f855 3b04 	ldr.w	r3, [r5], #4
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08006830 	.word	0x08006830
 80044b0:	08006830 	.word	0x08006830
 80044b4:	08006830 	.word	0x08006830
 80044b8:	08006838 	.word	0x08006838

080044bc <__retarget_lock_init_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_acquire_recursive>:
 80044be:	4770      	bx	lr

080044c0 <__retarget_lock_release_recursive>:
 80044c0:	4770      	bx	lr

080044c2 <memchr>:
 80044c2:	4603      	mov	r3, r0
 80044c4:	b510      	push	{r4, lr}
 80044c6:	b2c9      	uxtb	r1, r1
 80044c8:	4402      	add	r2, r0
 80044ca:	4293      	cmp	r3, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	d101      	bne.n	80044d4 <memchr+0x12>
 80044d0:	2000      	movs	r0, #0
 80044d2:	e003      	b.n	80044dc <memchr+0x1a>
 80044d4:	7804      	ldrb	r4, [r0, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	428c      	cmp	r4, r1
 80044da:	d1f6      	bne.n	80044ca <memchr+0x8>
 80044dc:	bd10      	pop	{r4, pc}

080044de <quorem>:
 80044de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e2:	6903      	ldr	r3, [r0, #16]
 80044e4:	690c      	ldr	r4, [r1, #16]
 80044e6:	4607      	mov	r7, r0
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	db7e      	blt.n	80045ea <quorem+0x10c>
 80044ec:	3c01      	subs	r4, #1
 80044ee:	00a3      	lsls	r3, r4, #2
 80044f0:	f100 0514 	add.w	r5, r0, #20
 80044f4:	f101 0814 	add.w	r8, r1, #20
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004508:	3301      	adds	r3, #1
 800450a:	429a      	cmp	r2, r3
 800450c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004514:	d32e      	bcc.n	8004574 <quorem+0x96>
 8004516:	f04f 0a00 	mov.w	sl, #0
 800451a:	46c4      	mov	ip, r8
 800451c:	46ae      	mov	lr, r5
 800451e:	46d3      	mov	fp, sl
 8004520:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004524:	b298      	uxth	r0, r3
 8004526:	fb06 a000 	mla	r0, r6, r0, sl
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	0c02      	lsrs	r2, r0, #16
 800452e:	fb06 2303 	mla	r3, r6, r3, r2
 8004532:	f8de 2000 	ldr.w	r2, [lr]
 8004536:	b280      	uxth	r0, r0
 8004538:	b292      	uxth	r2, r2
 800453a:	1a12      	subs	r2, r2, r0
 800453c:	445a      	add	r2, fp
 800453e:	f8de 0000 	ldr.w	r0, [lr]
 8004542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004546:	b29b      	uxth	r3, r3
 8004548:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800454c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004550:	b292      	uxth	r2, r2
 8004552:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004556:	45e1      	cmp	r9, ip
 8004558:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800455c:	f84e 2b04 	str.w	r2, [lr], #4
 8004560:	d2de      	bcs.n	8004520 <quorem+0x42>
 8004562:	9b00      	ldr	r3, [sp, #0]
 8004564:	58eb      	ldr	r3, [r5, r3]
 8004566:	b92b      	cbnz	r3, 8004574 <quorem+0x96>
 8004568:	9b01      	ldr	r3, [sp, #4]
 800456a:	3b04      	subs	r3, #4
 800456c:	429d      	cmp	r5, r3
 800456e:	461a      	mov	r2, r3
 8004570:	d32f      	bcc.n	80045d2 <quorem+0xf4>
 8004572:	613c      	str	r4, [r7, #16]
 8004574:	4638      	mov	r0, r7
 8004576:	f001 f8c3 	bl	8005700 <__mcmp>
 800457a:	2800      	cmp	r0, #0
 800457c:	db25      	blt.n	80045ca <quorem+0xec>
 800457e:	4629      	mov	r1, r5
 8004580:	2000      	movs	r0, #0
 8004582:	f858 2b04 	ldr.w	r2, [r8], #4
 8004586:	f8d1 c000 	ldr.w	ip, [r1]
 800458a:	fa1f fe82 	uxth.w	lr, r2
 800458e:	fa1f f38c 	uxth.w	r3, ip
 8004592:	eba3 030e 	sub.w	r3, r3, lr
 8004596:	4403      	add	r3, r0
 8004598:	0c12      	lsrs	r2, r2, #16
 800459a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800459e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045a8:	45c1      	cmp	r9, r8
 80045aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045ae:	f841 3b04 	str.w	r3, [r1], #4
 80045b2:	d2e6      	bcs.n	8004582 <quorem+0xa4>
 80045b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045bc:	b922      	cbnz	r2, 80045c8 <quorem+0xea>
 80045be:	3b04      	subs	r3, #4
 80045c0:	429d      	cmp	r5, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	d30b      	bcc.n	80045de <quorem+0x100>
 80045c6:	613c      	str	r4, [r7, #16]
 80045c8:	3601      	adds	r6, #1
 80045ca:	4630      	mov	r0, r6
 80045cc:	b003      	add	sp, #12
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	3b04      	subs	r3, #4
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d1cb      	bne.n	8004572 <quorem+0x94>
 80045da:	3c01      	subs	r4, #1
 80045dc:	e7c6      	b.n	800456c <quorem+0x8e>
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	3b04      	subs	r3, #4
 80045e2:	2a00      	cmp	r2, #0
 80045e4:	d1ef      	bne.n	80045c6 <quorem+0xe8>
 80045e6:	3c01      	subs	r4, #1
 80045e8:	e7ea      	b.n	80045c0 <quorem+0xe2>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e7ee      	b.n	80045cc <quorem+0xee>
	...

080045f0 <_dtoa_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	69c7      	ldr	r7, [r0, #28]
 80045fa:	b097      	sub	sp, #92	@ 0x5c
 80045fc:	4683      	mov	fp, r0
 80045fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004602:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004604:	b97f      	cbnz	r7, 8004626 <_dtoa_r+0x36>
 8004606:	2010      	movs	r0, #16
 8004608:	f7ff f848 	bl	800369c <malloc>
 800460c:	4602      	mov	r2, r0
 800460e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004612:	b920      	cbnz	r0, 800461e <_dtoa_r+0x2e>
 8004614:	21ef      	movs	r1, #239	@ 0xef
 8004616:	4ba8      	ldr	r3, [pc, #672]	@ (80048b8 <_dtoa_r+0x2c8>)
 8004618:	48a8      	ldr	r0, [pc, #672]	@ (80048bc <_dtoa_r+0x2cc>)
 800461a:	f001 fba1 	bl	8005d60 <__assert_func>
 800461e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004622:	6007      	str	r7, [r0, #0]
 8004624:	60c7      	str	r7, [r0, #12]
 8004626:	f8db 301c 	ldr.w	r3, [fp, #28]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	b159      	cbz	r1, 8004646 <_dtoa_r+0x56>
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	2301      	movs	r3, #1
 8004632:	4093      	lsls	r3, r2
 8004634:	604a      	str	r2, [r1, #4]
 8004636:	608b      	str	r3, [r1, #8]
 8004638:	4658      	mov	r0, fp
 800463a:	f000 fe29 	bl	8005290 <_Bfree>
 800463e:	2200      	movs	r2, #0
 8004640:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	1e2b      	subs	r3, r5, #0
 8004648:	bfaf      	iteee	ge
 800464a:	2300      	movge	r3, #0
 800464c:	2201      	movlt	r2, #1
 800464e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004652:	9303      	strlt	r3, [sp, #12]
 8004654:	bfa8      	it	ge
 8004656:	6033      	strge	r3, [r6, #0]
 8004658:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800465c:	4b98      	ldr	r3, [pc, #608]	@ (80048c0 <_dtoa_r+0x2d0>)
 800465e:	bfb8      	it	lt
 8004660:	6032      	strlt	r2, [r6, #0]
 8004662:	ea33 0308 	bics.w	r3, r3, r8
 8004666:	d112      	bne.n	800468e <_dtoa_r+0x9e>
 8004668:	f242 730f 	movw	r3, #9999	@ 0x270f
 800466c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004674:	4323      	orrs	r3, r4
 8004676:	f000 8550 	beq.w	800511a <_dtoa_r+0xb2a>
 800467a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800467c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80048c4 <_dtoa_r+0x2d4>
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8552 	beq.w	800512a <_dtoa_r+0xb3a>
 8004686:	f10a 0303 	add.w	r3, sl, #3
 800468a:	f000 bd4c 	b.w	8005126 <_dtoa_r+0xb36>
 800468e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004692:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	2300      	movs	r3, #0
 800469e:	f7fc fa37 	bl	8000b10 <__aeabi_dcmpeq>
 80046a2:	4607      	mov	r7, r0
 80046a4:	b158      	cbz	r0, 80046be <_dtoa_r+0xce>
 80046a6:	2301      	movs	r3, #1
 80046a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ae:	b113      	cbz	r3, 80046b6 <_dtoa_r+0xc6>
 80046b0:	4b85      	ldr	r3, [pc, #532]	@ (80048c8 <_dtoa_r+0x2d8>)
 80046b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80048cc <_dtoa_r+0x2dc>
 80046ba:	f000 bd36 	b.w	800512a <_dtoa_r+0xb3a>
 80046be:	ab14      	add	r3, sp, #80	@ 0x50
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	ab15      	add	r3, sp, #84	@ 0x54
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4658      	mov	r0, fp
 80046c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80046cc:	f001 f8c8 	bl	8005860 <__d2b>
 80046d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80046d4:	4681      	mov	r9, r0
 80046d6:	2e00      	cmp	r6, #0
 80046d8:	d077      	beq.n	80047ca <_dtoa_r+0x1da>
 80046da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80046f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80046f2:	4619      	mov	r1, r3
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b76      	ldr	r3, [pc, #472]	@ (80048d0 <_dtoa_r+0x2e0>)
 80046f8:	f7fb fdea 	bl	80002d0 <__aeabi_dsub>
 80046fc:	a368      	add	r3, pc, #416	@ (adr r3, 80048a0 <_dtoa_r+0x2b0>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb ff9d 	bl	8000640 <__aeabi_dmul>
 8004706:	a368      	add	r3, pc, #416	@ (adr r3, 80048a8 <_dtoa_r+0x2b8>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb fde2 	bl	80002d4 <__adddf3>
 8004710:	4604      	mov	r4, r0
 8004712:	4630      	mov	r0, r6
 8004714:	460d      	mov	r5, r1
 8004716:	f7fb ff29 	bl	800056c <__aeabi_i2d>
 800471a:	a365      	add	r3, pc, #404	@ (adr r3, 80048b0 <_dtoa_r+0x2c0>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb ff8e 	bl	8000640 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb fdd2 	bl	80002d4 <__adddf3>
 8004730:	4604      	mov	r4, r0
 8004732:	460d      	mov	r5, r1
 8004734:	f7fc fa34 	bl	8000ba0 <__aeabi_d2iz>
 8004738:	2200      	movs	r2, #0
 800473a:	4607      	mov	r7, r0
 800473c:	2300      	movs	r3, #0
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fc f9ef 	bl	8000b24 <__aeabi_dcmplt>
 8004746:	b140      	cbz	r0, 800475a <_dtoa_r+0x16a>
 8004748:	4638      	mov	r0, r7
 800474a:	f7fb ff0f 	bl	800056c <__aeabi_i2d>
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	f7fc f9dd 	bl	8000b10 <__aeabi_dcmpeq>
 8004756:	b900      	cbnz	r0, 800475a <_dtoa_r+0x16a>
 8004758:	3f01      	subs	r7, #1
 800475a:	2f16      	cmp	r7, #22
 800475c:	d853      	bhi.n	8004806 <_dtoa_r+0x216>
 800475e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004762:	4b5c      	ldr	r3, [pc, #368]	@ (80048d4 <_dtoa_r+0x2e4>)
 8004764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fc f9da 	bl	8000b24 <__aeabi_dcmplt>
 8004770:	2800      	cmp	r0, #0
 8004772:	d04a      	beq.n	800480a <_dtoa_r+0x21a>
 8004774:	2300      	movs	r3, #0
 8004776:	3f01      	subs	r7, #1
 8004778:	930f      	str	r3, [sp, #60]	@ 0x3c
 800477a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	bf46      	itte	mi
 8004782:	f1c3 0801 	rsbmi	r8, r3, #1
 8004786:	2300      	movmi	r3, #0
 8004788:	f04f 0800 	movpl.w	r8, #0
 800478c:	9209      	str	r2, [sp, #36]	@ 0x24
 800478e:	bf48      	it	mi
 8004790:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004792:	2f00      	cmp	r7, #0
 8004794:	db3b      	blt.n	800480e <_dtoa_r+0x21e>
 8004796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004798:	970e      	str	r7, [sp, #56]	@ 0x38
 800479a:	443b      	add	r3, r7
 800479c:	9309      	str	r3, [sp, #36]	@ 0x24
 800479e:	2300      	movs	r3, #0
 80047a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80047a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	d866      	bhi.n	8004876 <_dtoa_r+0x286>
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	bfc4      	itt	gt
 80047ac:	3b04      	subgt	r3, #4
 80047ae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80047b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047b2:	bfc8      	it	gt
 80047b4:	2400      	movgt	r4, #0
 80047b6:	f1a3 0302 	sub.w	r3, r3, #2
 80047ba:	bfd8      	it	le
 80047bc:	2401      	movle	r4, #1
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d864      	bhi.n	800488c <_dtoa_r+0x29c>
 80047c2:	e8df f003 	tbb	[pc, r3]
 80047c6:	382b      	.short	0x382b
 80047c8:	5636      	.short	0x5636
 80047ca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80047ce:	441e      	add	r6, r3
 80047d0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	bfc1      	itttt	gt
 80047d8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80047e0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047e4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047e8:	bfd6      	itet	le
 80047ea:	f1c3 0320 	rsble	r3, r3, #32
 80047ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80047f2:	fa04 f003 	lslle.w	r0, r4, r3
 80047f6:	f7fb fea9 	bl	800054c <__aeabi_ui2d>
 80047fa:	2201      	movs	r2, #1
 80047fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004800:	3e01      	subs	r6, #1
 8004802:	9212      	str	r2, [sp, #72]	@ 0x48
 8004804:	e775      	b.n	80046f2 <_dtoa_r+0x102>
 8004806:	2301      	movs	r3, #1
 8004808:	e7b6      	b.n	8004778 <_dtoa_r+0x188>
 800480a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800480c:	e7b5      	b.n	800477a <_dtoa_r+0x18a>
 800480e:	427b      	negs	r3, r7
 8004810:	930a      	str	r3, [sp, #40]	@ 0x28
 8004812:	2300      	movs	r3, #0
 8004814:	eba8 0807 	sub.w	r8, r8, r7
 8004818:	930e      	str	r3, [sp, #56]	@ 0x38
 800481a:	e7c2      	b.n	80047a2 <_dtoa_r+0x1b2>
 800481c:	2300      	movs	r3, #0
 800481e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004820:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004822:	2b00      	cmp	r3, #0
 8004824:	dc35      	bgt.n	8004892 <_dtoa_r+0x2a2>
 8004826:	2301      	movs	r3, #1
 8004828:	461a      	mov	r2, r3
 800482a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800482e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004830:	e00b      	b.n	800484a <_dtoa_r+0x25a>
 8004832:	2301      	movs	r3, #1
 8004834:	e7f3      	b.n	800481e <_dtoa_r+0x22e>
 8004836:	2300      	movs	r3, #0
 8004838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800483a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	9308      	str	r3, [sp, #32]
 8004840:	3301      	adds	r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	9307      	str	r3, [sp, #28]
 8004846:	bfb8      	it	lt
 8004848:	2301      	movlt	r3, #1
 800484a:	2100      	movs	r1, #0
 800484c:	2204      	movs	r2, #4
 800484e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004852:	f102 0514 	add.w	r5, r2, #20
 8004856:	429d      	cmp	r5, r3
 8004858:	d91f      	bls.n	800489a <_dtoa_r+0x2aa>
 800485a:	6041      	str	r1, [r0, #4]
 800485c:	4658      	mov	r0, fp
 800485e:	f000 fcd7 	bl	8005210 <_Balloc>
 8004862:	4682      	mov	sl, r0
 8004864:	2800      	cmp	r0, #0
 8004866:	d139      	bne.n	80048dc <_dtoa_r+0x2ec>
 8004868:	4602      	mov	r2, r0
 800486a:	f240 11af 	movw	r1, #431	@ 0x1af
 800486e:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <_dtoa_r+0x2e8>)
 8004870:	e6d2      	b.n	8004618 <_dtoa_r+0x28>
 8004872:	2301      	movs	r3, #1
 8004874:	e7e0      	b.n	8004838 <_dtoa_r+0x248>
 8004876:	2401      	movs	r4, #1
 8004878:	2300      	movs	r3, #0
 800487a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800487c:	9320      	str	r3, [sp, #128]	@ 0x80
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	2200      	movs	r2, #0
 8004884:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004888:	2312      	movs	r3, #18
 800488a:	e7d0      	b.n	800482e <_dtoa_r+0x23e>
 800488c:	2301      	movs	r3, #1
 800488e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004890:	e7f5      	b.n	800487e <_dtoa_r+0x28e>
 8004892:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004894:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004898:	e7d7      	b.n	800484a <_dtoa_r+0x25a>
 800489a:	3101      	adds	r1, #1
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	e7d8      	b.n	8004852 <_dtoa_r+0x262>
 80048a0:	636f4361 	.word	0x636f4361
 80048a4:	3fd287a7 	.word	0x3fd287a7
 80048a8:	8b60c8b3 	.word	0x8b60c8b3
 80048ac:	3fc68a28 	.word	0x3fc68a28
 80048b0:	509f79fb 	.word	0x509f79fb
 80048b4:	3fd34413 	.word	0x3fd34413
 80048b8:	080064fb 	.word	0x080064fb
 80048bc:	08006512 	.word	0x08006512
 80048c0:	7ff00000 	.word	0x7ff00000
 80048c4:	080064f7 	.word	0x080064f7
 80048c8:	080064cb 	.word	0x080064cb
 80048cc:	080064ca 	.word	0x080064ca
 80048d0:	3ff80000 	.word	0x3ff80000
 80048d4:	08006608 	.word	0x08006608
 80048d8:	0800656a 	.word	0x0800656a
 80048dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048e0:	6018      	str	r0, [r3, #0]
 80048e2:	9b07      	ldr	r3, [sp, #28]
 80048e4:	2b0e      	cmp	r3, #14
 80048e6:	f200 80a4 	bhi.w	8004a32 <_dtoa_r+0x442>
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	f000 80a1 	beq.w	8004a32 <_dtoa_r+0x442>
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	dd33      	ble.n	800495c <_dtoa_r+0x36c>
 80048f4:	4b86      	ldr	r3, [pc, #536]	@ (8004b10 <_dtoa_r+0x520>)
 80048f6:	f007 020f 	and.w	r2, r7, #15
 80048fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048fe:	05f8      	lsls	r0, r7, #23
 8004900:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004904:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800490c:	d516      	bpl.n	800493c <_dtoa_r+0x34c>
 800490e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004912:	4b80      	ldr	r3, [pc, #512]	@ (8004b14 <_dtoa_r+0x524>)
 8004914:	2603      	movs	r6, #3
 8004916:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800491a:	f7fb ffbb 	bl	8000894 <__aeabi_ddiv>
 800491e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004922:	f004 040f 	and.w	r4, r4, #15
 8004926:	4d7b      	ldr	r5, [pc, #492]	@ (8004b14 <_dtoa_r+0x524>)
 8004928:	b954      	cbnz	r4, 8004940 <_dtoa_r+0x350>
 800492a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004932:	f7fb ffaf 	bl	8000894 <__aeabi_ddiv>
 8004936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800493a:	e028      	b.n	800498e <_dtoa_r+0x39e>
 800493c:	2602      	movs	r6, #2
 800493e:	e7f2      	b.n	8004926 <_dtoa_r+0x336>
 8004940:	07e1      	lsls	r1, r4, #31
 8004942:	d508      	bpl.n	8004956 <_dtoa_r+0x366>
 8004944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800494c:	f7fb fe78 	bl	8000640 <__aeabi_dmul>
 8004950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004954:	3601      	adds	r6, #1
 8004956:	1064      	asrs	r4, r4, #1
 8004958:	3508      	adds	r5, #8
 800495a:	e7e5      	b.n	8004928 <_dtoa_r+0x338>
 800495c:	f000 80d2 	beq.w	8004b04 <_dtoa_r+0x514>
 8004960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004964:	427c      	negs	r4, r7
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <_dtoa_r+0x520>)
 8004968:	f004 020f 	and.w	r2, r4, #15
 800496c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fb fe64 	bl	8000640 <__aeabi_dmul>
 8004978:	2602      	movs	r6, #2
 800497a:	2300      	movs	r3, #0
 800497c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004980:	4d64      	ldr	r5, [pc, #400]	@ (8004b14 <_dtoa_r+0x524>)
 8004982:	1124      	asrs	r4, r4, #4
 8004984:	2c00      	cmp	r4, #0
 8004986:	f040 80b2 	bne.w	8004aee <_dtoa_r+0x4fe>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1d3      	bne.n	8004936 <_dtoa_r+0x346>
 800498e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80b7 	beq.w	8004b08 <_dtoa_r+0x518>
 800499a:	2200      	movs	r2, #0
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b18 <_dtoa_r+0x528>)
 80049a2:	f7fc f8bf 	bl	8000b24 <__aeabi_dcmplt>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f000 80ae 	beq.w	8004b08 <_dtoa_r+0x518>
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80aa 	beq.w	8004b08 <_dtoa_r+0x518>
 80049b4:	9b08      	ldr	r3, [sp, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dd37      	ble.n	8004a2a <_dtoa_r+0x43a>
 80049ba:	1e7b      	subs	r3, r7, #1
 80049bc:	4620      	mov	r0, r4
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	2200      	movs	r2, #0
 80049c2:	4629      	mov	r1, r5
 80049c4:	4b55      	ldr	r3, [pc, #340]	@ (8004b1c <_dtoa_r+0x52c>)
 80049c6:	f7fb fe3b 	bl	8000640 <__aeabi_dmul>
 80049ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ce:	9c08      	ldr	r4, [sp, #32]
 80049d0:	3601      	adds	r6, #1
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7fb fdca 	bl	800056c <__aeabi_i2d>
 80049d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049dc:	f7fb fe30 	bl	8000640 <__aeabi_dmul>
 80049e0:	2200      	movs	r2, #0
 80049e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b20 <_dtoa_r+0x530>)
 80049e4:	f7fb fc76 	bl	80002d4 <__adddf3>
 80049e8:	4605      	mov	r5, r0
 80049ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	f040 809a 	bne.w	8004b28 <_dtoa_r+0x538>
 80049f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <_dtoa_r+0x534>)
 80049fc:	f7fb fc68 	bl	80002d0 <__aeabi_dsub>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	4633      	mov	r3, r6
 8004a0c:	f7fc f8a8 	bl	8000b60 <__aeabi_dcmpgt>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f040 828e 	bne.w	8004f32 <_dtoa_r+0x942>
 8004a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a20:	f7fc f880 	bl	8000b24 <__aeabi_dcmplt>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f040 8127 	bne.w	8004c78 <_dtoa_r+0x688>
 8004a2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f2c0 8163 	blt.w	8004d00 <_dtoa_r+0x710>
 8004a3a:	2f0e      	cmp	r7, #14
 8004a3c:	f300 8160 	bgt.w	8004d00 <_dtoa_r+0x710>
 8004a40:	4b33      	ldr	r3, [pc, #204]	@ (8004b10 <_dtoa_r+0x520>)
 8004a42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da03      	bge.n	8004a5c <_dtoa_r+0x46c>
 8004a54:	9b07      	ldr	r3, [sp, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f340 8100 	ble.w	8004c5c <_dtoa_r+0x66c>
 8004a5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a60:	4656      	mov	r6, sl
 8004a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fb ff13 	bl	8000894 <__aeabi_ddiv>
 8004a6e:	f7fc f897 	bl	8000ba0 <__aeabi_d2iz>
 8004a72:	4680      	mov	r8, r0
 8004a74:	f7fb fd7a 	bl	800056c <__aeabi_i2d>
 8004a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a7c:	f7fb fde0 	bl	8000640 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fc22 	bl	80002d0 <__aeabi_dsub>
 8004a8c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004a90:	9d07      	ldr	r5, [sp, #28]
 8004a92:	f806 4b01 	strb.w	r4, [r6], #1
 8004a96:	eba6 040a 	sub.w	r4, r6, sl
 8004a9a:	42a5      	cmp	r5, r4
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	f040 8116 	bne.w	8004cd0 <_dtoa_r+0x6e0>
 8004aa4:	f7fb fc16 	bl	80002d4 <__adddf3>
 8004aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aac:	4604      	mov	r4, r0
 8004aae:	460d      	mov	r5, r1
 8004ab0:	f7fc f856 	bl	8000b60 <__aeabi_dcmpgt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f040 80f8 	bne.w	8004caa <_dtoa_r+0x6ba>
 8004aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fc f825 	bl	8000b10 <__aeabi_dcmpeq>
 8004ac6:	b118      	cbz	r0, 8004ad0 <_dtoa_r+0x4e0>
 8004ac8:	f018 0f01 	tst.w	r8, #1
 8004acc:	f040 80ed 	bne.w	8004caa <_dtoa_r+0x6ba>
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4658      	mov	r0, fp
 8004ad4:	f000 fbdc 	bl	8005290 <_Bfree>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	7033      	strb	r3, [r6, #0]
 8004adc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ade:	3701      	adds	r7, #1
 8004ae0:	601f      	str	r7, [r3, #0]
 8004ae2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8320 	beq.w	800512a <_dtoa_r+0xb3a>
 8004aea:	601e      	str	r6, [r3, #0]
 8004aec:	e31d      	b.n	800512a <_dtoa_r+0xb3a>
 8004aee:	07e2      	lsls	r2, r4, #31
 8004af0:	d505      	bpl.n	8004afe <_dtoa_r+0x50e>
 8004af2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004af6:	f7fb fda3 	bl	8000640 <__aeabi_dmul>
 8004afa:	2301      	movs	r3, #1
 8004afc:	3601      	adds	r6, #1
 8004afe:	1064      	asrs	r4, r4, #1
 8004b00:	3508      	adds	r5, #8
 8004b02:	e73f      	b.n	8004984 <_dtoa_r+0x394>
 8004b04:	2602      	movs	r6, #2
 8004b06:	e742      	b.n	800498e <_dtoa_r+0x39e>
 8004b08:	9c07      	ldr	r4, [sp, #28]
 8004b0a:	9704      	str	r7, [sp, #16]
 8004b0c:	e761      	b.n	80049d2 <_dtoa_r+0x3e2>
 8004b0e:	bf00      	nop
 8004b10:	08006608 	.word	0x08006608
 8004b14:	080065e0 	.word	0x080065e0
 8004b18:	3ff00000 	.word	0x3ff00000
 8004b1c:	40240000 	.word	0x40240000
 8004b20:	401c0000 	.word	0x401c0000
 8004b24:	40140000 	.word	0x40140000
 8004b28:	4b70      	ldr	r3, [pc, #448]	@ (8004cec <_dtoa_r+0x6fc>)
 8004b2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b34:	4454      	add	r4, sl
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d045      	beq.n	8004bc6 <_dtoa_r+0x5d6>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	496c      	ldr	r1, [pc, #432]	@ (8004cf0 <_dtoa_r+0x700>)
 8004b3e:	f7fb fea9 	bl	8000894 <__aeabi_ddiv>
 8004b42:	4633      	mov	r3, r6
 8004b44:	462a      	mov	r2, r5
 8004b46:	f7fb fbc3 	bl	80002d0 <__aeabi_dsub>
 8004b4a:	4656      	mov	r6, sl
 8004b4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b54:	f7fc f824 	bl	8000ba0 <__aeabi_d2iz>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	f7fb fd07 	bl	800056c <__aeabi_i2d>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b66:	f7fb fbb3 	bl	80002d0 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	3530      	adds	r5, #48	@ 0x30
 8004b70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b78:	f806 5b01 	strb.w	r5, [r6], #1
 8004b7c:	f7fb ffd2 	bl	8000b24 <__aeabi_dcmplt>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d163      	bne.n	8004c4c <_dtoa_r+0x65c>
 8004b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b88:	2000      	movs	r0, #0
 8004b8a:	495a      	ldr	r1, [pc, #360]	@ (8004cf4 <_dtoa_r+0x704>)
 8004b8c:	f7fb fba0 	bl	80002d0 <__aeabi_dsub>
 8004b90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b94:	f7fb ffc6 	bl	8000b24 <__aeabi_dcmplt>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	f040 8087 	bne.w	8004cac <_dtoa_r+0x6bc>
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	f43f af43 	beq.w	8004a2a <_dtoa_r+0x43a>
 8004ba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <_dtoa_r+0x708>)
 8004bac:	f7fb fd48 	bl	8000640 <__aeabi_dmul>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bba:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <_dtoa_r+0x708>)
 8004bbc:	f7fb fd40 	bl	8000640 <__aeabi_dmul>
 8004bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc4:	e7c4      	b.n	8004b50 <_dtoa_r+0x560>
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7fb fd39 	bl	8000640 <__aeabi_dmul>
 8004bce:	4656      	mov	r6, sl
 8004bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bd4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bda:	f7fb ffe1 	bl	8000ba0 <__aeabi_d2iz>
 8004bde:	4605      	mov	r5, r0
 8004be0:	f7fb fcc4 	bl	800056c <__aeabi_i2d>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bec:	f7fb fb70 	bl	80002d0 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	3530      	adds	r5, #48	@ 0x30
 8004bf6:	f806 5b01 	strb.w	r5, [r6], #1
 8004bfa:	42a6      	cmp	r6, r4
 8004bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	d124      	bne.n	8004c50 <_dtoa_r+0x660>
 8004c06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c0a:	4b39      	ldr	r3, [pc, #228]	@ (8004cf0 <_dtoa_r+0x700>)
 8004c0c:	f7fb fb62 	bl	80002d4 <__adddf3>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c18:	f7fb ffa2 	bl	8000b60 <__aeabi_dcmpgt>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d145      	bne.n	8004cac <_dtoa_r+0x6bc>
 8004c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c24:	2000      	movs	r0, #0
 8004c26:	4932      	ldr	r1, [pc, #200]	@ (8004cf0 <_dtoa_r+0x700>)
 8004c28:	f7fb fb52 	bl	80002d0 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c34:	f7fb ff76 	bl	8000b24 <__aeabi_dcmplt>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f43f aef6 	beq.w	8004a2a <_dtoa_r+0x43a>
 8004c3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c40:	1e73      	subs	r3, r6, #1
 8004c42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c48:	2b30      	cmp	r3, #48	@ 0x30
 8004c4a:	d0f8      	beq.n	8004c3e <_dtoa_r+0x64e>
 8004c4c:	9f04      	ldr	r7, [sp, #16]
 8004c4e:	e73f      	b.n	8004ad0 <_dtoa_r+0x4e0>
 8004c50:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <_dtoa_r+0x708>)
 8004c52:	f7fb fcf5 	bl	8000640 <__aeabi_dmul>
 8004c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c5a:	e7bc      	b.n	8004bd6 <_dtoa_r+0x5e6>
 8004c5c:	d10c      	bne.n	8004c78 <_dtoa_r+0x688>
 8004c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c62:	2200      	movs	r2, #0
 8004c64:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <_dtoa_r+0x70c>)
 8004c66:	f7fb fceb 	bl	8000640 <__aeabi_dmul>
 8004c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c6e:	f7fb ff6d 	bl	8000b4c <__aeabi_dcmpge>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f000 815b 	beq.w	8004f2e <_dtoa_r+0x93e>
 8004c78:	2400      	movs	r4, #0
 8004c7a:	4625      	mov	r5, r4
 8004c7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c7e:	4656      	mov	r6, sl
 8004c80:	43db      	mvns	r3, r3
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	2700      	movs	r7, #0
 8004c86:	4621      	mov	r1, r4
 8004c88:	4658      	mov	r0, fp
 8004c8a:	f000 fb01 	bl	8005290 <_Bfree>
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	d0dc      	beq.n	8004c4c <_dtoa_r+0x65c>
 8004c92:	b12f      	cbz	r7, 8004ca0 <_dtoa_r+0x6b0>
 8004c94:	42af      	cmp	r7, r5
 8004c96:	d003      	beq.n	8004ca0 <_dtoa_r+0x6b0>
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4658      	mov	r0, fp
 8004c9c:	f000 faf8 	bl	8005290 <_Bfree>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4658      	mov	r0, fp
 8004ca4:	f000 faf4 	bl	8005290 <_Bfree>
 8004ca8:	e7d0      	b.n	8004c4c <_dtoa_r+0x65c>
 8004caa:	9704      	str	r7, [sp, #16]
 8004cac:	4633      	mov	r3, r6
 8004cae:	461e      	mov	r6, r3
 8004cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cb4:	2a39      	cmp	r2, #57	@ 0x39
 8004cb6:	d107      	bne.n	8004cc8 <_dtoa_r+0x6d8>
 8004cb8:	459a      	cmp	sl, r3
 8004cba:	d1f8      	bne.n	8004cae <_dtoa_r+0x6be>
 8004cbc:	9a04      	ldr	r2, [sp, #16]
 8004cbe:	3201      	adds	r2, #1
 8004cc0:	9204      	str	r2, [sp, #16]
 8004cc2:	2230      	movs	r2, #48	@ 0x30
 8004cc4:	f88a 2000 	strb.w	r2, [sl]
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	3201      	adds	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e7bd      	b.n	8004c4c <_dtoa_r+0x65c>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <_dtoa_r+0x708>)
 8004cd4:	f7fb fcb4 	bl	8000640 <__aeabi_dmul>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	f7fb ff16 	bl	8000b10 <__aeabi_dcmpeq>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f43f aebc 	beq.w	8004a62 <_dtoa_r+0x472>
 8004cea:	e6f1      	b.n	8004ad0 <_dtoa_r+0x4e0>
 8004cec:	08006608 	.word	0x08006608
 8004cf0:	3fe00000 	.word	0x3fe00000
 8004cf4:	3ff00000 	.word	0x3ff00000
 8004cf8:	40240000 	.word	0x40240000
 8004cfc:	40140000 	.word	0x40140000
 8004d00:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	f000 80db 	beq.w	8004ebe <_dtoa_r+0x8ce>
 8004d08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d0a:	2a01      	cmp	r2, #1
 8004d0c:	f300 80bf 	bgt.w	8004e8e <_dtoa_r+0x89e>
 8004d10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	f000 80b7 	beq.w	8004e86 <_dtoa_r+0x896>
 8004d18:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d1c:	4646      	mov	r6, r8
 8004d1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d22:	2101      	movs	r1, #1
 8004d24:	441a      	add	r2, r3
 8004d26:	4658      	mov	r0, fp
 8004d28:	4498      	add	r8, r3
 8004d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d2c:	f000 fb64 	bl	80053f8 <__i2b>
 8004d30:	4605      	mov	r5, r0
 8004d32:	b15e      	cbz	r6, 8004d4c <_dtoa_r+0x75c>
 8004d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dd08      	ble.n	8004d4c <_dtoa_r+0x75c>
 8004d3a:	42b3      	cmp	r3, r6
 8004d3c:	bfa8      	it	ge
 8004d3e:	4633      	movge	r3, r6
 8004d40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d42:	eba8 0803 	sub.w	r8, r8, r3
 8004d46:	1af6      	subs	r6, r6, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d4e:	b1f3      	cbz	r3, 8004d8e <_dtoa_r+0x79e>
 8004d50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80b7 	beq.w	8004ec6 <_dtoa_r+0x8d6>
 8004d58:	b18c      	cbz	r4, 8004d7e <_dtoa_r+0x78e>
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4658      	mov	r0, fp
 8004d60:	f000 fc08 	bl	8005574 <__pow5mult>
 8004d64:	464a      	mov	r2, r9
 8004d66:	4601      	mov	r1, r0
 8004d68:	4605      	mov	r5, r0
 8004d6a:	4658      	mov	r0, fp
 8004d6c:	f000 fb5a 	bl	8005424 <__multiply>
 8004d70:	4649      	mov	r1, r9
 8004d72:	9004      	str	r0, [sp, #16]
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 fa8b 	bl	8005290 <_Bfree>
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d80:	1b1a      	subs	r2, r3, r4
 8004d82:	d004      	beq.n	8004d8e <_dtoa_r+0x79e>
 8004d84:	4649      	mov	r1, r9
 8004d86:	4658      	mov	r0, fp
 8004d88:	f000 fbf4 	bl	8005574 <__pow5mult>
 8004d8c:	4681      	mov	r9, r0
 8004d8e:	2101      	movs	r1, #1
 8004d90:	4658      	mov	r0, fp
 8004d92:	f000 fb31 	bl	80053f8 <__i2b>
 8004d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d98:	4604      	mov	r4, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 81c9 	beq.w	8005132 <_dtoa_r+0xb42>
 8004da0:	461a      	mov	r2, r3
 8004da2:	4601      	mov	r1, r0
 8004da4:	4658      	mov	r0, fp
 8004da6:	f000 fbe5 	bl	8005574 <__pow5mult>
 8004daa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dac:	4604      	mov	r4, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	f300 808f 	bgt.w	8004ed2 <_dtoa_r+0x8e2>
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8087 	bne.w	8004eca <_dtoa_r+0x8da>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 8083 	bne.w	8004ece <_dtoa_r+0x8de>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	0d1b      	lsrs	r3, r3, #20
 8004dd0:	051b      	lsls	r3, r3, #20
 8004dd2:	b12b      	cbz	r3, 8004de0 <_dtoa_r+0x7f0>
 8004dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dde:	2301      	movs	r3, #1
 8004de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 81aa 	beq.w	800513e <_dtoa_r+0xb4e>
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004df0:	6918      	ldr	r0, [r3, #16]
 8004df2:	f000 fab5 	bl	8005360 <__hi0bits>
 8004df6:	f1c0 0020 	rsb	r0, r0, #32
 8004dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfc:	4418      	add	r0, r3
 8004dfe:	f010 001f 	ands.w	r0, r0, #31
 8004e02:	d071      	beq.n	8004ee8 <_dtoa_r+0x8f8>
 8004e04:	f1c0 0320 	rsb	r3, r0, #32
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	dd65      	ble.n	8004ed8 <_dtoa_r+0x8e8>
 8004e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e0e:	f1c0 001c 	rsb	r0, r0, #28
 8004e12:	4403      	add	r3, r0
 8004e14:	4480      	add	r8, r0
 8004e16:	4406      	add	r6, r0
 8004e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e1a:	f1b8 0f00 	cmp.w	r8, #0
 8004e1e:	dd05      	ble.n	8004e2c <_dtoa_r+0x83c>
 8004e20:	4649      	mov	r1, r9
 8004e22:	4642      	mov	r2, r8
 8004e24:	4658      	mov	r0, fp
 8004e26:	f000 fbff 	bl	8005628 <__lshift>
 8004e2a:	4681      	mov	r9, r0
 8004e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dd05      	ble.n	8004e3e <_dtoa_r+0x84e>
 8004e32:	4621      	mov	r1, r4
 8004e34:	461a      	mov	r2, r3
 8004e36:	4658      	mov	r0, fp
 8004e38:	f000 fbf6 	bl	8005628 <__lshift>
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d053      	beq.n	8004eec <_dtoa_r+0x8fc>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4648      	mov	r0, r9
 8004e48:	f000 fc5a 	bl	8005700 <__mcmp>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	da4d      	bge.n	8004eec <_dtoa_r+0x8fc>
 8004e50:	1e7b      	subs	r3, r7, #1
 8004e52:	4649      	mov	r1, r9
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	220a      	movs	r2, #10
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4658      	mov	r0, fp
 8004e5c:	f000 fa3a 	bl	80052d4 <__multadd>
 8004e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e62:	4681      	mov	r9, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 816c 	beq.w	8005142 <_dtoa_r+0xb52>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	220a      	movs	r2, #10
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 fa2f 	bl	80052d4 <__multadd>
 8004e76:	9b08      	ldr	r3, [sp, #32]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	dc61      	bgt.n	8004f42 <_dtoa_r+0x952>
 8004e7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	dc3b      	bgt.n	8004efc <_dtoa_r+0x90c>
 8004e84:	e05d      	b.n	8004f42 <_dtoa_r+0x952>
 8004e86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e88:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e8c:	e746      	b.n	8004d1c <_dtoa_r+0x72c>
 8004e8e:	9b07      	ldr	r3, [sp, #28]
 8004e90:	1e5c      	subs	r4, r3, #1
 8004e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	bfbf      	itttt	lt
 8004e98:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004e9a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004e9c:	1ae3      	sublt	r3, r4, r3
 8004e9e:	18d2      	addlt	r2, r2, r3
 8004ea0:	bfa8      	it	ge
 8004ea2:	1b1c      	subge	r4, r3, r4
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	bfbe      	ittt	lt
 8004ea8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004eaa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004eac:	2400      	movlt	r4, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb5      	itete	lt
 8004eb2:	eba8 0603 	sublt.w	r6, r8, r3
 8004eb6:	4646      	movge	r6, r8
 8004eb8:	2300      	movlt	r3, #0
 8004eba:	9b07      	ldrge	r3, [sp, #28]
 8004ebc:	e730      	b.n	8004d20 <_dtoa_r+0x730>
 8004ebe:	4646      	mov	r6, r8
 8004ec0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ec2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ec4:	e735      	b.n	8004d32 <_dtoa_r+0x742>
 8004ec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ec8:	e75c      	b.n	8004d84 <_dtoa_r+0x794>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e788      	b.n	8004de0 <_dtoa_r+0x7f0>
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	e786      	b.n	8004de0 <_dtoa_r+0x7f0>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ed6:	e788      	b.n	8004dea <_dtoa_r+0x7fa>
 8004ed8:	d09f      	beq.n	8004e1a <_dtoa_r+0x82a>
 8004eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004edc:	331c      	adds	r3, #28
 8004ede:	441a      	add	r2, r3
 8004ee0:	4498      	add	r8, r3
 8004ee2:	441e      	add	r6, r3
 8004ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ee6:	e798      	b.n	8004e1a <_dtoa_r+0x82a>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	e7f6      	b.n	8004eda <_dtoa_r+0x8ea>
 8004eec:	9b07      	ldr	r3, [sp, #28]
 8004eee:	9704      	str	r7, [sp, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc20      	bgt.n	8004f36 <_dtoa_r+0x946>
 8004ef4:	9308      	str	r3, [sp, #32]
 8004ef6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	dd1e      	ble.n	8004f3a <_dtoa_r+0x94a>
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f47f aebc 	bne.w	8004c7c <_dtoa_r+0x68c>
 8004f04:	4621      	mov	r1, r4
 8004f06:	2205      	movs	r2, #5
 8004f08:	4658      	mov	r0, fp
 8004f0a:	f000 f9e3 	bl	80052d4 <__multadd>
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4604      	mov	r4, r0
 8004f12:	4648      	mov	r0, r9
 8004f14:	f000 fbf4 	bl	8005700 <__mcmp>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f77f aeaf 	ble.w	8004c7c <_dtoa_r+0x68c>
 8004f1e:	2331      	movs	r3, #49	@ 0x31
 8004f20:	4656      	mov	r6, sl
 8004f22:	f806 3b01 	strb.w	r3, [r6], #1
 8004f26:	9b04      	ldr	r3, [sp, #16]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	e6aa      	b.n	8004c84 <_dtoa_r+0x694>
 8004f2e:	9c07      	ldr	r4, [sp, #28]
 8004f30:	9704      	str	r7, [sp, #16]
 8004f32:	4625      	mov	r5, r4
 8004f34:	e7f3      	b.n	8004f1e <_dtoa_r+0x92e>
 8004f36:	9b07      	ldr	r3, [sp, #28]
 8004f38:	9308      	str	r3, [sp, #32]
 8004f3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8104 	beq.w	800514a <_dtoa_r+0xb5a>
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	dd05      	ble.n	8004f52 <_dtoa_r+0x962>
 8004f46:	4629      	mov	r1, r5
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4658      	mov	r0, fp
 8004f4c:	f000 fb6c 	bl	8005628 <__lshift>
 8004f50:	4605      	mov	r5, r0
 8004f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d05a      	beq.n	800500e <_dtoa_r+0xa1e>
 8004f58:	4658      	mov	r0, fp
 8004f5a:	6869      	ldr	r1, [r5, #4]
 8004f5c:	f000 f958 	bl	8005210 <_Balloc>
 8004f60:	4606      	mov	r6, r0
 8004f62:	b928      	cbnz	r0, 8004f70 <_dtoa_r+0x980>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f6a:	4b83      	ldr	r3, [pc, #524]	@ (8005178 <_dtoa_r+0xb88>)
 8004f6c:	f7ff bb54 	b.w	8004618 <_dtoa_r+0x28>
 8004f70:	692a      	ldr	r2, [r5, #16]
 8004f72:	f105 010c 	add.w	r1, r5, #12
 8004f76:	3202      	adds	r2, #2
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	300c      	adds	r0, #12
 8004f7c:	f000 fee2 	bl	8005d44 <memcpy>
 8004f80:	2201      	movs	r2, #1
 8004f82:	4631      	mov	r1, r6
 8004f84:	4658      	mov	r0, fp
 8004f86:	f000 fb4f 	bl	8005628 <__lshift>
 8004f8a:	462f      	mov	r7, r5
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	f10a 0301 	add.w	r3, sl, #1
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	9b08      	ldr	r3, [sp, #32]
 8004f96:	4453      	add	r3, sl
 8004f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f9a:	9b02      	ldr	r3, [sp, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fa2:	9b07      	ldr	r3, [sp, #28]
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	4648      	mov	r0, r9
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	f7ff fa97 	bl	80044de <quorem>
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	9008      	str	r0, [sp, #32]
 8004fb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fb8:	4648      	mov	r0, r9
 8004fba:	f000 fba1 	bl	8005700 <__mcmp>
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4658      	mov	r0, fp
 8004fc6:	f000 fbb7 	bl	8005738 <__mdiff>
 8004fca:	68c2      	ldr	r2, [r0, #12]
 8004fcc:	4606      	mov	r6, r0
 8004fce:	bb02      	cbnz	r2, 8005012 <_dtoa_r+0xa22>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	f000 fb94 	bl	8005700 <__mcmp>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4658      	mov	r0, fp
 8004fde:	920c      	str	r2, [sp, #48]	@ 0x30
 8004fe0:	f000 f956 	bl	8005290 <_Bfree>
 8004fe4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fe6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004fe8:	9e07      	ldr	r6, [sp, #28]
 8004fea:	ea43 0102 	orr.w	r1, r3, r2
 8004fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff0:	4319      	orrs	r1, r3
 8004ff2:	d110      	bne.n	8005016 <_dtoa_r+0xa26>
 8004ff4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ff8:	d029      	beq.n	800504e <_dtoa_r+0xa5e>
 8004ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dd02      	ble.n	8005006 <_dtoa_r+0xa16>
 8005000:	9b08      	ldr	r3, [sp, #32]
 8005002:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005006:	9b02      	ldr	r3, [sp, #8]
 8005008:	f883 8000 	strb.w	r8, [r3]
 800500c:	e63b      	b.n	8004c86 <_dtoa_r+0x696>
 800500e:	4628      	mov	r0, r5
 8005010:	e7bb      	b.n	8004f8a <_dtoa_r+0x99a>
 8005012:	2201      	movs	r2, #1
 8005014:	e7e1      	b.n	8004fda <_dtoa_r+0x9ea>
 8005016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	db04      	blt.n	8005026 <_dtoa_r+0xa36>
 800501c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800501e:	430b      	orrs	r3, r1
 8005020:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005022:	430b      	orrs	r3, r1
 8005024:	d120      	bne.n	8005068 <_dtoa_r+0xa78>
 8005026:	2a00      	cmp	r2, #0
 8005028:	dded      	ble.n	8005006 <_dtoa_r+0xa16>
 800502a:	4649      	mov	r1, r9
 800502c:	2201      	movs	r2, #1
 800502e:	4658      	mov	r0, fp
 8005030:	f000 fafa 	bl	8005628 <__lshift>
 8005034:	4621      	mov	r1, r4
 8005036:	4681      	mov	r9, r0
 8005038:	f000 fb62 	bl	8005700 <__mcmp>
 800503c:	2800      	cmp	r0, #0
 800503e:	dc03      	bgt.n	8005048 <_dtoa_r+0xa58>
 8005040:	d1e1      	bne.n	8005006 <_dtoa_r+0xa16>
 8005042:	f018 0f01 	tst.w	r8, #1
 8005046:	d0de      	beq.n	8005006 <_dtoa_r+0xa16>
 8005048:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800504c:	d1d8      	bne.n	8005000 <_dtoa_r+0xa10>
 800504e:	2339      	movs	r3, #57	@ 0x39
 8005050:	9a02      	ldr	r2, [sp, #8]
 8005052:	7013      	strb	r3, [r2, #0]
 8005054:	4633      	mov	r3, r6
 8005056:	461e      	mov	r6, r3
 8005058:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800505c:	3b01      	subs	r3, #1
 800505e:	2a39      	cmp	r2, #57	@ 0x39
 8005060:	d052      	beq.n	8005108 <_dtoa_r+0xb18>
 8005062:	3201      	adds	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e60e      	b.n	8004c86 <_dtoa_r+0x696>
 8005068:	2a00      	cmp	r2, #0
 800506a:	dd07      	ble.n	800507c <_dtoa_r+0xa8c>
 800506c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005070:	d0ed      	beq.n	800504e <_dtoa_r+0xa5e>
 8005072:	9a02      	ldr	r2, [sp, #8]
 8005074:	f108 0301 	add.w	r3, r8, #1
 8005078:	7013      	strb	r3, [r2, #0]
 800507a:	e604      	b.n	8004c86 <_dtoa_r+0x696>
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	9a07      	ldr	r2, [sp, #28]
 8005080:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005086:	4293      	cmp	r3, r2
 8005088:	d028      	beq.n	80050dc <_dtoa_r+0xaec>
 800508a:	4649      	mov	r1, r9
 800508c:	2300      	movs	r3, #0
 800508e:	220a      	movs	r2, #10
 8005090:	4658      	mov	r0, fp
 8005092:	f000 f91f 	bl	80052d4 <__multadd>
 8005096:	42af      	cmp	r7, r5
 8005098:	4681      	mov	r9, r0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f04f 020a 	mov.w	r2, #10
 80050a2:	4639      	mov	r1, r7
 80050a4:	4658      	mov	r0, fp
 80050a6:	d107      	bne.n	80050b8 <_dtoa_r+0xac8>
 80050a8:	f000 f914 	bl	80052d4 <__multadd>
 80050ac:	4607      	mov	r7, r0
 80050ae:	4605      	mov	r5, r0
 80050b0:	9b07      	ldr	r3, [sp, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	9307      	str	r3, [sp, #28]
 80050b6:	e774      	b.n	8004fa2 <_dtoa_r+0x9b2>
 80050b8:	f000 f90c 	bl	80052d4 <__multadd>
 80050bc:	4629      	mov	r1, r5
 80050be:	4607      	mov	r7, r0
 80050c0:	2300      	movs	r3, #0
 80050c2:	220a      	movs	r2, #10
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 f905 	bl	80052d4 <__multadd>
 80050ca:	4605      	mov	r5, r0
 80050cc:	e7f0      	b.n	80050b0 <_dtoa_r+0xac0>
 80050ce:	9b08      	ldr	r3, [sp, #32]
 80050d0:	2700      	movs	r7, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfcc      	ite	gt
 80050d6:	461e      	movgt	r6, r3
 80050d8:	2601      	movle	r6, #1
 80050da:	4456      	add	r6, sl
 80050dc:	4649      	mov	r1, r9
 80050de:	2201      	movs	r2, #1
 80050e0:	4658      	mov	r0, fp
 80050e2:	f000 faa1 	bl	8005628 <__lshift>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4681      	mov	r9, r0
 80050ea:	f000 fb09 	bl	8005700 <__mcmp>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	dcb0      	bgt.n	8005054 <_dtoa_r+0xa64>
 80050f2:	d102      	bne.n	80050fa <_dtoa_r+0xb0a>
 80050f4:	f018 0f01 	tst.w	r8, #1
 80050f8:	d1ac      	bne.n	8005054 <_dtoa_r+0xa64>
 80050fa:	4633      	mov	r3, r6
 80050fc:	461e      	mov	r6, r3
 80050fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005102:	2a30      	cmp	r2, #48	@ 0x30
 8005104:	d0fa      	beq.n	80050fc <_dtoa_r+0xb0c>
 8005106:	e5be      	b.n	8004c86 <_dtoa_r+0x696>
 8005108:	459a      	cmp	sl, r3
 800510a:	d1a4      	bne.n	8005056 <_dtoa_r+0xa66>
 800510c:	9b04      	ldr	r3, [sp, #16]
 800510e:	3301      	adds	r3, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	2331      	movs	r3, #49	@ 0x31
 8005114:	f88a 3000 	strb.w	r3, [sl]
 8005118:	e5b5      	b.n	8004c86 <_dtoa_r+0x696>
 800511a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800511c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800517c <_dtoa_r+0xb8c>
 8005120:	b11b      	cbz	r3, 800512a <_dtoa_r+0xb3a>
 8005122:	f10a 0308 	add.w	r3, sl, #8
 8005126:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4650      	mov	r0, sl
 800512c:	b017      	add	sp, #92	@ 0x5c
 800512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005132:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005134:	2b01      	cmp	r3, #1
 8005136:	f77f ae3d 	ble.w	8004db4 <_dtoa_r+0x7c4>
 800513a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800513c:	930a      	str	r3, [sp, #40]	@ 0x28
 800513e:	2001      	movs	r0, #1
 8005140:	e65b      	b.n	8004dfa <_dtoa_r+0x80a>
 8005142:	9b08      	ldr	r3, [sp, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f77f aed6 	ble.w	8004ef6 <_dtoa_r+0x906>
 800514a:	4656      	mov	r6, sl
 800514c:	4621      	mov	r1, r4
 800514e:	4648      	mov	r0, r9
 8005150:	f7ff f9c5 	bl	80044de <quorem>
 8005154:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005158:	9b08      	ldr	r3, [sp, #32]
 800515a:	f806 8b01 	strb.w	r8, [r6], #1
 800515e:	eba6 020a 	sub.w	r2, r6, sl
 8005162:	4293      	cmp	r3, r2
 8005164:	ddb3      	ble.n	80050ce <_dtoa_r+0xade>
 8005166:	4649      	mov	r1, r9
 8005168:	2300      	movs	r3, #0
 800516a:	220a      	movs	r2, #10
 800516c:	4658      	mov	r0, fp
 800516e:	f000 f8b1 	bl	80052d4 <__multadd>
 8005172:	4681      	mov	r9, r0
 8005174:	e7ea      	b.n	800514c <_dtoa_r+0xb5c>
 8005176:	bf00      	nop
 8005178:	0800656a 	.word	0x0800656a
 800517c:	080064ee 	.word	0x080064ee

08005180 <_free_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4605      	mov	r5, r0
 8005184:	2900      	cmp	r1, #0
 8005186:	d040      	beq.n	800520a <_free_r+0x8a>
 8005188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800518c:	1f0c      	subs	r4, r1, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfb8      	it	lt
 8005192:	18e4      	addlt	r4, r4, r3
 8005194:	f7fe fb34 	bl	8003800 <__malloc_lock>
 8005198:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <_free_r+0x8c>)
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	b933      	cbnz	r3, 80051ac <_free_r+0x2c>
 800519e:	6063      	str	r3, [r4, #4]
 80051a0:	6014      	str	r4, [r2, #0]
 80051a2:	4628      	mov	r0, r5
 80051a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051a8:	f7fe bb30 	b.w	800380c <__malloc_unlock>
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	d908      	bls.n	80051c2 <_free_r+0x42>
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	1821      	adds	r1, r4, r0
 80051b4:	428b      	cmp	r3, r1
 80051b6:	bf01      	itttt	eq
 80051b8:	6819      	ldreq	r1, [r3, #0]
 80051ba:	685b      	ldreq	r3, [r3, #4]
 80051bc:	1809      	addeq	r1, r1, r0
 80051be:	6021      	streq	r1, [r4, #0]
 80051c0:	e7ed      	b.n	800519e <_free_r+0x1e>
 80051c2:	461a      	mov	r2, r3
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	b10b      	cbz	r3, 80051cc <_free_r+0x4c>
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	d9fa      	bls.n	80051c2 <_free_r+0x42>
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	1850      	adds	r0, r2, r1
 80051d0:	42a0      	cmp	r0, r4
 80051d2:	d10b      	bne.n	80051ec <_free_r+0x6c>
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	4401      	add	r1, r0
 80051d8:	1850      	adds	r0, r2, r1
 80051da:	4283      	cmp	r3, r0
 80051dc:	6011      	str	r1, [r2, #0]
 80051de:	d1e0      	bne.n	80051a2 <_free_r+0x22>
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4408      	add	r0, r1
 80051e6:	6010      	str	r0, [r2, #0]
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	e7da      	b.n	80051a2 <_free_r+0x22>
 80051ec:	d902      	bls.n	80051f4 <_free_r+0x74>
 80051ee:	230c      	movs	r3, #12
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	e7d6      	b.n	80051a2 <_free_r+0x22>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	1821      	adds	r1, r4, r0
 80051f8:	428b      	cmp	r3, r1
 80051fa:	bf01      	itttt	eq
 80051fc:	6819      	ldreq	r1, [r3, #0]
 80051fe:	685b      	ldreq	r3, [r3, #4]
 8005200:	1809      	addeq	r1, r1, r0
 8005202:	6021      	streq	r1, [r4, #0]
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	6054      	str	r4, [r2, #4]
 8005208:	e7cb      	b.n	80051a2 <_free_r+0x22>
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000330 	.word	0x20000330

08005210 <_Balloc>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	69c6      	ldr	r6, [r0, #28]
 8005214:	4604      	mov	r4, r0
 8005216:	460d      	mov	r5, r1
 8005218:	b976      	cbnz	r6, 8005238 <_Balloc+0x28>
 800521a:	2010      	movs	r0, #16
 800521c:	f7fe fa3e 	bl	800369c <malloc>
 8005220:	4602      	mov	r2, r0
 8005222:	61e0      	str	r0, [r4, #28]
 8005224:	b920      	cbnz	r0, 8005230 <_Balloc+0x20>
 8005226:	216b      	movs	r1, #107	@ 0x6b
 8005228:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <_Balloc+0x78>)
 800522a:	4818      	ldr	r0, [pc, #96]	@ (800528c <_Balloc+0x7c>)
 800522c:	f000 fd98 	bl	8005d60 <__assert_func>
 8005230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005234:	6006      	str	r6, [r0, #0]
 8005236:	60c6      	str	r6, [r0, #12]
 8005238:	69e6      	ldr	r6, [r4, #28]
 800523a:	68f3      	ldr	r3, [r6, #12]
 800523c:	b183      	cbz	r3, 8005260 <_Balloc+0x50>
 800523e:	69e3      	ldr	r3, [r4, #28]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005246:	b9b8      	cbnz	r0, 8005278 <_Balloc+0x68>
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f605 	lsl.w	r6, r1, r5
 800524e:	1d72      	adds	r2, r6, #5
 8005250:	4620      	mov	r0, r4
 8005252:	0092      	lsls	r2, r2, #2
 8005254:	f000 fda2 	bl	8005d9c <_calloc_r>
 8005258:	b160      	cbz	r0, 8005274 <_Balloc+0x64>
 800525a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800525e:	e00e      	b.n	800527e <_Balloc+0x6e>
 8005260:	2221      	movs	r2, #33	@ 0x21
 8005262:	2104      	movs	r1, #4
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fd99 	bl	8005d9c <_calloc_r>
 800526a:	69e3      	ldr	r3, [r4, #28]
 800526c:	60f0      	str	r0, [r6, #12]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e4      	bne.n	800523e <_Balloc+0x2e>
 8005274:	2000      	movs	r0, #0
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	6802      	ldr	r2, [r0, #0]
 800527a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800527e:	2300      	movs	r3, #0
 8005280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005284:	e7f7      	b.n	8005276 <_Balloc+0x66>
 8005286:	bf00      	nop
 8005288:	080064fb 	.word	0x080064fb
 800528c:	0800657b 	.word	0x0800657b

08005290 <_Bfree>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	69c6      	ldr	r6, [r0, #28]
 8005294:	4605      	mov	r5, r0
 8005296:	460c      	mov	r4, r1
 8005298:	b976      	cbnz	r6, 80052b8 <_Bfree+0x28>
 800529a:	2010      	movs	r0, #16
 800529c:	f7fe f9fe 	bl	800369c <malloc>
 80052a0:	4602      	mov	r2, r0
 80052a2:	61e8      	str	r0, [r5, #28]
 80052a4:	b920      	cbnz	r0, 80052b0 <_Bfree+0x20>
 80052a6:	218f      	movs	r1, #143	@ 0x8f
 80052a8:	4b08      	ldr	r3, [pc, #32]	@ (80052cc <_Bfree+0x3c>)
 80052aa:	4809      	ldr	r0, [pc, #36]	@ (80052d0 <_Bfree+0x40>)
 80052ac:	f000 fd58 	bl	8005d60 <__assert_func>
 80052b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052b4:	6006      	str	r6, [r0, #0]
 80052b6:	60c6      	str	r6, [r0, #12]
 80052b8:	b13c      	cbz	r4, 80052ca <_Bfree+0x3a>
 80052ba:	69eb      	ldr	r3, [r5, #28]
 80052bc:	6862      	ldr	r2, [r4, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052c4:	6021      	str	r1, [r4, #0]
 80052c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	080064fb 	.word	0x080064fb
 80052d0:	0800657b 	.word	0x0800657b

080052d4 <__multadd>:
 80052d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d8:	4607      	mov	r7, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	461e      	mov	r6, r3
 80052de:	2000      	movs	r0, #0
 80052e0:	690d      	ldr	r5, [r1, #16]
 80052e2:	f101 0c14 	add.w	ip, r1, #20
 80052e6:	f8dc 3000 	ldr.w	r3, [ip]
 80052ea:	3001      	adds	r0, #1
 80052ec:	b299      	uxth	r1, r3
 80052ee:	fb02 6101 	mla	r1, r2, r1, r6
 80052f2:	0c1e      	lsrs	r6, r3, #16
 80052f4:	0c0b      	lsrs	r3, r1, #16
 80052f6:	fb02 3306 	mla	r3, r2, r6, r3
 80052fa:	b289      	uxth	r1, r1
 80052fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005300:	4285      	cmp	r5, r0
 8005302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005306:	f84c 1b04 	str.w	r1, [ip], #4
 800530a:	dcec      	bgt.n	80052e6 <__multadd+0x12>
 800530c:	b30e      	cbz	r6, 8005352 <__multadd+0x7e>
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc19      	bgt.n	8005348 <__multadd+0x74>
 8005314:	6861      	ldr	r1, [r4, #4]
 8005316:	4638      	mov	r0, r7
 8005318:	3101      	adds	r1, #1
 800531a:	f7ff ff79 	bl	8005210 <_Balloc>
 800531e:	4680      	mov	r8, r0
 8005320:	b928      	cbnz	r0, 800532e <__multadd+0x5a>
 8005322:	4602      	mov	r2, r0
 8005324:	21ba      	movs	r1, #186	@ 0xba
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <__multadd+0x84>)
 8005328:	480c      	ldr	r0, [pc, #48]	@ (800535c <__multadd+0x88>)
 800532a:	f000 fd19 	bl	8005d60 <__assert_func>
 800532e:	6922      	ldr	r2, [r4, #16]
 8005330:	f104 010c 	add.w	r1, r4, #12
 8005334:	3202      	adds	r2, #2
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	300c      	adds	r0, #12
 800533a:	f000 fd03 	bl	8005d44 <memcpy>
 800533e:	4621      	mov	r1, r4
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff ffa5 	bl	8005290 <_Bfree>
 8005346:	4644      	mov	r4, r8
 8005348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800534c:	3501      	adds	r5, #1
 800534e:	615e      	str	r6, [r3, #20]
 8005350:	6125      	str	r5, [r4, #16]
 8005352:	4620      	mov	r0, r4
 8005354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005358:	0800656a 	.word	0x0800656a
 800535c:	0800657b 	.word	0x0800657b

08005360 <__hi0bits>:
 8005360:	4603      	mov	r3, r0
 8005362:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005366:	bf3a      	itte	cc
 8005368:	0403      	lslcc	r3, r0, #16
 800536a:	2010      	movcc	r0, #16
 800536c:	2000      	movcs	r0, #0
 800536e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005372:	bf3c      	itt	cc
 8005374:	021b      	lslcc	r3, r3, #8
 8005376:	3008      	addcc	r0, #8
 8005378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800537c:	bf3c      	itt	cc
 800537e:	011b      	lslcc	r3, r3, #4
 8005380:	3004      	addcc	r0, #4
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	bf3c      	itt	cc
 8005388:	009b      	lslcc	r3, r3, #2
 800538a:	3002      	addcc	r0, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	db05      	blt.n	800539c <__hi0bits+0x3c>
 8005390:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005394:	f100 0001 	add.w	r0, r0, #1
 8005398:	bf08      	it	eq
 800539a:	2020      	moveq	r0, #32
 800539c:	4770      	bx	lr

0800539e <__lo0bits>:
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	4602      	mov	r2, r0
 80053a2:	f013 0007 	ands.w	r0, r3, #7
 80053a6:	d00b      	beq.n	80053c0 <__lo0bits+0x22>
 80053a8:	07d9      	lsls	r1, r3, #31
 80053aa:	d421      	bmi.n	80053f0 <__lo0bits+0x52>
 80053ac:	0798      	lsls	r0, r3, #30
 80053ae:	bf49      	itett	mi
 80053b0:	085b      	lsrmi	r3, r3, #1
 80053b2:	089b      	lsrpl	r3, r3, #2
 80053b4:	2001      	movmi	r0, #1
 80053b6:	6013      	strmi	r3, [r2, #0]
 80053b8:	bf5c      	itt	pl
 80053ba:	2002      	movpl	r0, #2
 80053bc:	6013      	strpl	r3, [r2, #0]
 80053be:	4770      	bx	lr
 80053c0:	b299      	uxth	r1, r3
 80053c2:	b909      	cbnz	r1, 80053c8 <__lo0bits+0x2a>
 80053c4:	2010      	movs	r0, #16
 80053c6:	0c1b      	lsrs	r3, r3, #16
 80053c8:	b2d9      	uxtb	r1, r3
 80053ca:	b909      	cbnz	r1, 80053d0 <__lo0bits+0x32>
 80053cc:	3008      	adds	r0, #8
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	0719      	lsls	r1, r3, #28
 80053d2:	bf04      	itt	eq
 80053d4:	091b      	lsreq	r3, r3, #4
 80053d6:	3004      	addeq	r0, #4
 80053d8:	0799      	lsls	r1, r3, #30
 80053da:	bf04      	itt	eq
 80053dc:	089b      	lsreq	r3, r3, #2
 80053de:	3002      	addeq	r0, #2
 80053e0:	07d9      	lsls	r1, r3, #31
 80053e2:	d403      	bmi.n	80053ec <__lo0bits+0x4e>
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	f100 0001 	add.w	r0, r0, #1
 80053ea:	d003      	beq.n	80053f4 <__lo0bits+0x56>
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4770      	bx	lr
 80053f0:	2000      	movs	r0, #0
 80053f2:	4770      	bx	lr
 80053f4:	2020      	movs	r0, #32
 80053f6:	4770      	bx	lr

080053f8 <__i2b>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	460c      	mov	r4, r1
 80053fc:	2101      	movs	r1, #1
 80053fe:	f7ff ff07 	bl	8005210 <_Balloc>
 8005402:	4602      	mov	r2, r0
 8005404:	b928      	cbnz	r0, 8005412 <__i2b+0x1a>
 8005406:	f240 1145 	movw	r1, #325	@ 0x145
 800540a:	4b04      	ldr	r3, [pc, #16]	@ (800541c <__i2b+0x24>)
 800540c:	4804      	ldr	r0, [pc, #16]	@ (8005420 <__i2b+0x28>)
 800540e:	f000 fca7 	bl	8005d60 <__assert_func>
 8005412:	2301      	movs	r3, #1
 8005414:	6144      	str	r4, [r0, #20]
 8005416:	6103      	str	r3, [r0, #16]
 8005418:	bd10      	pop	{r4, pc}
 800541a:	bf00      	nop
 800541c:	0800656a 	.word	0x0800656a
 8005420:	0800657b 	.word	0x0800657b

08005424 <__multiply>:
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005428:	4614      	mov	r4, r2
 800542a:	690a      	ldr	r2, [r1, #16]
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	460f      	mov	r7, r1
 8005430:	429a      	cmp	r2, r3
 8005432:	bfa2      	ittt	ge
 8005434:	4623      	movge	r3, r4
 8005436:	460c      	movge	r4, r1
 8005438:	461f      	movge	r7, r3
 800543a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800543e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005442:	68a3      	ldr	r3, [r4, #8]
 8005444:	6861      	ldr	r1, [r4, #4]
 8005446:	eb0a 0609 	add.w	r6, sl, r9
 800544a:	42b3      	cmp	r3, r6
 800544c:	b085      	sub	sp, #20
 800544e:	bfb8      	it	lt
 8005450:	3101      	addlt	r1, #1
 8005452:	f7ff fedd 	bl	8005210 <_Balloc>
 8005456:	b930      	cbnz	r0, 8005466 <__multiply+0x42>
 8005458:	4602      	mov	r2, r0
 800545a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800545e:	4b43      	ldr	r3, [pc, #268]	@ (800556c <__multiply+0x148>)
 8005460:	4843      	ldr	r0, [pc, #268]	@ (8005570 <__multiply+0x14c>)
 8005462:	f000 fc7d 	bl	8005d60 <__assert_func>
 8005466:	f100 0514 	add.w	r5, r0, #20
 800546a:	462b      	mov	r3, r5
 800546c:	2200      	movs	r2, #0
 800546e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005472:	4543      	cmp	r3, r8
 8005474:	d321      	bcc.n	80054ba <__multiply+0x96>
 8005476:	f107 0114 	add.w	r1, r7, #20
 800547a:	f104 0214 	add.w	r2, r4, #20
 800547e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005482:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005486:	9302      	str	r3, [sp, #8]
 8005488:	1b13      	subs	r3, r2, r4
 800548a:	3b15      	subs	r3, #21
 800548c:	f023 0303 	bic.w	r3, r3, #3
 8005490:	3304      	adds	r3, #4
 8005492:	f104 0715 	add.w	r7, r4, #21
 8005496:	42ba      	cmp	r2, r7
 8005498:	bf38      	it	cc
 800549a:	2304      	movcc	r3, #4
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	9b02      	ldr	r3, [sp, #8]
 80054a0:	9103      	str	r1, [sp, #12]
 80054a2:	428b      	cmp	r3, r1
 80054a4:	d80c      	bhi.n	80054c0 <__multiply+0x9c>
 80054a6:	2e00      	cmp	r6, #0
 80054a8:	dd03      	ble.n	80054b2 <__multiply+0x8e>
 80054aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d05a      	beq.n	8005568 <__multiply+0x144>
 80054b2:	6106      	str	r6, [r0, #16]
 80054b4:	b005      	add	sp, #20
 80054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ba:	f843 2b04 	str.w	r2, [r3], #4
 80054be:	e7d8      	b.n	8005472 <__multiply+0x4e>
 80054c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80054c4:	f1ba 0f00 	cmp.w	sl, #0
 80054c8:	d023      	beq.n	8005512 <__multiply+0xee>
 80054ca:	46a9      	mov	r9, r5
 80054cc:	f04f 0c00 	mov.w	ip, #0
 80054d0:	f104 0e14 	add.w	lr, r4, #20
 80054d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80054d8:	f8d9 3000 	ldr.w	r3, [r9]
 80054dc:	fa1f fb87 	uxth.w	fp, r7
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	fb0a 330b 	mla	r3, sl, fp, r3
 80054e6:	4463      	add	r3, ip
 80054e8:	f8d9 c000 	ldr.w	ip, [r9]
 80054ec:	0c3f      	lsrs	r7, r7, #16
 80054ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80054f2:	fb0a c707 	mla	r7, sl, r7, ip
 80054f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005500:	4572      	cmp	r2, lr
 8005502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005506:	f849 3b04 	str.w	r3, [r9], #4
 800550a:	d8e3      	bhi.n	80054d4 <__multiply+0xb0>
 800550c:	9b01      	ldr	r3, [sp, #4]
 800550e:	f845 c003 	str.w	ip, [r5, r3]
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	3104      	adds	r1, #4
 8005516:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800551a:	f1b9 0f00 	cmp.w	r9, #0
 800551e:	d021      	beq.n	8005564 <__multiply+0x140>
 8005520:	46ae      	mov	lr, r5
 8005522:	f04f 0a00 	mov.w	sl, #0
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	f104 0c14 	add.w	ip, r4, #20
 800552c:	f8bc b000 	ldrh.w	fp, [ip]
 8005530:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005534:	b29b      	uxth	r3, r3
 8005536:	fb09 770b 	mla	r7, r9, fp, r7
 800553a:	4457      	add	r7, sl
 800553c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005540:	f84e 3b04 	str.w	r3, [lr], #4
 8005544:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005548:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800554c:	f8be 3000 	ldrh.w	r3, [lr]
 8005550:	4562      	cmp	r2, ip
 8005552:	fb09 330a 	mla	r3, r9, sl, r3
 8005556:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800555a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800555e:	d8e5      	bhi.n	800552c <__multiply+0x108>
 8005560:	9f01      	ldr	r7, [sp, #4]
 8005562:	51eb      	str	r3, [r5, r7]
 8005564:	3504      	adds	r5, #4
 8005566:	e79a      	b.n	800549e <__multiply+0x7a>
 8005568:	3e01      	subs	r6, #1
 800556a:	e79c      	b.n	80054a6 <__multiply+0x82>
 800556c:	0800656a 	.word	0x0800656a
 8005570:	0800657b 	.word	0x0800657b

08005574 <__pow5mult>:
 8005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005578:	4615      	mov	r5, r2
 800557a:	f012 0203 	ands.w	r2, r2, #3
 800557e:	4607      	mov	r7, r0
 8005580:	460e      	mov	r6, r1
 8005582:	d007      	beq.n	8005594 <__pow5mult+0x20>
 8005584:	4c25      	ldr	r4, [pc, #148]	@ (800561c <__pow5mult+0xa8>)
 8005586:	3a01      	subs	r2, #1
 8005588:	2300      	movs	r3, #0
 800558a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800558e:	f7ff fea1 	bl	80052d4 <__multadd>
 8005592:	4606      	mov	r6, r0
 8005594:	10ad      	asrs	r5, r5, #2
 8005596:	d03d      	beq.n	8005614 <__pow5mult+0xa0>
 8005598:	69fc      	ldr	r4, [r7, #28]
 800559a:	b97c      	cbnz	r4, 80055bc <__pow5mult+0x48>
 800559c:	2010      	movs	r0, #16
 800559e:	f7fe f87d 	bl	800369c <malloc>
 80055a2:	4602      	mov	r2, r0
 80055a4:	61f8      	str	r0, [r7, #28]
 80055a6:	b928      	cbnz	r0, 80055b4 <__pow5mult+0x40>
 80055a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005620 <__pow5mult+0xac>)
 80055ae:	481d      	ldr	r0, [pc, #116]	@ (8005624 <__pow5mult+0xb0>)
 80055b0:	f000 fbd6 	bl	8005d60 <__assert_func>
 80055b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055b8:	6004      	str	r4, [r0, #0]
 80055ba:	60c4      	str	r4, [r0, #12]
 80055bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055c4:	b94c      	cbnz	r4, 80055da <__pow5mult+0x66>
 80055c6:	f240 2171 	movw	r1, #625	@ 0x271
 80055ca:	4638      	mov	r0, r7
 80055cc:	f7ff ff14 	bl	80053f8 <__i2b>
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80055d8:	6003      	str	r3, [r0, #0]
 80055da:	f04f 0900 	mov.w	r9, #0
 80055de:	07eb      	lsls	r3, r5, #31
 80055e0:	d50a      	bpl.n	80055f8 <__pow5mult+0x84>
 80055e2:	4631      	mov	r1, r6
 80055e4:	4622      	mov	r2, r4
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff ff1c 	bl	8005424 <__multiply>
 80055ec:	4680      	mov	r8, r0
 80055ee:	4631      	mov	r1, r6
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff fe4d 	bl	8005290 <_Bfree>
 80055f6:	4646      	mov	r6, r8
 80055f8:	106d      	asrs	r5, r5, #1
 80055fa:	d00b      	beq.n	8005614 <__pow5mult+0xa0>
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	b938      	cbnz	r0, 8005610 <__pow5mult+0x9c>
 8005600:	4622      	mov	r2, r4
 8005602:	4621      	mov	r1, r4
 8005604:	4638      	mov	r0, r7
 8005606:	f7ff ff0d 	bl	8005424 <__multiply>
 800560a:	6020      	str	r0, [r4, #0]
 800560c:	f8c0 9000 	str.w	r9, [r0]
 8005610:	4604      	mov	r4, r0
 8005612:	e7e4      	b.n	80055de <__pow5mult+0x6a>
 8005614:	4630      	mov	r0, r6
 8005616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561a:	bf00      	nop
 800561c:	080065d4 	.word	0x080065d4
 8005620:	080064fb 	.word	0x080064fb
 8005624:	0800657b 	.word	0x0800657b

08005628 <__lshift>:
 8005628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	460c      	mov	r4, r1
 800562e:	4607      	mov	r7, r0
 8005630:	4691      	mov	r9, r2
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	6849      	ldr	r1, [r1, #4]
 8005636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005640:	f108 0601 	add.w	r6, r8, #1
 8005644:	42b3      	cmp	r3, r6
 8005646:	db0b      	blt.n	8005660 <__lshift+0x38>
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff fde1 	bl	8005210 <_Balloc>
 800564e:	4605      	mov	r5, r0
 8005650:	b948      	cbnz	r0, 8005666 <__lshift+0x3e>
 8005652:	4602      	mov	r2, r0
 8005654:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005658:	4b27      	ldr	r3, [pc, #156]	@ (80056f8 <__lshift+0xd0>)
 800565a:	4828      	ldr	r0, [pc, #160]	@ (80056fc <__lshift+0xd4>)
 800565c:	f000 fb80 	bl	8005d60 <__assert_func>
 8005660:	3101      	adds	r1, #1
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	e7ee      	b.n	8005644 <__lshift+0x1c>
 8005666:	2300      	movs	r3, #0
 8005668:	f100 0114 	add.w	r1, r0, #20
 800566c:	f100 0210 	add.w	r2, r0, #16
 8005670:	4618      	mov	r0, r3
 8005672:	4553      	cmp	r3, sl
 8005674:	db33      	blt.n	80056de <__lshift+0xb6>
 8005676:	6920      	ldr	r0, [r4, #16]
 8005678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800567c:	f104 0314 	add.w	r3, r4, #20
 8005680:	f019 091f 	ands.w	r9, r9, #31
 8005684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005688:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800568c:	d02b      	beq.n	80056e6 <__lshift+0xbe>
 800568e:	468a      	mov	sl, r1
 8005690:	2200      	movs	r2, #0
 8005692:	f1c9 0e20 	rsb	lr, r9, #32
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	fa00 f009 	lsl.w	r0, r0, r9
 800569c:	4310      	orrs	r0, r2
 800569e:	f84a 0b04 	str.w	r0, [sl], #4
 80056a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a6:	459c      	cmp	ip, r3
 80056a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80056ac:	d8f3      	bhi.n	8005696 <__lshift+0x6e>
 80056ae:	ebac 0304 	sub.w	r3, ip, r4
 80056b2:	3b15      	subs	r3, #21
 80056b4:	f023 0303 	bic.w	r3, r3, #3
 80056b8:	3304      	adds	r3, #4
 80056ba:	f104 0015 	add.w	r0, r4, #21
 80056be:	4584      	cmp	ip, r0
 80056c0:	bf38      	it	cc
 80056c2:	2304      	movcc	r3, #4
 80056c4:	50ca      	str	r2, [r1, r3]
 80056c6:	b10a      	cbz	r2, 80056cc <__lshift+0xa4>
 80056c8:	f108 0602 	add.w	r6, r8, #2
 80056cc:	3e01      	subs	r6, #1
 80056ce:	4638      	mov	r0, r7
 80056d0:	4621      	mov	r1, r4
 80056d2:	612e      	str	r6, [r5, #16]
 80056d4:	f7ff fddc 	bl	8005290 <_Bfree>
 80056d8:	4628      	mov	r0, r5
 80056da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056de:	f842 0f04 	str.w	r0, [r2, #4]!
 80056e2:	3301      	adds	r3, #1
 80056e4:	e7c5      	b.n	8005672 <__lshift+0x4a>
 80056e6:	3904      	subs	r1, #4
 80056e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ec:	459c      	cmp	ip, r3
 80056ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80056f2:	d8f9      	bhi.n	80056e8 <__lshift+0xc0>
 80056f4:	e7ea      	b.n	80056cc <__lshift+0xa4>
 80056f6:	bf00      	nop
 80056f8:	0800656a 	.word	0x0800656a
 80056fc:	0800657b 	.word	0x0800657b

08005700 <__mcmp>:
 8005700:	4603      	mov	r3, r0
 8005702:	690a      	ldr	r2, [r1, #16]
 8005704:	6900      	ldr	r0, [r0, #16]
 8005706:	b530      	push	{r4, r5, lr}
 8005708:	1a80      	subs	r0, r0, r2
 800570a:	d10e      	bne.n	800572a <__mcmp+0x2a>
 800570c:	3314      	adds	r3, #20
 800570e:	3114      	adds	r1, #20
 8005710:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005714:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005718:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800571c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005720:	4295      	cmp	r5, r2
 8005722:	d003      	beq.n	800572c <__mcmp+0x2c>
 8005724:	d205      	bcs.n	8005732 <__mcmp+0x32>
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	bd30      	pop	{r4, r5, pc}
 800572c:	42a3      	cmp	r3, r4
 800572e:	d3f3      	bcc.n	8005718 <__mcmp+0x18>
 8005730:	e7fb      	b.n	800572a <__mcmp+0x2a>
 8005732:	2001      	movs	r0, #1
 8005734:	e7f9      	b.n	800572a <__mcmp+0x2a>
	...

08005738 <__mdiff>:
 8005738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	4689      	mov	r9, r1
 800573e:	4606      	mov	r6, r0
 8005740:	4611      	mov	r1, r2
 8005742:	4648      	mov	r0, r9
 8005744:	4614      	mov	r4, r2
 8005746:	f7ff ffdb 	bl	8005700 <__mcmp>
 800574a:	1e05      	subs	r5, r0, #0
 800574c:	d112      	bne.n	8005774 <__mdiff+0x3c>
 800574e:	4629      	mov	r1, r5
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff fd5d 	bl	8005210 <_Balloc>
 8005756:	4602      	mov	r2, r0
 8005758:	b928      	cbnz	r0, 8005766 <__mdiff+0x2e>
 800575a:	f240 2137 	movw	r1, #567	@ 0x237
 800575e:	4b3e      	ldr	r3, [pc, #248]	@ (8005858 <__mdiff+0x120>)
 8005760:	483e      	ldr	r0, [pc, #248]	@ (800585c <__mdiff+0x124>)
 8005762:	f000 fafd 	bl	8005d60 <__assert_func>
 8005766:	2301      	movs	r3, #1
 8005768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800576c:	4610      	mov	r0, r2
 800576e:	b003      	add	sp, #12
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	bfbc      	itt	lt
 8005776:	464b      	movlt	r3, r9
 8005778:	46a1      	movlt	r9, r4
 800577a:	4630      	mov	r0, r6
 800577c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005780:	bfba      	itte	lt
 8005782:	461c      	movlt	r4, r3
 8005784:	2501      	movlt	r5, #1
 8005786:	2500      	movge	r5, #0
 8005788:	f7ff fd42 	bl	8005210 <_Balloc>
 800578c:	4602      	mov	r2, r0
 800578e:	b918      	cbnz	r0, 8005798 <__mdiff+0x60>
 8005790:	f240 2145 	movw	r1, #581	@ 0x245
 8005794:	4b30      	ldr	r3, [pc, #192]	@ (8005858 <__mdiff+0x120>)
 8005796:	e7e3      	b.n	8005760 <__mdiff+0x28>
 8005798:	f100 0b14 	add.w	fp, r0, #20
 800579c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057a0:	f109 0310 	add.w	r3, r9, #16
 80057a4:	60c5      	str	r5, [r0, #12]
 80057a6:	f04f 0c00 	mov.w	ip, #0
 80057aa:	f109 0514 	add.w	r5, r9, #20
 80057ae:	46d9      	mov	r9, fp
 80057b0:	6926      	ldr	r6, [r4, #16]
 80057b2:	f104 0e14 	add.w	lr, r4, #20
 80057b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057ca:	b281      	uxth	r1, r0
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	fa1f f38a 	uxth.w	r3, sl
 80057d2:	1a5b      	subs	r3, r3, r1
 80057d4:	0c00      	lsrs	r0, r0, #16
 80057d6:	4463      	add	r3, ip
 80057d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80057dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80057e6:	4576      	cmp	r6, lr
 80057e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057ec:	f849 3b04 	str.w	r3, [r9], #4
 80057f0:	d8e6      	bhi.n	80057c0 <__mdiff+0x88>
 80057f2:	1b33      	subs	r3, r6, r4
 80057f4:	3b15      	subs	r3, #21
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	3415      	adds	r4, #21
 80057fc:	3304      	adds	r3, #4
 80057fe:	42a6      	cmp	r6, r4
 8005800:	bf38      	it	cc
 8005802:	2304      	movcc	r3, #4
 8005804:	441d      	add	r5, r3
 8005806:	445b      	add	r3, fp
 8005808:	461e      	mov	r6, r3
 800580a:	462c      	mov	r4, r5
 800580c:	4544      	cmp	r4, r8
 800580e:	d30e      	bcc.n	800582e <__mdiff+0xf6>
 8005810:	f108 0103 	add.w	r1, r8, #3
 8005814:	1b49      	subs	r1, r1, r5
 8005816:	f021 0103 	bic.w	r1, r1, #3
 800581a:	3d03      	subs	r5, #3
 800581c:	45a8      	cmp	r8, r5
 800581e:	bf38      	it	cc
 8005820:	2100      	movcc	r1, #0
 8005822:	440b      	add	r3, r1
 8005824:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005828:	b199      	cbz	r1, 8005852 <__mdiff+0x11a>
 800582a:	6117      	str	r7, [r2, #16]
 800582c:	e79e      	b.n	800576c <__mdiff+0x34>
 800582e:	46e6      	mov	lr, ip
 8005830:	f854 1b04 	ldr.w	r1, [r4], #4
 8005834:	fa1f fc81 	uxth.w	ip, r1
 8005838:	44f4      	add	ip, lr
 800583a:	0c08      	lsrs	r0, r1, #16
 800583c:	4471      	add	r1, lr
 800583e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005842:	b289      	uxth	r1, r1
 8005844:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005848:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800584c:	f846 1b04 	str.w	r1, [r6], #4
 8005850:	e7dc      	b.n	800580c <__mdiff+0xd4>
 8005852:	3f01      	subs	r7, #1
 8005854:	e7e6      	b.n	8005824 <__mdiff+0xec>
 8005856:	bf00      	nop
 8005858:	0800656a 	.word	0x0800656a
 800585c:	0800657b 	.word	0x0800657b

08005860 <__d2b>:
 8005860:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005864:	2101      	movs	r1, #1
 8005866:	4690      	mov	r8, r2
 8005868:	4699      	mov	r9, r3
 800586a:	9e08      	ldr	r6, [sp, #32]
 800586c:	f7ff fcd0 	bl	8005210 <_Balloc>
 8005870:	4604      	mov	r4, r0
 8005872:	b930      	cbnz	r0, 8005882 <__d2b+0x22>
 8005874:	4602      	mov	r2, r0
 8005876:	f240 310f 	movw	r1, #783	@ 0x30f
 800587a:	4b23      	ldr	r3, [pc, #140]	@ (8005908 <__d2b+0xa8>)
 800587c:	4823      	ldr	r0, [pc, #140]	@ (800590c <__d2b+0xac>)
 800587e:	f000 fa6f 	bl	8005d60 <__assert_func>
 8005882:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005886:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800588a:	b10d      	cbz	r5, 8005890 <__d2b+0x30>
 800588c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	f1b8 0300 	subs.w	r3, r8, #0
 8005896:	d024      	beq.n	80058e2 <__d2b+0x82>
 8005898:	4668      	mov	r0, sp
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	f7ff fd7f 	bl	800539e <__lo0bits>
 80058a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058a4:	b1d8      	cbz	r0, 80058de <__d2b+0x7e>
 80058a6:	f1c0 0320 	rsb	r3, r0, #32
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	430b      	orrs	r3, r1
 80058b0:	40c2      	lsrs	r2, r0
 80058b2:	6163      	str	r3, [r4, #20]
 80058b4:	9201      	str	r2, [sp, #4]
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf0c      	ite	eq
 80058bc:	2201      	moveq	r2, #1
 80058be:	2202      	movne	r2, #2
 80058c0:	61a3      	str	r3, [r4, #24]
 80058c2:	6122      	str	r2, [r4, #16]
 80058c4:	b1ad      	cbz	r5, 80058f2 <__d2b+0x92>
 80058c6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058ca:	4405      	add	r5, r0
 80058cc:	6035      	str	r5, [r6, #0]
 80058ce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d4:	6018      	str	r0, [r3, #0]
 80058d6:	4620      	mov	r0, r4
 80058d8:	b002      	add	sp, #8
 80058da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80058de:	6161      	str	r1, [r4, #20]
 80058e0:	e7e9      	b.n	80058b6 <__d2b+0x56>
 80058e2:	a801      	add	r0, sp, #4
 80058e4:	f7ff fd5b 	bl	800539e <__lo0bits>
 80058e8:	9b01      	ldr	r3, [sp, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	6163      	str	r3, [r4, #20]
 80058ee:	3020      	adds	r0, #32
 80058f0:	e7e7      	b.n	80058c2 <__d2b+0x62>
 80058f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80058f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80058fa:	6030      	str	r0, [r6, #0]
 80058fc:	6918      	ldr	r0, [r3, #16]
 80058fe:	f7ff fd2f 	bl	8005360 <__hi0bits>
 8005902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005906:	e7e4      	b.n	80058d2 <__d2b+0x72>
 8005908:	0800656a 	.word	0x0800656a
 800590c:	0800657b 	.word	0x0800657b

08005910 <__ssputs_r>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	461f      	mov	r7, r3
 8005916:	688e      	ldr	r6, [r1, #8]
 8005918:	4682      	mov	sl, r0
 800591a:	42be      	cmp	r6, r7
 800591c:	460c      	mov	r4, r1
 800591e:	4690      	mov	r8, r2
 8005920:	680b      	ldr	r3, [r1, #0]
 8005922:	d82d      	bhi.n	8005980 <__ssputs_r+0x70>
 8005924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005928:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800592c:	d026      	beq.n	800597c <__ssputs_r+0x6c>
 800592e:	6965      	ldr	r5, [r4, #20]
 8005930:	6909      	ldr	r1, [r1, #16]
 8005932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005936:	eba3 0901 	sub.w	r9, r3, r1
 800593a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800593e:	1c7b      	adds	r3, r7, #1
 8005940:	444b      	add	r3, r9
 8005942:	106d      	asrs	r5, r5, #1
 8005944:	429d      	cmp	r5, r3
 8005946:	bf38      	it	cc
 8005948:	461d      	movcc	r5, r3
 800594a:	0553      	lsls	r3, r2, #21
 800594c:	d527      	bpl.n	800599e <__ssputs_r+0x8e>
 800594e:	4629      	mov	r1, r5
 8005950:	f7fd fed6 	bl	8003700 <_malloc_r>
 8005954:	4606      	mov	r6, r0
 8005956:	b360      	cbz	r0, 80059b2 <__ssputs_r+0xa2>
 8005958:	464a      	mov	r2, r9
 800595a:	6921      	ldr	r1, [r4, #16]
 800595c:	f000 f9f2 	bl	8005d44 <memcpy>
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596a:	81a3      	strh	r3, [r4, #12]
 800596c:	6126      	str	r6, [r4, #16]
 800596e:	444e      	add	r6, r9
 8005970:	6026      	str	r6, [r4, #0]
 8005972:	463e      	mov	r6, r7
 8005974:	6165      	str	r5, [r4, #20]
 8005976:	eba5 0509 	sub.w	r5, r5, r9
 800597a:	60a5      	str	r5, [r4, #8]
 800597c:	42be      	cmp	r6, r7
 800597e:	d900      	bls.n	8005982 <__ssputs_r+0x72>
 8005980:	463e      	mov	r6, r7
 8005982:	4632      	mov	r2, r6
 8005984:	4641      	mov	r1, r8
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	f000 f9c2 	bl	8005d10 <memmove>
 800598c:	2000      	movs	r0, #0
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	1b9b      	subs	r3, r3, r6
 8005992:	60a3      	str	r3, [r4, #8]
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	4433      	add	r3, r6
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599e:	462a      	mov	r2, r5
 80059a0:	f000 fa22 	bl	8005de8 <_realloc_r>
 80059a4:	4606      	mov	r6, r0
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d1e0      	bne.n	800596c <__ssputs_r+0x5c>
 80059aa:	4650      	mov	r0, sl
 80059ac:	6921      	ldr	r1, [r4, #16]
 80059ae:	f7ff fbe7 	bl	8005180 <_free_r>
 80059b2:	230c      	movs	r3, #12
 80059b4:	f8ca 3000 	str.w	r3, [sl]
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	e7e9      	b.n	800599a <__ssputs_r+0x8a>
	...

080059c8 <_svfiprintf_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	4698      	mov	r8, r3
 80059ce:	898b      	ldrh	r3, [r1, #12]
 80059d0:	4607      	mov	r7, r0
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	460d      	mov	r5, r1
 80059d6:	4614      	mov	r4, r2
 80059d8:	b09d      	sub	sp, #116	@ 0x74
 80059da:	d510      	bpl.n	80059fe <_svfiprintf_r+0x36>
 80059dc:	690b      	ldr	r3, [r1, #16]
 80059de:	b973      	cbnz	r3, 80059fe <_svfiprintf_r+0x36>
 80059e0:	2140      	movs	r1, #64	@ 0x40
 80059e2:	f7fd fe8d 	bl	8003700 <_malloc_r>
 80059e6:	6028      	str	r0, [r5, #0]
 80059e8:	6128      	str	r0, [r5, #16]
 80059ea:	b930      	cbnz	r0, 80059fa <_svfiprintf_r+0x32>
 80059ec:	230c      	movs	r3, #12
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	b01d      	add	sp, #116	@ 0x74
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	2340      	movs	r3, #64	@ 0x40
 80059fc:	616b      	str	r3, [r5, #20]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a02:	2320      	movs	r3, #32
 8005a04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a08:	2330      	movs	r3, #48	@ 0x30
 8005a0a:	f04f 0901 	mov.w	r9, #1
 8005a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005bac <_svfiprintf_r+0x1e4>
 8005a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	469a      	mov	sl, r3
 8005a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a22:	b10a      	cbz	r2, 8005a28 <_svfiprintf_r+0x60>
 8005a24:	2a25      	cmp	r2, #37	@ 0x25
 8005a26:	d1f9      	bne.n	8005a1c <_svfiprintf_r+0x54>
 8005a28:	ebba 0b04 	subs.w	fp, sl, r4
 8005a2c:	d00b      	beq.n	8005a46 <_svfiprintf_r+0x7e>
 8005a2e:	465b      	mov	r3, fp
 8005a30:	4622      	mov	r2, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	f7ff ff6b 	bl	8005910 <__ssputs_r>
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f000 80a7 	beq.w	8005b8e <_svfiprintf_r+0x1c6>
 8005a40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a42:	445a      	add	r2, fp
 8005a44:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a46:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 809f 	beq.w	8005b8e <_svfiprintf_r+0x1c6>
 8005a50:	2300      	movs	r3, #0
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295
 8005a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5a:	f10a 0a01 	add.w	sl, sl, #1
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	9307      	str	r3, [sp, #28]
 8005a62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a68:	4654      	mov	r4, sl
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a70:	484e      	ldr	r0, [pc, #312]	@ (8005bac <_svfiprintf_r+0x1e4>)
 8005a72:	f7fe fd26 	bl	80044c2 <memchr>
 8005a76:	9a04      	ldr	r2, [sp, #16]
 8005a78:	b9d8      	cbnz	r0, 8005ab2 <_svfiprintf_r+0xea>
 8005a7a:	06d0      	lsls	r0, r2, #27
 8005a7c:	bf44      	itt	mi
 8005a7e:	2320      	movmi	r3, #32
 8005a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a84:	0711      	lsls	r1, r2, #28
 8005a86:	bf44      	itt	mi
 8005a88:	232b      	movmi	r3, #43	@ 0x2b
 8005a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a94:	d015      	beq.n	8005ac2 <_svfiprintf_r+0xfa>
 8005a96:	4654      	mov	r4, sl
 8005a98:	2000      	movs	r0, #0
 8005a9a:	f04f 0c0a 	mov.w	ip, #10
 8005a9e:	9a07      	ldr	r2, [sp, #28]
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aa6:	3b30      	subs	r3, #48	@ 0x30
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	d94b      	bls.n	8005b44 <_svfiprintf_r+0x17c>
 8005aac:	b1b0      	cbz	r0, 8005adc <_svfiprintf_r+0x114>
 8005aae:	9207      	str	r2, [sp, #28]
 8005ab0:	e014      	b.n	8005adc <_svfiprintf_r+0x114>
 8005ab2:	eba0 0308 	sub.w	r3, r0, r8
 8005ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	46a2      	mov	sl, r4
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	e7d2      	b.n	8005a68 <_svfiprintf_r+0xa0>
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	1d19      	adds	r1, r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	9103      	str	r1, [sp, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bfbb      	ittet	lt
 8005ace:	425b      	neglt	r3, r3
 8005ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad4:	9307      	strge	r3, [sp, #28]
 8005ad6:	9307      	strlt	r3, [sp, #28]
 8005ad8:	bfb8      	it	lt
 8005ada:	9204      	strlt	r2, [sp, #16]
 8005adc:	7823      	ldrb	r3, [r4, #0]
 8005ade:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ae0:	d10a      	bne.n	8005af8 <_svfiprintf_r+0x130>
 8005ae2:	7863      	ldrb	r3, [r4, #1]
 8005ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ae6:	d132      	bne.n	8005b4e <_svfiprintf_r+0x186>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	3402      	adds	r4, #2
 8005aec:	1d1a      	adds	r2, r3, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	9203      	str	r2, [sp, #12]
 8005af2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005bb0 <_svfiprintf_r+0x1e8>
 8005afc:	2203      	movs	r2, #3
 8005afe:	4650      	mov	r0, sl
 8005b00:	7821      	ldrb	r1, [r4, #0]
 8005b02:	f7fe fcde 	bl	80044c2 <memchr>
 8005b06:	b138      	cbz	r0, 8005b18 <_svfiprintf_r+0x150>
 8005b08:	2240      	movs	r2, #64	@ 0x40
 8005b0a:	9b04      	ldr	r3, [sp, #16]
 8005b0c:	eba0 000a 	sub.w	r0, r0, sl
 8005b10:	4082      	lsls	r2, r0
 8005b12:	4313      	orrs	r3, r2
 8005b14:	3401      	adds	r4, #1
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	4825      	ldr	r0, [pc, #148]	@ (8005bb4 <_svfiprintf_r+0x1ec>)
 8005b20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b24:	f7fe fccd 	bl	80044c2 <memchr>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d036      	beq.n	8005b9a <_svfiprintf_r+0x1d2>
 8005b2c:	4b22      	ldr	r3, [pc, #136]	@ (8005bb8 <_svfiprintf_r+0x1f0>)
 8005b2e:	bb1b      	cbnz	r3, 8005b78 <_svfiprintf_r+0x1b0>
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	3307      	adds	r3, #7
 8005b34:	f023 0307 	bic.w	r3, r3, #7
 8005b38:	3308      	adds	r3, #8
 8005b3a:	9303      	str	r3, [sp, #12]
 8005b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3e:	4433      	add	r3, r6
 8005b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b42:	e76a      	b.n	8005a1a <_svfiprintf_r+0x52>
 8005b44:	460c      	mov	r4, r1
 8005b46:	2001      	movs	r0, #1
 8005b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b4c:	e7a8      	b.n	8005aa0 <_svfiprintf_r+0xd8>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f04f 0c0a 	mov.w	ip, #10
 8005b54:	4619      	mov	r1, r3
 8005b56:	3401      	adds	r4, #1
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b60:	3a30      	subs	r2, #48	@ 0x30
 8005b62:	2a09      	cmp	r2, #9
 8005b64:	d903      	bls.n	8005b6e <_svfiprintf_r+0x1a6>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0c6      	beq.n	8005af8 <_svfiprintf_r+0x130>
 8005b6a:	9105      	str	r1, [sp, #20]
 8005b6c:	e7c4      	b.n	8005af8 <_svfiprintf_r+0x130>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	2301      	movs	r3, #1
 8005b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b76:	e7f0      	b.n	8005b5a <_svfiprintf_r+0x192>
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4638      	mov	r0, r7
 8005b80:	4b0e      	ldr	r3, [pc, #56]	@ (8005bbc <_svfiprintf_r+0x1f4>)
 8005b82:	a904      	add	r1, sp, #16
 8005b84:	f7fd fee6 	bl	8003954 <_printf_float>
 8005b88:	1c42      	adds	r2, r0, #1
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	d1d6      	bne.n	8005b3c <_svfiprintf_r+0x174>
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	065b      	lsls	r3, r3, #25
 8005b92:	f53f af2d 	bmi.w	80059f0 <_svfiprintf_r+0x28>
 8005b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b98:	e72c      	b.n	80059f4 <_svfiprintf_r+0x2c>
 8005b9a:	ab03      	add	r3, sp, #12
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	462a      	mov	r2, r5
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <_svfiprintf_r+0x1f4>)
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	f7fe f973 	bl	8003e90 <_printf_i>
 8005baa:	e7ed      	b.n	8005b88 <_svfiprintf_r+0x1c0>
 8005bac:	080066d0 	.word	0x080066d0
 8005bb0:	080066d6 	.word	0x080066d6
 8005bb4:	080066da 	.word	0x080066da
 8005bb8:	08003955 	.word	0x08003955
 8005bbc:	08005911 	.word	0x08005911

08005bc0 <__sflush_r>:
 8005bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	0716      	lsls	r6, r2, #28
 8005bc8:	4605      	mov	r5, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	d454      	bmi.n	8005c78 <__sflush_r+0xb8>
 8005bce:	684b      	ldr	r3, [r1, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dc02      	bgt.n	8005bda <__sflush_r+0x1a>
 8005bd4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	dd48      	ble.n	8005c6c <__sflush_r+0xac>
 8005bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	d045      	beq.n	8005c6c <__sflush_r+0xac>
 8005be0:	2300      	movs	r3, #0
 8005be2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005be6:	682f      	ldr	r7, [r5, #0]
 8005be8:	6a21      	ldr	r1, [r4, #32]
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	d030      	beq.n	8005c50 <__sflush_r+0x90>
 8005bee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	0759      	lsls	r1, r3, #29
 8005bf4:	d505      	bpl.n	8005c02 <__sflush_r+0x42>
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bfc:	b10b      	cbz	r3, 8005c02 <__sflush_r+0x42>
 8005bfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c00:	1ad2      	subs	r2, r2, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	4628      	mov	r0, r5
 8005c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	47b0      	blx	r6
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	d106      	bne.n	8005c20 <__sflush_r+0x60>
 8005c12:	6829      	ldr	r1, [r5, #0]
 8005c14:	291d      	cmp	r1, #29
 8005c16:	d82b      	bhi.n	8005c70 <__sflush_r+0xb0>
 8005c18:	4a28      	ldr	r2, [pc, #160]	@ (8005cbc <__sflush_r+0xfc>)
 8005c1a:	410a      	asrs	r2, r1
 8005c1c:	07d6      	lsls	r6, r2, #31
 8005c1e:	d427      	bmi.n	8005c70 <__sflush_r+0xb0>
 8005c20:	2200      	movs	r2, #0
 8005c22:	6062      	str	r2, [r4, #4]
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	04d9      	lsls	r1, r3, #19
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	d504      	bpl.n	8005c36 <__sflush_r+0x76>
 8005c2c:	1c42      	adds	r2, r0, #1
 8005c2e:	d101      	bne.n	8005c34 <__sflush_r+0x74>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b903      	cbnz	r3, 8005c36 <__sflush_r+0x76>
 8005c34:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c38:	602f      	str	r7, [r5, #0]
 8005c3a:	b1b9      	cbz	r1, 8005c6c <__sflush_r+0xac>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__sflush_r+0x8a>
 8005c44:	4628      	mov	r0, r5
 8005c46:	f7ff fa9b 	bl	8005180 <_free_r>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c4e:	e00d      	b.n	8005c6c <__sflush_r+0xac>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b0      	blx	r6
 8005c56:	4602      	mov	r2, r0
 8005c58:	1c50      	adds	r0, r2, #1
 8005c5a:	d1c9      	bne.n	8005bf0 <__sflush_r+0x30>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0c6      	beq.n	8005bf0 <__sflush_r+0x30>
 8005c62:	2b1d      	cmp	r3, #29
 8005c64:	d001      	beq.n	8005c6a <__sflush_r+0xaa>
 8005c66:	2b16      	cmp	r3, #22
 8005c68:	d11d      	bne.n	8005ca6 <__sflush_r+0xe6>
 8005c6a:	602f      	str	r7, [r5, #0]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e021      	b.n	8005cb4 <__sflush_r+0xf4>
 8005c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c74:	b21b      	sxth	r3, r3
 8005c76:	e01a      	b.n	8005cae <__sflush_r+0xee>
 8005c78:	690f      	ldr	r7, [r1, #16]
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	d0f6      	beq.n	8005c6c <__sflush_r+0xac>
 8005c7e:	0793      	lsls	r3, r2, #30
 8005c80:	bf18      	it	ne
 8005c82:	2300      	movne	r3, #0
 8005c84:	680e      	ldr	r6, [r1, #0]
 8005c86:	bf08      	it	eq
 8005c88:	694b      	ldreq	r3, [r1, #20]
 8005c8a:	1bf6      	subs	r6, r6, r7
 8005c8c:	600f      	str	r7, [r1, #0]
 8005c8e:	608b      	str	r3, [r1, #8]
 8005c90:	2e00      	cmp	r6, #0
 8005c92:	ddeb      	ble.n	8005c6c <__sflush_r+0xac>
 8005c94:	4633      	mov	r3, r6
 8005c96:	463a      	mov	r2, r7
 8005c98:	4628      	mov	r0, r5
 8005c9a:	6a21      	ldr	r1, [r4, #32]
 8005c9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005ca0:	47e0      	blx	ip
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	dc07      	bgt.n	8005cb6 <__sflush_r+0xf6>
 8005ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb6:	4407      	add	r7, r0
 8005cb8:	1a36      	subs	r6, r6, r0
 8005cba:	e7e9      	b.n	8005c90 <__sflush_r+0xd0>
 8005cbc:	dfbffffe 	.word	0xdfbffffe

08005cc0 <_fflush_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b913      	cbnz	r3, 8005cd0 <_fflush_r+0x10>
 8005cca:	2500      	movs	r5, #0
 8005ccc:	4628      	mov	r0, r5
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	b118      	cbz	r0, 8005cda <_fflush_r+0x1a>
 8005cd2:	6a03      	ldr	r3, [r0, #32]
 8005cd4:	b90b      	cbnz	r3, 8005cda <_fflush_r+0x1a>
 8005cd6:	f7fe fa87 	bl	80041e8 <__sinit>
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f3      	beq.n	8005cca <_fflush_r+0xa>
 8005ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ce4:	07d0      	lsls	r0, r2, #31
 8005ce6:	d404      	bmi.n	8005cf2 <_fflush_r+0x32>
 8005ce8:	0599      	lsls	r1, r3, #22
 8005cea:	d402      	bmi.n	8005cf2 <_fflush_r+0x32>
 8005cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cee:	f7fe fbe6 	bl	80044be <__retarget_lock_acquire_recursive>
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	f7ff ff63 	bl	8005bc0 <__sflush_r>
 8005cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	07da      	lsls	r2, r3, #31
 8005d00:	d4e4      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	059b      	lsls	r3, r3, #22
 8005d06:	d4e1      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d0a:	f7fe fbd9 	bl	80044c0 <__retarget_lock_release_recursive>
 8005d0e:	e7dd      	b.n	8005ccc <_fflush_r+0xc>

08005d10 <memmove>:
 8005d10:	4288      	cmp	r0, r1
 8005d12:	b510      	push	{r4, lr}
 8005d14:	eb01 0402 	add.w	r4, r1, r2
 8005d18:	d902      	bls.n	8005d20 <memmove+0x10>
 8005d1a:	4284      	cmp	r4, r0
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	d807      	bhi.n	8005d30 <memmove+0x20>
 8005d20:	1e43      	subs	r3, r0, #1
 8005d22:	42a1      	cmp	r1, r4
 8005d24:	d008      	beq.n	8005d38 <memmove+0x28>
 8005d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d2e:	e7f8      	b.n	8005d22 <memmove+0x12>
 8005d30:	4601      	mov	r1, r0
 8005d32:	4402      	add	r2, r0
 8005d34:	428a      	cmp	r2, r1
 8005d36:	d100      	bne.n	8005d3a <memmove+0x2a>
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d42:	e7f7      	b.n	8005d34 <memmove+0x24>

08005d44 <memcpy>:
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xc>
 8005d4e:	4770      	bx	lr
 8005d50:	b510      	push	{r4, lr}
 8005d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d56:	4291      	cmp	r1, r2
 8005d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5c:	d1f9      	bne.n	8005d52 <memcpy+0xe>
 8005d5e:	bd10      	pop	{r4, pc}

08005d60 <__assert_func>:
 8005d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d62:	4614      	mov	r4, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <__assert_func+0x2c>)
 8005d68:	4605      	mov	r5, r0
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68d8      	ldr	r0, [r3, #12]
 8005d6e:	b954      	cbnz	r4, 8005d86 <__assert_func+0x26>
 8005d70:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <__assert_func+0x30>)
 8005d72:	461c      	mov	r4, r3
 8005d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d78:	9100      	str	r1, [sp, #0]
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	4905      	ldr	r1, [pc, #20]	@ (8005d94 <__assert_func+0x34>)
 8005d7e:	f000 f86f 	bl	8005e60 <fiprintf>
 8005d82:	f7fd fc83 	bl	800368c <abort>
 8005d86:	4b04      	ldr	r3, [pc, #16]	@ (8005d98 <__assert_func+0x38>)
 8005d88:	e7f4      	b.n	8005d74 <__assert_func+0x14>
 8005d8a:	bf00      	nop
 8005d8c:	20000018 	.word	0x20000018
 8005d90:	08006726 	.word	0x08006726
 8005d94:	080066f8 	.word	0x080066f8
 8005d98:	080066eb 	.word	0x080066eb

08005d9c <_calloc_r>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	fba1 5402 	umull	r5, r4, r1, r2
 8005da2:	b93c      	cbnz	r4, 8005db4 <_calloc_r+0x18>
 8005da4:	4629      	mov	r1, r5
 8005da6:	f7fd fcab 	bl	8003700 <_malloc_r>
 8005daa:	4606      	mov	r6, r0
 8005dac:	b928      	cbnz	r0, 8005dba <_calloc_r+0x1e>
 8005dae:	2600      	movs	r6, #0
 8005db0:	4630      	mov	r0, r6
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	220c      	movs	r2, #12
 8005db6:	6002      	str	r2, [r0, #0]
 8005db8:	e7f9      	b.n	8005dae <_calloc_r+0x12>
 8005dba:	462a      	mov	r2, r5
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fe faac 	bl	800431a <memset>
 8005dc2:	e7f5      	b.n	8005db0 <_calloc_r+0x14>

08005dc4 <__ascii_mbtowc>:
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	b901      	cbnz	r1, 8005dca <__ascii_mbtowc+0x6>
 8005dc8:	a901      	add	r1, sp, #4
 8005dca:	b142      	cbz	r2, 8005dde <__ascii_mbtowc+0x1a>
 8005dcc:	b14b      	cbz	r3, 8005de2 <__ascii_mbtowc+0x1e>
 8005dce:	7813      	ldrb	r3, [r2, #0]
 8005dd0:	600b      	str	r3, [r1, #0]
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	1e10      	subs	r0, r2, #0
 8005dd6:	bf18      	it	ne
 8005dd8:	2001      	movne	r0, #1
 8005dda:	b002      	add	sp, #8
 8005ddc:	4770      	bx	lr
 8005dde:	4610      	mov	r0, r2
 8005de0:	e7fb      	b.n	8005dda <__ascii_mbtowc+0x16>
 8005de2:	f06f 0001 	mvn.w	r0, #1
 8005de6:	e7f8      	b.n	8005dda <__ascii_mbtowc+0x16>

08005de8 <_realloc_r>:
 8005de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dec:	4680      	mov	r8, r0
 8005dee:	4615      	mov	r5, r2
 8005df0:	460c      	mov	r4, r1
 8005df2:	b921      	cbnz	r1, 8005dfe <_realloc_r+0x16>
 8005df4:	4611      	mov	r1, r2
 8005df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	f7fd bc81 	b.w	8003700 <_malloc_r>
 8005dfe:	b92a      	cbnz	r2, 8005e0c <_realloc_r+0x24>
 8005e00:	f7ff f9be 	bl	8005180 <_free_r>
 8005e04:	2400      	movs	r4, #0
 8005e06:	4620      	mov	r0, r4
 8005e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e0c:	f000 f83a 	bl	8005e84 <_malloc_usable_size_r>
 8005e10:	4285      	cmp	r5, r0
 8005e12:	4606      	mov	r6, r0
 8005e14:	d802      	bhi.n	8005e1c <_realloc_r+0x34>
 8005e16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e1a:	d8f4      	bhi.n	8005e06 <_realloc_r+0x1e>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7fd fc6e 	bl	8003700 <_malloc_r>
 8005e24:	4607      	mov	r7, r0
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0ec      	beq.n	8005e04 <_realloc_r+0x1c>
 8005e2a:	42b5      	cmp	r5, r6
 8005e2c:	462a      	mov	r2, r5
 8005e2e:	4621      	mov	r1, r4
 8005e30:	bf28      	it	cs
 8005e32:	4632      	movcs	r2, r6
 8005e34:	f7ff ff86 	bl	8005d44 <memcpy>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7ff f9a0 	bl	8005180 <_free_r>
 8005e40:	463c      	mov	r4, r7
 8005e42:	e7e0      	b.n	8005e06 <_realloc_r+0x1e>

08005e44 <__ascii_wctomb>:
 8005e44:	4603      	mov	r3, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	b141      	cbz	r1, 8005e5c <__ascii_wctomb+0x18>
 8005e4a:	2aff      	cmp	r2, #255	@ 0xff
 8005e4c:	d904      	bls.n	8005e58 <__ascii_wctomb+0x14>
 8005e4e:	228a      	movs	r2, #138	@ 0x8a
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	4770      	bx	lr
 8005e58:	2001      	movs	r0, #1
 8005e5a:	700a      	strb	r2, [r1, #0]
 8005e5c:	4770      	bx	lr
	...

08005e60 <fiprintf>:
 8005e60:	b40e      	push	{r1, r2, r3}
 8005e62:	b503      	push	{r0, r1, lr}
 8005e64:	4601      	mov	r1, r0
 8005e66:	ab03      	add	r3, sp, #12
 8005e68:	4805      	ldr	r0, [pc, #20]	@ (8005e80 <fiprintf+0x20>)
 8005e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6e:	6800      	ldr	r0, [r0, #0]
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	f000 f837 	bl	8005ee4 <_vfiprintf_r>
 8005e76:	b002      	add	sp, #8
 8005e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e7c:	b003      	add	sp, #12
 8005e7e:	4770      	bx	lr
 8005e80:	20000018 	.word	0x20000018

08005e84 <_malloc_usable_size_r>:
 8005e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e88:	1f18      	subs	r0, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	bfbc      	itt	lt
 8005e8e:	580b      	ldrlt	r3, [r1, r0]
 8005e90:	18c0      	addlt	r0, r0, r3
 8005e92:	4770      	bx	lr

08005e94 <__sfputc_r>:
 8005e94:	6893      	ldr	r3, [r2, #8]
 8005e96:	b410      	push	{r4}
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	6093      	str	r3, [r2, #8]
 8005e9e:	da07      	bge.n	8005eb0 <__sfputc_r+0x1c>
 8005ea0:	6994      	ldr	r4, [r2, #24]
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	db01      	blt.n	8005eaa <__sfputc_r+0x16>
 8005ea6:	290a      	cmp	r1, #10
 8005ea8:	d102      	bne.n	8005eb0 <__sfputc_r+0x1c>
 8005eaa:	bc10      	pop	{r4}
 8005eac:	f000 b932 	b.w	8006114 <__swbuf_r>
 8005eb0:	6813      	ldr	r3, [r2, #0]
 8005eb2:	1c58      	adds	r0, r3, #1
 8005eb4:	6010      	str	r0, [r2, #0]
 8005eb6:	7019      	strb	r1, [r3, #0]
 8005eb8:	4608      	mov	r0, r1
 8005eba:	bc10      	pop	{r4}
 8005ebc:	4770      	bx	lr

08005ebe <__sfputs_r>:
 8005ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	460f      	mov	r7, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	18d5      	adds	r5, r2, r3
 8005ec8:	42ac      	cmp	r4, r5
 8005eca:	d101      	bne.n	8005ed0 <__sfputs_r+0x12>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e007      	b.n	8005ee0 <__sfputs_r+0x22>
 8005ed0:	463a      	mov	r2, r7
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed8:	f7ff ffdc 	bl	8005e94 <__sfputc_r>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d1f3      	bne.n	8005ec8 <__sfputs_r+0xa>
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ee4 <_vfiprintf_r>:
 8005ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	460d      	mov	r5, r1
 8005eea:	4614      	mov	r4, r2
 8005eec:	4698      	mov	r8, r3
 8005eee:	4606      	mov	r6, r0
 8005ef0:	b09d      	sub	sp, #116	@ 0x74
 8005ef2:	b118      	cbz	r0, 8005efc <_vfiprintf_r+0x18>
 8005ef4:	6a03      	ldr	r3, [r0, #32]
 8005ef6:	b90b      	cbnz	r3, 8005efc <_vfiprintf_r+0x18>
 8005ef8:	f7fe f976 	bl	80041e8 <__sinit>
 8005efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005efe:	07d9      	lsls	r1, r3, #31
 8005f00:	d405      	bmi.n	8005f0e <_vfiprintf_r+0x2a>
 8005f02:	89ab      	ldrh	r3, [r5, #12]
 8005f04:	059a      	lsls	r2, r3, #22
 8005f06:	d402      	bmi.n	8005f0e <_vfiprintf_r+0x2a>
 8005f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f0a:	f7fe fad8 	bl	80044be <__retarget_lock_acquire_recursive>
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	071b      	lsls	r3, r3, #28
 8005f12:	d501      	bpl.n	8005f18 <_vfiprintf_r+0x34>
 8005f14:	692b      	ldr	r3, [r5, #16]
 8005f16:	b99b      	cbnz	r3, 8005f40 <_vfiprintf_r+0x5c>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f000 f938 	bl	8006190 <__swsetup_r>
 8005f20:	b170      	cbz	r0, 8005f40 <_vfiprintf_r+0x5c>
 8005f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f24:	07dc      	lsls	r4, r3, #31
 8005f26:	d504      	bpl.n	8005f32 <_vfiprintf_r+0x4e>
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2c:	b01d      	add	sp, #116	@ 0x74
 8005f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f32:	89ab      	ldrh	r3, [r5, #12]
 8005f34:	0598      	lsls	r0, r3, #22
 8005f36:	d4f7      	bmi.n	8005f28 <_vfiprintf_r+0x44>
 8005f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f3a:	f7fe fac1 	bl	80044c0 <__retarget_lock_release_recursive>
 8005f3e:	e7f3      	b.n	8005f28 <_vfiprintf_r+0x44>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f44:	2320      	movs	r3, #32
 8005f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f4a:	2330      	movs	r3, #48	@ 0x30
 8005f4c:	f04f 0901 	mov.w	r9, #1
 8005f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006100 <_vfiprintf_r+0x21c>
 8005f58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	469a      	mov	sl, r3
 8005f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f64:	b10a      	cbz	r2, 8005f6a <_vfiprintf_r+0x86>
 8005f66:	2a25      	cmp	r2, #37	@ 0x25
 8005f68:	d1f9      	bne.n	8005f5e <_vfiprintf_r+0x7a>
 8005f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f6e:	d00b      	beq.n	8005f88 <_vfiprintf_r+0xa4>
 8005f70:	465b      	mov	r3, fp
 8005f72:	4622      	mov	r2, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7ff ffa1 	bl	8005ebe <__sfputs_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f000 80a7 	beq.w	80060d0 <_vfiprintf_r+0x1ec>
 8005f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f84:	445a      	add	r2, fp
 8005f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f88:	f89a 3000 	ldrb.w	r3, [sl]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 809f 	beq.w	80060d0 <_vfiprintf_r+0x1ec>
 8005f92:	2300      	movs	r3, #0
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f9c:	f10a 0a01 	add.w	sl, sl, #1
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	9307      	str	r3, [sp, #28]
 8005fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005faa:	4654      	mov	r4, sl
 8005fac:	2205      	movs	r2, #5
 8005fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb2:	4853      	ldr	r0, [pc, #332]	@ (8006100 <_vfiprintf_r+0x21c>)
 8005fb4:	f7fe fa85 	bl	80044c2 <memchr>
 8005fb8:	9a04      	ldr	r2, [sp, #16]
 8005fba:	b9d8      	cbnz	r0, 8005ff4 <_vfiprintf_r+0x110>
 8005fbc:	06d1      	lsls	r1, r2, #27
 8005fbe:	bf44      	itt	mi
 8005fc0:	2320      	movmi	r3, #32
 8005fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fc6:	0713      	lsls	r3, r2, #28
 8005fc8:	bf44      	itt	mi
 8005fca:	232b      	movmi	r3, #43	@ 0x2b
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fd6:	d015      	beq.n	8006004 <_vfiprintf_r+0x120>
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f04f 0c0a 	mov.w	ip, #10
 8005fe0:	9a07      	ldr	r2, [sp, #28]
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe8:	3b30      	subs	r3, #48	@ 0x30
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d94b      	bls.n	8006086 <_vfiprintf_r+0x1a2>
 8005fee:	b1b0      	cbz	r0, 800601e <_vfiprintf_r+0x13a>
 8005ff0:	9207      	str	r2, [sp, #28]
 8005ff2:	e014      	b.n	800601e <_vfiprintf_r+0x13a>
 8005ff4:	eba0 0308 	sub.w	r3, r0, r8
 8005ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	46a2      	mov	sl, r4
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	e7d2      	b.n	8005faa <_vfiprintf_r+0xc6>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	1d19      	adds	r1, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	9103      	str	r1, [sp, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfbb      	ittet	lt
 8006010:	425b      	neglt	r3, r3
 8006012:	f042 0202 	orrlt.w	r2, r2, #2
 8006016:	9307      	strge	r3, [sp, #28]
 8006018:	9307      	strlt	r3, [sp, #28]
 800601a:	bfb8      	it	lt
 800601c:	9204      	strlt	r2, [sp, #16]
 800601e:	7823      	ldrb	r3, [r4, #0]
 8006020:	2b2e      	cmp	r3, #46	@ 0x2e
 8006022:	d10a      	bne.n	800603a <_vfiprintf_r+0x156>
 8006024:	7863      	ldrb	r3, [r4, #1]
 8006026:	2b2a      	cmp	r3, #42	@ 0x2a
 8006028:	d132      	bne.n	8006090 <_vfiprintf_r+0x1ac>
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	3402      	adds	r4, #2
 800602e:	1d1a      	adds	r2, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	9203      	str	r2, [sp, #12]
 8006034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006038:	9305      	str	r3, [sp, #20]
 800603a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006104 <_vfiprintf_r+0x220>
 800603e:	2203      	movs	r2, #3
 8006040:	4650      	mov	r0, sl
 8006042:	7821      	ldrb	r1, [r4, #0]
 8006044:	f7fe fa3d 	bl	80044c2 <memchr>
 8006048:	b138      	cbz	r0, 800605a <_vfiprintf_r+0x176>
 800604a:	2240      	movs	r2, #64	@ 0x40
 800604c:	9b04      	ldr	r3, [sp, #16]
 800604e:	eba0 000a 	sub.w	r0, r0, sl
 8006052:	4082      	lsls	r2, r0
 8006054:	4313      	orrs	r3, r2
 8006056:	3401      	adds	r4, #1
 8006058:	9304      	str	r3, [sp, #16]
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	2206      	movs	r2, #6
 8006060:	4829      	ldr	r0, [pc, #164]	@ (8006108 <_vfiprintf_r+0x224>)
 8006062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006066:	f7fe fa2c 	bl	80044c2 <memchr>
 800606a:	2800      	cmp	r0, #0
 800606c:	d03f      	beq.n	80060ee <_vfiprintf_r+0x20a>
 800606e:	4b27      	ldr	r3, [pc, #156]	@ (800610c <_vfiprintf_r+0x228>)
 8006070:	bb1b      	cbnz	r3, 80060ba <_vfiprintf_r+0x1d6>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	3307      	adds	r3, #7
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	3308      	adds	r3, #8
 800607c:	9303      	str	r3, [sp, #12]
 800607e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006080:	443b      	add	r3, r7
 8006082:	9309      	str	r3, [sp, #36]	@ 0x24
 8006084:	e76a      	b.n	8005f5c <_vfiprintf_r+0x78>
 8006086:	460c      	mov	r4, r1
 8006088:	2001      	movs	r0, #1
 800608a:	fb0c 3202 	mla	r2, ip, r2, r3
 800608e:	e7a8      	b.n	8005fe2 <_vfiprintf_r+0xfe>
 8006090:	2300      	movs	r3, #0
 8006092:	f04f 0c0a 	mov.w	ip, #10
 8006096:	4619      	mov	r1, r3
 8006098:	3401      	adds	r4, #1
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	4620      	mov	r0, r4
 800609e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a2:	3a30      	subs	r2, #48	@ 0x30
 80060a4:	2a09      	cmp	r2, #9
 80060a6:	d903      	bls.n	80060b0 <_vfiprintf_r+0x1cc>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0c6      	beq.n	800603a <_vfiprintf_r+0x156>
 80060ac:	9105      	str	r1, [sp, #20]
 80060ae:	e7c4      	b.n	800603a <_vfiprintf_r+0x156>
 80060b0:	4604      	mov	r4, r0
 80060b2:	2301      	movs	r3, #1
 80060b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060b8:	e7f0      	b.n	800609c <_vfiprintf_r+0x1b8>
 80060ba:	ab03      	add	r3, sp, #12
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	462a      	mov	r2, r5
 80060c0:	4630      	mov	r0, r6
 80060c2:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <_vfiprintf_r+0x22c>)
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	f7fd fc45 	bl	8003954 <_printf_float>
 80060ca:	4607      	mov	r7, r0
 80060cc:	1c78      	adds	r0, r7, #1
 80060ce:	d1d6      	bne.n	800607e <_vfiprintf_r+0x19a>
 80060d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060d2:	07d9      	lsls	r1, r3, #31
 80060d4:	d405      	bmi.n	80060e2 <_vfiprintf_r+0x1fe>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	059a      	lsls	r2, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_vfiprintf_r+0x1fe>
 80060dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060de:	f7fe f9ef 	bl	80044c0 <__retarget_lock_release_recursive>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	065b      	lsls	r3, r3, #25
 80060e6:	f53f af1f 	bmi.w	8005f28 <_vfiprintf_r+0x44>
 80060ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060ec:	e71e      	b.n	8005f2c <_vfiprintf_r+0x48>
 80060ee:	ab03      	add	r3, sp, #12
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	462a      	mov	r2, r5
 80060f4:	4630      	mov	r0, r6
 80060f6:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <_vfiprintf_r+0x22c>)
 80060f8:	a904      	add	r1, sp, #16
 80060fa:	f7fd fec9 	bl	8003e90 <_printf_i>
 80060fe:	e7e4      	b.n	80060ca <_vfiprintf_r+0x1e6>
 8006100:	080066d0 	.word	0x080066d0
 8006104:	080066d6 	.word	0x080066d6
 8006108:	080066da 	.word	0x080066da
 800610c:	08003955 	.word	0x08003955
 8006110:	08005ebf 	.word	0x08005ebf

08006114 <__swbuf_r>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	460e      	mov	r6, r1
 8006118:	4614      	mov	r4, r2
 800611a:	4605      	mov	r5, r0
 800611c:	b118      	cbz	r0, 8006126 <__swbuf_r+0x12>
 800611e:	6a03      	ldr	r3, [r0, #32]
 8006120:	b90b      	cbnz	r3, 8006126 <__swbuf_r+0x12>
 8006122:	f7fe f861 	bl	80041e8 <__sinit>
 8006126:	69a3      	ldr	r3, [r4, #24]
 8006128:	60a3      	str	r3, [r4, #8]
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	071a      	lsls	r2, r3, #28
 800612e:	d501      	bpl.n	8006134 <__swbuf_r+0x20>
 8006130:	6923      	ldr	r3, [r4, #16]
 8006132:	b943      	cbnz	r3, 8006146 <__swbuf_r+0x32>
 8006134:	4621      	mov	r1, r4
 8006136:	4628      	mov	r0, r5
 8006138:	f000 f82a 	bl	8006190 <__swsetup_r>
 800613c:	b118      	cbz	r0, 8006146 <__swbuf_r+0x32>
 800613e:	f04f 37ff 	mov.w	r7, #4294967295
 8006142:	4638      	mov	r0, r7
 8006144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	6922      	ldr	r2, [r4, #16]
 800614a:	b2f6      	uxtb	r6, r6
 800614c:	1a98      	subs	r0, r3, r2
 800614e:	6963      	ldr	r3, [r4, #20]
 8006150:	4637      	mov	r7, r6
 8006152:	4283      	cmp	r3, r0
 8006154:	dc05      	bgt.n	8006162 <__swbuf_r+0x4e>
 8006156:	4621      	mov	r1, r4
 8006158:	4628      	mov	r0, r5
 800615a:	f7ff fdb1 	bl	8005cc0 <_fflush_r>
 800615e:	2800      	cmp	r0, #0
 8006160:	d1ed      	bne.n	800613e <__swbuf_r+0x2a>
 8006162:	68a3      	ldr	r3, [r4, #8]
 8006164:	3b01      	subs	r3, #1
 8006166:	60a3      	str	r3, [r4, #8]
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	701e      	strb	r6, [r3, #0]
 8006170:	6962      	ldr	r2, [r4, #20]
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	429a      	cmp	r2, r3
 8006176:	d004      	beq.n	8006182 <__swbuf_r+0x6e>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	07db      	lsls	r3, r3, #31
 800617c:	d5e1      	bpl.n	8006142 <__swbuf_r+0x2e>
 800617e:	2e0a      	cmp	r6, #10
 8006180:	d1df      	bne.n	8006142 <__swbuf_r+0x2e>
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f7ff fd9b 	bl	8005cc0 <_fflush_r>
 800618a:	2800      	cmp	r0, #0
 800618c:	d0d9      	beq.n	8006142 <__swbuf_r+0x2e>
 800618e:	e7d6      	b.n	800613e <__swbuf_r+0x2a>

08006190 <__swsetup_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <__swsetup_r+0xa8>)
 8006194:	4605      	mov	r5, r0
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	460c      	mov	r4, r1
 800619a:	b118      	cbz	r0, 80061a4 <__swsetup_r+0x14>
 800619c:	6a03      	ldr	r3, [r0, #32]
 800619e:	b90b      	cbnz	r3, 80061a4 <__swsetup_r+0x14>
 80061a0:	f7fe f822 	bl	80041e8 <__sinit>
 80061a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a8:	0719      	lsls	r1, r3, #28
 80061aa:	d422      	bmi.n	80061f2 <__swsetup_r+0x62>
 80061ac:	06da      	lsls	r2, r3, #27
 80061ae:	d407      	bmi.n	80061c0 <__swsetup_r+0x30>
 80061b0:	2209      	movs	r2, #9
 80061b2:	602a      	str	r2, [r5, #0]
 80061b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	e033      	b.n	8006228 <__swsetup_r+0x98>
 80061c0:	0758      	lsls	r0, r3, #29
 80061c2:	d512      	bpl.n	80061ea <__swsetup_r+0x5a>
 80061c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061c6:	b141      	cbz	r1, 80061da <__swsetup_r+0x4a>
 80061c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d002      	beq.n	80061d6 <__swsetup_r+0x46>
 80061d0:	4628      	mov	r0, r5
 80061d2:	f7fe ffd5 	bl	8005180 <_free_r>
 80061d6:	2300      	movs	r3, #0
 80061d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	2300      	movs	r3, #0
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f043 0308 	orr.w	r3, r3, #8
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	b94b      	cbnz	r3, 800620a <__swsetup_r+0x7a>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006200:	d003      	beq.n	800620a <__swsetup_r+0x7a>
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f83e 	bl	8006286 <__smakebuf_r>
 800620a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620e:	f013 0201 	ands.w	r2, r3, #1
 8006212:	d00a      	beq.n	800622a <__swsetup_r+0x9a>
 8006214:	2200      	movs	r2, #0
 8006216:	60a2      	str	r2, [r4, #8]
 8006218:	6962      	ldr	r2, [r4, #20]
 800621a:	4252      	negs	r2, r2
 800621c:	61a2      	str	r2, [r4, #24]
 800621e:	6922      	ldr	r2, [r4, #16]
 8006220:	b942      	cbnz	r2, 8006234 <__swsetup_r+0xa4>
 8006222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006226:	d1c5      	bne.n	80061b4 <__swsetup_r+0x24>
 8006228:	bd38      	pop	{r3, r4, r5, pc}
 800622a:	0799      	lsls	r1, r3, #30
 800622c:	bf58      	it	pl
 800622e:	6962      	ldrpl	r2, [r4, #20]
 8006230:	60a2      	str	r2, [r4, #8]
 8006232:	e7f4      	b.n	800621e <__swsetup_r+0x8e>
 8006234:	2000      	movs	r0, #0
 8006236:	e7f7      	b.n	8006228 <__swsetup_r+0x98>
 8006238:	20000018 	.word	0x20000018

0800623c <__swhatbuf_r>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	460c      	mov	r4, r1
 8006240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006244:	4615      	mov	r5, r2
 8006246:	2900      	cmp	r1, #0
 8006248:	461e      	mov	r6, r3
 800624a:	b096      	sub	sp, #88	@ 0x58
 800624c:	da0c      	bge.n	8006268 <__swhatbuf_r+0x2c>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	2100      	movs	r1, #0
 8006252:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006256:	bf14      	ite	ne
 8006258:	2340      	movne	r3, #64	@ 0x40
 800625a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800625e:	2000      	movs	r0, #0
 8006260:	6031      	str	r1, [r6, #0]
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	b016      	add	sp, #88	@ 0x58
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	466a      	mov	r2, sp
 800626a:	f000 f849 	bl	8006300 <_fstat_r>
 800626e:	2800      	cmp	r0, #0
 8006270:	dbed      	blt.n	800624e <__swhatbuf_r+0x12>
 8006272:	9901      	ldr	r1, [sp, #4]
 8006274:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006278:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800627c:	4259      	negs	r1, r3
 800627e:	4159      	adcs	r1, r3
 8006280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006284:	e7eb      	b.n	800625e <__swhatbuf_r+0x22>

08006286 <__smakebuf_r>:
 8006286:	898b      	ldrh	r3, [r1, #12]
 8006288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800628a:	079d      	lsls	r5, r3, #30
 800628c:	4606      	mov	r6, r0
 800628e:	460c      	mov	r4, r1
 8006290:	d507      	bpl.n	80062a2 <__smakebuf_r+0x1c>
 8006292:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	2301      	movs	r3, #1
 800629c:	6163      	str	r3, [r4, #20]
 800629e:	b003      	add	sp, #12
 80062a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a2:	466a      	mov	r2, sp
 80062a4:	ab01      	add	r3, sp, #4
 80062a6:	f7ff ffc9 	bl	800623c <__swhatbuf_r>
 80062aa:	9f00      	ldr	r7, [sp, #0]
 80062ac:	4605      	mov	r5, r0
 80062ae:	4639      	mov	r1, r7
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7fd fa25 	bl	8003700 <_malloc_r>
 80062b6:	b948      	cbnz	r0, 80062cc <__smakebuf_r+0x46>
 80062b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062bc:	059a      	lsls	r2, r3, #22
 80062be:	d4ee      	bmi.n	800629e <__smakebuf_r+0x18>
 80062c0:	f023 0303 	bic.w	r3, r3, #3
 80062c4:	f043 0302 	orr.w	r3, r3, #2
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	e7e2      	b.n	8006292 <__smakebuf_r+0xc>
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	b15b      	cbz	r3, 80062f6 <__smakebuf_r+0x70>
 80062de:	4630      	mov	r0, r6
 80062e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e4:	f000 f81e 	bl	8006324 <_isatty_r>
 80062e8:	b128      	cbz	r0, 80062f6 <__smakebuf_r+0x70>
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	431d      	orrs	r5, r3
 80062fa:	81a5      	strh	r5, [r4, #12]
 80062fc:	e7cf      	b.n	800629e <__smakebuf_r+0x18>
	...

08006300 <_fstat_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	2300      	movs	r3, #0
 8006304:	4d06      	ldr	r5, [pc, #24]	@ (8006320 <_fstat_r+0x20>)
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	f7fb fd0d 	bl	8001d2c <_fstat>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d102      	bne.n	800631c <_fstat_r+0x1c>
 8006316:	682b      	ldr	r3, [r5, #0]
 8006318:	b103      	cbz	r3, 800631c <_fstat_r+0x1c>
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	bd38      	pop	{r3, r4, r5, pc}
 800631e:	bf00      	nop
 8006320:	20000470 	.word	0x20000470

08006324 <_isatty_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	2300      	movs	r3, #0
 8006328:	4d05      	ldr	r5, [pc, #20]	@ (8006340 <_isatty_r+0x1c>)
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	602b      	str	r3, [r5, #0]
 8006330:	f7fb fd0b 	bl	8001d4a <_isatty>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_isatty_r+0x1a>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_isatty_r+0x1a>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	20000470 	.word	0x20000470

08006344 <_init>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

08006350 <_fini>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

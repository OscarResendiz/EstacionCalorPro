
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  0800d0f8  0800d0f8  0000e0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df78  0800df78  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800df78  0800df78  0000ef78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df80  0800df80  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800df80  0800df80  0000ef80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800df88  0800df88  0000ef88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800df90  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001d8  0800e168  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800e168  0000f568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022897  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000739f  00000000  00000000  00031a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  00038e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ed  00000000  00000000  0003ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020369  00000000  00000000  0003c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233ed  00000000  00000000  0005c95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c164  00000000  00000000  0007fd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011beaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009410  00000000  00000000  0011bef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00125304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d0dc 	.word	0x0800d0dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800d0dc 	.word	0x0800d0dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <_ZN15CManejadorBotonC1Ev+0x38>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	0800d1e8 	.word	0x0800d1e8

080010b8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <_ZN15CManejadorBotonD1Ev+0x1c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	0800d1e8 	.word	0x0800d1e8

080010d8 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe9 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80010e6:	2120      	movs	r1, #32
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f009 f973 	bl	800a3d4 <_ZdlPvj>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	80fb      	strh	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	797a      	ldrb	r2, [r7, #5]
 800111e:	729a      	strb	r2, [r3, #10]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	891b      	ldrh	r3, [r3, #8]
 8001144:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f006 ff05 	bl	8007f68 <HAL_GPIO_Init>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	891b      	ldrh	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f007 f879 	bl	8008270 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0

}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	61da      	str	r2, [r3, #28]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d058      	beq.n	8001266 <_ZN15CManejadorBoton7ProcesaEi+0xc4>
		return;
	if(gpio_pin!=Gpio_Pin)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d154      	bne.n	800126a <_ZN15CManejadorBoton7ProcesaEi+0xc8>
		return;
	int tiempoClick = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
	int estado = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	estado = Leer();
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffcc 	bl	8001166 <_ZN15CManejadorBoton4LeerEv>
 80011ce:	6138      	str	r0, [r7, #16]
//		ReboteMilis = HAL_GetTick();  //leo el tiempo actual
//		PreEstado = estado;
//		return;
//	}
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80011d0:	f006 fa68 	bl	80076a4 <HAL_GetTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b63      	cmp	r3, #99	@ 0x63
 80011e2:	dd44      	ble.n	800126e <_ZN15CManejadorBoton7ProcesaEi+0xcc>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80011e4:	f006 fa5e 	bl	80076a4 <HAL_GetTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11d      	bne.n	800123a <_ZN15CManejadorBoton7ProcesaEi+0x98>
	{
		Manejador->OnBotonSueltoEvent(Identificador);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69d8      	ldr	r0, [r3, #28]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3310      	adds	r3, #16
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	7a92      	ldrb	r2, [r2, #10]
 8001210:	4611      	mov	r1, r2
 8001212:	4798      	blx	r3
		tiempoClick = HAL_GetTick() - TiempoInicioClick;
 8001214:	f006 fa46 	bl	80076a4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
		Manejador->OnBotonClickEvent(Identificador, tiempoClick);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69d8      	ldr	r0, [r3, #28]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3308      	adds	r3, #8
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	7a92      	ldrb	r2, [r2, #10]
 8001234:	4611      	mov	r1, r2
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4798      	blx	r3
	}
	if (Estado == BOTON_PRESIONADO)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
	{
		TiempoInicioClick = HAL_GetTick();
 8001242:	f006 fa2f 	bl	80076a4 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
		Manejador->OnBotonPresionadoEvent(Identificador);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69d8      	ldr	r0, [r3, #28]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	330c      	adds	r3, #12
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7a92      	ldrb	r2, [r2, #10]
 8001260:	4611      	mov	r1, r2
 8001262:	4798      	blx	r3
 8001264:	e004      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 8001266:	bf00      	nop
 8001268:	e002      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <_ZN15CManejadorBoton7ProcesaEi+0xce>
		return;
 800126e:	bf00      	nop
	}
}
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	0800d1f8 	.word	0x0800d1f8

08001298 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	0800d1f8 	.word	0x0800d1f8

080012b8 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
}
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffe9 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 80012c6:	2104      	movs	r1, #4
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f009 f883 	bl	800a3d4 <_ZdlPvj>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN22CManejadorEventosBoton17OnBotonClickEventEii>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]

}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <_ZN22CManejadorEventosBoton22OnBotonPresionadoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoEvent(int idBoton)
 {
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]

 }
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <_ZN22CManejadorEventosBoton18OnBotonSueltoEventEi>:
 void CManejadorEventosBoton::OnBotonSueltoEvent(int idBoton)
 {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]

 }
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <_ZN22CManejadorEventosBoton27OnBotonPresionadoLargoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoLargoEvent(int idBoton)
 {
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]

 }
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
	...

0800132c <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>

Calefactor::Calefactor()
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	4a05      	ldr	r2, [pc, #20]	@ (800134c <_ZN10CalefactorC1Ev+0x20>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	0800d218 	.word	0x0800d218

08001350 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <_ZN10CalefactorD1Ev+0x1c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	0800d218 	.word	0x0800d218

08001370 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
}
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe9 	bl	8001350 <_ZN10CalefactorD1Ev>
 800137e:	2110      	movs	r1, #16
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f009 f827 	bl	800a3d4 <_ZdlPvj>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	811a      	strh	r2, [r3, #8]

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = Gpio_Pin;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f006 fdbe 	bl	8007f68 <HAL_GPIO_Init>
	Apagar();
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f817 	bl	8001420 <_ZN10Calefactor6ApagarEv>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6858      	ldr	r0, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	891b      	ldrh	r3, [r3, #8]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	f006 ff46 	bl	800829e <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6858      	ldr	r0, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	891b      	ldrh	r3, [r3, #8]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f006 ff33 	bl	800829e <HAL_GPIO_WritePin>
	Estado=APAGADO;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	0800d228 	.word	0x0800d228

08001468 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	0800d228 	.word	0x0800d228

08001488 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
}
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe9 	bl	8001468 <_ZN20ControlVelocidadAireD1Ev>
 8001496:	2134      	movs	r1, #52	@ 0x34
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f008 ff9b 	bl	800a3d4 <_ZdlPvj>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <_ZN20ControlVelocidadAire10InicializaEv+0xc4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
	 ADC_ChannelConfTypeDef sConfig = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <_ZN20ControlVelocidadAire10InicializaEv+0xc8>)
 80014d8:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014f2:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.NbrOfConversion = 1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f006 f8f8 	bl	8007700 <HAL_ADC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf14      	ite	ne
 8001516:	2301      	movne	r3, #1
 8001518:	2300      	moveq	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <_ZN20ControlVelocidadAire10InicializaEv+0x7e>
	 {
	 Error_Handler();
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f845 	bl	80015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800152e:	2307      	movs	r3, #7
 8001530:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fa71 	bl	8007a24 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <_ZN20ControlVelocidadAire10InicializaEv+0xb0>
	 {
	 Error_Handler();
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f82c 	bl	80015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f006 f9a7 	bl	80078b0 <HAL_ADC_Start>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40012400 	.word	0x40012400

08001574 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	4618      	mov	r0, r3
 8001582:	f006 fa43 	bl	8007a0c <HAL_ADC_GetValue>
 8001586:	4603      	mov	r3, r0
 8001588:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2264      	movs	r2, #100	@ 0x64
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x38>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	441a      	add	r2, r3
 800159a:	12d2      	asrs	r2, r2, #11
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	3364      	adds	r3, #100	@ 0x64
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	80080081 	.word	0x80080081

080015b0 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe52 	bl	8001278 <_ZN22CManejadorEventosBotonC1Ev>
 80015d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <_ZN8CEncoderC1Ev+0x44>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800d238 	.word	0x0800d238

0800160c <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4a05      	ldr	r2, [pc, #20]	@ (800162c <_ZN8CEncoderD1Ev+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe3b 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800d238 	.word	0x0800d238

08001630 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
}
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_ZN8CEncoderD1Ev>
 800163e:	214c      	movs	r1, #76	@ 0x4c
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f008 fec7 	bl	800a3d4 <_ZdlPvj>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8c3a      	ldrh	r2, [r7, #32]
 8001676:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001682:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 800168a:	2020      	movs	r0, #32
 800168c:	f008 fea4 	bl	800a3d8 <_Znwj>
 8001690:	4603      	mov	r3, r0
 8001692:	461c      	mov	r4, r3
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fcf1 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd6e 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	69d8      	ldr	r0, [r3, #28]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8b1a      	ldrh	r2, [r3, #24]
 80016b8:	2303      	movs	r3, #3
 80016ba:	f7ff fd1d 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f807 	bl	80016d2 <_ZN8CEncoder6LeeClkEv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}

080016d2 <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f006 fdc3 	bl	8008270 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8a1b      	ldrh	r3, [r3, #16]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f006 fdb2 	bl	8008270 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;// GPIO_MODE_INPUT;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <_ZN8CEncoder4InitEv+0x78>)
 8001736:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f107 0208 	add.w	r2, r7, #8
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f006 fc0e 	bl	8007f68 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8a1b      	ldrh	r3, [r3, #16]
 8001750:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f107 0208 	add.w	r2, r7, #8
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fbff 	bl	8007f68 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8b1b      	ldrh	r3, [r3, #24]
 800176e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fbf0 	bl	8007f68 <HAL_GPIO_Init>
}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	10310000 	.word	0x10310000

08001794 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	621a      	str	r2, [r3, #32]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <_ZN8CEncoder18OnBotonSueltoEventEi>:

void CEncoder::OnBotonSueltoEvent(int idBoton)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <_ZN8CEncoder18OnBotonSueltoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d10c      	bne.n	80017e0 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderSueltoEvent(ID_Encoder);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a18      	ldr	r0, [r3, #32]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	331c      	adds	r3, #28
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017d8:	4611      	mov	r1, r2
 80017da:	4798      	blx	r3
		break;
 80017dc:	e000      	b.n	80017e0 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
		return;
 80017de:	bf00      	nop
	}
}
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZN8CEncoder22OnBotonPresionadoEventEi>:

void CEncoder::OnBotonPresionadoEvent(int idBoton)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d10c      	bne.n	8001818 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderPresionadoEvent(ID_Encoder);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a18      	ldr	r0, [r3, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3314      	adds	r3, #20
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001810:	4611      	mov	r1, r2
 8001812:	4798      	blx	r3
		break;
 8001814:	e000      	b.n	8001818 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
		return;
 8001816:	bf00      	nop
	}
}
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZN8CEncoder17OnBotonClickEventEii>:

void CEncoder::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]

	switch (idBoton)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10b      	bne.n	8001848 <_ZN8CEncoder17OnBotonClickEventEii+0x2a>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder, tiempoClick);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a18      	ldr	r0, [r3, #32]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3310      	adds	r3, #16
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4798      	blx	r3
		break;
 8001846:	bf00      	nop
	}
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc9e 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f804 	bl	8001876 <_ZN8CEncoder10leeEncoderEi>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	461a      	mov	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4293      	cmp	r3, r2
 800188a:	d128      	bne.n	80018de <_ZN8CEncoder10leeEncoderEi+0x68>
		return;
	CLK_status = LeeClk();
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff20 	bl	80016d2 <_ZN8CEncoder6LeeClkEv>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d017      	beq.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d113      	bne.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
	{
		if (LeeDt() != CLK_status)
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff21 	bl	80016f4 <_ZN8CEncoder5LeeDtEv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <_ZN8CEncoder10leeEncoderEi+0x58>
		{
			incrementa();
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f80d 	bl	80018e6 <_ZN8CEncoder10incrementaEv>
 80018cc:	e002      	b.n	80018d4 <_ZN8CEncoder10leeEncoderEi+0x5e>
		}
		else
		{
			decrementa();
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f81c 	bl	800190c <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
 80018dc:	e000      	b.n	80018e0 <_ZN8CEncoder10leeEncoderEi+0x6a>
		return;
 80018de:	bf00      	nop
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a18      	ldr	r0, [r3, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001900:	4611      	mov	r1, r2
 8001902:	4798      	blx	r3
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a18      	ldr	r0, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	330c      	adds	r3, #12
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001926:	4611      	mov	r1, r2
 8001928:	4798      	blx	r3
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0800d25c 	.word	0x0800d25c

08001954 <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	0800d25c 	.word	0x0800d25c

08001974 <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
}
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe9 	bl	8001954 <_ZN24CManejadorEventosEncoderD1Ev>
 8001982:	2104      	movs	r1, #4
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f008 fd25 	bl	800a3d4 <_ZdlPvj>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]

}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]

}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEii>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]

}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_ZN24CManejadorEventosEncoder29OnBotonEncoderPresionadoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]

}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_ZN24CManejadorEventosEncoder34OnBotonEncoderPresionadoLargoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]

}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_ZN24CManejadorEventosEncoder25OnBotonEncoderSueltoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]

}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_ZN13CEstacionBaseC1Ev+0x20>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	0800d284 	.word	0x0800d284

08001a34 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	0800d284 	.word	0x0800d284

08001a54 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
}
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe9 	bl	8001a34 <_ZN13CEstacionBaseD1Ev>
 8001a62:	2108      	movs	r1, #8
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f008 fcb5 	bl	800a3d4 <_ZdlPvj>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN13CEstacionBase18GetTemperaturaRealEv>:

float CEstacionBase::GetTemperaturaReal() //regresa la tenperatura actual de la estacion
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

}
 8001a7c:	bf00      	nop
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]

}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

}
 8001aa4:	bf00      	nop
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]

}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

}
 8001acc:	bf00      	nop
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

}
 8001ae0:	bf00      	nop
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <_ZN13CEstacionBase21SetManejadorControlesEP23CManejadorControlesBase>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorControlesBase *obj)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4798      	blx	r3
 8001b62:	e000      	b.n	8001b66 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8001b64:	bf00      	nop
}
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3308      	adds	r3, #8
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4798      	blx	r3
 8001b92:	e000      	b.n	8001b96 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8001b94:	bf00      	nop

}
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZN13CEstacionBase18BotonUnoClickEventEi>:
//eventros del boton uno
void CEstacionBase::BotonUnoClickEvent(int tiempoClick)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <_ZN13CEstacionBase18BotonUnoClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonUnoClickEvent(tiempoClick);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3310      	adds	r3, #16
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4798      	blx	r3
 8001bc2:	e000      	b.n	8001bc6 <_ZN13CEstacionBase18BotonUnoClickEventEi+0x2a>
		return;
 8001bc4:	bf00      	nop

}
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_ZN13CEstacionBase23BotonUnoPresionadoEventEv>:
void CEstacionBase::BotonUnoPresionadoEvent()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoEvent();
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3314      	adds	r3, #20
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4610      	mov	r0, r2
 8001bec:	4798      	blx	r3
 8001bee:	e000      	b.n	8001bf2 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv+0x26>
		return;
 8001bf0:	bf00      	nop

}
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv>:
void CEstacionBase::BotonUnoPresionadoLargoEvent()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d009      	beq.n	8001c1c <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoLargoEvent();
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3318      	adds	r3, #24
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4610      	mov	r0, r2
 8001c18:	4798      	blx	r3
 8001c1a:	e000      	b.n	8001c1e <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv+0x26>
		return;
 8001c1c:	bf00      	nop

}
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZN13CEstacionBase19BotonUnoSueltoEventEv>:
void CEstacionBase::BotonUnoSueltoEvent()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <_ZN13CEstacionBase19BotonUnoSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoSueltoEvent();
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	331c      	adds	r3, #28
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4610      	mov	r0, r2
 8001c44:	4798      	blx	r3
 8001c46:	e000      	b.n	8001c4a <_ZN13CEstacionBase19BotonUnoSueltoEventEv+0x26>
		return;
 8001c48:	bf00      	nop

}
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_ZN13CEstacionBase18BotonDosClickEventEi>:
//eventros del boton dos
void CEstacionBase::BotonDosClickEvent(int tiempoClick)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <_ZN13CEstacionBase18BotonDosClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonDosClickEvent(tiempoClick);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3320      	adds	r3, #32
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	4610      	mov	r0, r2
 8001c74:	4798      	blx	r3
 8001c76:	e000      	b.n	8001c7a <_ZN13CEstacionBase18BotonDosClickEventEi+0x2a>
		return;
 8001c78:	bf00      	nop

}
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_ZN13CEstacionBase23BotonDosPresionadoEventEv>:
void CEstacionBase::BotonDosPresionadoEvent()
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <_ZN13CEstacionBase23BotonDosPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoEvent();
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3324      	adds	r3, #36	@ 0x24
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4798      	blx	r3
 8001ca2:	e000      	b.n	8001ca6 <_ZN13CEstacionBase23BotonDosPresionadoEventEv+0x26>
		return;
 8001ca4:	bf00      	nop

}
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv>:
void CEstacionBase::BotonDosPresionaLargodoEvent()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoLargoEvent();
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3328      	adds	r3, #40	@ 0x28
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4798      	blx	r3
 8001cce:	e000      	b.n	8001cd2 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv+0x26>
		return;
 8001cd0:	bf00      	nop

}
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZN13CEstacionBase19BotonDosSueltoEventEv>:
void CEstacionBase::BotonDosSueltoEvent()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <_ZN13CEstacionBase19BotonDosSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosSueltoEvent();
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	332c      	adds	r3, #44	@ 0x2c
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4798      	blx	r3
 8001cfa:	e000      	b.n	8001cfe <_ZN13CEstacionBase19BotonDosSueltoEventEv+0x26>
		return;
 8001cfc:	bf00      	nop

}
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN13CEstacionBase19BotonTresClickEventEi>:
//eventros del boton tres
void CEstacionBase::BotonTresClickEvent(int tiempoClick)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <_ZN13CEstacionBase19BotonTresClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonTresClickEvent(tiempoClick);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3330      	adds	r3, #48	@ 0x30
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	4610      	mov	r0, r2
 8001d28:	4798      	blx	r3
 8001d2a:	e000      	b.n	8001d2e <_ZN13CEstacionBase19BotonTresClickEventEi+0x2a>
		return;
 8001d2c:	bf00      	nop

}
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN13CEstacionBase24BotonTresPresionadoEventEv>:
void CEstacionBase::BotonTresPresionadoEvent()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <_ZN13CEstacionBase24BotonTresPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoEvent();
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3334      	adds	r3, #52	@ 0x34
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4610      	mov	r0, r2
 8001d54:	4798      	blx	r3
 8001d56:	e000      	b.n	8001d5a <_ZN13CEstacionBase24BotonTresPresionadoEventEv+0x26>
		return;
 8001d58:	bf00      	nop

}
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv>:
void CEstacionBase::BotonTresPresionaLargodoEvent()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoLargoEvent();
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3338      	adds	r3, #56	@ 0x38
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4798      	blx	r3
 8001d82:	e000      	b.n	8001d86 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv+0x26>
		return;
 8001d84:	bf00      	nop

}
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZN13CEstacionBase20BotonTresSueltoEventEv>:
void CEstacionBase::BotonTresSueltoEvent()
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <_ZN13CEstacionBase20BotonTresSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresSueltoEvent();
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	333c      	adds	r3, #60	@ 0x3c
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4610      	mov	r0, r2
 8001dac:	4798      	blx	r3
 8001dae:	e000      	b.n	8001db2 <_ZN13CEstacionBase20BotonTresSueltoEventEv+0x26>
		return;
 8001db0:	bf00      	nop

}
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN13CEstacionBase21BotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CEstacionBase::BotonCuatroClickEvent(int tiempoClick)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <_ZN13CEstacionBase21BotonCuatroClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonCuatroClickEvent(tiempoClick);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3340      	adds	r3, #64	@ 0x40
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4798      	blx	r3
 8001dde:	e000      	b.n	8001de2 <_ZN13CEstacionBase21BotonCuatroClickEventEi+0x2a>
		return;
 8001de0:	bf00      	nop

}
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv>:
void CEstacionBase::BotonCuatroPresionadoEvent()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoEvent();
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3344      	adds	r3, #68	@ 0x44
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4610      	mov	r0, r2
 8001e08:	4798      	blx	r3
 8001e0a:	e000      	b.n	8001e0e <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv+0x26>
		return;
 8001e0c:	bf00      	nop

}
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv>:
void CEstacionBase::BotonCuatroPresionaLargodoEvent()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoLargoEvent();
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3348      	adds	r3, #72	@ 0x48
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4798      	blx	r3
 8001e36:	e000      	b.n	8001e3a <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv+0x26>
		return;
 8001e38:	bf00      	nop
}
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv>:
void CEstacionBase::BotonCuatroSueltoEvent()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroSueltoEvent();
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	334c      	adds	r3, #76	@ 0x4c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv+0x26>
		return;
 8001e64:	bf00      	nop

}
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZN13CEstacionBase22BotonPerillaClickEventEi>:
//eventros del boton Perilla
void CEstacionBase::BotonPerillaClickEvent(int tiempoClick)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <_ZN13CEstacionBase22BotonPerillaClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonPerillaClickEvent(tiempoClick);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3350      	adds	r3, #80	@ 0x50
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4798      	blx	r3
 8001e92:	e000      	b.n	8001e96 <_ZN13CEstacionBase22BotonPerillaClickEventEi+0x2a>
		return;
 8001e94:	bf00      	nop

}
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv>:
void CEstacionBase::BotonPerillaPresionadoEvent()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoEvent();
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3354      	adds	r3, #84	@ 0x54
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4798      	blx	r3
 8001ebe:	e000      	b.n	8001ec2 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv+0x26>
		return;
 8001ec0:	bf00      	nop

}
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv>:
void CEstacionBase::BotonPerillaPresionadoLargoEvent()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoLargoEvent();
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3358      	adds	r3, #88	@ 0x58
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4798      	blx	r3
 8001eea:	e000      	b.n	8001eee <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv+0x26>
		return;
 8001eec:	bf00      	nop

}
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZN13CEstacionBase23BotonPerillaSueltoEventEv>:
void CEstacionBase::BotonPerillaSueltoEvent()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <_ZN13CEstacionBase23BotonPerillaSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaSueltoEvent();
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	335c      	adds	r3, #92	@ 0x5c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4610      	mov	r0, r2
 8001f14:	4798      	blx	r3
 8001f16:	e000      	b.n	8001f1a <_ZN13CEstacionBase23BotonPerillaSueltoEventEv+0x26>
		return;
 8001f18:	bf00      	nop
}
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN13CEstacionBase17EncoderIncrementoEv>:
//eventos del encoder
void CEstacionBase::EncoderIncremento()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <_ZN13CEstacionBase17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3360      	adds	r3, #96	@ 0x60
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4798      	blx	r3
 8001f42:	e000      	b.n	8001f46 <_ZN13CEstacionBase17EncoderIncrementoEv+0x26>
		return;
 8001f44:	bf00      	nop

}
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN13CEstacionBase17EncoderDecrementoEv>:
void CEstacionBase::EncoderDecremento()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <_ZN13CEstacionBase17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3364      	adds	r3, #100	@ 0x64
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4798      	blx	r3
 8001f6e:	e000      	b.n	8001f72 <_ZN13CEstacionBase17EncoderDecrementoEv+0x26>
		return;
 8001f70:	bf00      	nop

}
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN13CEstacionBase19InterrupcionEncoderEv>:
void CEstacionBase::InterrupcionEncoder()
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]

}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]

}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]

}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]

}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_ZN16CestacionBaku601D1Ev>:
#include <Estaciones/CestacionBaku601.hpp>
#include "Calefactor/Calefactor.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CestacionBaku601::~CestacionBaku601()
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	4a2a      	ldr	r2, [pc, #168]	@ (80020dc <_ZN16CestacionBaku601D1Ev+0xb4>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <_ZN16CestacionBaku601D1Ev+0xb8>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	4a29      	ldr	r2, [pc, #164]	@ (80020e4 <_ZN16CestacionBaku601D1Ev+0xbc>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	4a29      	ldr	r2, [pc, #164]	@ (80020e8 <_ZN16CestacionBaku601D1Ev+0xc0>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	611a      	str	r2, [r3, #16]
{
	// TODO Auto-generated destructor stub
}
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800204e:	4618      	mov	r0, r3
 8002050:	f004 f84a 	bl	80060e8 <_ZN15SensorMagneticoD1Ev>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f978 	bl	8001350 <_ZN10CalefactorD1Ev>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fe90 	bl	8005d8c <_ZN3PwmD1Ev>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f9f8 	bl	8001468 <_ZN20ControlVelocidadAireD1Ev>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fac4 	bl	800160c <_ZN8CEncoderD1Ev>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	33ec      	adds	r3, #236	@ 0xec
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f815 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	33cc      	adds	r3, #204	@ 0xcc
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f810 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	33ac      	adds	r3, #172	@ 0xac
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f80b 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	338c      	adds	r3, #140	@ 0x8c
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f806 	bl	80010b8 <_ZN15CManejadorBotonD1Ev>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3310      	adds	r3, #16
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 ffd3 	bl	800605c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	330c      	adds	r3, #12
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fc4a 	bl	8001954 <_ZN24CManejadorEventosEncoderD1Ev>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3308      	adds	r3, #8
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f8e7 	bl	8001298 <_ZN22CManejadorEventosBotonD1Ev>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fcb1 	bl	8001a34 <_ZN13CEstacionBaseD1Ev>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800d340 	.word	0x0800d340
 80020e0:	0800d428 	.word	0x0800d428
 80020e4:	0800d448 	.word	0x0800d448
 80020e8:	0800d470 	.word	0x0800d470

080020ec <_ZThn12_N16CestacionBaku601D1Ev>:
	Calefactor calefactor;
	SensorMagnetico sensorMagnetico;
	int NivelAire=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 80020ec:	f1a0 000c 	sub.w	r0, r0, #12
 80020f0:	f7ff bf9a 	b.w	8002028 <_ZN16CestacionBaku601D1Ev>

080020f4 <_ZThn8_N16CestacionBaku601D1Ev>:
 80020f4:	f1a0 0008 	sub.w	r0, r0, #8
 80020f8:	f7ff bf96 	b.w	8002028 <_ZN16CestacionBaku601D1Ev>

080020fc <_ZThn16_N16CestacionBaku601D1Ev>:
 80020fc:	f1a0 0010 	sub.w	r0, r0, #16
 8002100:	f7ff bf92 	b.w	8002028 <_ZN16CestacionBaku601D1Ev>

08002104 <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
}
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff8b 	bl	8002028 <_ZN16CestacionBaku601D1Ev>
 8002112:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f008 f95c 	bl	800a3d4 <_ZdlPvj>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_ZThn16_N16CestacionBaku601D0Ev>:
 8002126:	f1a0 0010 	sub.w	r0, r0, #16
 800212a:	f7ff bfeb 	b.w	8002104 <_ZN16CestacionBaku601D0Ev>

0800212e <_ZThn12_N16CestacionBaku601D0Ev>:
 800212e:	f1a0 000c 	sub.w	r0, r0, #12
 8002132:	f7ff bfe7 	b.w	8002104 <_ZN16CestacionBaku601D0Ev>

08002136 <_ZThn8_N16CestacionBaku601D0Ev>:
 8002136:	f1a0 0008 	sub.w	r0, r0, #8
 800213a:	f7ff bfe3 	b.w	8002104 <_ZN16CestacionBaku601D0Ev>
	...

08002140 <_ZN16CestacionBaku601C1Ev>:

CestacionBaku601::CestacionBaku601() :
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af04      	add	r7, sp, #16
 8002146:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fc60 	bl	8001a10 <_ZN13CEstacionBaseC1Ev>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3308      	adds	r3, #8
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff f88f 	bl	8001278 <_ZN22CManejadorEventosBotonC1Ev>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330c      	adds	r3, #12
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fbe8 	bl	8001934 <_ZN24CManejadorEventosEncoderC1Ev>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3310      	adds	r3, #16
 8002168:	4618      	mov	r0, r3
 800216a:	f003 ff67 	bl	800603c <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 800216e:	4aaf      	ldr	r2, [pc, #700]	@ (800242c <_ZN16CestacionBaku601C1Ev+0x2ec>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4aae      	ldr	r2, [pc, #696]	@ (8002430 <_ZN16CestacionBaku601C1Ev+0x2f0>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	4aae      	ldr	r2, [pc, #696]	@ (8002434 <_ZN16CestacionBaku601C1Ev+0x2f4>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	4aad      	ldr	r2, [pc, #692]	@ (8002438 <_ZN16CestacionBaku601C1Ev+0x2f8>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2264      	movs	r2, #100	@ 0x64
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2205      	movs	r2, #5
 80021b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	649a      	str	r2, [r3, #72]	@ 0x48
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a95      	ldr	r2, [pc, #596]	@ (800243c <_ZN16CestacionBaku601C1Ev+0x2fc>)
 80021e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a94      	ldr	r2, [pc, #592]	@ (8002440 <_ZN16CestacionBaku601C1Ev+0x300>)
 80021ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2208      	movs	r2, #8
 8002200:	661a      	str	r2, [r3, #96]	@ 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	220b      	movs	r2, #11
 8002206:	665a      	str	r2, [r3, #100]	@ 0x64
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	220c      	movs	r2, #12
 800220c:	669a      	str	r2, [r3, #104]	@ 0x68
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3370      	adds	r3, #112	@ 0x70
 8002218:	4618      	mov	r0, r3
 800221a:	f003 fc6c 	bl	8005af6 <_ZN7MAX6675C1Ev>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	338c      	adds	r3, #140	@ 0x8c
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ff2a 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	33ac      	adds	r3, #172	@ 0xac
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe ff25 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	33cc      	adds	r3, #204	@ 0xcc
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ff20 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	33ec      	adds	r3, #236	@ 0xec
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ff1b 	bl	800107c <_ZN15CManejadorBotonC1Ev>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f9b9 	bl	80015c4 <_ZN8CEncoderC1Ev>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f8f5 	bl	8001448 <_ZN20ControlVelocidadAireC1Ev>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fd81 	bl	8005d6c <_ZN3PwmC1Ev>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f85b 	bl	800132c <_ZN10CalefactorC1Ev>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800227c:	4618      	mov	r0, r3
 800227e:	f003 ff17 	bl	80060b0 <_ZN15SensorMagneticoC1Ev>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f503 70c6 	add.w	r0, r3, #396	@ 0x18c
 8002290:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002294:	2200      	movs	r2, #0
 8002296:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800229a:	f003 fd97 	bl	8005dcc <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3370      	adds	r3, #112	@ 0x70
 80022a2:	2202      	movs	r2, #2
 80022a4:	4967      	ldr	r1, [pc, #412]	@ (8002444 <_ZN16CestacionBaku601C1Ev+0x304>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fc41 	bl	8005b2e <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3370      	adds	r3, #112	@ 0x70
 80022b0:	2204      	movs	r2, #4
 80022b2:	4964      	ldr	r1, [pc, #400]	@ (8002444 <_ZN16CestacionBaku601C1Ev+0x304>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fc4c 	bl	8005b52 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3370      	adds	r3, #112	@ 0x70
 80022be:	2201      	movs	r2, #1
 80022c0:	4960      	ldr	r1, [pc, #384]	@ (8002444 <_ZN16CestacionBaku601C1Ev+0x304>)
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fc21 	bl	8005b0a <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3370      	adds	r3, #112	@ 0x70
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fcf5 	bl	8005cbc <_ZN7MAX66754InitEv>

	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOA, GPIO_PIN_4, 1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 80022d8:	2301      	movs	r3, #1
 80022da:	2210      	movs	r2, #16
 80022dc:	4959      	ldr	r1, [pc, #356]	@ (8002444 <_ZN16CestacionBaku601C1Ev+0x304>)
 80022de:	f7fe ff0b 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3308      	adds	r3, #8
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe ff4a 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	338c      	adds	r3, #140	@ 0x8c
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe ff16 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 8002304:	2302      	movs	r3, #2
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	494e      	ldr	r1, [pc, #312]	@ (8002444 <_ZN16CestacionBaku601C1Ev+0x304>)
 800230a:	f7fe fef5 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3308      	adds	r3, #8
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7fe ff34 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	33ac      	adds	r3, #172	@ 0xac
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe ff00 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8002330:	2303      	movs	r3, #3
 8002332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002336:	4944      	ldr	r1, [pc, #272]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 8002338:	f7fe fede 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3308      	adds	r3, #8
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7fe ff1d 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	33cc      	adds	r3, #204	@ 0xcc
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fee9 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 800235e:	2304      	movs	r3, #4
 8002360:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002364:	4938      	ldr	r1, [pc, #224]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 8002366:	f7fe fec7 	bl	80010f8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3308      	adds	r3, #8
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f7fe ff06 	bl	8001188 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	33ec      	adds	r3, #236	@ 0xec
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fed2 	bl	800112a <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 7086 	add.w	r0, r3, #268	@ 0x10c
 800238c:	2301      	movs	r3, #1
 800238e:	9303      	str	r3, [sp, #12]
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	9302      	str	r3, [sp, #8]
 8002396:	4b2c      	ldr	r3, [pc, #176]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 80023a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023a6:	4928      	ldr	r1, [pc, #160]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 80023a8:	f7ff f952 	bl	8001650 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	330c      	adds	r3, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff f9eb 	bl	8001794 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff f9a7 	bl	8001718 <_ZN8CEncoder4InitEv>

	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80023d0:	2208      	movs	r2, #8
 80023d2:	491d      	ldr	r1, [pc, #116]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe ffdb 	bl	8001390 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ffe7 	bl	80013b4 <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80023ec:	2220      	movs	r2, #32
 80023ee:	4916      	ldr	r1, [pc, #88]	@ (8002448 <_ZN16CestacionBaku601C1Ev+0x308>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fe99 	bl	8006128 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fea5 	bl	800614c <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3310      	adds	r3, #16
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f003 feba 	bl	8006188 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>
	controlVelocidadAire.Inicializa();
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f844 	bl	80014a8 <_ZN20ControlVelocidadAire10InicializaEv>

}
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	0800d340 	.word	0x0800d340
 8002430:	0800d428 	.word	0x0800d428
 8002434:	0800d448 	.word	0x0800d448
 8002438:	0800d470 	.word	0x0800d470
 800243c:	40a00000 	.word	0x40a00000
 8002440:	44160000 	.word	0x44160000
 8002444:	40010800 	.word	0x40010800
 8002448:	40010c00 	.word	0x40010c00

0800244c <_ZN16CestacionBaku60118GetTemperaturaRealEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaReal()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	return thermocouple.MAX6675_lee(); //* .59;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3370      	adds	r3, #112	@ 0x70
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fbc3 	bl	8005be4 <_ZN7MAX667511MAX6675_leeEv>
 800245e:	4603      	mov	r3, r0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	619a      	str	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	NivelAire=nivel;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	//pwm.SicloTrabajo(nivel);
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <_ZN16CestacionBaku60112GetNivelAireEv>:

//regresa el nivel de aire setado
int CestacionBaku601::GetNivelAire()
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f856 	bl	8001574 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN16CestacionBaku6019GetEstadoEv>:

//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fe5e 	bl	80061a2 <_ZN15SensorMagnetico4LeerEv>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZN16CestacionBaku60117OnBotonClickEventEii>:

//eventos de CManejadorEventosBoton
void CestacionBaku601::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	switch (idBoton)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3b01      	subs	r3, #1
 8002500:	2b03      	cmp	r3, #3
 8002502:	d82f      	bhi.n	8002564 <_ZN16CestacionBaku60117OnBotonClickEventEii+0x74>
 8002504:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <_ZN16CestacionBaku60117OnBotonClickEventEii+0x1c>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800252f 	.word	0x0800252f
 8002514:	08002541 	.word	0x08002541
 8002518:	08002553 	.word	0x08002553
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent(tiempoClick);
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3358      	adds	r3, #88	@ 0x58
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
		break;
 800252c:	e01a      	b.n	8002564 <_ZN16CestacionBaku60117OnBotonClickEventEii+0x74>
	case BOTON_MEMORIA2:
		BotonDosClickEvent(tiempoClick);
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3368      	adds	r3, #104	@ 0x68
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4610      	mov	r0, r2
 800253c:	4798      	blx	r3
		break;
 800253e:	e011      	b.n	8002564 <_ZN16CestacionBaku60117OnBotonClickEventEii+0x74>
	case BOTON_MEMORIA3:
		BotonTresClickEvent(tiempoClick);
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3378      	adds	r3, #120	@ 0x78
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4610      	mov	r0, r2
 800254e:	4798      	blx	r3
		break;
 8002550:	e008      	b.n	8002564 <_ZN16CestacionBaku60117OnBotonClickEventEii+0x74>
	case BOTON_MANUAL:
		BotonCuatroClickEvent(tiempoClick);
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3388      	adds	r3, #136	@ 0x88
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4610      	mov	r0, r2
 8002560:	4798      	blx	r3
		break;
 8002562:	bf00      	nop
	}
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZThn8_N16CestacionBaku60117OnBotonClickEventEii>:
	//verifica elnivel de aire
	void procesaAire();
	void ProcesaTemperaturaReal();
	void ProcesaBotones(int gpio_pin);
	//eventos de CManejadorEventosBoton
	virtual void OnBotonClickEvent(int idBoton, int tiempoClick);
 800256c:	f1a0 0008 	sub.w	r0, r0, #8
 8002570:	f7ff bfbe 	b.w	80024f0 <_ZN16CestacionBaku60117OnBotonClickEventEii>

08002574 <_ZN16CestacionBaku60122OnBotonPresionadoEventEi>:

void CestacionBaku601::OnBotonPresionadoEvent(int idBoton)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	2b03      	cmp	r3, #3
 8002584:	d82a      	bhi.n	80025dc <_ZN16CestacionBaku60122OnBotonPresionadoEventEi+0x68>
 8002586:	a201      	add	r2, pc, #4	@ (adr r2, 800258c <_ZN16CestacionBaku60122OnBotonPresionadoEventEi+0x18>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025ad 	.word	0x080025ad
 8002594:	080025bd 	.word	0x080025bd
 8002598:	080025cd 	.word	0x080025cd
	{
	case BOTON_MEMORIA1:
		BotonUnoPresionadoEvent();
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	335c      	adds	r3, #92	@ 0x5c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4610      	mov	r0, r2
 80025a8:	4798      	blx	r3
		break;
 80025aa:	e017      	b.n	80025dc <_ZN16CestacionBaku60122OnBotonPresionadoEventEi+0x68>
	case BOTON_MEMORIA2:
		BotonDosPresionadoEvent();
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	336c      	adds	r3, #108	@ 0x6c
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4610      	mov	r0, r2
 80025b8:	4798      	blx	r3
		break;
 80025ba:	e00f      	b.n	80025dc <_ZN16CestacionBaku60122OnBotonPresionadoEventEi+0x68>
	case BOTON_MEMORIA3:
		BotonTresPresionadoEvent();
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	337c      	adds	r3, #124	@ 0x7c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4610      	mov	r0, r2
 80025c8:	4798      	blx	r3
		break;
 80025ca:	e007      	b.n	80025dc <_ZN16CestacionBaku60122OnBotonPresionadoEventEi+0x68>
	case BOTON_MANUAL:
		BotonCuatroPresionadoEvent();
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	338c      	adds	r3, #140	@ 0x8c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4610      	mov	r0, r2
 80025d8:	4798      	blx	r3
		break;
 80025da:	bf00      	nop
	}

}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZThn8_N16CestacionBaku60122OnBotonPresionadoEventEi>:
	virtual void OnBotonPresionadoEvent(int idBoton);
 80025e4:	f1a0 0008 	sub.w	r0, r0, #8
 80025e8:	f7ff bfc4 	b.w	8002574 <_ZN16CestacionBaku60122OnBotonPresionadoEventEi>

080025ec <_ZN16CestacionBaku60118OnBotonSueltoEventEi>:

void CestacionBaku601::OnBotonSueltoEvent(int idBoton)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d82a      	bhi.n	8002654 <_ZN16CestacionBaku60118OnBotonSueltoEventEi+0x68>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <_ZN16CestacionBaku60118OnBotonSueltoEventEi+0x18>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	08002625 	.word	0x08002625
 800260c:	08002635 	.word	0x08002635
 8002610:	08002645 	.word	0x08002645
	{
	case BOTON_MEMORIA1:
		BotonUnoSueltoEvent();
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3364      	adds	r3, #100	@ 0x64
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4610      	mov	r0, r2
 8002620:	4798      	blx	r3
		break;
 8002622:	e017      	b.n	8002654 <_ZN16CestacionBaku60118OnBotonSueltoEventEi+0x68>
	case BOTON_MEMORIA2:
		BotonDosSueltoEvent();
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3374      	adds	r3, #116	@ 0x74
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4610      	mov	r0, r2
 8002630:	4798      	blx	r3
		break;
 8002632:	e00f      	b.n	8002654 <_ZN16CestacionBaku60118OnBotonSueltoEventEi+0x68>
	case BOTON_MEMORIA3:
		BotonTresSueltoEvent();
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3384      	adds	r3, #132	@ 0x84
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4610      	mov	r0, r2
 8002640:	4798      	blx	r3
		break;
 8002642:	e007      	b.n	8002654 <_ZN16CestacionBaku60118OnBotonSueltoEventEi+0x68>
	case BOTON_MANUAL:
		BotonCuatroSueltoEvent();
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3394      	adds	r3, #148	@ 0x94
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4610      	mov	r0, r2
 8002650:	4798      	blx	r3
		break;
 8002652:	bf00      	nop
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZThn8_N16CestacionBaku60118OnBotonSueltoEventEi>:
	virtual void OnBotonSueltoEvent(int idBoton);
 800265c:	f1a0 0008 	sub.w	r0, r0, #8
 8002660:	f7ff bfc4 	b.w	80025ec <_ZN16CestacionBaku60118OnBotonSueltoEventEi>

08002664 <_ZN16CestacionBaku60119OnIncrementoEncoderEi>:

//eventros del encoder
void CestacionBaku601::OnIncrementoEncoder(int id_Encoder)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	33a8      	adds	r3, #168	@ 0xa8
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4610      	mov	r0, r2
 800267a:	4798      	blx	r3
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZThn12_N16CestacionBaku60119OnIncrementoEncoderEi>:
	//eventros del encoder
	virtual void OnIncrementoEncoder(int id_Encoder);
 8002684:	f1a0 000c 	sub.w	r0, r0, #12
 8002688:	f7ff bfec 	b.w	8002664 <_ZN16CestacionBaku60119OnIncrementoEncoderEi>

0800268c <_ZN16CestacionBaku60119OnDecrementoEncoderEi>:

void CestacionBaku601::OnDecrementoEncoder(int id_Encoder)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	33ac      	adds	r3, #172	@ 0xac
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4610      	mov	r0, r2
 80026a2:	4798      	blx	r3
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZThn12_N16CestacionBaku60119OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 80026ac:	f1a0 000c 	sub.w	r0, r0, #12
 80026b0:	f7ff bfec 	b.w	800268c <_ZN16CestacionBaku60119OnDecrementoEncoderEi>

080026b4 <_ZN16CestacionBaku60124OnBotonEncoderClickEventEii>:

void CestacionBaku601::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	BotonPerillaClickEvent(tiempoClick);
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3398      	adds	r3, #152	@ 0x98
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZThn12_N16CestacionBaku60124OnBotonEncoderClickEventEii>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick);
 80026d8:	f1a0 000c 	sub.w	r0, r0, #12
 80026dc:	f7ff bfea 	b.w	80026b4 <_ZN16CestacionBaku60124OnBotonEncoderClickEventEii>

080026e0 <_ZN16CestacionBaku60129OnBotonEncoderPresionadoEventEi>:

void CestacionBaku601::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoEvent();
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	339c      	adds	r3, #156	@ 0x9c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_ZThn12_N16CestacionBaku60129OnBotonEncoderPresionadoEventEi>:
	virtual void OnBotonEncoderPresionadoEvent(int id_Encoder);
 8002700:	f1a0 000c 	sub.w	r0, r0, #12
 8002704:	f7ff bfec 	b.w	80026e0 <_ZN16CestacionBaku60129OnBotonEncoderPresionadoEventEi>

08002708 <_ZN16CestacionBaku60134OnBotonEncoderPresionadoLargoEventEi>:

void CestacionBaku601::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoLargoEvent();
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	33a0      	adds	r3, #160	@ 0xa0
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4610      	mov	r0, r2
 800271e:	4798      	blx	r3
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_ZThn12_N16CestacionBaku60134OnBotonEncoderPresionadoLargoEventEi>:
	virtual void OnBotonEncoderPresionadoLargoEvent(int id_Encoder);
 8002728:	f1a0 000c 	sub.w	r0, r0, #12
 800272c:	f7ff bfec 	b.w	8002708 <_ZN16CestacionBaku60134OnBotonEncoderPresionadoLargoEventEi>

08002730 <_ZN16CestacionBaku60125OnBotonEncoderSueltoEventEi>:

void CestacionBaku601::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	BotonPerillaSueltoEvent();
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	33a4      	adds	r3, #164	@ 0xa4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4610      	mov	r0, r2
 8002746:	4798      	blx	r3
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_ZThn12_N16CestacionBaku60125OnBotonEncoderSueltoEventEi>:
	virtual void OnBotonEncoderSueltoEvent(int id_Encoder);
 8002750:	f1a0 000c 	sub.w	r0, r0, #12
 8002754:	f7ff bfec 	b.w	8002730 <_ZN16CestacionBaku60125OnBotonEncoderSueltoEventEi>

08002758 <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:

void CestacionBaku601::IncrementaTemperatura()
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	da04      	bge.n	8002776 <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
	}
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	dd04      	ble.n	800279a <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
	}
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <_ZN16CestacionBaku60117ActivarCalefactorEv>:


void CestacionBaku601::ActivarCalefactor()
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:


void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]

}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <_ZThn16_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 80027e8:	f1a0 0010 	sub.w	r0, r0, #16
 80027ec:	f7ff bff2 	b.w	80027d4 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

080027f0 <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f80d 	bl	8002818 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
	ProcesaTemperaturaReal();
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f821 	bl	8002846 <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>
	procesaAire();
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f843 	bl	8002890 <_ZN16CestacionBaku60111procesaAireEv>
//	ProcesaBotones();
	ProcesaCalefactor();
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f860 	bl	80028d0 <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3310      	adds	r3, #16
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d002      	beq.n	800283e <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	61da      	str	r2, [r3, #28]
	}
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv>:

void CestacionBaku601::ProcesaTemperaturaReal()
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	int temperatura = GetTemperaturaReal();
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3308      	adds	r3, #8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
 800285a:	4603      	mov	r3, r0
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fbe7 	bl	8001030 <__aeabi_f2iz>
 8002862:	4603      	mov	r3, r0
 8002864:	60fb      	str	r3, [r7, #12]
	if (temperaturaRealAnterior != temperatura)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d00b      	beq.n	8002888 <_ZN16CestacionBaku60122ProcesaTemperaturaRealEv+0x42>
	{
		temperaturaRealAnterior = temperatura;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
		TemperaturaRealEvent(temperaturaRealAnterior);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3354      	adds	r3, #84	@ 0x54
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6a12      	ldr	r2, [r2, #32]
 8002884:	4611      	mov	r1, r2
 8002886:	4798      	blx	r3
	}
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_ZN16CestacionBaku60111procesaAireEv>:

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3318      	adds	r3, #24
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
 80028a4:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d00b      	beq.n	80028c8 <_ZN16CestacionBaku60111procesaAireEv+0x38>
	{
		AireAnterior = aire;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24
		NivelAireEvent(AireAnterior);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3350      	adds	r3, #80	@ 0x50
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c4:	4611      	mov	r1, r2
 80028c6:	4798      	blx	r3
	}
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZN16CestacionBaku60117ProcesaCalefactorEv>:


void CestacionBaku601::ProcesaCalefactor()
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x24>
	{
		//esta apagado el calefactor
		PotenciaCalefactor=0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	@ 0x30
		calefactor.Apagar();
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fd97 	bl	8001420 <_ZN10Calefactor6ApagarEv>
		return;
 80028f2:	e095      	b.n	8002a20 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x150>
	}
	int sensor = sensorMagnetico.Leer();
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fc51 	bl	80061a2 <_ZN15SensorMagnetico4LeerEv>
 8002900:	6178      	str	r0, [r7, #20]
	if (sensor == BOTON_PRESIONADO)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x40>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f891 	bl	8002a30 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 800290e:	e087      	b.n	8002a20 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x150>
	}
	TiempoEnfriando=0;
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	//enciendo el aire
	int aire = GetNivelAire();
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3318      	adds	r3, #24
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	6138      	str	r0, [r7, #16]
	pwm.SicloTrabajo(aire);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002932:	6939      	ldr	r1, [r7, #16]
 8002934:	4618      	mov	r0, r3
 8002936:	f003 faf5 	bl	8005f24 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual=HAL_GetTick(); //me trae el tiempo en milisegundos
 800293a:	f004 feb3 	bl	80076a4 <HAL_GetTick>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(TiempoActual<TiempoProximoMuestreo )
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	429a      	cmp	r2, r3
 8002950:	db65      	blt.n	8002a1e <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14e>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo=TiempoActual+TiempoMuestreoTemperatura;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	441a      	add	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40
	float temperatura = GetTemperaturaReal();
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3308      	adds	r3, #8
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	60f8      	str	r0, [r7, #12]
	 PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f942 	bl	8000bfc <__aeabi_i2f>
 8002978:	4603      	mov	r3, r0
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe f887 	bl	8000a90 <__aeabi_fsub>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
	 Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5d      	ldr	r5, [r3, #68]	@ 0x44
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800299a:	fb92 f3f3 	sdiv	r3, r2, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe f92c 	bl	8000bfc <__aeabi_i2f>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4619      	mov	r1, r3
 80029a8:	4628      	mov	r0, r5
 80029aa:	f7fe f97b 	bl	8000ca4 <__aeabi_fmul>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7fe f86e 	bl	8000a94 <__addsf3>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	649a      	str	r2, [r3, #72]	@ 0x48
	 PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT)/10;   //Calculo de la salida del controlador PI
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5d      	ldr	r5, [r3, #68]	@ 0x44
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80029d2:	f7fe fa1b 	bl	8000e0c <__aeabi_fdiv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f7fe f95f 	bl	8000ca4 <__aeabi_fmul>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4619      	mov	r1, r3
 80029ea:	4628      	mov	r0, r5
 80029ec:	f7fe f852 	bl	8000a94 <__addsf3>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4619      	mov	r1, r3
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7fe f955 	bl	8000ca4 <__aeabi_fmul>
 80029fa:	4603      	mov	r3, r0
 80029fc:	490a      	ldr	r1, [pc, #40]	@ (8002a28 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x158>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fa04 	bl	8000e0c <__aeabi_fdiv>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
	 //asigno la potencia del calefactor
	 PotenciaCalefactor=PID_value;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fb0d 	bl	8001030 <__aeabi_f2iz>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a1c:	e000      	b.n	8002a20 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x150>
		return;
 8002a1e:	bf00      	nop
}
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	41200000 	.word	0x41200000
 8002a2c:	00000000 	.word	0x00000000

08002a30 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor=0; //bajo toda la potencia
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30
	float temperatura = GetTemperaturaReal();
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3308      	adds	r3, #8
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
 8002a4a:	60f8      	str	r0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 8002a4c:	492e      	ldr	r1, [pc, #184]	@ (8002b08 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd8>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7fe fad0 	bl	8000ff4 <__aeabi_fcmple>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03d      	beq.n	8002ad6 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xa6>
	{
		if(TiempoEnfriando==0)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f7fd ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x5a>
		{
			TiempoEnfriando=HAL_GetTick();
 8002a72:	f004 fe17 	bl	80076a4 <HAL_GetTick>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fcb3 	bl	80003e4 <__aeabi_ui2d>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			return;
 8002a88:	e035      	b.n	8002af6 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc6>
		}
		if(HAL_GetTick()-TiempoEnfriando<=10000)
 8002a8a:	f004 fe0b 	bl	80076a4 <HAL_GetTick>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fca7 	bl	80003e4 <__aeabi_ui2d>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a9c:	f7fd fb64 	bl	8000168 <__aeabi_dsub>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	461c      	mov	r4, r3
 8002aac:	a314      	add	r3, pc, #80	@ (adr r3, 8002b00 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd0>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd ff8d 	bl	80009d0 <__aeabi_dcmple>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x90>
 8002abc:	2300      	movs	r3, #0
 8002abe:	461c      	mov	r4, r3
 8002ac0:	b2e3      	uxtb	r3, r4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc4>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fa28 	bl	8005f24 <_ZN3Pwm12SicloTrabajoEi>
		return;
 8002ad4:	e00f      	b.n	8002af6 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc6>
	}
	//pongo al maximo el aire para enfriar la pistola
	if(temperatura>10)
 8002ad6:	490d      	ldr	r1, [pc, #52]	@ (8002b0c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xdc>)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7fe fa9f 	bl	800101c <__aeabi_fcmpgt>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc6>
	{
		pwm.SicloTrabajo(100);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002aea:	2164      	movs	r1, #100	@ 0x64
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fa19 	bl	8005f24 <_ZN3Pwm12SicloTrabajoEi>
 8002af2:	e000      	b.n	8002af6 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xc6>
			return;
 8002af4:	bf00      	nop
	}
}
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd90      	pop	{r4, r7, pc}
 8002afc:	f3af 8000 	nop.w
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40c38800 	.word	0x40c38800
 8002b08:	41f00000 	.word	0x41f00000
 8002b0c:	41200000 	.word	0x41200000

08002b10 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	if(gpio_pin!=CruceCero_Pin)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d130      	bne.n	8002b82 <_ZN16CestacionBaku60110CruceXCeroEi+0x72>
		return;
	if(TiempoAntiReboresCruceXCero>0)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	dc2e      	bgt.n	8002b86 <_ZN16CestacionBaku60110CruceXCeroEi+0x76>
	{
		return;
	}
	TiempoAntiReboresCruceXCero=9;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2209      	movs	r2, #9
 8002b2c:	659a      	str	r2, [r3, #88]	@ 0x58

	if(ciclos>=100)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	2b63      	cmp	r3, #99	@ 0x63
 8002b34:	dd02      	ble.n	8002b3c <_ZN16CestacionBaku60110CruceXCeroEi+0x2c>
	{
		ciclos=0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
	if(ciclos<PotenciaCalefactor)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	429a      	cmp	r2, r3
 8002b46:	da0b      	bge.n	8002b60 <_ZN16CestacionBaku60110CruceXCeroEi+0x50>
	{
		calefactor.Encender();
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fc53 	bl	80013fa <_ZN10Calefactor8EncenderEv>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,	GPIO_PinState::GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	2140      	movs	r1, #64	@ 0x40
 8002b58:	480d      	ldr	r0, [pc, #52]	@ (8002b90 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>)
 8002b5a:	f005 fba0 	bl	800829e <HAL_GPIO_WritePin>
 8002b5e:	e00a      	b.n	8002b76 <_ZN16CestacionBaku60110CruceXCeroEi+0x66>
	}
	else
	{
		calefactor.Apagar();
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fc5a 	bl	8001420 <_ZN10Calefactor6ApagarEv>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,	GPIO_PinState::GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2140      	movs	r1, #64	@ 0x40
 8002b70:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>)
 8002b72:	f005 fb94 	bl	800829e <HAL_GPIO_WritePin>
	}
	ciclos=ciclos+1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b80:	e002      	b.n	8002b88 <_ZN16CestacionBaku60110CruceXCeroEi+0x78>
		return;
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <_ZN16CestacionBaku60110CruceXCeroEi+0x78>
		return;
 8002b86:	bf00      	nop
}
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40010c00 	.word	0x40010c00

08002b94 <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
		if(TiempoAntiReboresCruceXCero>0)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	dd04      	ble.n	8002bae <_ZN16CestacionBaku6019TimerTickEv+0x1a>
		{
			TiempoAntiReboresCruceXCero--;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	1e5a      	subs	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	659a      	str	r2, [r3, #88]	@ 0x58
		}
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor=valor;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f812 	bl	8002c1e <_ZN16CestacionBaku60114ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	33b4      	adds	r3, #180	@ 0xb4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
	CruceXCero(GPIO_Pin);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3340      	adds	r3, #64	@ 0x40
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZN16CestacionBaku60114ProcesaBotonesEi>:
void CestacionBaku601::ProcesaBotones(int gpio_pin)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	338c      	adds	r3, #140	@ 0x8c
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fab7 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	33ac      	adds	r3, #172	@ 0xac
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fab1 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	33cc      	adds	r3, #204	@ 0xcc
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe faab 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
	BotonManual.Procesa(gpio_pin);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	33ec      	adds	r3, #236	@ 0xec
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe faa5 	bl	80011a2 <_ZN15CManejadorBoton7ProcesaEi>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZN16CestacionBaku60119InterrupcionEncoderEi>:
void CestacionBaku601::InterrupcionEncoder(int GPIO_Pin)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fdec 	bl	8001850 <_ZN8CEncoder7ProcesaEi>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <_ZN18CComponenteBaseTftC1Ev+0x2c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	0800d484 	.word	0x0800d484

08002cb0 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	0800d484 	.word	0x0800d484

08002cd0 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
}
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ffe9 	bl	8002cb0 <_ZN18CComponenteBaseTftD1Ev>
 8002cde:	2118      	movs	r1, #24
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f007 fb77 	bl	800a3d4 <_ZdlPvj>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	817b      	strh	r3, [r7, #10]
 8002d02:	460b      	mov	r3, r1
 8002d04:	813b      	strh	r3, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
	//Tft->drawPixel(x, y, color);
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	//Tft->startWrite();
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	4608      	mov	r0, r1
 8002d30:	4611      	mov	r1, r2
 8002d32:	461a      	mov	r2, r3
 8002d34:	4603      	mov	r3, r0
 8002d36:	817b      	strh	r3, [r7, #10]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	813b      	strh	r3, [r7, #8]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
	//Tft->writePixel(x, y, color);
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	461a      	mov	r2, r3
 8002d58:	4603      	mov	r3, r0
 8002d5a:	817b      	strh	r3, [r7, #10]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	813b      	strh	r3, [r7, #8]
 8002d60:	4613      	mov	r3, r2
 8002d62:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFillRect(x, y, w, h, color);
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	4608      	mov	r0, r1
 8002d78:	4611      	mov	r1, r2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	817b      	strh	r3, [r7, #10]
 8002d80:	460b      	mov	r3, r1
 8002d82:	813b      	strh	r3, [r7, #8]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastVLine(x, y, h, color);
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	4608      	mov	r0, r1
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4603      	mov	r3, r0
 8002da2:	817b      	strh	r3, [r7, #10]
 8002da4:	460b      	mov	r3, r1
 8002da6:	813b      	strh	r3, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastHLine(x, y, w, color);
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	4608      	mov	r0, r1
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	817b      	strh	r3, [r7, #10]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	813b      	strh	r3, [r7, #8]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
	//Tft->writeLine(x0, y0, x1, y1, color);
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	//Tft->endWrite();
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
	//Tft->setRotation(r);
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	70fb      	strb	r3, [r7, #3]
	//Tft->invertDisplay(i);
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastVLine(x, y, h, color);
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastHLine(x, y, w, color);
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
	//Tft->fillScreen(color);
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	4608      	mov	r0, r1
 8002e80:	4611      	mov	r1, r2
 8002e82:	461a      	mov	r2, r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	817b      	strh	r3, [r7, #10]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	813b      	strh	r3, [r7, #8]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
	//Tft->drawLine(x0, y0, x1, y1, color);
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <_ZN18CComponenteBaseTft5widthEv>:
void CComponenteBaseTft::cp437(bool x)
{
	//Tft->cp437(x);
}
int16_t CComponenteBaseTft::width(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
	return 319;
 8002ea2:	f240 133f 	movw	r3, #319	@ 0x13f
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	return 239;
 8002eb8:	23ef      	movs	r3, #239	@ 0xef
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 8002ede:	8978      	ldrh	r0, [r7, #10]
 8002ee0:	8939      	ldrh	r1, [r7, #8]
 8002ee2:	897a      	ldrh	r2, [r7, #10]
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b29c      	uxth	r4, r3
 8002eea:	893a      	ldrh	r2, [r7, #8]
 8002eec:	8c3b      	ldrh	r3, [r7, #32]
 8002eee:	4413      	add	r3, r2
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	4622      	mov	r2, r4
 8002efa:	f001 ff00 	bl	8004cfe <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}

08002f06 <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002f06:	b590      	push	{r4, r7, lr}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af02      	add	r7, sp, #8
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	4608      	mov	r0, r1
 8002f10:	4611      	mov	r1, r2
 8002f12:	461a      	mov	r2, r3
 8002f14:	4603      	mov	r3, r0
 8002f16:	817b      	strh	r3, [r7, #10]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	813b      	strh	r3, [r7, #8]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002f20:	8978      	ldrh	r0, [r7, #10]
 8002f22:	8939      	ldrh	r1, [r7, #8]
 8002f24:	897a      	ldrh	r2, [r7, #10]
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4413      	add	r3, r2
 8002f2a:	b29c      	uxth	r4, r3
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	8c3b      	ldrh	r3, [r7, #32]
 8002f30:	4413      	add	r3, r2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	f001 fe5e 	bl	8004bfc <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
	//Tft->drawRect(x, y, w, h, color);
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 8002f58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002f60:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	609a      	str	r2, [r3, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
	//Tft->setTextSize(sx, sy);
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	611a      	str	r2, [r3, #16]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 8002faa:	b590      	push	{r4, r7, lr}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b2d9      	uxtb	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	b2d8      	uxtb	r0, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	b29c      	uxth	r4, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6952      	ldr	r2, [r2, #20]
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	9201      	str	r2, [sp, #4]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6838      	ldr	r0, [r7, #0]
 8002fdc:	f001 ff88 	bl	8004ef0 <_Z17ILI9341_Draw_TextPKchhttt>
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fb11 	bl	8003620 <_ZN14CRectanguloTftD1Ev>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	0800d4d4 	.word	0x0800d4d4

0800300c <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
}
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ffe7 	bl	8002fe8 <_ZN12CEtiquetaTftD1Ev>
 800301a:	21a4      	movs	r1, #164	@ 0xa4
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f007 f9d9 	bl	800a3d4 <_ZdlPvj>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af04      	add	r7, sp, #16
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	f000 fb07 	bl	8003664 <_ZN14CRectanguloTftC1Eiiiiiii>
 8003056:	4a11      	ldr	r2, [pc, #68]	@ (800309c <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2203      	movs	r2, #3
 8003060:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3330      	adds	r3, #48	@ 0x30
 8003078:	6a39      	ldr	r1, [r7, #32]
 800307a:	4618      	mov	r0, r3
 800307c:	f008 f8e3 	bl	800b246 <strcpy>
	ColorTexto = colorTexto;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800308c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	0800d4d4 	.word	0x0800d4d4

080030a0 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 80030a0:	b40e      	push	{r1, r2, r3}
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b0bb      	sub	sp, #236	@ 0xec
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 80030bc:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80030c0:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030ca:	e0f1      	b.n	80032b0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x210>
	{

		if (*p != '%')
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b25      	cmp	r3, #37	@ 0x25
 80030d4:	d00f      	beq.n	80030f6 <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030da:	7819      	ldrb	r1, [r3, #0]
 80030dc:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e4:	4413      	add	r3, r2
 80030e6:	460a      	mov	r2, r1
 80030e8:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80030ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ee:	3301      	adds	r3, #1
 80030f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 80030f4:	e0d7      	b.n	80032a6 <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		}
		encontrado = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003100:	3301      	adds	r3, #1
 8003102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b63      	subs	r3, #99	@ 0x63
 800310e:	2b15      	cmp	r3, #21
 8003110:	f200 8092 	bhi.w	8003238 <_ZN12CEtiquetaTft8SetTextoEPcz+0x198>
 8003114:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	080031e5 	.word	0x080031e5
 8003120:	08003175 	.word	0x08003175
 8003124:	08003239 	.word	0x08003239
 8003128:	08003201 	.word	0x08003201
 800312c:	08003239 	.word	0x08003239
 8003130:	08003239 	.word	0x08003239
 8003134:	08003191 	.word	0x08003191
 8003138:	08003239 	.word	0x08003239
 800313c:	08003239 	.word	0x08003239
 8003140:	08003239 	.word	0x08003239
 8003144:	08003239 	.word	0x08003239
 8003148:	08003239 	.word	0x08003239
 800314c:	08003239 	.word	0x08003239
 8003150:	080031c9 	.word	0x080031c9
 8003154:	08003239 	.word	0x08003239
 8003158:	08003239 	.word	0x08003239
 800315c:	0800321d 	.word	0x0800321d
 8003160:	08003239 	.word	0x08003239
 8003164:	08003239 	.word	0x08003239
 8003168:	08003239 	.word	0x08003239
 800316c:	08003239 	.word	0x08003239
 8003170:	080031ad 	.word	0x080031ad
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	60fa      	str	r2, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f107 0310 	add.w	r3, r7, #16
 8003180:	4959      	ldr	r1, [pc, #356]	@ (80032e8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x248>)
 8003182:	4618      	mov	r0, r3
 8003184:	f007 ff28 	bl	800afd8 <siprintf>
			encontrado = 1;
 8003188:	2301      	movs	r3, #1
 800318a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800318e:	e063      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1d1a      	adds	r2, r3, #4
 8003194:	60fa      	str	r2, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	4953      	ldr	r1, [pc, #332]	@ (80032ec <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f007 ff1a 	bl	800afd8 <siprintf>
			encontrado = 1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80031aa:	e055      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	60fa      	str	r2, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	494d      	ldr	r1, [pc, #308]	@ (80032f0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 ff0c 	bl	800afd8 <siprintf>
			encontrado = 1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80031c6:	e047      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, int));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1d1a      	adds	r2, r3, #4
 80031cc:	60fa      	str	r2, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	4947      	ldr	r1, [pc, #284]	@ (80032f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f007 fefe 	bl	800afd8 <siprintf>
			encontrado = 1;
 80031dc:	2301      	movs	r3, #1
 80031de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80031e2:	e039      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1d1a      	adds	r2, r3, #4
 80031e8:	60fa      	str	r2, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	4941      	ldr	r1, [pc, #260]	@ (80032f8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f007 fef0 	bl	800afd8 <siprintf>
			encontrado = 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80031fe:	e02b      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, int));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	60fa      	str	r2, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	493b      	ldr	r1, [pc, #236]	@ (80032fc <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 800320e:	4618      	mov	r0, r3
 8003210:	f007 fee2 	bl	800afd8 <siprintf>
			encontrado = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800321a:	e01d      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1d1a      	adds	r2, r3, #4
 8003220:	60fa      	str	r2, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	4935      	ldr	r1, [pc, #212]	@ (8003300 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 800322a:	4618      	mov	r0, r3
 800322c:	f007 fed4 	bl	800afd8 <siprintf>
			encontrado = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8003236:	e00f      	b.n	8003258 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		default:
			buffer[posbuffer] = *p;
 8003238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323c:	7819      	ldrb	r1, [r3, #0]
 800323e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8003242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003246:	4413      	add	r3, r2
 8003248:	460a      	mov	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 800324c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003250:	3301      	adds	r3, #1
 8003252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 8003256:	bf00      	nop
		}
		if (encontrado == 1)
 8003258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800325c:	2b01      	cmp	r3, #1
 800325e:	d122      	bne.n	80032a6 <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		{
			postmp = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8003266:	e016      	b.n	8003296 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f6>
			{
				buffer[posbuffer] = tmp[postmp];
 8003268:	f107 0210 	add.w	r2, r7, #16
 800326c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003270:	4413      	add	r3, r2
 8003272:	7819      	ldrb	r1, [r3, #0]
 8003274:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8003278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327c:	4413      	add	r3, r2
 800327e:	460a      	mov	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 8003282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003286:	3301      	adds	r3, #1
 8003288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 800328c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003290:	3301      	adds	r3, #1
 8003292:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8003296:	f107 0210 	add.w	r2, r7, #16
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e0      	bne.n	8003268 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c8>
	for (p = formato; *p; p++)
 80032a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032aa:	3301      	adds	r3, #1
 80032ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f af08 	bne.w	80030cc <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 80032bc:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80032c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c4:	4413      	add	r3, r2
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3330      	adds	r3, #48	@ 0x30
 80032ce:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f007 ffb6 	bl	800b246 <strcpy>
	//Texto=buffer;
}
 80032da:	bf00      	nop
 80032dc:	37ec      	adds	r7, #236	@ 0xec
 80032de:	46bd      	mov	sp, r7
 80032e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032e4:	b003      	add	sp, #12
 80032e6:	4770      	bx	lr
 80032e8:	0800d0f8 	.word	0x0800d0f8
 80032ec:	0800d0fc 	.word	0x0800d0fc
 80032f0:	0800d100 	.word	0x0800d100
 80032f4:	0800d104 	.word	0x0800d104
 80032f8:	0800d108 	.word	0x0800d108
 80032fc:	0800d10c 	.word	0x0800d10c
 8003300:	0800d110 	.word	0x0800d110

08003304 <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f9b9 	bl	80036c8 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003364:	b29b      	uxth	r3, r3
 8003366:	4413      	add	r3, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	b219      	sxth	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003378:	b29b      	uxth	r3, r3
 800337a:	4413      	add	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	b21b      	sxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	f7ff fde1 	bl	8002f48 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7ff fded 	bl	8002f72 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7ff fdf2 	bl	8002f8e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3330      	adds	r3, #48	@ 0x30
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f7ff fdf9 	bl	8002faa <_ZN18CComponenteBaseTft5printEPc>
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	BackColor=color;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	615a      	str	r2, [r3, #20]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
	...

080033dc <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	4a09      	ldr	r2, [pc, #36]	@ (800340c <_ZN13CPantallaBaseD1Ev+0x30>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	4a09      	ldr	r2, [pc, #36]	@ (8003410 <_ZN13CPantallaBaseD1Ev+0x34>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3330      	adds	r3, #48	@ 0x30
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 fa7f 	bl	80058f8 <_ZN23CManejadorControlesBaseD1Ev>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f90f 	bl	8003620 <_ZN14CRectanguloTftD1Ev>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	0800d530 	.word	0x0800d530
 8003410:	0800d5a0 	.word	0x0800d5a0

08003414 <_ZThn48_N13CPantallaBaseD1Ev>:
	int VerTitulo = 1;
	char Titulo[100];
	CEstacionBase *Estacion;

public:
	virtual ~CPantallaBase();
 8003414:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003418:	f7ff bfe0 	b.w	80033dc <_ZN13CPantallaBaseD1Ev>

0800341c <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
}
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ffd9 	bl	80033dc <_ZN13CPantallaBaseD1Ev>
 800342a:	21a8      	movs	r1, #168	@ 0xa8
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f006 ffd1 	bl	800a3d4 <_ZdlPvj>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_ZThn48_N13CPantallaBaseD0Ev>:
 800343c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003440:	f7ff bfec 	b.w	800341c <_ZN13CPantallaBaseD0Ev>

08003444 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b08f      	sub	sp, #60	@ 0x3c
 8003448:	af08      	add	r7, sp, #32
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	231f      	movs	r3, #31
 8003454:	9303      	str	r3, [sp, #12]
 8003456:	2301      	movs	r3, #1
 8003458:	9302      	str	r3, [sp, #8]
 800345a:	2300      	movs	r3, #0
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	2300      	movs	r3, #0
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2300      	movs	r3, #0
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	f000 f8fc 	bl	8003664 <_ZN14CRectanguloTftC1Eiiiiiii>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3330      	adds	r3, #48	@ 0x30
 8003470:	4618      	mov	r0, r3
 8003472:	f002 fa31 	bl	80058d8 <_ZN23CManejadorControlesBaseC1Ev>
 8003476:	4a2a      	ldr	r2, [pc, #168]	@ (8003520 <_ZN13CPantallaBaseC1EiPc+0xdc>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	4a29      	ldr	r2, [pc, #164]	@ (8003524 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3340      	adds	r3, #64	@ 0x40
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f007 fece 	bl	800b246 <strcpy>
	setRotation(3);  //ROTACION::HORIZONTAL); //en horizontal
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2103      	movs	r1, #3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fc9c 	bl	8002dec <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fcef 	bl	8002e9a <_ZN18CComponenteBaseTft5widthEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	617b      	str	r3, [r7, #20]
	int alto = height();
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fcf4 	bl	8002eb0 <_ZN18CComponenteBaseTft6heightEv>
 80034c8:	4603      	mov	r3, r0
 80034ca:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	6979      	ldr	r1, [r7, #20]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f947 	bl	8003766 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 80034d8:	20a4      	movs	r0, #164	@ 0xa4
 80034da:	f006 ff7d 	bl	800a3d8 <_Znwj>
 80034de:	4603      	mov	r3, r0
 80034e0:	461c      	mov	r4, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6999      	ldr	r1, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3340      	adds	r3, #64	@ 0x40
 80034ee:	201f      	movs	r0, #31
 80034f0:	9006      	str	r0, [sp, #24]
 80034f2:	2000      	movs	r0, #0
 80034f4:	9005      	str	r0, [sp, #20]
 80034f6:	2003      	movs	r0, #3
 80034f8:	9004      	str	r0, [sp, #16]
 80034fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80034fe:	9003      	str	r0, [sp, #12]
 8003500:	9302      	str	r3, [sp, #8]
 8003502:	231f      	movs	r3, #31
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	231e      	movs	r3, #30
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff fd8d 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	0800d530 	.word	0x0800d530
 8003524:	0800d5a0 	.word	0x0800d5a0

08003528 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
	CRectanguloTft::Show();
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f8c8 	bl	80036c8 <_ZN14CRectanguloTft4ShowEv>
	//dibujo el titulo
	LabelTitulo->Show();
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3348      	adds	r3, #72	@ 0x48
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4610      	mov	r0, r2
 8003548:	4798      	blx	r3
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
//	if(visible==false)
//	{
		//Show();
//		visible=true;
//	}
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3328      	adds	r3, #40	@ 0x28
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	3230      	adds	r2, #48	@ 0x30
 800358c:	4611      	mov	r1, r2
 800358e:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3338      	adds	r3, #56	@ 0x38
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4610      	mov	r0, r2
 80035a4:	4798      	blx	r3
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	Estacion->QuitaManejadorControles();
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	332c      	adds	r3, #44	@ 0x2c
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4610      	mov	r0, r2
 80035ca:	4798      	blx	r3
	Visible=false;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	return Visible;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	429a      	cmp	r2, r3
 800360a:	d004      	beq.n	8003616 <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003614:	e000      	b.n	8003618 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8003616:	bf00      	nop
}
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <_ZN14CRectanguloTftD1Ev+0x20>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fb3d 	bl	8002cb0 <_ZN18CComponenteBaseTftD1Ev>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	0800d610 	.word	0x0800d610

08003644 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
}
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ffe7 	bl	8003620 <_ZN14CRectanguloTftD1Ev>
 8003652:	2130      	movs	r1, #48	@ 0x30
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f006 febd 	bl	800a3d4 <_ZdlPvj>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fb03 	bl	8002c80 <_ZN18CComponenteBaseTftC1Ev>
 800367a:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	621a      	str	r2, [r3, #32]
  Yi = yi;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	61da      	str	r2, [r3, #28]
  Alto = alto;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	0800d610 	.word	0x0800d610

080036c8 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3338      	adds	r3, #56	@ 0x38
 80036d8:	681c      	ldr	r4, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	b219      	sxth	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	b21d      	sxth	r5, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	b21e      	sxth	r6, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6952      	ldr	r2, [r2, #20]
 80036f6:	b292      	uxth	r2, r2
 80036f8:	9201      	str	r2, [sp, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4633      	mov	r3, r6
 80036fe:	462a      	mov	r2, r5
 8003700:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	2b01      	cmp	r3, #1
 8003708:	d118      	bne.n	800373c <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3344      	adds	r3, #68	@ 0x44
 8003712:	681c      	ldr	r4, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	b219      	sxth	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	b21d      	sxth	r5, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	b21e      	sxth	r6, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	b21b      	sxth	r3, r3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003730:	b292      	uxth	r2, r2
 8003732:	9201      	str	r2, [sp, #4]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	4633      	mov	r3, r6
 8003738:	462a      	mov	r2, r5
 800373a:	47a0      	blx	r4
  }
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003744 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  Xi=x;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	619a      	str	r2, [r3, #24]
  Yi=y;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	61da      	str	r2, [r3, #28]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	615a      	str	r2, [r3, #20]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  return Xi;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return Yi;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  return Alto;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	0fd9      	lsrs	r1, r3, #31
 80037f6:	440b      	add	r3, r1
 80037f8:	105b      	asrs	r3, r3, #1
 80037fa:	4413      	add	r3, r2
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
	...

08003808 <_ZN19CManejadorPantallasC1Ev>:

#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include "GUI/PantallaManual/CPantallaManual.hpp"
#include <GUI/PantallaMenuPrincipal/CMenuPrincipal.h>
#include <stdio.h>
CManejadorPantallas::CManejadorPantallas()
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <_ZN19CManejadorPantallasC1Ev+0x34>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
{
	// TODO Auto-generated constructor stub
}
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	0800d66c 	.word	0x0800d66c

08003840 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	4a04      	ldr	r2, [pc, #16]	@ (800385c <_ZN19CManejadorPantallasD1Ev+0x1c>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	0800d66c 	.word	0x0800d66c

08003860 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
}
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffe9 	bl	8003840 <_ZN19CManejadorPantallasD1Ev>
 800386e:	2118      	movs	r1, #24
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f006 fdaf 	bl	800a3d4 <_ZdlPvj>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 800389a:	b590      	push	{r4, r7, lr}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 80038aa:	20e0      	movs	r0, #224	@ 0xe0
 80038ac:	f006 fd94 	bl	800a3d8 <_Znwj>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461c      	mov	r4, r3
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 fcb7 	bl	8004228 <_ZN15CPantallaManualC1Ev>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60dc      	str	r4, [r3, #12]
	AsignaPantallaActual(pantallaManual);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f841 	bl	800394c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}

080038d2 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 80038e2:	20c0      	movs	r0, #192	@ 0xc0
 80038e4:	f006 fd78 	bl	800a3d8 <_Znwj>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461c      	mov	r4, r3
 80038ec:	4620      	mov	r0, r4
 80038ee:	f001 f825 	bl	800493c <_ZN14CMenuPrincipalC1Ev>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611c      	str	r4, [r3, #16]
	AsignaPantallaActual(menuPrincipal);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f825 	bl	800394c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}

0800390a <_ZN19CManejadorPantallas16RefrescaPantallaEv>:

void CManejadorPantallas::RefrescaPantalla()
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
	if(CambioPantalla==true)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7d1b      	ldrb	r3, [r3, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <_ZN19CManejadorPantallas16RefrescaPantallaEv+0x22>
		PantallaActual->Show();
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3348      	adds	r3, #72	@ 0x48
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4610      	mov	r0, r2
 800392a:	4798      	blx	r3
	PantallaActual->Refresca();
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3354      	adds	r3, #84	@ 0x54
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4610      	mov	r0, r2
 800393c:	4798      	blx	r3
	CambioPantalla=false;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	751a      	strb	r2, [r3, #20]
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	if(PantallaActual!=NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase+0x24>
		PantallaActual->Ocultar();
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	335c      	adds	r3, #92	@ 0x5c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4610      	mov	r0, r2
 800396e:	4798      	blx	r3
	PantallaActual=pantalla;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	609a      	str	r2, [r3, #8]
	PantallaActual->SetEstacion(Estacion);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6898      	ldr	r0, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3358      	adds	r3, #88	@ 0x58
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6852      	ldr	r2, [r2, #4]
 8003988:	4611      	mov	r1, r2
 800398a:	4798      	blx	r3
	CambioPantalla=true;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	751a      	strb	r2, [r3, #20]
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	0800d67c 	.word	0x0800d67c

080039bc <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	0800d67c 	.word	0x0800d67c

080039dc <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
}
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ffe9 	bl	80039bc <_ZN20CManejadorEventoMenuD1Ev>
 80039ea:	2104      	movs	r1, #4
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f006 fcf1 	bl	800a3d4 <_ZdlPvj>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]

}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af04      	add	r7, sp, #16
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	9303      	str	r3, [sp, #12]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	f7ff fe15 	bl	8003664 <_ZN14CRectanguloTftC1Eiiiiiii>
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <_ZN5CMenuC1Eiiiiiii+0x5c>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2219      	movs	r2, #25
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a56:	3305      	adds	r3, #5
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	fb92 f2f3 	sdiv	r2, r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	0800d690 	.word	0x0800d690

08003a70 <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <_ZN5CMenuD1Ev+0x20>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fdcd 	bl	8003620 <_ZN14CRectanguloTftD1Ev>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	0800d690 	.word	0x0800d690

08003a94 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
}
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ffe7 	bl	8003a70 <_ZN5CMenuD1Ev>
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f006 fc95 	bl	800a3d4 <_ZdlPvj>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	int y;
	CRectanguloTft::Show();
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fe02 	bl	80036c8 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac8:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003aca:	e01c      	b.n	8003b06 <_ZN5CMenu4ShowEv+0x52>
	{
		y=tmp->DamePosicionY()+tmp->DameAltura();
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fb3c 	bl	800414a <_ZN9CMenuItem13DamePosicionYEv>
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb46 	bl	8004166 <_ZN9CMenuItem10DameAlturaEv>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4423      	add	r3, r4
 8003ade:	60bb      	str	r3, [r7, #8]
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8c3 	bl	8003c6e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <_ZN5CMenu4ShowEv+0x5a>
		{
			return;
		}
		tmp->Show();
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fa8e 	bl	800401a <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fb18 	bl	8004134 <_ZN9CMenuItem13DameSiguienteEv>
 8003b04:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1df      	bne.n	8003acc <_ZN5CMenu4ShowEv+0x18>
 8003b0c:	e000      	b.n	8003b10 <_ZN5CMenu4ShowEv+0x5c>
			return;
 8003b0e:	bf00      	nop
	}
}
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}

08003b16 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 8003b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b48:	b091      	sub	sp, #68	@ 0x44
 8003b4a:	af08      	add	r7, sp, #32
 8003b4c:	6178      	str	r0, [r7, #20]
 8003b4e:	6139      	str	r1, [r7, #16]
 8003b50:	60fa      	str	r2, [r7, #12]
 8003b52:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 8003b54:	20a4      	movs	r0, #164	@ 0xa4
 8003b56:	f006 fc3f 	bl	800a3d8 <_Znwj>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461c      	mov	r4, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	699d      	ldr	r5, [r3, #24]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	69de      	ldr	r6, [r3, #28]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003b7c:	9006      	str	r0, [sp, #24]
 8003b7e:	2000      	movs	r0, #0
 8003b80:	9005      	str	r0, [sp, #20]
 8003b82:	2003      	movs	r0, #3
 8003b84:	9004      	str	r0, [sp, #16]
 8003b86:	9103      	str	r1, [sp, #12]
 8003b88:	6939      	ldr	r1, [r7, #16]
 8003b8a:	9102      	str	r1, [sp, #8]
 8003b8c:	9201      	str	r2, [sp, #4]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4632      	mov	r2, r6
 8003b94:	4629      	mov	r1, r5
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7ff fa48 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003b9c:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8003b9e:	2028      	movs	r0, #40	@ 0x28
 8003ba0:	f006 fc1a 	bl	800a3d8 <_Znwj>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461c      	mov	r4, r3
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	69f9      	ldr	r1, [r7, #28]
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f000 f9d8 	bl	8003f64 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8003bb4:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	4603      	mov	r3, r0
 8003bca:	69b8      	ldr	r0, [r7, #24]
 8003bcc:	f000 fa5c 	bl	8004088 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3724      	adds	r7, #36	@ 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bda <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ffa9 	bl	8003b46 <_ZN5CMenu8CreaItemEPcib>
 8003bf4:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d111      	bne.n	8003c22 <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fa54 	bl	80040b8 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8003c20:	e00e      	b.n	8003c40 <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	6979      	ldr	r1, [r7, #20]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f9dd 	bl	8003fe8 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	4619      	mov	r1, r3
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f806 	bl	8003c46 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f911 	bl	8003e62 <_ZN5CMenu14CalculaPaginasEv>
}
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:

void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	3305      	adds	r3, #5
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f000 fa39 	bl	80040d6 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003c64:	e000      	b.n	8003c68 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 8003c66:	bf00      	nop
}
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 8003c6e:	b590      	push	{r4, r7, lr}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f000 fa66 	bl	800414a <_ZN9CMenuItem13DamePosicionYEv>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	6838      	ldr	r0, [r7, #0]
 8003c82:	f000 fa70 	bl	8004166 <_ZN9CMenuItem10DameAlturaEv>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4423      	add	r3, r4
 8003c8a:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	4413      	add	r3, r2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dd01      	ble.n	8003ca0 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 8003ca0:	2301      	movs	r3, #1
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}

08003caa <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d03f      	beq.n	8003d3a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 8003cc0:	e037      	b.n	8003d32 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa5d 	bl	8004182 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02d      	beq.n	8003d2a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa30 	bl	8004134 <_ZN9CMenuItem13DameSiguienteEv>
 8003cd4:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d030      	beq.n	8003d3e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f9ea 	bl	80040b8 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	68b8      	ldr	r0, [r7, #8]
 8003ce8:	f000 f9e6 	bl	80040b8 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ffba 	bl	8003c6e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f98a 	bl	800401a <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f000 f987 	bl	800401a <_ZN9CMenuItem4ShowEv>
				return;
 8003d0c:	e018      	b.n	8003d40 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff98 	bl	8003c46 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3348      	adds	r3, #72	@ 0x48
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
				return;
 8003d28:	e00a      	b.n	8003d40 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa02 	bl	8004134 <_ZN9CMenuItem13DameSiguienteEv>
 8003d30:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1c4      	bne.n	8003cc2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 8003d38:	e002      	b.n	8003d40 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 8003d3e:	bf00      	nop
	}

}
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d05c      	beq.n	8003e10 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5a:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 8003d5c:	e054      	b.n	8003e08 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f000 fa0f 	bl	8004182 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d04a      	beq.n	8003e00 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f000 fa15 	bl	800419a <_ZN9CMenuItem12DameAnteriorEv>
 8003d70:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d04d      	beq.n	8003e14 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 8003d78:	2100      	movs	r1, #0
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f000 f99c 	bl	80040b8 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 8003d80:	2101      	movs	r1, #1
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f998 	bl	80040b8 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8ba 	bl	8003f0a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f000 f937 	bl	800401a <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f934 	bl	800401a <_ZN9CMenuItem4ShowEv>
				return;
 8003db2:	e030      	b.n	8003e16 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 8003dba:	e00b      	b.n	8003dd4 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 8003dbc:	6978      	ldr	r0, [r7, #20]
 8003dbe:	f000 f9ec 	bl	800419a <_ZN9CMenuItem12DameAnteriorEv>
 8003dc2:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	dced      	bgt.n	8003dbc <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8003de0:	e000      	b.n	8003de4 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8003de2:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff2d 	bl	8003c46 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3348      	adds	r3, #72	@ 0x48
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
				return;
 8003dfe:	e00a      	b.n	8003e16 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 8003e00:	6978      	ldr	r0, [r7, #20]
 8003e02:	f000 f9ca 	bl	800419a <_ZN9CMenuItem12DameAnteriorEv>
 8003e06:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1a7      	bne.n	8003d5e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8003e0e:	e002      	b.n	8003e16 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8003e14:	bf00      	nop
	}

}
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 8003e1c:	b5b0      	push	{r4, r5, r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d014      	beq.n	8003e56 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d012      	beq.n	8003e5a <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	681c      	ldr	r4, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f9b2 	bl	80041b0 <_ZN9CMenuItem17DameIdentificadorEv>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4628      	mov	r0, r5
 8003e52:	47a0      	blx	r4
 8003e54:	e002      	b.n	8003e5c <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003e5a:	bf00      	nop
}
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bdb0      	pop	{r4, r5, r7, pc}

08003e62 <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f833 	bl	8003ed6 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3314      	adds	r3, #20
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003e8e:	e01a      	b.n	8003ec6 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e9a:	fb01 f202 	mul.w	r2, r1, r2
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f938 	bl	8004134 <_ZN9CMenuItem13DameSiguienteEv>
 8003ec4:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e1      	bne.n	8003e90 <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e009      	b.n	8003ef8 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b09      	cmp	r3, #9
 8003efc:	ddf2      	ble.n	8003ee4 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e00d      	b.n	8003f36 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d101      	bne.n	8003f30 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e006      	b.n	8003f3e <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	ddee      	ble.n	8003f1a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8003f3c:	2300      	movs	r3, #0

}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
	...

08003f64 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	70fb      	strb	r3, [r7, #3]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa4 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x40>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	0800d6ec 	.word	0x0800d6ec

08003fa8 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	@ (8003fc4 <_ZN9CMenuItemD1Ev+0x1c>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	0800d6ec 	.word	0x0800d6ec

08003fc8 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
}
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe9 	bl	8003fa8 <_ZN9CMenuItemD1Ev>
 8003fd6:	2128      	movs	r1, #40	@ 0x28
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f006 f9fb 	bl	800a3d4 <_ZdlPvj>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]
		return;
 8004006:	e005      	b.n	8004014 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	6839      	ldr	r1, [r7, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ffea 	bl	8003fe8 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d010      	beq.n	800404e <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7ff f977 	bl	800332a <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7ff f9ba 	bl	80033c0 <_ZN12CEtiquetaTft12SetBackColorEi>
 800404c:	e00f      	b.n	800406e <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7ff f966 	bl	800332a <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7ff f9a9 	bl	80033c0 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3348      	adds	r3, #72	@ 0x48
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fb5c 	bl	80037a2 <_ZN14CRectanguloTft13DamePosicionXEv>
 80040ea:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4618      	mov	r0, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	334c      	adds	r3, #76	@ 0x4c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4798      	blx	r3
	if(Siguiente==NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d010      	beq.n	800412c <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fb5d 	bl	80037ce <_ZN14CRectanguloTft8DameAltoEv>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4413      	add	r3, r2
 800411a:	3305      	adds	r3, #5
 800411c:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ffd6 	bl	80040d6 <_ZN9CMenuItem16CalculaPosicionYEi>
 800412a:	e000      	b.n	800412e <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 800412c:	bf00      	nop
}
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	return Siguiente;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fb2e 	bl	80037b8 <_ZN14CRectanguloTft13DamePosicionYEv>
 800415c:	4603      	mov	r3, r0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fb2b 	bl	80037ce <_ZN14CRectanguloTft8DameAltoEv>
 8004178:	4603      	mov	r3, r0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	return Anterior;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	return Identificador;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
	...

080041c8 <_ZN15CPantallaManualD1Ev>:
 */

#include <GUI/PantallaManual/CPantallaManual.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaManual::~CPantallaManual()
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <_ZN15CPantallaManualD1Ev+0x28>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	4a07      	ldr	r2, [pc, #28]	@ (80041f4 <_ZN15CPantallaManualD1Ev+0x2c>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff f8fc 	bl	80033dc <_ZN13CPantallaBaseD1Ev>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	0800d6fc 	.word	0x0800d6fc
 80041f4:	0800d788 	.word	0x0800d788

080041f8 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
	CEtiquetaTft *LabelPID;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 80041f8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80041fc:	f7ff bfe4 	b.w	80041c8 <_ZN15CPantallaManualD1Ev>

08004200 <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
}
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffdd 	bl	80041c8 <_ZN15CPantallaManualD1Ev>
 800420e:	21e0      	movs	r1, #224	@ 0xe0
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f006 f8df 	bl	800a3d4 <_ZdlPvj>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <_ZThn48_N15CPantallaManualD0Ev>:
 8004220:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004224:	f7ff bfec 	b.w	8004200 <_ZN15CPantallaManualD0Ev>

08004228 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b08d      	sub	sp, #52	@ 0x34
 800422c:	af08      	add	r7, sp, #32
 800422e:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: Manual")
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a73      	ldr	r2, [pc, #460]	@ (8004400 <_ZN15CPantallaManualC1Ev+0x1d8>)
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f904 	bl	8003444 <_ZN13CPantallaBaseC1EiPc>
 800423c:	4a71      	ldr	r2, [pc, #452]	@ (8004404 <_ZN15CPantallaManualC1Ev+0x1dc>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	4a71      	ldr	r2, [pc, #452]	@ (8004408 <_ZN15CPantallaManualC1Ev+0x1e0>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004298:	20a4      	movs	r0, #164	@ 0xa4
 800429a:	f006 f89d 	bl	800a3d8 <_Znwj>
 800429e:	4603      	mov	r3, r0
 80042a0:	461c      	mov	r4, r3
 80042a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042a6:	9306      	str	r3, [sp, #24]
 80042a8:	2300      	movs	r3, #0
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	2303      	movs	r3, #3
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	4b55      	ldr	r3, [pc, #340]	@ (800440c <_ZN15CPantallaManualC1Ev+0x1e4>)
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	2314      	movs	r3, #20
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2332      	movs	r3, #50	@ 0x32
 80042c4:	2223      	movs	r2, #35	@ 0x23
 80042c6:	2105      	movs	r1, #5
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7fe feaf 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
	int centroX = DameCentroX();
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fa84 	bl	80037e4 <_ZN14CRectanguloTft11DameCentroXEv>
 80042dc:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 80042de:	20a4      	movs	r0, #164	@ 0xa4
 80042e0:	f006 f87a 	bl	800a3d8 <_Znwj>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461c      	mov	r4, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 80042ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042f2:	9306      	str	r3, [sp, #24]
 80042f4:	2301      	movs	r3, #1
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	2303      	movs	r3, #3
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	4b43      	ldr	r3, [pc, #268]	@ (8004410 <_ZN15CPantallaManualC1Ev+0x1e8>)
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	231e      	movs	r3, #30
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2396      	movs	r3, #150	@ 0x96
 8004310:	2241      	movs	r2, #65	@ 0x41
 8004312:	4620      	mov	r0, r4
 8004314:	f7fe fe8a 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
	LabelTemperaturas->SetSeparacion(5, 5);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004324:	2205      	movs	r2, #5
 8004326:	2105      	movs	r1, #5
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe ffeb 	bl	8003304 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 800432e:	20a4      	movs	r0, #164	@ 0xa4
 8004330:	f006 f852 	bl	800a3d8 <_Znwj>
 8004334:	4603      	mov	r3, r0
 8004336:	461c      	mov	r4, r3
 8004338:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800433c:	9306      	str	r3, [sp, #24]
 800433e:	2300      	movs	r3, #0
 8004340:	9305      	str	r3, [sp, #20]
 8004342:	2303      	movs	r3, #3
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <_ZN15CPantallaManualC1Ev+0x1ec>)
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	2300      	movs	r3, #0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	231e      	movs	r3, #30
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	23c8      	movs	r3, #200	@ 0xc8
 800435a:	2269      	movs	r2, #105	@ 0x69
 800435c:	2105      	movs	r1, #5
 800435e:	4620      	mov	r0, r4
 8004360:	f7fe fe64 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 800436a:	20a4      	movs	r0, #164	@ 0xa4
 800436c:	f006 f834 	bl	800a3d8 <_Znwj>
 8004370:	4603      	mov	r3, r0
 8004372:	461c      	mov	r4, r3
 8004374:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004378:	9306      	str	r3, [sp, #24]
 800437a:	2300      	movs	r3, #0
 800437c:	9305      	str	r3, [sp, #20]
 800437e:	2303      	movs	r3, #3
 8004380:	9304      	str	r3, [sp, #16]
 8004382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004386:	9303      	str	r3, [sp, #12]
 8004388:	4b23      	ldr	r3, [pc, #140]	@ (8004418 <_ZN15CPantallaManualC1Ev+0x1f0>)
 800438a:	9302      	str	r3, [sp, #8]
 800438c:	2300      	movs	r3, #0
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	2323      	movs	r3, #35	@ 0x23
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004398:	2291      	movs	r2, #145	@ 0x91
 800439a:	2105      	movs	r1, #5
 800439c:	4620      	mov	r0, r4
 800439e:	f7fe fe45 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelEstado->SetSeparacion(15, 5);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043ae:	2205      	movs	r2, #5
 80043b0:	210f      	movs	r1, #15
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe ffa6 	bl	8003304 <_ZN12CEtiquetaTft13SetSeparacionEii>

	LabelPID=new CEtiquetaTft( 5, 180, 200, 30, COLOR::BLACK, "PID: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 80043b8:	20a4      	movs	r0, #164	@ 0xa4
 80043ba:	f006 f80d 	bl	800a3d8 <_Znwj>
 80043be:	4603      	mov	r3, r0
 80043c0:	461c      	mov	r4, r3
 80043c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043c6:	9306      	str	r3, [sp, #24]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	2303      	movs	r3, #3
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	4b11      	ldr	r3, [pc, #68]	@ (800441c <_ZN15CPantallaManualC1Ev+0x1f4>)
 80043d8:	9302      	str	r3, [sp, #8]
 80043da:	2300      	movs	r3, #0
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	231e      	movs	r3, #30
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	23c8      	movs	r3, #200	@ 0xc8
 80043e4:	22b4      	movs	r2, #180	@ 0xb4
 80043e6:	2105      	movs	r1, #5
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7fe fe1f 	bl	800302c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
}
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop
 8004400:	0800d114 	.word	0x0800d114
 8004404:	0800d6fc 	.word	0x0800d6fc
 8004408:	0800d788 	.word	0x0800d788
 800440c:	0800d124 	.word	0x0800d124
 8004410:	0800d130 	.word	0x0800d130
 8004414:	0800d138 	.word	0x0800d138
 8004418:	0800d144 	.word	0x0800d144
 800441c:	0800d154 	.word	0x0800d154

08004420 <_ZN15CPantallaManual13MuestraEstadoEb>:
	Estacion->ActivarCalefactor();
}
*/

void CPantallaManual::MuestraEstado(bool forzar)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d116      	bne.n	8004460 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800443e:	429a      	cmp	r2, r3
 8004440:	d10e      	bne.n	8004460 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3360      	adds	r3, #96	@ 0x60
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	bf0c      	ite	eq
 8004456:	2301      	moveq	r3, #1
 8004458:	2300      	movne	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d143      	bne.n	80044e8 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	if (EstadoBoquilla == 1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d115      	bne.n	80044a2 <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800447c:	211f      	movs	r1, #31
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff f982 	bl	8003788 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe ff4c 	bl	800332a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004498:	4915      	ldr	r1, [pc, #84]	@ (80044f0 <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fe00 	bl	80030a0 <_ZN12CEtiquetaTft8SetTextoEPcz>
 80044a0:	e016      	b.n	80044d0 <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044a8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff f96b 	bl	8003788 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe ff34 	bl	800332a <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044c8:	490a      	ldr	r1, [pc, #40]	@ (80044f4 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fde8 	bl	80030a0 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3348      	adds	r3, #72	@ 0x48
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4610      	mov	r0, r2
 80044e4:	4798      	blx	r3
 80044e6:	e000      	b.n	80044ea <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 80044e8:	bf00      	nop
}
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	0800d15c 	.word	0x0800d15c
 80044f4:	0800d144 	.word	0x0800d144

080044f8 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3310      	adds	r3, #16
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4610      	mov	r0, r2
 8004514:	4798      	blx	r3
 8004516:	4602      	mov	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	Temperatura = Estacion->GetTemperaturaReal();
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
 8004534:	4603      	mov	r3, r0
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc fd7a 	bl	8001030 <__aeabi_f2iz>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	NivelAire = Estacion->GetNivelAire();
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3318      	adds	r3, #24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4610      	mov	r0, r2
 8004558:	4798      	blx	r3
 800455a:	4602      	mov	r2, r0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	EstadoBoquilla=Estacion->GetEstado();
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	331c      	adds	r3, #28
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4610      	mov	r0, r2
 8004576:	4798      	blx	r3
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11e      	bne.n	80045d8 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x50>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura && EsVisible()==true )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d113      	bne.n	80045d2 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10b      	bne.n	80045d2 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3360      	adds	r3, #96	@ 0x60
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x4c>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d123      	bne.n	8004620 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x98>
			return;
	}
	TemperaturaAnterior=Temperatura;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	SetTemperaturaAnterior=SetTemperatura;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004602:	4909      	ldr	r1, [pc, #36]	@ (8004628 <_ZN15CPantallaManual19MuestraTemperaturasEb+0xa0>)
 8004604:	f7fe fd4c 	bl	80030a0 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3348      	adds	r3, #72	@ 0x48
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4610      	mov	r0, r2
 800461c:	4798      	blx	r3
 800461e:	e000      	b.n	8004622 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x9a>
			return;
 8004620:	bf00      	nop
}
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	0800d16c 	.word	0x0800d16c

0800462c <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Estacion->SetNivelAire(NivelAire);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3314      	adds	r3, #20
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 8004656:	4611      	mov	r1, r2
 8004658:	4798      	blx	r3
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
private:
	void MuestraEstado(bool forrzar);
	void MuestraNivelAire(bool forrzar);
	void LeeDatosEstacion();
	void MuestraTemperaturas(bool forrzar);
	void OnNivelAireEvent(int aire);
 8004662:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004666:	f7ff bfe1 	b.w	800462c <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

0800466c <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800468a:	429a      	cmp	r2, r3
 800468c:	d10b      	bne.n	80046a6 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3360      	adds	r3, #96	@ 0x60
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11b      	bne.n	80046e4 <_ZN15CPantallaManual16MuestraNivelAireEb+0x78>
			return;
	}
	NivelAireAnterior=NivelAire;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	LabelAire->SetTexto("Aire: %d", NivelAire);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046c4:	461a      	mov	r2, r3
 80046c6:	4909      	ldr	r1, [pc, #36]	@ (80046ec <_ZN15CPantallaManual16MuestraNivelAireEb+0x80>)
 80046c8:	f7fe fcea 	bl	80030a0 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3348      	adds	r3, #72	@ 0x48
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4610      	mov	r0, r2
 80046e0:	4798      	blx	r3
 80046e2:	e000      	b.n	80046e6 <_ZN15CPantallaManual16MuestraNivelAireEb+0x7a>
			return;
 80046e4:	bf00      	nop

}
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	0800d174 	.word	0x0800d174

080046f0 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 800470c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004710:	f7ff bfee 	b.w	80046f0 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08004714 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3320      	adds	r3, #32
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4610      	mov	r0, r2
 8004730:	4798      	blx	r3
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:
	void MuestraInformacion(bool forzar);

	//eventos del Encoder
	virtual void OnPerillaIncremento();
 800473a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800473e:	f7ff bfe9 	b.w	8004714 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08004742 <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3324      	adds	r3, #36	@ 0x24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4610      	mov	r0, r2
 800475e:	4798      	blx	r3
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004768:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800476c:	f7ff bfe9 	b.w	8004742 <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08004770 <_ZN15CPantallaManual8RefrescaEv>:


void CPantallaManual::Refresca()
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	MuestraInformacion(false);
 8004778:	2100      	movs	r1, #0
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f884 	bl	8004888 <_ZN15CPantallaManual18MuestraInformacionEb>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <_ZN15CPantallaManual20OnBotonUnoClickEventEi>:
 void CPantallaManual::OnBotonUnoClickEvent(int tiempoClick)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
	int pid=Estacion->GetPID();
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3348      	adds	r3, #72	@ 0x48
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4610      	mov	r0, r2
 80047a6:	4798      	blx	r3
 80047a8:	60f8      	str	r0, [r7, #12]
	pid++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
	Estacion->SetPID(pid);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	334c      	adds	r3, #76	@ 0x4c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);

	virtual void OnBotonUnoClickEvent(int tiempoClick);
 80047d0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80047d4:	f7ff bfd8 	b.w	8004788 <_ZN15CPantallaManual20OnBotonUnoClickEventEi>

080047d8 <_ZN15CPantallaManual20OnBotonDosClickEventEi>:
 void CPantallaManual::OnBotonDosClickEvent(int tiempoClick)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
		int pid=Estacion->GetPID();
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3348      	adds	r3, #72	@ 0x48
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
 80047f8:	60f8      	str	r0, [r7, #12]
		pid--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
		Estacion->SetPID(pid);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	334c      	adds	r3, #76	@ 0x4c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	4610      	mov	r0, r2
 8004816:	4798      	blx	r3

}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 8004820:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004824:	f7ff bfd8 	b.w	80047d8 <_ZN15CPantallaManual20OnBotonDosClickEventEi>

08004828 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>:
 void CPantallaManual::OnBotonPerillaClickEvent(int tiempoClick)
 {
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004832:	4803      	ldr	r0, [pc, #12]	@ (8004840 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi+0x18>)
 8004834:	f7ff f84d 	bl	80038d2 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000240 	.word	0x20000240

08004844 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8004844:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004848:	f7ff bfee 	b.w	8004828 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>

0800484c <_ZN15CPantallaManual4ShowEv>:
 void CPantallaManual::Show()
 {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fe66 	bl	8003528 <_ZN13CPantallaBase4ShowEv>

 	LabelTemperatura->Show();
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3348      	adds	r3, #72	@ 0x48
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4610      	mov	r0, r2
 8004870:	4798      	blx	r3
 	LeeDatosEstacion();
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fe40 	bl	80044f8 <_ZN15CPantallaManual16LeeDatosEstacionEv>
 	MuestraInformacion(true);
 8004878:	2101      	movs	r1, #1
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f804 	bl	8004888 <_ZN15CPantallaManual18MuestraInformacionEb>
 }
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fe2f 	bl	80044f8 <_ZN15CPantallaManual16LeeDatosEstacionEv>
		MuestraTemperaturas(forzar);
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fe72 	bl	8004588 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fdb9 	bl	8004420 <_ZN15CPantallaManual13MuestraEstadoEb>
		MuestraNivelAire(forzar);
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff feda 	bl	800466c <_ZN15CPantallaManual16MuestraNivelAireEb>
		//muestro el PID
		int pid=Estacion->GetPID();
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3348      	adds	r3, #72	@ 0x48
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4610      	mov	r0, r2
 80048cc:	4798      	blx	r3
 80048ce:	60f8      	str	r0, [r7, #12]
		if(pid==0 && forzar==false)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <_ZN15CPantallaManual18MuestraInformacionEb+0x54>
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d028      	beq.n	800492e <_ZN15CPantallaManual18MuestraInformacionEb+0xa6>
			return;
		if(pidAnteriro!=pid || forzar==true)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d102      	bne.n	80048ee <_ZN15CPantallaManual18MuestraInformacionEb+0x66>
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d116      	bne.n	800491c <_ZN15CPantallaManual18MuestraInformacionEb+0x94>
		{
			pidAnteriro=pid;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
			LabelPID->SetTexto("PID: %d", pid);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	490e      	ldr	r1, [pc, #56]	@ (8004938 <_ZN15CPantallaManual18MuestraInformacionEb+0xb0>)
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe fbcd 	bl	80030a0 <_ZN12CEtiquetaTft8SetTextoEPcz>
			LabelPID->Show();
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3348      	adds	r3, #72	@ 0x48
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4610      	mov	r0, r2
 800491a:	4798      	blx	r3
		}
		//marco como visible
		SetVisible(true);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3364      	adds	r3, #100	@ 0x64
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	4610      	mov	r0, r2
 800492a:	4798      	blx	r3
 800492c:	e000      	b.n	8004930 <_ZN15CPantallaManual18MuestraInformacionEb+0xa8>
			return;
 800492e:	bf00      	nop

 }
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	0800d180 	.word	0x0800d180

0800493c <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b091      	sub	sp, #68	@ 0x44
 8004940:	af04      	add	r7, sp, #16
 8004942:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, " Menu Principal")
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a37      	ldr	r2, [pc, #220]	@ (8004a24 <_ZN14CMenuPrincipalC1Ev+0xe8>)
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fd7a 	bl	8003444 <_ZN13CPantallaBaseC1EiPc>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	33a8      	adds	r3, #168	@ 0xa8
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff f821 	bl	800399c <_ZN20CManejadorEventoMenuC1Ev>
 800495a:	4a33      	ldr	r2, [pc, #204]	@ (8004a28 <_ZN14CMenuPrincipalC1Ev+0xec>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	4a32      	ldr	r2, [pc, #200]	@ (8004a2c <_ZN14CMenuPrincipalC1Ev+0xf0>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
 8004966:	4a32      	ldr	r2, [pc, #200]	@ (8004a30 <_ZN14CMenuPrincipalC1Ev+0xf4>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	221f      	movs	r2, #31
 8004972:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
{
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 8004976:	2080      	movs	r0, #128	@ 0x80
 8004978:	f005 fd2e 	bl	800a3d8 <_Znwj>
 800497c:	4603      	mov	r3, r0
 800497e:	461c      	mov	r4, r3
 8004980:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	2301      	movs	r3, #1
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	23d2      	movs	r3, #210	@ 0xd2
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004998:	221e      	movs	r2, #30
 800499a:	2104      	movs	r1, #4
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff f837 	bl	8003a10 <_ZN5CMenuC1Eiiiiiii>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	Menu->AsignaManejadorEventosMenu(this);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	33a8      	adds	r3, #168	@ 0xa8
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7ff fac7 	bl	8003f48 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049c8:	f247 726f 	movw	r2, #30575	@ 0x776f
 80049cc:	2100      	movs	r1, #0
 80049ce:	f7ff f8a2 	bl	8003b16 <_ZN5CMenu18AsignaColoresItemsEiiii>
	char cadena[30];
	for(int i=1;i<10;i++)
 80049d2:	2301      	movs	r3, #1
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d6:	e012      	b.n	80049fe <_ZN14CMenuPrincipalC1Ev+0xc2>
	{
		sprintf(cadena,"Opcion %d",i);
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049de:	4915      	ldr	r1, [pc, #84]	@ (8004a34 <_ZN14CMenuPrincipalC1Ev+0xf8>)
 80049e0:	4618      	mov	r0, r3
 80049e2:	f006 faf9 	bl	800afd8 <siprintf>
		Menu->AgregaItem(cadena, i);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80049ec:	f107 010c 	add.w	r1, r7, #12
 80049f0:	2300      	movs	r3, #0
 80049f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f4:	f7ff f8f1 	bl	8003bda <_ZN5CMenu10AgregaItemEPcib>
	for(int i=1;i<10;i++)
 80049f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fa:	3301      	adds	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	2b09      	cmp	r3, #9
 8004a02:	dde9      	ble.n	80049d8 <_ZN14CMenuPrincipalC1Ev+0x9c>
	}
	Menu->AgregaItem("Salir", MENU_SALIR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004a10:	2300      	movs	r3, #0
 8004a12:	4909      	ldr	r1, [pc, #36]	@ (8004a38 <_ZN14CMenuPrincipalC1Ev+0xfc>)
 8004a14:	f7ff f8e1 	bl	8003bda <_ZN5CMenu10AgregaItemEPcib>
}
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3734      	adds	r7, #52	@ 0x34
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}
 8004a22:	bf00      	nop
 8004a24:	0800d188 	.word	0x0800d188
 8004a28:	0800d7f8 	.word	0x0800d7f8
 8004a2c:	0800d87c 	.word	0x0800d87c
 8004a30:	0800d8ec 	.word	0x0800d8ec
 8004a34:	0800d198 	.word	0x0800d198
 8004a38:	0800d1a4 	.word	0x0800d1a4

08004a3c <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <_ZN14CMenuPrincipalD1Ev+0x38>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8004a78 <_ZN14CMenuPrincipalD1Ev+0x3c>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a50:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <_ZN14CMenuPrincipalD1Ev+0x40>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
{
	// TODO Auto-generated destructor stub
}
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	33a8      	adds	r3, #168	@ 0xa8
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe ffad 	bl	80039bc <_ZN20CManejadorEventoMenuD1Ev>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe fcb9 	bl	80033dc <_ZN13CPantallaBaseD1Ev>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	0800d7f8 	.word	0x0800d7f8
 8004a78:	0800d87c 	.word	0x0800d87c
 8004a7c:	0800d8ec 	.word	0x0800d8ec

08004a80 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
	int MENU_SALIR=31;
public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 8004a80:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004a84:	f7ff bfda 	b.w	8004a3c <_ZN14CMenuPrincipalD1Ev>

08004a88 <_ZThn168_N14CMenuPrincipalD1Ev>:
 8004a88:	f1a0 00a8 	sub.w	r0, r0, #168	@ 0xa8
 8004a8c:	f7ff bfd6 	b.w	8004a3c <_ZN14CMenuPrincipalD1Ev>

08004a90 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
}
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ffcf 	bl	8004a3c <_ZN14CMenuPrincipalD1Ev>
 8004a9e:	21c0      	movs	r1, #192	@ 0xc0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f005 fc97 	bl	800a3d4 <_ZdlPvj>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_ZThn168_N14CMenuPrincipalD0Ev>:
 8004ab0:	f1a0 00a8 	sub.w	r0, r0, #168	@ 0xa8
 8004ab4:	f7ff bfec 	b.w	8004a90 <_ZN14CMenuPrincipalD0Ev>

08004ab8 <_ZThn48_N14CMenuPrincipalD0Ev>:
 8004ab8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004abc:	f7ff bfe8 	b.w	8004a90 <_ZN14CMenuPrincipalD0Ev>

08004ac0 <_ZN14CMenuPrincipal4ShowEv>:

void CMenuPrincipal::Show()
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fd2c 	bl	8003528 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3348      	adds	r3, #72	@ 0x48
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4798      	blx	r3
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_ZN14CMenuPrincipal8RefrescaEv>:
void CMenuPrincipal::Refresca()
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3360      	adds	r3, #96	@ 0x60
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <_ZN14CMenuPrincipal8RefrescaEv+0x32>
		Show();
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3348      	adds	r3, #72	@ 0x48
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
	SetVisible(true);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3364      	adds	r3, #100	@ 0x64
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4798      	blx	r3
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi>:
void CMenuPrincipal::OnBotonCuatroClickEvent(int tiempoClick)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	ManejadorPantallas.MuestraPantallaManual();
 8004b42:	4803      	ldr	r0, [pc, #12]	@ (8004b50 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi+0x18>)
 8004b44:	f7fe fea9 	bl	800389a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000240 	.word	0x20000240

08004b54 <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEi>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonCuatroClickEvent(int tiempoClick);
 8004b54:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004b58:	f7ff bfee 	b.w	8004b38 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEi>

08004b5c <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>:
void CMenuPrincipal::OnPerillaIncremento()
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff f89d 	bl	8003caa <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZThn48_N14CMenuPrincipal19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8004b78:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004b7c:	f7ff bfee 	b.w	8004b5c <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>

08004b80 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>:
void CMenuPrincipal::OnPerillaDecremento()
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f8d9 	bl	8003d46 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZThn48_N14CMenuPrincipal19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004b9c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004ba0:	f7ff bfee 	b.w	8004b80 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>

08004ba4 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEi>:
void CMenuPrincipal::OnBotonPerillaClickEvent(int tiempoClick)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	Menu->OnClickSeleccionado();
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff f931 	bl	8003e1c <_ZN5CMenu19OnClickSeleccionadoEv>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_ZThn48_N14CMenuPrincipal24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8004bc2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004bc6:	f7ff bfed 	b.w	8004ba4 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEi>
	...

08004bcc <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	if(MENU_SALIR==identificador)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d102      	bne.n	8004be8 <_ZN14CMenuPrincipal11OnMenuEventEi+0x1c>
		ManejadorPantallas.MuestraPantallaManual();
 8004be2:	4803      	ldr	r0, [pc, #12]	@ (8004bf0 <_ZN14CMenuPrincipal11OnMenuEventEi+0x24>)
 8004be4:	f7fe fe59 	bl	800389a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000240 	.word	0x20000240

08004bf4 <_ZThn168_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8004bf4:	f1a0 00a8 	sub.w	r0, r0, #168	@ 0xa8
 8004bf8:	f7ff bfe8 	b.w	8004bcc <_ZN14CMenuPrincipal11OnMenuEventEi>

08004bfc <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	80fb      	strh	r3, [r7, #6]
 8004c0e:	4603      	mov	r3, r0
 8004c10:	80bb      	strh	r3, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	807b      	strh	r3, [r7, #2]
 8004c16:	4613      	mov	r3, r2
 8004c18:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8004c30:	887a      	ldrh	r2, [r7, #2]
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fb ffe0 	bl	8000bfc <__aeabi_i2f>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7fc f9cb 	bl	8000fe0 <__aeabi_fcmplt>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8004c5a:	883a      	ldrh	r2, [r7, #0]
 8004c5c:	88bb      	ldrh	r3, [r7, #4]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fb ffcb 	bl	8000bfc <__aeabi_i2f>
 8004c66:	4603      	mov	r3, r0
 8004c68:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7fc f9b6 	bl	8000fe0 <__aeabi_fcmplt>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8004c84:	887a      	ldrh	r2, [r7, #2]
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	82fb      	strh	r3, [r7, #22]
 8004c8c:	e003      	b.n	8004c96 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8004c96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c98:	8afa      	ldrh	r2, [r7, #22]
 8004c9a:	88b9      	ldrh	r1, [r7, #4]
 8004c9c:	88f8      	ldrh	r0, [r7, #6]
 8004c9e:	f000 fd7f 	bl	80057a0 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8004ca2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ca4:	8afa      	ldrh	r2, [r7, #22]
 8004ca6:	8839      	ldrh	r1, [r7, #0]
 8004ca8:	88f8      	ldrh	r0, [r7, #6]
 8004caa:	f000 fd79 	bl	80057a0 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004cae:	7cbb      	ldrb	r3, [r7, #18]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8004cb4:	883a      	ldrh	r2, [r7, #0]
 8004cb6:	88bb      	ldrh	r3, [r7, #4]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	82bb      	strh	r3, [r7, #20]
 8004cbc:	e003      	b.n	8004cc6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004cbe:	88ba      	ldrh	r2, [r7, #4]
 8004cc0:	883b      	ldrh	r3, [r7, #0]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8004cc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cc8:	8aba      	ldrh	r2, [r7, #20]
 8004cca:	88b9      	ldrh	r1, [r7, #4]
 8004ccc:	88f8      	ldrh	r0, [r7, #6]
 8004cce:	f000 fdb5 	bl	800583c <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8004cd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cd4:	8aba      	ldrh	r2, [r7, #20]
 8004cd6:	88b9      	ldrh	r1, [r7, #4]
 8004cd8:	8878      	ldrh	r0, [r7, #2]
 8004cda:	f000 fdaf 	bl	800583c <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 8004cde:	8afb      	ldrh	r3, [r7, #22]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8004ce4:	8abb      	ldrh	r3, [r7, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8004cea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004cec:	8839      	ldrh	r1, [r7, #0]
 8004cee:	887b      	ldrh	r3, [r7, #2]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fc1f 	bl	8005534 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd90      	pop	{r4, r7, pc}

08004cfe <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004cfe:	b590      	push	{r4, r7, lr}
 8004d00:	b089      	sub	sp, #36	@ 0x24
 8004d02:	af02      	add	r7, sp, #8
 8004d04:	4604      	mov	r4, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	80fb      	strh	r3, [r7, #6]
 8004d10:	4603      	mov	r3, r0
 8004d12:	80bb      	strh	r3, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8004d38:	887a      	ldrh	r2, [r7, #2]
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da01      	bge.n	8004d4a <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8004d4e:	883a      	ldrh	r2, [r7, #0]
 8004d50:	88bb      	ldrh	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da01      	bge.n	8004d60 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	823b      	strh	r3, [r7, #16]
 8004d72:	e005      	b.n	8004d80 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	887b      	ldrh	r3, [r7, #2]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004d80:	7cbb      	ldrb	r3, [r7, #18]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8004d86:	883a      	ldrh	r2, [r7, #0]
 8004d88:	88bb      	ldrh	r3, [r7, #4]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8004d8e:	88bb      	ldrh	r3, [r7, #4]
 8004d90:	81fb      	strh	r3, [r7, #14]
 8004d92:	e005      	b.n	8004da0 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004d94:	88ba      	ldrh	r2, [r7, #4]
 8004d96:	883b      	ldrh	r3, [r7, #0]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8004d9c:	883b      	ldrh	r3, [r7, #0]
 8004d9e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8004da0:	8abc      	ldrh	r4, [r7, #20]
 8004da2:	8afa      	ldrh	r2, [r7, #22]
 8004da4:	89f9      	ldrh	r1, [r7, #14]
 8004da6:	8a38      	ldrh	r0, [r7, #16]
 8004da8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4623      	mov	r3, r4
 8004dae:	f000 fc8d 	bl	80056cc <_Z22ILI9341_Draw_Rectanglettttt>
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}
	...

08004dbc <_Z17ILI9341_Draw_Charchhttt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b089      	sub	sp, #36	@ 0x24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4623      	mov	r3, r4
 8004dcc:	71fb      	strb	r3, [r7, #7]
 8004dce:	4603      	mov	r3, r0
 8004dd0:	71bb      	strb	r3, [r7, #6]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	717b      	strb	r3, [r7, #5]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	2b1f      	cmp	r3, #31
 8004de2:	d802      	bhi.n	8004dea <_Z17ILI9341_Draw_Charchhttt+0x2e>
	{
		Character = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	71fb      	strb	r3, [r7, #7]
 8004de8:	e002      	b.n	8004df0 <_Z17ILI9341_Draw_Charchhttt+0x34>
	}
	else
	{
		function_char -= 32;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	3b20      	subs	r3, #32
 8004dee:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	753b      	strb	r3, [r7, #20]
 8004df4:	e012      	b.n	8004e1c <_Z17ILI9341_Draw_Charchhttt+0x60>
	{
		temp[k] = font[function_char][k];
 8004df6:	7dfa      	ldrb	r2, [r7, #23]
 8004df8:	7d38      	ldrb	r0, [r7, #20]
 8004dfa:	7d39      	ldrb	r1, [r7, #20]
 8004dfc:	4c3b      	ldr	r4, [pc, #236]	@ (8004eec <_Z17ILI9341_Draw_Charchhttt+0x130>)
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	4423      	add	r3, r4
 8004e08:	4403      	add	r3, r0
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	f101 0318 	add.w	r3, r1, #24
 8004e10:	443b      	add	r3, r7
 8004e12:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004e16:	7d3b      	ldrb	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	753b      	strb	r3, [r7, #20]
 8004e1c:	7d3b      	ldrb	r3, [r7, #20]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d9e9      	bls.n	8004df6 <_Z17ILI9341_Draw_Charchhttt+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8004e22:	79bb      	ldrb	r3, [r7, #6]
 8004e24:	b298      	uxth	r0, r3
 8004e26:	797b      	ldrb	r3, [r7, #5]
 8004e28:	b299      	uxth	r1, r3
 8004e2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	0052      	lsls	r2, r2, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	b29c      	uxth	r4, r3
 8004e3c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4623      	mov	r3, r4
 8004e42:	f000 fc43 	bl	80056cc <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	757b      	strb	r3, [r7, #21]
 8004e4a:	e047      	b.n	8004edc <_Z17ILI9341_Draw_Charchhttt+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	75bb      	strb	r3, [r7, #22]
 8004e50:	e03e      	b.n	8004ed0 <_Z17ILI9341_Draw_Charchhttt+0x114>
		{
			if (temp[j] & (1 << i))
 8004e52:	7d7b      	ldrb	r3, [r7, #21]
 8004e54:	3318      	adds	r3, #24
 8004e56:	443b      	add	r3, r7
 8004e58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	7dbb      	ldrb	r3, [r7, #22]
 8004e60:	fa42 f303 	asr.w	r3, r2, r3
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02e      	beq.n	8004eca <_Z17ILI9341_Draw_Charchhttt+0x10e>
			{
				if (Size == 1)
 8004e6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d110      	bne.n	8004e94 <_Z17ILI9341_Draw_Charchhttt+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8004e72:	79bb      	ldrb	r3, [r7, #6]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	7d7b      	ldrb	r3, [r7, #21]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b298      	uxth	r0, r3
 8004e7e:	797b      	ldrb	r3, [r7, #5]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	7dbb      	ldrb	r3, [r7, #22]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f000 fb51 	bl	8005534 <_Z18ILI9341_Draw_Pixelttt>
 8004e92:	e01a      	b.n	8004eca <_Z17ILI9341_Draw_Charchhttt+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	7d7b      	ldrb	r3, [r7, #21]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b298      	uxth	r0, r3
 8004ea8:	797b      	ldrb	r3, [r7, #5]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	7dbb      	ldrb	r3, [r7, #22]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	b299      	uxth	r1, r3
 8004ebc:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8004ebe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004ec0:	887b      	ldrh	r3, [r7, #2]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	f000 fc01 	bl	80056cc <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004eca:	7dbb      	ldrb	r3, [r7, #22]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	75bb      	strb	r3, [r7, #22]
 8004ed0:	7dbb      	ldrb	r3, [r7, #22]
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	d9bd      	bls.n	8004e52 <_Z17ILI9341_Draw_Charchhttt+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 8004ed6:	7d7b      	ldrb	r3, [r7, #21]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	757b      	strb	r3, [r7, #21]
 8004edc:	7d7b      	ldrb	r3, [r7, #21]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d9b4      	bls.n	8004e4c <_Z17ILI9341_Draw_Charchhttt+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd90      	pop	{r4, r7, pc}
 8004eec:	0800d8f8 	.word	0x0800d8f8

08004ef0 <_Z17ILI9341_Draw_TextPKchhttt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	70fb      	strb	r3, [r7, #3]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70bb      	strb	r3, [r7, #2]
 8004f06:	4613      	mov	r3, r2
 8004f08:	803b      	strh	r3, [r7, #0]
	while (*Text)
 8004f0a:	e017      	b.n	8004f3c <_Z17ILI9341_Draw_TextPKchhttt+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	7818      	ldrb	r0, [r3, #0]
 8004f14:	883c      	ldrh	r4, [r7, #0]
 8004f16:	78ba      	ldrb	r2, [r7, #2]
 8004f18:	78f9      	ldrb	r1, [r7, #3]
 8004f1a:	8bbb      	ldrh	r3, [r7, #28]
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	8b3b      	ldrh	r3, [r7, #24]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4623      	mov	r3, r4
 8004f24:	f7ff ff4a 	bl	8004dbc <_Z17ILI9341_Draw_Charchhttt>
		X += CHAR_WIDTH * Size;
 8004f28:	8b3b      	ldrh	r3, [r7, #24]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	0052      	lsls	r2, r2, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	4413      	add	r3, r2
 8004f3a:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e3      	bne.n	8004f0c <_Z17ILI9341_Draw_TextPKchhttt+0x1c>
	}
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}
	...

08004f50 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8004f54:	f002 f84a 	bl	8006fec <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8004f58:	f001 fc68 	bl	800682c <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4802      	ldr	r0, [pc, #8]	@ (8004f6c <_Z16ILI9341_SPI_Initv+0x1c>)
 8004f62:	f003 f99c 	bl	800829e <HAL_GPIO_WritePin>
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40010c00 	.word	0x40010c00

08004f70 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004f7a:	1df9      	adds	r1, r7, #7
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4803      	ldr	r0, [pc, #12]	@ (8004f90 <_Z16ILI9341_SPI_Sendh+0x20>)
 8004f82:	f003 ff07 	bl	8008d94 <HAL_SPI_Transmit>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	200003b8 	.word	0x200003b8

08004f94 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	480a      	ldr	r0, [pc, #40]	@ (8004fcc <_Z21ILI9341_Write_Commandh+0x38>)
 8004fa4:	f003 f97b 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2102      	movs	r1, #2
 8004fac:	4807      	ldr	r0, [pc, #28]	@ (8004fcc <_Z21ILI9341_Write_Commandh+0x38>)
 8004fae:	f003 f976 	bl	800829e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ffdb 	bl	8004f70 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004fba:	2201      	movs	r2, #1
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4803      	ldr	r0, [pc, #12]	@ (8004fcc <_Z21ILI9341_Write_Commandh+0x38>)
 8004fc0:	f003 f96d 	bl	800829e <HAL_GPIO_WritePin>
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40010c00 	.word	0x40010c00

08004fd0 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2102      	movs	r1, #2
 8004fde:	480a      	ldr	r0, [pc, #40]	@ (8005008 <_Z18ILI9341_Write_Datah+0x38>)
 8004fe0:	f003 f95d 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4807      	ldr	r0, [pc, #28]	@ (8005008 <_Z18ILI9341_Write_Datah+0x38>)
 8004fea:	f003 f958 	bl	800829e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ffbd 	bl	8004f70 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4803      	ldr	r0, [pc, #12]	@ (8005008 <_Z18ILI9341_Write_Datah+0x38>)
 8004ffc:	f003 f94f 	bl	800829e <HAL_GPIO_WritePin>
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40010c00 	.word	0x40010c00

0800500c <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	4623      	mov	r3, r4
 800501c:	80fb      	strh	r3, [r7, #6]
 800501e:	4603      	mov	r3, r0
 8005020:	80bb      	strh	r3, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	807b      	strh	r3, [r7, #2]
 8005026:	4613      	mov	r3, r2
 8005028:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 800502a:	202a      	movs	r0, #42	@ 0x2a
 800502c:	f7ff ffb2 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29b      	uxth	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffc9 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ffc4 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	b29b      	uxth	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ffbd 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff ffb8 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8005060:	202b      	movs	r0, #43	@ 0x2b
 8005062:	f7ff ff97 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8005066:	88bb      	ldrh	r3, [r7, #4]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	b29b      	uxth	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ffae 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8005074:	88bb      	ldrh	r3, [r7, #4]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ffa9 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 800507e:	883b      	ldrh	r3, [r7, #0]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	b29b      	uxth	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff ffa2 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 800508c:	883b      	ldrh	r3, [r7, #0]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff ff9d 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8005096:	202c      	movs	r0, #44	@ 0x2c
 8005098:	f7ff ff7c 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}

080050a4 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80050a8:	2201      	movs	r2, #1
 80050aa:	2120      	movs	r1, #32
 80050ac:	480a      	ldr	r0, [pc, #40]	@ (80050d8 <_Z13ILI9341_Resetv+0x34>)
 80050ae:	f003 f8f6 	bl	800829e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80050b2:	20c8      	movs	r0, #200	@ 0xc8
 80050b4:	f002 fb00 	bl	80076b8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2101      	movs	r1, #1
 80050bc:	4806      	ldr	r0, [pc, #24]	@ (80050d8 <_Z13ILI9341_Resetv+0x34>)
 80050be:	f003 f8ee 	bl	800829e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80050c2:	20c8      	movs	r0, #200	@ 0xc8
 80050c4:	f002 faf8 	bl	80076b8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80050c8:	2201      	movs	r2, #1
 80050ca:	2120      	movs	r1, #32
 80050cc:	4802      	ldr	r0, [pc, #8]	@ (80050d8 <_Z13ILI9341_Resetv+0x34>)
 80050ce:	f003 f8e6 	bl	800829e <HAL_GPIO_WritePin>
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40010c00 	.word	0x40010c00

080050dc <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80050ea:	2036      	movs	r0, #54	@ 0x36
 80050ec:	f7ff ff52 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f002 fae1 	bl	80076b8 <HAL_Delay>

	switch (screen_rotation)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d837      	bhi.n	800516c <_Z20ILI9341_Set_Rotationh+0x90>
 80050fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005104 <_Z20ILI9341_Set_Rotationh+0x28>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005115 	.word	0x08005115
 8005108:	0800512b 	.word	0x0800512b
 800510c:	08005141 	.word	0x08005141
 8005110:	08005157 	.word	0x08005157
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8005114:	2048      	movs	r0, #72	@ 0x48
 8005116:	f7ff ff5b 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 800511a:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <_Z20ILI9341_Set_Rotationh+0x9c>)
 800511c:	22f0      	movs	r2, #240	@ 0xf0
 800511e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8005120:	4b16      	ldr	r3, [pc, #88]	@ (800517c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005122:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005126:	801a      	strh	r2, [r3, #0]
		break;
 8005128:	e021      	b.n	800516e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 800512a:	2028      	movs	r0, #40	@ 0x28
 800512c:	f7ff ff50 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8005130:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005132:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005136:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005138:	4b10      	ldr	r3, [pc, #64]	@ (800517c <_Z20ILI9341_Set_Rotationh+0xa0>)
 800513a:	22f0      	movs	r2, #240	@ 0xf0
 800513c:	801a      	strh	r2, [r3, #0]
		break;
 800513e:	e016      	b.n	800516e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8005140:	2088      	movs	r0, #136	@ 0x88
 8005142:	f7ff ff45 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8005146:	4b0c      	ldr	r3, [pc, #48]	@ (8005178 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005148:	22f0      	movs	r2, #240	@ 0xf0
 800514a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <_Z20ILI9341_Set_Rotationh+0xa0>)
 800514e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005152:	801a      	strh	r2, [r3, #0]
		break;
 8005154:	e00b      	b.n	800516e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8005156:	20e8      	movs	r0, #232	@ 0xe8
 8005158:	f7ff ff3a 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <_Z20ILI9341_Set_Rotationh+0x9c>)
 800515e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005162:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005166:	22f0      	movs	r2, #240	@ 0xf0
 8005168:	801a      	strh	r2, [r3, #0]
		break;
 800516a:	e000      	b.n	800516e <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 800516c:	bf00      	nop
	}
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000002 	.word	0x20000002
 800517c:	20000000 	.word	0x20000000

08005180 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005184:	2201      	movs	r2, #1
 8005186:	2120      	movs	r1, #32
 8005188:	4802      	ldr	r0, [pc, #8]	@ (8005194 <_Z14ILI9341_Enablev+0x14>)
 800518a:	f003 f888 	bl	800829e <HAL_GPIO_WritePin>
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40010c00 	.word	0x40010c00

08005198 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 800519c:	f7ff fff0 	bl	8005180 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 80051a0:	f7ff fed6 	bl	8004f50 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 80051a4:	f7ff ff7e 	bl	80050a4 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7ff fef3 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 80051ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051b2:	f002 fa81 	bl	80076b8 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 80051b6:	20cb      	movs	r0, #203	@ 0xcb
 80051b8:	f7ff feec 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 80051bc:	2039      	movs	r0, #57	@ 0x39
 80051be:	f7ff ff07 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 80051c2:	202c      	movs	r0, #44	@ 0x2c
 80051c4:	f7ff ff04 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7ff ff01 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 80051ce:	2034      	movs	r0, #52	@ 0x34
 80051d0:	f7ff fefe 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 80051d4:	2002      	movs	r0, #2
 80051d6:	f7ff fefb 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80051da:	20cf      	movs	r0, #207	@ 0xcf
 80051dc:	f7ff feda 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80051e0:	2000      	movs	r0, #0
 80051e2:	f7ff fef5 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 80051e6:	20c1      	movs	r0, #193	@ 0xc1
 80051e8:	f7ff fef2 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 80051ec:	2030      	movs	r0, #48	@ 0x30
 80051ee:	f7ff feef 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80051f2:	20e8      	movs	r0, #232	@ 0xe8
 80051f4:	f7ff fece 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 80051f8:	2085      	movs	r0, #133	@ 0x85
 80051fa:	f7ff fee9 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80051fe:	2000      	movs	r0, #0
 8005200:	f7ff fee6 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8005204:	2078      	movs	r0, #120	@ 0x78
 8005206:	f7ff fee3 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800520a:	20ea      	movs	r0, #234	@ 0xea
 800520c:	f7ff fec2 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005210:	2000      	movs	r0, #0
 8005212:	f7ff fedd 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005216:	2000      	movs	r0, #0
 8005218:	f7ff feda 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 800521c:	20ed      	movs	r0, #237	@ 0xed
 800521e:	f7ff feb9 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8005222:	2064      	movs	r0, #100	@ 0x64
 8005224:	f7ff fed4 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005228:	2003      	movs	r0, #3
 800522a:	f7ff fed1 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 800522e:	2012      	movs	r0, #18
 8005230:	f7ff fece 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8005234:	2081      	movs	r0, #129	@ 0x81
 8005236:	f7ff fecb 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800523a:	20f7      	movs	r0, #247	@ 0xf7
 800523c:	f7ff feaa 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8005240:	2020      	movs	r0, #32
 8005242:	f7ff fec5 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8005246:	20c0      	movs	r0, #192	@ 0xc0
 8005248:	f7ff fea4 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 800524c:	2023      	movs	r0, #35	@ 0x23
 800524e:	f7ff febf 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8005252:	20c1      	movs	r0, #193	@ 0xc1
 8005254:	f7ff fe9e 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8005258:	2010      	movs	r0, #16
 800525a:	f7ff feb9 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 800525e:	20c5      	movs	r0, #197	@ 0xc5
 8005260:	f7ff fe98 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8005264:	203e      	movs	r0, #62	@ 0x3e
 8005266:	f7ff feb3 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 800526a:	2028      	movs	r0, #40	@ 0x28
 800526c:	f7ff feb0 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8005270:	20c7      	movs	r0, #199	@ 0xc7
 8005272:	f7ff fe8f 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8005276:	2086      	movs	r0, #134	@ 0x86
 8005278:	f7ff feaa 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 800527c:	2036      	movs	r0, #54	@ 0x36
 800527e:	f7ff fe89 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8005282:	2048      	movs	r0, #72	@ 0x48
 8005284:	f7ff fea4 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8005288:	203a      	movs	r0, #58	@ 0x3a
 800528a:	f7ff fe83 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 800528e:	2055      	movs	r0, #85	@ 0x55
 8005290:	f7ff fe9e 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8005294:	20b1      	movs	r0, #177	@ 0xb1
 8005296:	f7ff fe7d 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 800529a:	2000      	movs	r0, #0
 800529c:	f7ff fe98 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 80052a0:	2018      	movs	r0, #24
 80052a2:	f7ff fe95 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 80052a6:	20b6      	movs	r0, #182	@ 0xb6
 80052a8:	f7ff fe74 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 80052ac:	2008      	movs	r0, #8
 80052ae:	f7ff fe8f 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 80052b2:	2082      	movs	r0, #130	@ 0x82
 80052b4:	f7ff fe8c 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 80052b8:	2027      	movs	r0, #39	@ 0x27
 80052ba:	f7ff fe89 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 80052be:	20f2      	movs	r0, #242	@ 0xf2
 80052c0:	f7ff fe68 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff fe83 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80052ca:	2026      	movs	r0, #38	@ 0x26
 80052cc:	f7ff fe62 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f7ff fe7d 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80052d6:	20e0      	movs	r0, #224	@ 0xe0
 80052d8:	f7ff fe5c 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 80052dc:	200f      	movs	r0, #15
 80052de:	f7ff fe77 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80052e2:	2031      	movs	r0, #49	@ 0x31
 80052e4:	f7ff fe74 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 80052e8:	202b      	movs	r0, #43	@ 0x2b
 80052ea:	f7ff fe71 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 80052ee:	200c      	movs	r0, #12
 80052f0:	f7ff fe6e 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80052f4:	200e      	movs	r0, #14
 80052f6:	f7ff fe6b 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 80052fa:	2008      	movs	r0, #8
 80052fc:	f7ff fe68 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8005300:	204e      	movs	r0, #78	@ 0x4e
 8005302:	f7ff fe65 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8005306:	20f1      	movs	r0, #241	@ 0xf1
 8005308:	f7ff fe62 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 800530c:	2037      	movs	r0, #55	@ 0x37
 800530e:	f7ff fe5f 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8005312:	2007      	movs	r0, #7
 8005314:	f7ff fe5c 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8005318:	2010      	movs	r0, #16
 800531a:	f7ff fe59 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 800531e:	2003      	movs	r0, #3
 8005320:	f7ff fe56 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005324:	200e      	movs	r0, #14
 8005326:	f7ff fe53 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 800532a:	2009      	movs	r0, #9
 800532c:	f7ff fe50 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005330:	2000      	movs	r0, #0
 8005332:	f7ff fe4d 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8005336:	20e1      	movs	r0, #225	@ 0xe1
 8005338:	f7ff fe2c 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 800533c:	2000      	movs	r0, #0
 800533e:	f7ff fe47 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005342:	200e      	movs	r0, #14
 8005344:	f7ff fe44 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8005348:	2014      	movs	r0, #20
 800534a:	f7ff fe41 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 800534e:	2003      	movs	r0, #3
 8005350:	f7ff fe3e 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8005354:	2011      	movs	r0, #17
 8005356:	f7ff fe3b 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 800535a:	2007      	movs	r0, #7
 800535c:	f7ff fe38 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005360:	2031      	movs	r0, #49	@ 0x31
 8005362:	f7ff fe35 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005366:	20c1      	movs	r0, #193	@ 0xc1
 8005368:	f7ff fe32 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 800536c:	2048      	movs	r0, #72	@ 0x48
 800536e:	f7ff fe2f 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8005372:	2008      	movs	r0, #8
 8005374:	f7ff fe2c 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005378:	200f      	movs	r0, #15
 800537a:	f7ff fe29 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 800537e:	200c      	movs	r0, #12
 8005380:	f7ff fe26 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005384:	2031      	movs	r0, #49	@ 0x31
 8005386:	f7ff fe23 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 800538a:	2036      	movs	r0, #54	@ 0x36
 800538c:	f7ff fe20 	bl	8004fd0 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005390:	200f      	movs	r0, #15
 8005392:	f7ff fe1d 	bl	8004fd0 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8005396:	2011      	movs	r0, #17
 8005398:	f7ff fdfc 	bl	8004f94 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 800539c:	2078      	movs	r0, #120	@ 0x78
 800539e:	f002 f98b 	bl	80076b8 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 80053a2:	2029      	movs	r0, #41	@ 0x29
 80053a4:	f7ff fdf6 	bl	8004f94 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7ff fe97 	bl	80050dc <_Z20ILI9341_Set_Rotationh>
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80053b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053b8:	b08d      	sub	sp, #52	@ 0x34
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	4603      	mov	r3, r0
 80053be:	6039      	str	r1, [r7, #0]
 80053c0:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 80053c2:	466b      	mov	r3, sp
 80053c4:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80053d2:	d202      	bcs.n	80053da <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d8:	e002      	b.n	80053e0 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 80053da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80053de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80053e0:	2201      	movs	r2, #1
 80053e2:	2102      	movs	r1, #2
 80053e4:	483e      	ldr	r0, [pc, #248]	@ (80054e0 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80053e6:	f002 ff5a 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80053ea:	2200      	movs	r2, #0
 80053ec:	2101      	movs	r1, #1
 80053ee:	483c      	ldr	r0, [pc, #240]	@ (80054e0 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80053f0:	f002 ff55 	bl	800829e <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 80053fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005400:	460b      	mov	r3, r1
 8005402:	3b01      	subs	r3, #1
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	2300      	movs	r3, #0
 8005408:	4688      	mov	r8, r1
 800540a:	4699      	mov	r9, r3
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005420:	2300      	movs	r3, #0
 8005422:	460c      	mov	r4, r1
 8005424:	461d      	mov	r5, r3
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	00eb      	lsls	r3, r5, #3
 8005430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005434:	00e2      	lsls	r2, r4, #3
 8005436:	1dcb      	adds	r3, r1, #7
 8005438:	08db      	lsrs	r3, r3, #3
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	ebad 0d03 	sub.w	sp, sp, r3
 8005440:	466b      	mov	r3, sp
 8005442:	3300      	adds	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005446:	2300      	movs	r3, #0
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800544a:	e00e      	b.n	800546a <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	4413      	add	r3, r2
 8005452:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005456:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	3301      	adds	r3, #1
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	b2d1      	uxtb	r1, r2
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	3302      	adds	r3, #2
 8005468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800546a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546e:	429a      	cmp	r2, r3
 8005470:	d3ec      	bcc.n	800544c <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005486:	fbb3 f2f2 	udiv	r2, r3, r2
 800548a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800548c:	fb01 f202 	mul.w	r2, r1, r2
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
 800549e:	e009      	b.n	80054b4 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	230a      	movs	r3, #10
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	480e      	ldr	r0, [pc, #56]	@ (80054e4 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 80054aa:	f003 fc73 	bl	8008d94 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	3301      	adds	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3f1      	bcc.n	80054a0 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	230a      	movs	r3, #10
 80054c2:	69b9      	ldr	r1, [r7, #24]
 80054c4:	4807      	ldr	r0, [pc, #28]	@ (80054e4 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 80054c6:	f003 fc65 	bl	8008d94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80054ca:	2201      	movs	r2, #1
 80054cc:	2101      	movs	r1, #1
 80054ce:	4804      	ldr	r0, [pc, #16]	@ (80054e0 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80054d0:	f002 fee5 	bl	800829e <HAL_GPIO_WritePin>
 80054d4:	46b5      	mov	sp, r6
}
 80054d6:	bf00      	nop
 80054d8:	3734      	adds	r7, #52	@ 0x34
 80054da:	46bd      	mov	sp, r7
 80054dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054e0:	40010c00 	.word	0x40010c00
 80054e4:	200003b8 	.word	0x200003b8

080054e8 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80054f2:	4b0e      	ldr	r3, [pc, #56]	@ (800552c <_Z19ILI9341_Fill_Screent+0x44>)
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <_Z19ILI9341_Fill_Screent+0x48>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2100      	movs	r1, #0
 8005500:	2000      	movs	r0, #0
 8005502:	f7ff fd83 	bl	800500c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <_Z19ILI9341_Fill_Screent+0x44>)
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	4b08      	ldr	r3, [pc, #32]	@ (8005530 <_Z19ILI9341_Fill_Screent+0x48>)
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	fb02 f303 	mul.w	r3, r2, r3
 8005518:	461a      	mov	r2, r3
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff ff48 	bl	80053b4 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000002 	.word	0x20000002
 8005530:	20000000 	.word	0x20000000

08005534 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	80fb      	strh	r3, [r7, #6]
 800553e:	460b      	mov	r3, r1
 8005540:	80bb      	strh	r3, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005546:	4b5d      	ldr	r3, [pc, #372]	@ (80056bc <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	429a      	cmp	r2, r3
 8005550:	d205      	bcs.n	800555e <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8005552:	4b5b      	ldr	r3, [pc, #364]	@ (80056c0 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	88ba      	ldrh	r2, [r7, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d301      	bcc.n	8005562 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 80a5 	bne.w	80056b4 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800556a:	2200      	movs	r2, #0
 800556c:	2102      	movs	r1, #2
 800556e:	4855      	ldr	r0, [pc, #340]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005570:	f002 fe95 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005574:	2200      	movs	r2, #0
 8005576:	2101      	movs	r1, #1
 8005578:	4852      	ldr	r0, [pc, #328]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800557a:	f002 fe90 	bl	800829e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 800557e:	202a      	movs	r0, #42	@ 0x2a
 8005580:	f7ff fcf6 	bl	8004f70 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005584:	2201      	movs	r2, #1
 8005586:	2102      	movs	r1, #2
 8005588:	484e      	ldr	r0, [pc, #312]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800558a:	f002 fe88 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800558e:	2201      	movs	r2, #1
 8005590:	2101      	movs	r1, #1
 8005592:	484c      	ldr	r0, [pc, #304]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005594:	f002 fe83 	bl	800829e <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005598:	2200      	movs	r2, #0
 800559a:	2101      	movs	r1, #1
 800559c:	4849      	ldr	r0, [pc, #292]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800559e:	f002 fe7e 	bl	800829e <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	753b      	strb	r3, [r7, #20]
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	757b      	strb	r3, [r7, #21]
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	3301      	adds	r3, #1
 80055b6:	121b      	asrs	r3, r3, #8
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	75bb      	strb	r3, [r7, #22]
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	3301      	adds	r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80055c6:	f107 0114 	add.w	r1, r7, #20
 80055ca:	2301      	movs	r3, #1
 80055cc:	2204      	movs	r2, #4
 80055ce:	483e      	ldr	r0, [pc, #248]	@ (80056c8 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80055d0:	f003 fbe0 	bl	8008d94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80055d4:	2201      	movs	r2, #1
 80055d6:	2101      	movs	r1, #1
 80055d8:	483a      	ldr	r0, [pc, #232]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80055da:	f002 fe60 	bl	800829e <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80055de:	2200      	movs	r2, #0
 80055e0:	2102      	movs	r1, #2
 80055e2:	4838      	ldr	r0, [pc, #224]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80055e4:	f002 fe5b 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80055e8:	2200      	movs	r2, #0
 80055ea:	2101      	movs	r1, #1
 80055ec:	4835      	ldr	r0, [pc, #212]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80055ee:	f002 fe56 	bl	800829e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 80055f2:	202b      	movs	r0, #43	@ 0x2b
 80055f4:	f7ff fcbc 	bl	8004f70 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80055f8:	2201      	movs	r2, #1
 80055fa:	2102      	movs	r1, #2
 80055fc:	4831      	ldr	r0, [pc, #196]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80055fe:	f002 fe4e 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005602:	2201      	movs	r2, #1
 8005604:	2101      	movs	r1, #1
 8005606:	482f      	ldr	r0, [pc, #188]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005608:	f002 fe49 	bl	800829e <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800560c:	2200      	movs	r2, #0
 800560e:	2101      	movs	r1, #1
 8005610:	482c      	ldr	r0, [pc, #176]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005612:	f002 fe44 	bl	800829e <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8005616:	88bb      	ldrh	r3, [r7, #4]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	b29b      	uxth	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	743b      	strb	r3, [r7, #16]
 8005620:	88bb      	ldrh	r3, [r7, #4]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	747b      	strb	r3, [r7, #17]
 8005626:	88bb      	ldrh	r3, [r7, #4]
 8005628:	3301      	adds	r3, #1
 800562a:	121b      	asrs	r3, r3, #8
 800562c:	b2db      	uxtb	r3, r3
 800562e:	74bb      	strb	r3, [r7, #18]
 8005630:	88bb      	ldrh	r3, [r7, #4]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3301      	adds	r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800563a:	f107 0110 	add.w	r1, r7, #16
 800563e:	2301      	movs	r3, #1
 8005640:	2204      	movs	r2, #4
 8005642:	4821      	ldr	r0, [pc, #132]	@ (80056c8 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005644:	f003 fba6 	bl	8008d94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005648:	2201      	movs	r2, #1
 800564a:	2101      	movs	r1, #1
 800564c:	481d      	ldr	r0, [pc, #116]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800564e:	f002 fe26 	bl	800829e <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005652:	2200      	movs	r2, #0
 8005654:	2102      	movs	r1, #2
 8005656:	481b      	ldr	r0, [pc, #108]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005658:	f002 fe21 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800565c:	2200      	movs	r2, #0
 800565e:	2101      	movs	r1, #1
 8005660:	4818      	ldr	r0, [pc, #96]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005662:	f002 fe1c 	bl	800829e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8005666:	202c      	movs	r0, #44	@ 0x2c
 8005668:	f7ff fc82 	bl	8004f70 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800566c:	2201      	movs	r2, #1
 800566e:	2102      	movs	r1, #2
 8005670:	4814      	ldr	r0, [pc, #80]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005672:	f002 fe14 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005676:	2201      	movs	r2, #1
 8005678:	2101      	movs	r1, #1
 800567a:	4812      	ldr	r0, [pc, #72]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800567c:	f002 fe0f 	bl	800829e <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005680:	2200      	movs	r2, #0
 8005682:	2101      	movs	r1, #1
 8005684:	480f      	ldr	r0, [pc, #60]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005686:	f002 fe0a 	bl	800829e <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
	{ Colour >> 8, Colour };
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	b29b      	uxth	r3, r3
 8005690:	b2db      	uxtb	r3, r3
 8005692:	733b      	strb	r3, [r7, #12]
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800569a:	f107 010c 	add.w	r1, r7, #12
 800569e:	2301      	movs	r3, #1
 80056a0:	2202      	movs	r2, #2
 80056a2:	4809      	ldr	r0, [pc, #36]	@ (80056c8 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80056a4:	f003 fb76 	bl	8008d94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80056a8:	2201      	movs	r2, #1
 80056aa:	2101      	movs	r1, #1
 80056ac:	4805      	ldr	r0, [pc, #20]	@ (80056c4 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056ae:	f002 fdf6 	bl	800829e <HAL_GPIO_WritePin>
 80056b2:	e000      	b.n	80056b6 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 80056b4:	bf00      	nop

}
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000002 	.word	0x20000002
 80056c0:	20000000 	.word	0x20000000
 80056c4:	40010c00 	.word	0x40010c00
 80056c8:	200003b8 	.word	0x200003b8

080056cc <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4623      	mov	r3, r4
 80056dc:	80fb      	strh	r3, [r7, #6]
 80056de:	4603      	mov	r3, r0
 80056e0:	80bb      	strh	r3, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	807b      	strh	r3, [r7, #2]
 80056e6:	4613      	mov	r3, r2
 80056e8:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80056ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005798 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d205      	bcs.n	8005702 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 80056f6:	4b29      	ldr	r3, [pc, #164]	@ (800579c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	88ba      	ldrh	r2, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d301      	bcc.n	8005706 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d141      	bne.n	8005790 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	4413      	add	r3, r2
 8005712:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005714:	8812      	ldrh	r2, [r2, #0]
 8005716:	b292      	uxth	r2, r2
 8005718:	4293      	cmp	r3, r2
 800571a:	bfcc      	ite	gt
 800571c:	2301      	movgt	r3, #1
 800571e:	2300      	movle	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8005726:	4b1c      	ldr	r3, [pc, #112]	@ (8005798 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29a      	uxth	r2, r3
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8005732:	88ba      	ldrh	r2, [r7, #4]
 8005734:	883b      	ldrh	r3, [r7, #0]
 8005736:	4413      	add	r3, r2
 8005738:	4a18      	ldr	r2, [pc, #96]	@ (800579c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	b292      	uxth	r2, r2
 800573e:	4293      	cmp	r3, r2
 8005740:	bfcc      	ite	gt
 8005742:	2301      	movgt	r3, #1
 8005744:	2300      	movle	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 800574c:	4b13      	ldr	r3, [pc, #76]	@ (800579c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29a      	uxth	r2, r3
 8005752:	88bb      	ldrh	r3, [r7, #4]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	4413      	add	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29c      	uxth	r4, r3
 8005764:	88ba      	ldrh	r2, [r7, #4]
 8005766:	883b      	ldrh	r3, [r7, #0]
 8005768:	4413      	add	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	88b9      	ldrh	r1, [r7, #4]
 8005772:	88f8      	ldrh	r0, [r7, #6]
 8005774:	4622      	mov	r2, r4
 8005776:	f7ff fc49 	bl	800500c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800577a:	883b      	ldrh	r3, [r7, #0]
 800577c:	887a      	ldrh	r2, [r7, #2]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	461a      	mov	r2, r3
 8005784:	8b3b      	ldrh	r3, [r7, #24]
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fe13 	bl	80053b4 <_Z25ILI9341_Draw_Colour_Bursttm>
 800578e:	e000      	b.n	8005792 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 8005790:	bf00      	nop
}
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}
 8005798:	20000002 	.word	0x20000002
 800579c:	20000000 	.word	0x20000000

080057a0 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	80fb      	strh	r3, [r7, #6]
 80057b2:	4603      	mov	r3, r0
 80057b4:	80bb      	strh	r3, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	807b      	strh	r3, [r7, #2]
 80057ba:	4613      	mov	r3, r2
 80057bc:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80057be:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d205      	bcs.n	80057d6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 80057ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	88ba      	ldrh	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d301      	bcc.n	80057da <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d124      	bne.n	800582a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	887b      	ldrh	r3, [r7, #2]
 80057e4:	4413      	add	r3, r2
 80057e6:	4a13      	ldr	r2, [pc, #76]	@ (8005834 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80057e8:	8812      	ldrh	r2, [r2, #0]
 80057ea:	b292      	uxth	r2, r2
 80057ec:	4293      	cmp	r3, r2
 80057ee:	bfcc      	ite	gt
 80057f0:	2301      	movgt	r3, #1
 80057f2:	2300      	movle	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	887b      	ldrh	r3, [r7, #2]
 800580a:	4413      	add	r3, r2
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	88bb      	ldrh	r3, [r7, #4]
 8005814:	88b9      	ldrh	r1, [r7, #4]
 8005816:	88f8      	ldrh	r0, [r7, #6]
 8005818:	f7ff fbf8 	bl	800500c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 800581c:	887a      	ldrh	r2, [r7, #2]
 800581e:	883b      	ldrh	r3, [r7, #0]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fdc6 	bl	80053b4 <_Z25ILI9341_Draw_Colour_Bursttm>
 8005828:	e000      	b.n	800582c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 800582a:	bf00      	nop
}
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	bd90      	pop	{r4, r7, pc}
 8005832:	bf00      	nop
 8005834:	20000002 	.word	0x20000002
 8005838:	20000000 	.word	0x20000000

0800583c <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	4611      	mov	r1, r2
 8005848:	461a      	mov	r2, r3
 800584a:	4623      	mov	r3, r4
 800584c:	80fb      	strh	r3, [r7, #6]
 800584e:	4603      	mov	r3, r0
 8005850:	80bb      	strh	r3, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	807b      	strh	r3, [r7, #2]
 8005856:	4613      	mov	r3, r2
 8005858:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800585a:	4b1d      	ldr	r3, [pc, #116]	@ (80058d0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	429a      	cmp	r2, r3
 8005864:	d205      	bcs.n	8005872 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8005866:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	88ba      	ldrh	r2, [r7, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	d301      	bcc.n	8005876 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d124      	bne.n	80058c6 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800587c:	88ba      	ldrh	r2, [r7, #4]
 800587e:	887b      	ldrh	r3, [r7, #2]
 8005880:	4413      	add	r3, r2
 8005882:	4a14      	ldr	r2, [pc, #80]	@ (80058d4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005884:	8812      	ldrh	r2, [r2, #0]
 8005886:	b292      	uxth	r2, r2
 8005888:	4293      	cmp	r3, r2
 800588a:	bfcc      	ite	gt
 800588c:	2301      	movgt	r3, #1
 800588e:	2300      	movle	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8005896:	4b0f      	ldr	r3, [pc, #60]	@ (80058d4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29a      	uxth	r2, r3
 800589c:	88bb      	ldrh	r3, [r7, #4]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 80058a2:	88ba      	ldrh	r2, [r7, #4]
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	4413      	add	r3, r2
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	88b9      	ldrh	r1, [r7, #4]
 80058b2:	88f8      	ldrh	r0, [r7, #6]
 80058b4:	f7ff fbaa 	bl	800500c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 80058b8:	887a      	ldrh	r2, [r7, #2]
 80058ba:	883b      	ldrh	r3, [r7, #0]
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fd78 	bl	80053b4 <_Z25ILI9341_Draw_Colour_Bursttm>
 80058c4:	e000      	b.n	80058c8 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 80058c6:	bf00      	nop
}
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000002 	.word	0x20000002
 80058d4:	20000000 	.word	0x20000000

080058d8 <_ZN23CManejadorControlesBaseC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorControlesBase.hpp>

CManejadorControlesBase::CManejadorControlesBase()
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	4a04      	ldr	r2, [pc, #16]	@ (80058f4 <_ZN23CManejadorControlesBaseC1Ev+0x1c>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	0800db40 	.word	0x0800db40

080058f8 <_ZN23CManejadorControlesBaseD1Ev>:

CManejadorControlesBase::~CManejadorControlesBase()
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	4a04      	ldr	r2, [pc, #16]	@ (8005914 <_ZN23CManejadorControlesBaseD1Ev+0x1c>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	0800db40 	.word	0x0800db40

08005918 <_ZN23CManejadorControlesBaseD0Ev>:
CManejadorControlesBase::~CManejadorControlesBase()
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
}
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ffe9 	bl	80058f8 <_ZN23CManejadorControlesBaseD1Ev>
 8005926:	2104      	movs	r1, #4
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f004 fd53 	bl	800a3d4 <_ZdlPvj>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <_ZN23CManejadorControlesBase22OnTemperaturaRealEventEi>:

void CManejadorControlesBase::OnTemperaturaRealEvent(int temperatura)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]

}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <_ZN23CManejadorControlesBase16OnNivelAireEventEi>:
void CManejadorControlesBase::OnNivelAireEvent(int aire)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]

}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <_ZN23CManejadorControlesBase20OnBotonUnoClickEventEi>:
//eventros del boton uno
void CManejadorControlesBase::OnBotonUnoClickEvent(int tiempoClick)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]

}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <_ZN23CManejadorControlesBase25OnBotonUnoPresionadoEventEv>:
void CManejadorControlesBase::OnBotonUnoPresionadoEvent()
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <_ZN23CManejadorControlesBase30OnBotonUnoPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonUnoPresionadoLargoEvent()
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]

}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <_ZN23CManejadorControlesBase21OnBotonUnoSueltoEventEv>:
void CManejadorControlesBase::OnBotonUnoSueltoEvent()
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <_ZN23CManejadorControlesBase20OnBotonDosClickEventEi>:
//eventros del boton dos
void CManejadorControlesBase::OnBotonDosClickEvent(int tiempoClick)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]

}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <_ZN23CManejadorControlesBase25OnBotonDosPresionadoEventEv>:
void CManejadorControlesBase::OnBotonDosPresionadoEvent()
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]

}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <_ZN23CManejadorControlesBase30OnBotonDosPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonDosPresionadoLargoEvent()
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <_ZN23CManejadorControlesBase21OnBotonDosSueltoEventEv>:
void CManejadorControlesBase::OnBotonDosSueltoEvent()
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]

}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <_ZN23CManejadorControlesBase21OnBotonTresClickEventEi>:
//eventros del boton tres
void CManejadorControlesBase::OnBotonTresClickEvent(int tiempoClick)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]

}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <_ZN23CManejadorControlesBase26OnBotonTresPresionadoEventEv>:
void CManejadorControlesBase::OnBotonTresPresionadoEvent()
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <_ZN23CManejadorControlesBase31OnBotonTresPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonTresPresionadoLargoEvent()
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]

}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <_ZN23CManejadorControlesBase22OnBotonTresSueltoEventEv>:
void CManejadorControlesBase::OnBotonTresSueltoEvent()
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]

}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <_ZN23CManejadorControlesBase23OnBotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorControlesBase::OnBotonCuatroClickEvent(int tiempoClick)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]

}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <_ZN23CManejadorControlesBase28OnBotonCuatroPresionadoEventEv>:
void CManejadorControlesBase::OnBotonCuatroPresionadoEvent()
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]

}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <_ZN23CManejadorControlesBase33OnBotonCuatroPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonCuatroPresionadoLargoEvent()
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <_ZN23CManejadorControlesBase24OnBotonCuatroSueltoEventEv>:
void CManejadorControlesBase::OnBotonCuatroSueltoEvent()
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]

}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <_ZN23CManejadorControlesBase24OnBotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorControlesBase::OnBotonPerillaClickEvent(int tiempoClick)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]

}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <_ZN23CManejadorControlesBase29OnBotonPerillaPresionadoEventEv>:
void CManejadorControlesBase::OnBotonPerillaPresionadoEvent()
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <_ZN23CManejadorControlesBase34OnBotonPerillaPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonPerillaPresionadoLargoEvent()
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]

}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <_ZN23CManejadorControlesBase25OnBotonPerillaSueltoEventEv>:
void CManejadorControlesBase::OnBotonPerillaSueltoEvent()
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]

}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <_ZN23CManejadorControlesBase19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorControlesBase::OnPerillaIncremento()
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]

}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <_ZN23CManejadorControlesBase19OnPerillaDecrementoEv>:
void CManejadorControlesBase::OnPerillaDecremento()
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.hpp"
MAX6675::MAX6675()
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
{

}
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	4613      	mov	r3, r2
 8005b16:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	819a      	strh	r2, [r3, #12]

}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	81da      	strh	r2, [r3, #14]

}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	88fa      	ldrh	r2, [r7, #6]
 8005b6a:	821a      	strh	r2, [r3, #16]

}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6858      	ldr	r0, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	89db      	ldrh	r3, [r3, #14]
 8005b86:	2201      	movs	r2, #1
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f002 fb88 	bl	800829e <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e002      	b.n	8005b9a <_ZN7MAX667513MAX6675_pulsoEv+0x24>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ba0:	dbf8      	blt.n	8005b94 <_ZN7MAX667513MAX6675_pulsoEv+0x1e>
//	Delay_us(10);
//	HAL_Delay(1);
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	899b      	ldrh	r3, [r3, #12]
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f002 fb5f 	bl	8008270 <HAL_GPIO_ReadPin>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6858      	ldr	r0, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	89db      	ldrh	r3, [r3, #14]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f002 fb6c 	bl	800829e <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e002      	b.n	8005bd2 <_ZN7MAX667513MAX6675_pulsoEv+0x5c>
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bd8:	dbf8      	blt.n	8005bcc <_ZN7MAX667513MAX6675_pulsoEv+0x56>
//	Delay_us(10);
//	HAL_Delay(1);
	return lei;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <_ZN7MAX667511MAX6675_leeEv>:
float MAX6675::MAX6675_lee()
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	int tiempoClick = HAL_GetTick() - TiempoTranscurrido;
 8005bec:	f001 fd5a 	bl	80076a4 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	613b      	str	r3, [r7, #16]
	if (tiempoClick < 275)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8005c00:	dc02      	bgt.n	8005c08 <_ZN7MAX667511MAX6675_leeEv+0x24>
	{
		return UltimaTemperatura;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	e052      	b.n	8005cae <_ZN7MAX667511MAX6675_leeEv+0xca>
	}
	TiempoTranscurrido = HAL_GetTick();
 8005c08:	f001 fd4c 	bl	80076a4 <HAL_GetTick>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	615a      	str	r2, [r3, #20]

	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 8005c14:	2300      	movs	r3, #0
 8005c16:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6898      	ldr	r0, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8a1b      	ldrh	r3, [r3, #16]
 8005c20:	2200      	movs	r2, #0
 8005c22:	4619      	mov	r1, r3
 8005c24:	f002 fb3b 	bl	800829e <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	for (cont = 15; cont >= 0; cont--)
 8005c28:	230f      	movs	r3, #15
 8005c2a:	757b      	strb	r3, [r7, #21]
 8005c2c:	e01b      	b.n	8005c66 <_ZN7MAX667511MAX6675_leeEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffa1 	bl	8005b76 <_ZN7MAX667513MAX6675_pulsoEv>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <_ZN7MAX667511MAX6675_leeEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 8005c44:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	b21a      	sxth	r2, r3
 8005c50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 8005c5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	757b      	strb	r3, [r7, #21]
 8005c66:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dadf      	bge.n	8005c2e <_ZN7MAX667511MAX6675_leeEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6898      	ldr	r0, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8a1b      	ldrh	r3, [r3, #16]
 8005c76:	2201      	movs	r2, #1
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f002 fb10 	bl	800829e <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 8005c7e:	8afb      	ldrh	r3, [r7, #22]
 8005c80:	08db      	lsrs	r3, r3, #3
 8005c82:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura=(((float) sensor_dato * 0.25)); //0.25
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fa ffb4 	bl	8000bf4 <__aeabi_ui2f>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fb f806 	bl	8000ca4 <__aeabi_fmul>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
//	SerialPrintf("temperatura=%f sensor=%d\r\n", UltimaTemperatura,sensor_dato);
	return UltimaTemperatura+26;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4904      	ldr	r1, [pc, #16]	@ (8005cb8 <_ZN7MAX667511MAX6675_leeEv+0xd4>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fa fef4 	bl	8000a94 <__addsf3>
 8005cac:	4603      	mov	r3, r0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	41d00000 	.word	0x41d00000

08005cbc <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8005cc4:	f107 0308 	add.w	r3, r7, #8
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	89da      	ldrh	r2, [r3, #14]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8a1b      	ldrh	r3, [r3, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4821      	ldr	r0, [pc, #132]	@ (8005d68 <_ZN7MAX66754InitEv+0xac>)
 8005ce4:	f002 fadb 	bl	800829e <HAL_GPIO_WritePin>
	/*Configure GPIO pin : DAT_MAX_Pin */
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	899b      	ldrh	r3, [r3, #12]
 8005cec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f107 0208 	add.w	r2, r7, #8
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f002 f931 	bl	8007f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	89da      	ldrh	r2, [r3, #14]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8a1b      	ldrh	r3, [r3, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d14:	2301      	movs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d20:	f107 0308 	add.w	r3, r7, #8
 8005d24:	4619      	mov	r1, r3
 8005d26:	4810      	ldr	r0, [pc, #64]	@ (8005d68 <_ZN7MAX66754InitEv+0xac>)
 8005d28:	f002 f91e 	bl	8007f68 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6858      	ldr	r0, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	89db      	ldrh	r3, [r3, #14]
 8005d34:	2200      	movs	r2, #0
 8005d36:	4619      	mov	r1, r3
 8005d38:	f002 fab1 	bl	800829e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6898      	ldr	r0, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8a1b      	ldrh	r3, [r3, #16]
 8005d44:	2201      	movs	r2, #1
 8005d46:	4619      	mov	r1, r3
 8005d48:	f002 faa9 	bl	800829e <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8005d4c:	2064      	movs	r0, #100	@ 0x64
 8005d4e:	f001 fcb3 	bl	80076b8 <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 8005d52:	f001 fca7 	bl	80076a4 <HAL_GetTick>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	615a      	str	r2, [r3, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40010800 	.word	0x40010800

08005d6c <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f1xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <_ZN3PwmC1Ev+0x1c>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	0800dbb0 	.word	0x0800dbb0

08005d8c <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	4a04      	ldr	r2, [pc, #16]	@ (8005da8 <_ZN3PwmD1Ev+0x1c>)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	0800dbb0 	.word	0x0800dbb0

08005dac <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
}
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffe9 	bl	8005d8c <_ZN3PwmD1Ev>
 8005dba:	214c      	movs	r1, #76	@ 0x4c
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f004 fb09 	bl	800a3d4 <_ZdlPvj>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b092      	sub	sp, #72	@ 0x48
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005de8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8005df2:	f107 0314 	add.w	r3, r7, #20
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	609a      	str	r2, [r3, #8]
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	611a      	str	r2, [r3, #16]
 8005e02:	615a      	str	r2, [r3, #20]
 8005e04:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2280      	movs	r2, #128	@ 0x80
 8005e28:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f003 f99a 	bl	8009168 <HAL_TIM_Base_Init>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f887 	bl	8005f58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3304      	adds	r3, #4
 8005e54:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f003 fcea 	bl	8009834 <HAL_TIM_ConfigClockSource>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bf14      	ite	ne
 8005e66:	2301      	movne	r3, #1
 8005e68:	2300      	moveq	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f871 	bl	8005f58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f003 fa16 	bl	80092ac <HAL_TIM_PWM_Init>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bf14      	ite	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	2300      	moveq	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f861 	bl	8005f58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f004 f853 	bl	8009f54 <HAL_TIMEx_MasterConfigSynchronization>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf14      	ite	ne
 8005eb4:	2301      	movne	r3, #1
 8005eb6:	2300      	moveq	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f84a 	bl	8005f58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ec4:	2360      	movs	r3, #96	@ 0x60
 8005ec6:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	f107 0114 	add.w	r1, r7, #20
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f003 fbe6 	bl	80096b0 <HAL_TIM_PWM_ConfigChannel>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bf14      	ite	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	2300      	moveq	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f82f 	bl	8005f58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  HAL_TIM_MspPostInit(&Htim);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f833 	bl	8005f6c <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(&Htim,chanel);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f003 fa24 	bl	800935c <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 8005f14:	2100      	movs	r1, #0
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f804 	bl	8005f24 <_ZN3Pwm12SicloTrabajoEi>
}
 8005f1c:	bf00      	nop
 8005f1e:	3748      	adds	r7, #72	@ 0x48
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	fb02 f303 	mul.w	r3, r2, r3
 8005f38:	4a06      	ldr	r2, [pc, #24]	@ (8005f54 <_ZN3Pwm12SicloTrabajoEi+0x30>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr
 8005f54:	51eb851f 	.word	0x51eb851f

08005f58 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
	...

08005f6c <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>:
void Pwm::HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	@ 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	609a      	str	r2, [r3, #8]
 8005f82:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a28      	ldr	r2, [pc, #160]	@ (800602c <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d119      	bne.n	8005fc2 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0x56>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f8e:	4b28      	ldr	r3, [pc, #160]	@ (8006030 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	4a27      	ldr	r2, [pc, #156]	@ (8006030 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8005f94:	f043 0304 	orr.w	r3, r3, #4
 8005f98:	6193      	str	r3, [r2, #24]
 8005f9a:	4b25      	ldr	r3, [pc, #148]	@ (8006030 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fac:	2302      	movs	r3, #2
 8005fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4619      	mov	r1, r3
 8005fba:	481e      	ldr	r0, [pc, #120]	@ (8006034 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8005fbc:	f001 ffd4 	bl	8007f68 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
  }

}
 8005fc0:	e02f      	b.n	8006022 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
  else if(htim->Instance==TIM2)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d12a      	bne.n	8006022 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fcc:	4b18      	ldr	r3, [pc, #96]	@ (8006030 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	4a17      	ldr	r2, [pc, #92]	@ (8006030 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6193      	str	r3, [r2, #24]
 8005fd8:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fea:	2302      	movs	r3, #2
 8005fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff2:	f107 0314 	add.w	r3, r7, #20
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	480e      	ldr	r0, [pc, #56]	@ (8006034 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8005ffa:	f001 ffb5 	bl	8007f68 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8006038 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601a:	627b      	str	r3, [r7, #36]	@ 0x24
 800601c:	4a06      	ldr	r2, [pc, #24]	@ (8006038 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	6053      	str	r3, [r2, #4]
}
 8006022:	bf00      	nop
 8006024:	3728      	adds	r7, #40	@ 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40021000 	.word	0x40021000
 8006034:	40010800 	.word	0x40010800
 8006038:	40010000 	.word	0x40010000

0800603c <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	4a04      	ldr	r2, [pc, #16]	@ (8006058 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	0800dbc0 	.word	0x0800dbc0

0800605c <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	4a04      	ldr	r2, [pc, #16]	@ (8006078 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	0800dbc0 	.word	0x0800dbc0

0800607c <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
}
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ffe9 	bl	800605c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800608a:	2104      	movs	r1, #4
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f004 f9a1 	bl	800a3d4 <_ZdlPvj>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <_ZN15SensorMagneticoC1Ev>:

#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f1xx.h"
#include "Constantes.hpp"

SensorMagnetico::SensorMagnetico()
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	4a0a      	ldr	r2, [pc, #40]	@ (80060e4 <_ZN15SensorMagneticoC1Ev+0x34>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	60da      	str	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	611a      	str	r2, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	615a      	str	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	0800dbd4 	.word	0x0800dbd4

080060e8 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	4a04      	ldr	r2, [pc, #16]	@ (8006104 <_ZN15SensorMagneticoD1Ev+0x1c>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	0800dbd4 	.word	0x0800dbd4

08006108 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
}
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ffe9 	bl	80060e8 <_ZN15SensorMagneticoD1Ev>
 8006116:	211c      	movs	r1, #28
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f004 f95b 	bl	800a3d4 <_ZdlPvj>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	811a      	strh	r2, [r3, #8]

}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8006154:	f107 0308 	add.w	r3, r7, #8
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	609a      	str	r2, [r3, #8]
 8006160:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	891b      	ldrh	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800616c:	2301      	movs	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f107 0208 	add.w	r2, r7, #8
 8006178:	4611      	mov	r1, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fef4 	bl	8007f68 <HAL_GPIO_Init>
}
 8006180:	bf00      	nop
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	60da      	str	r2, [r3, #12]

}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	891b      	ldrh	r3, [r3, #8]
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f002 f85b 	bl	8008270 <HAL_GPIO_ReadPin>
 80061ba:	4603      	mov	r3, r0

}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	@ 0x30
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 80061d8:	4b3b      	ldr	r3, [pc, #236]	@ (80062c8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	4a3a      	ldr	r2, [pc, #232]	@ (80062c8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 80061de:	f043 0302 	orr.w	r3, r3, #2
 80061e2:	61d3      	str	r3, [r2, #28]
 80061e4:	4b38      	ldr	r3, [pc, #224]	@ (80062c8 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x104>)
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f640 5215 	movw	r2, #3349	@ 0xd15
 8006208:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620e:	1e5a      	subs	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4618      	mov	r0, r3
 8006224:	f002 ffa0 	bl	8009168 <HAL_TIM_Base_Init>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf14      	ite	ne
 800622e:	2301      	movne	r3, #1
 8006230:	2300      	moveq	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x78>
	{
		return false;
 8006238:	2300      	movs	r3, #0
 800623a:	e041      	b.n	80062c0 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_ClockConfigTypeDef TimClock =
 800623c:	f107 0320 	add.w	r3, r7, #32
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800624a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800624e:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f107 0220 	add.w	r2, r7, #32
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f003 faeb 	bl	8009834 <HAL_TIM_ConfigClockSource>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf14      	ite	ne
 8006264:	2301      	movne	r3, #1
 8006266:	2300      	moveq	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xae>
	{
		return false;
 800626e:	2300      	movs	r3, #0
 8006270:	e026      	b.n	80062c0 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	TIM_MasterConfigTypeDef TimMaster =
 8006272:	f107 0318 	add.w	r3, r7, #24
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f107 0218 	add.w	r2, r7, #24
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f003 fe61 	bl	8009f54 <HAL_TIMEx_MasterConfigSynchronization>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe2>
	{
		return false;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e00c      	b.n	80062c0 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xfc>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 80062a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062aa:	2200      	movs	r2, #0
 80062ac:	2105      	movs	r1, #5
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fe23 	bl	8007efa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 80062b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fe3a 	bl	8007f32 <HAL_NVIC_EnableIRQ>
	return true;
 80062be:	2301      	movs	r3, #1
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3730      	adds	r7, #48	@ 0x30
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40021000 	.word	0x40021000

080062cc <_ZN6CTimer5StartEv>:
void CTimer::Start()
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&HTim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 ff96 	bl	8009208 <HAL_TIM_Base_Start_IT>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <_Z11uartx_writec>:
#include "string.h"
#include "stm32f1xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 80062ee:	1df9      	adds	r1, r7, #7
 80062f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062f4:	2201      	movs	r2, #1
 80062f6:	4803      	ldr	r0, [pc, #12]	@ (8006304 <_Z11uartx_writec+0x20>)
 80062f8:	f003 feec 	bl	800a0d4 <HAL_UART_Transmit>

}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	200001f4 	.word	0x200001f4

08006308 <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 8006310:	e006      	b.n	8006320 <_Z16uartx_write_textPc+0x18>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ffe2 	bl	80062e4 <_Z11uartx_writec>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f4      	bne.n	8006312 <_Z16uartx_write_textPc+0xa>

}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 8006338:	4b13      	ldr	r3, [pc, #76]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 800633a:	4a14      	ldr	r2, [pc, #80]	@ (800638c <_Z16USART1_UART_Initv+0x58>)
 800633c:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 800633e:	4b12      	ldr	r3, [pc, #72]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 8006340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006344:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006346:	4b10      	ldr	r3, [pc, #64]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 8006348:	2200      	movs	r2, #0
 800634a:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 800634c:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 800634e:	2200      	movs	r2, #0
 8006350:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 8006354:	2200      	movs	r2, #0
 8006356:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 8006358:	4b0b      	ldr	r3, [pc, #44]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 800635a:	220c      	movs	r2, #12
 800635c:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800635e:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 8006360:	2200      	movs	r2, #0
 8006362:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006364:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 8006366:	2200      	movs	r2, #0
 8006368:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 800636a:	4807      	ldr	r0, [pc, #28]	@ (8006388 <_Z16USART1_UART_Initv+0x54>)
 800636c:	f003 fe62 	bl	800a034 <HAL_UART_Init>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	bf14      	ite	ne
 8006376:	2301      	movne	r3, #1
 8006378:	2300      	moveq	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 8006380:	f000 f806 	bl	8006390 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8006384:	bf00      	nop
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200001f4 	.word	0x200001f4
 800638c:	40013800 	.word	0x40013800

08006390 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006394:	b672      	cpsid	i
}
 8006396:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <_Z12ErrorHandlerv+0x8>

0800639c <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char *formato, ...)
{
 800639c:	b40f      	push	{r0, r1, r2, r3}
 800639e:	b580      	push	{r7, lr}
 80063a0:	b0be      	sub	sp, #248	@ 0xf8
 80063a2:	af00      	add	r7, sp, #0
    char buffer[100];
//    for(int i=0;i<100;i++)
  //  	buffer[i]='\0';

    char formatoFlotante[20];
    int posisionFormato=0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    float a;
    va_start(pa, formato);
 80063bc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80063c0:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 80063c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063ca:	e136      	b.n	800663a <_Z12SerialPrintfPcz+0x29e>
    {

      if (*p != '%')
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b25      	cmp	r3, #37	@ 0x25
 80063d4:	d00f      	beq.n	80063f6 <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	7819      	ldrb	r1, [r3, #0]
 80063dc:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80063e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063e4:	4413      	add	r3, r2
 80063e6:	460a      	mov	r2, r1
 80063e8:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 80063ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063ee:	3301      	adds	r3, #1
 80063f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 80063f4:	e11c      	b.n	8006630 <_Z12SerialPrintfPcz+0x294>
      }
      encontrado=0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	3301      	adds	r3, #1
 8006402:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b2e      	cmp	r3, #46	@ 0x2e
 800640e:	f000 8096 	beq.w	800653e <_Z12SerialPrintfPcz+0x1a2>
 8006412:	2b2e      	cmp	r3, #46	@ 0x2e
 8006414:	f2c0 80d5 	blt.w	80065c2 <_Z12SerialPrintfPcz+0x226>
 8006418:	2b78      	cmp	r3, #120	@ 0x78
 800641a:	f300 80d2 	bgt.w	80065c2 <_Z12SerialPrintfPcz+0x226>
 800641e:	2b63      	cmp	r3, #99	@ 0x63
 8006420:	f2c0 80cf 	blt.w	80065c2 <_Z12SerialPrintfPcz+0x226>
 8006424:	3b63      	subs	r3, #99	@ 0x63
 8006426:	2b15      	cmp	r3, #21
 8006428:	f200 80cb 	bhi.w	80065c2 <_Z12SerialPrintfPcz+0x226>
 800642c:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <_Z12SerialPrintfPcz+0x98>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	080064fd 	.word	0x080064fd
 8006438:	0800648d 	.word	0x0800648d
 800643c:	080065c3 	.word	0x080065c3
 8006440:	080064ff 	.word	0x080064ff
 8006444:	080065c3 	.word	0x080065c3
 8006448:	080065c3 	.word	0x080065c3
 800644c:	080064a9 	.word	0x080064a9
 8006450:	080065c3 	.word	0x080065c3
 8006454:	080065c3 	.word	0x080065c3
 8006458:	080065c3 	.word	0x080065c3
 800645c:	080065c3 	.word	0x080065c3
 8006460:	080065c3 	.word	0x080065c3
 8006464:	080065c3 	.word	0x080065c3
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080065c3 	.word	0x080065c3
 8006470:	080065c3 	.word	0x080065c3
 8006474:	08006523 	.word	0x08006523
 8006478:	080065c3 	.word	0x080065c3
 800647c:	080065c3 	.word	0x080065c3
 8006480:	080065c3 	.word	0x080065c3
 8006484:	080065c3 	.word	0x080065c3
 8006488:	080064c5 	.word	0x080064c5
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1d1a      	adds	r2, r3, #4
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	4974      	ldr	r1, [pc, #464]	@ (800666c <_Z12SerialPrintfPcz+0x2d0>)
 800649a:	4618      	mov	r0, r3
 800649c:	f004 fd9c 	bl	800afd8 <siprintf>
          encontrado=1;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80064a6:	e09c      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	f107 0308 	add.w	r3, r7, #8
 80064b4:	496e      	ldr	r1, [pc, #440]	@ (8006670 <_Z12SerialPrintfPcz+0x2d4>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f004 fd8e 	bl	800afd8 <siprintf>
          encontrado=1;
 80064bc:	2301      	movs	r3, #1
 80064be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80064c2:	e08e      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1d1a      	adds	r2, r3, #4
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f107 0308 	add.w	r3, r7, #8
 80064d0:	4968      	ldr	r1, [pc, #416]	@ (8006674 <_Z12SerialPrintfPcz+0x2d8>)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f004 fd80 	bl	800afd8 <siprintf>
          encontrado=1;
 80064d8:	2301      	movs	r3, #1
 80064da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80064de:	e080      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, int));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	f107 0308 	add.w	r3, r7, #8
 80064ec:	4962      	ldr	r1, [pc, #392]	@ (8006678 <_Z12SerialPrintfPcz+0x2dc>)
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 fd72 	bl	800afd8 <siprintf>
          encontrado=1;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80064fa:	e072      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, char));
 80064fc:	deff      	udf	#255	@ 0xff
          encontrado=1;
          break;
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3307      	adds	r3, #7
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	f103 0208 	add.w	r2, r3, #8
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f107 0008 	add.w	r0, r7, #8
 8006514:	4959      	ldr	r1, [pc, #356]	@ (800667c <_Z12SerialPrintfPcz+0x2e0>)
 8006516:	f004 fd5f 	bl	800afd8 <siprintf>
          encontrado=1;
 800651a:	2301      	movs	r3, #1
 800651c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 8006520:	e05f      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	1d1a      	adds	r2, r3, #4
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4954      	ldr	r1, [pc, #336]	@ (8006680 <_Z12SerialPrintfPcz+0x2e4>)
 8006530:	4618      	mov	r0, r3
 8006532:	f004 fd51 	bl	800afd8 <siprintf>
          encontrado=1;
 8006536:	2301      	movs	r3, #1
 8006538:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800653c:	e051      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 800653e:	2325      	movs	r3, #37	@ 0x25
 8006540:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 8006544:	2301      	movs	r3, #1
 8006546:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800654a:	e013      	b.n	8006574 <_Z12SerialPrintfPcz+0x1d8>
        	{
        		formatoFlotante[posisionFormato]=*p;
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8006556:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800655a:	4413      	add	r3, r2
 800655c:	460a      	mov	r2, r1
 800655e:	701a      	strb	r2, [r3, #0]
        		p++;
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	3301      	adds	r3, #1
 8006566:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 800656a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800656e:	3301      	adds	r3, #1
 8006570:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b66      	cmp	r3, #102	@ 0x66
 800657c:	d1e6      	bne.n	800654c <_Z12SerialPrintfPcz+0x1b0>
        	}
        	formatoFlotante[posisionFormato]='f';
 800657e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8006582:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006586:	4413      	add	r3, r2
 8006588:	2266      	movs	r2, #102	@ 0x66
 800658a:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 800658c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006590:	3301      	adds	r3, #1
 8006592:	33f8      	adds	r3, #248	@ 0xf8
 8006594:	443b      	add	r3, r7
 8006596:	2200      	movs	r2, #0
 8006598:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3307      	adds	r3, #7
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	f103 0208 	add.w	r2, r3, #8
 80065a8:	607a      	str	r2, [r7, #4]
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80065b2:	f107 0008 	add.w	r0, r7, #8
 80065b6:	f004 fd0f 	bl	800afd8 <siprintf>
            encontrado=1;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 80065c0:	e00f      	b.n	80065e2 <_Z12SerialPrintfPcz+0x246>
        default:
          buffer[posbuffer] = *p;
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	7819      	ldrb	r1, [r3, #0]
 80065c8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80065cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80065d0:	4413      	add	r3, r2
 80065d2:	460a      	mov	r2, r1
 80065d4:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 80065d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80065da:	3301      	adds	r3, #1
 80065dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 80065e0:	bf00      	nop
      }
      if(encontrado==1)
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d122      	bne.n	8006630 <_Z12SerialPrintfPcz+0x294>
      {
          postmp=0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 80065f0:	e016      	b.n	8006620 <_Z12SerialPrintfPcz+0x284>
          {
          buffer[posbuffer] = tmp[postmp];
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065fa:	4413      	add	r3, r2
 80065fc:	7819      	ldrb	r1, [r3, #0]
 80065fe:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8006602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006606:	4413      	add	r3, r2
 8006608:	460a      	mov	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800660c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 8006616:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800661a:	3301      	adds	r3, #1
 800661c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006628:	4413      	add	r3, r2
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e0      	bne.n	80065f2 <_Z12SerialPrintfPcz+0x256>
    for (p = formato; *p; p++)
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f47f aec3 	bne.w	80063cc <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 8006646:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800664a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800664e:	4413      	add	r3, r2
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 8006654:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fe55 	bl	8006308 <_Z16uartx_write_textPc>
}
 800665e:	bf00      	nop
 8006660:	37f8      	adds	r7, #248	@ 0xf8
 8006662:	46bd      	mov	sp, r7
 8006664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006668:	b004      	add	sp, #16
 800666a:	4770      	bx	lr
 800666c:	0800d1ac 	.word	0x0800d1ac
 8006670:	0800d1b0 	.word	0x0800d1b0
 8006674:	0800d1b4 	.word	0x0800d1b4
 8006678:	0800d1b8 	.word	0x0800d1b8
 800667c:	0800d1bc 	.word	0x0800d1bc
 8006680:	0800d1c0 	.word	0x0800d1c0

08006684 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
	...

080066a0 <_Z16IncializaSistemav>:
#include "GUI/ManejadorPantallas/CManejadorPantallas.hpp"
CestacionBaku601 *estacion;
//TIM_HandleTypeDef htim2;
CManejadorPantallas ManejadorPantallas;
void IncializaSistema()
{
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b095      	sub	sp, #84	@ 0x54
 80066a4:	af00      	add	r7, sp, #0
	CTimer timer;
 80066a6:	463b      	mov	r3, r7
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ffeb 	bl	8006684 <_ZN6CTimerC1Ev>
	USART1_UART_Init();
 80066ae:	f7ff fe41 	bl	8006334 <_Z16USART1_UART_Initv>
	SerialPrintf("\r\IniciandoSistema");
 80066b2:	4819      	ldr	r0, [pc, #100]	@ (8006718 <_Z16IncializaSistemav+0x78>)
 80066b4:	f7ff fe72 	bl	800639c <_Z12SerialPrintfPcz>
	uartx_write_text("HOLA");
 80066b8:	4818      	ldr	r0, [pc, #96]	@ (800671c <_Z16IncializaSistemav+0x7c>)
 80066ba:	f7ff fe25 	bl	8006308 <_Z16uartx_write_textPc>
	//TIMX->CR1|=1>>0;
	//delay_us_tim_init();
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	2028      	movs	r0, #40	@ 0x28
 80066c4:	f001 fc19 	bl	8007efa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066c8:	2028      	movs	r0, #40	@ 0x28
 80066ca:	f001 fc32 	bl	8007f32 <HAL_NVIC_EnableIRQ>

	USART1_UART_Init();
 80066ce:	f7ff fe31 	bl	8006334 <_Z16USART1_UART_Initv>
	estacion = new CestacionBaku601();
 80066d2:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80066d6:	f003 fe7f 	bl	800a3d8 <_Znwj>
 80066da:	4603      	mov	r3, r0
 80066dc:	461c      	mov	r4, r3
 80066de:	4620      	mov	r0, r4
 80066e0:	f7fb fd2e 	bl	8002140 <_ZN16CestacionBaku601C1Ev>
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <_Z16IncializaSistemav+0x80>)
 80066e6:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 80066e8:	f7fe fd56 	bl	8005198 <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80066ec:	2003      	movs	r0, #3
 80066ee:	f7fe fcf5 	bl	80050dc <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(WHITE);
 80066f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80066f6:	f7fe fef7 	bl	80054e8 <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 80066fa:	4638      	mov	r0, r7
 80066fc:	231d      	movs	r3, #29
 80066fe:	2201      	movs	r2, #1
 8006700:	4908      	ldr	r1, [pc, #32]	@ (8006724 <_Z16IncializaSistemav+0x84>)
 8006702:	f7ff fd5f 	bl	80061c4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>
	timer.Start();
 8006706:	463b      	mov	r3, r7
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff fddf 	bl	80062cc <_ZN6CTimer5StartEv>

}
 800670e:	bf00      	nop
 8006710:	3754      	adds	r7, #84	@ 0x54
 8006712:	46bd      	mov	sp, r7
 8006714:	bd90      	pop	{r4, r7, pc}
 8006716:	bf00      	nop
 8006718:	0800d1c4 	.word	0x0800d1c4
 800671c:	0800d1d8 	.word	0x0800d1d8
 8006720:	2000023c 	.word	0x2000023c
 8006724:	40000400 	.word	0x40000400

08006728 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
//	CManejadorPantallas* manejador=CManejadorPantallas::DameControlador();
	ManejadorPantallas.SetEstacion(estacion);
 800672c:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <_Z14EjecutaSistemav+0x38>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	480c      	ldr	r0, [pc, #48]	@ (8006764 <_Z14EjecutaSistemav+0x3c>)
 8006734:	f7fd f8a4 	bl	8003880 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
//	CPantallaManual *pantalla = new CPantallaManual();
	ManejadorPantallas.MuestraPantallaManual();
 8006738:	480a      	ldr	r0, [pc, #40]	@ (8006764 <_Z14EjecutaSistemav+0x3c>)
 800673a:	f7fd f8ae 	bl	800389a <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
//	pantalla->SetEstacion(estacion);
//	pantalla->Show();
	while (1)
	{
		estacion->Procesa();
 800673e:	4b08      	ldr	r3, [pc, #32]	@ (8006760 <_Z14EjecutaSistemav+0x38>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <_Z14EjecutaSistemav+0x38>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3330      	adds	r3, #48	@ 0x30
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 8006750:	4804      	ldr	r0, [pc, #16]	@ (8006764 <_Z14EjecutaSistemav+0x3c>)
 8006752:	f7fd f8da 	bl	800390a <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 8006756:	2001      	movs	r0, #1
 8006758:	f000 ffae 	bl	80076b8 <HAL_Delay>
		estacion->Procesa();
 800675c:	bf00      	nop
 800675e:	e7ee      	b.n	800673e <_Z14EjecutaSistemav+0x16>
 8006760:	2000023c 	.word	0x2000023c
 8006764:	20000240 	.word	0x20000240

08006768 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	80fb      	strh	r3, [r7, #6]

	estacion->GPIO_INTERRUPCION(GPIO_Pin);
 8006772:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <HAL_GPIO_EXTI_Callback+0x28>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <HAL_GPIO_EXTI_Callback+0x28>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	33b0      	adds	r3, #176	@ 0xb0
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	88f9      	ldrh	r1, [r7, #6]
 8006782:	4610      	mov	r0, r2
 8006784:	4798      	blx	r3
	else if(GPIO_Pin==CruceCero_Pin)
	{
		estacion->CruceXCero();
	}
*/
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	2000023c 	.word	0x2000023c

08006794 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a07      	ldr	r2, [pc, #28]	@ (80067c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d108      	bne.n	80067b8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		estacion->TimerTick();
 80067a6:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3344      	adds	r3, #68	@ 0x44
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
		//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	}
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40000400 	.word	0x40000400
 80067c4:	2000023c 	.word	0x2000023c

080067c8 <_Z41__static_initialization_and_destruction_0ii>:
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d107      	bne.n	80067e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067de:	4293      	cmp	r3, r2
 80067e0:	d102      	bne.n	80067e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
CManejadorPantallas ManejadorPantallas;
 80067e2:	4809      	ldr	r0, [pc, #36]	@ (8006808 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80067e4:	f7fd f810 	bl	8003808 <_ZN19CManejadorPantallasC1Ev>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d107      	bne.n	80067fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d102      	bne.n	80067fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80067f8:	4803      	ldr	r0, [pc, #12]	@ (8006808 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80067fa:	f7fd f821 	bl	8003840 <_ZN19CManejadorPantallasD1Ev>
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000240 	.word	0x20000240

0800680c <_GLOBAL__sub_I_estacion>:
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
 8006810:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006814:	2001      	movs	r0, #1
 8006816:	f7ff ffd7 	bl	80067c8 <_Z41__static_initialization_and_destruction_0ii>
 800681a:	bd80      	pop	{r7, pc}

0800681c <_GLOBAL__sub_D_estacion>:
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
 8006820:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006824:	2000      	movs	r0, #0
 8006826:	f7ff ffcf 	bl	80067c8 <_Z41__static_initialization_and_destruction_0ii>
 800682a:	bd80      	pop	{r7, pc}

0800682c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	@ 0x28
 8006830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006832:	4b71      	ldr	r3, [pc, #452]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	4a70      	ldr	r2, [pc, #448]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683c:	6193      	str	r3, [r2, #24]
 800683e:	4b6e      	ldr	r3, [pc, #440]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800684a:	4b6b      	ldr	r3, [pc, #428]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	4a6a      	ldr	r2, [pc, #424]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006850:	f043 0310 	orr.w	r3, r3, #16
 8006854:	6193      	str	r3, [r2, #24]
 8006856:	4b68      	ldr	r3, [pc, #416]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006862:	4b65      	ldr	r3, [pc, #404]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	4a64      	ldr	r2, [pc, #400]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006868:	f043 0304 	orr.w	r3, r3, #4
 800686c:	6193      	str	r3, [r2, #24]
 800686e:	4b62      	ldr	r3, [pc, #392]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800687a:	4b5f      	ldr	r3, [pc, #380]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	4a5e      	ldr	r2, [pc, #376]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006880:	f043 0308 	orr.w	r3, r3, #8
 8006884:	6193      	str	r3, [r2, #24]
 8006886:	4b5c      	ldr	r3, [pc, #368]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	60bb      	str	r3, [r7, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006892:	4b59      	ldr	r3, [pc, #356]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	4a58      	ldr	r2, [pc, #352]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 8006898:	f043 0320 	orr.w	r3, r3, #32
 800689c:	6193      	str	r3, [r2, #24]
 800689e:	4b56      	ldr	r3, [pc, #344]	@ (80069f8 <MX_GPIO_Init+0x1cc>)
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80068aa:	2304      	movs	r3, #4
 80068ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80068b6:	f107 0318 	add.w	r3, r7, #24
 80068ba:	4619      	mov	r1, r3
 80068bc:	484f      	ldr	r0, [pc, #316]	@ (80069fc <MX_GPIO_Init+0x1d0>)
 80068be:	f001 fb53 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80068c2:	2368      	movs	r3, #104	@ 0x68
 80068c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ce:	2303      	movs	r3, #3
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068d2:	f107 0318 	add.w	r3, r7, #24
 80068d6:	4619      	mov	r1, r3
 80068d8:	4848      	ldr	r0, [pc, #288]	@ (80069fc <MX_GPIO_Init+0x1d0>)
 80068da:	f001 fb45 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80068de:	2310      	movs	r3, #16
 80068e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068e6:	2301      	movs	r3, #1
 80068e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80068ea:	f107 0318 	add.w	r3, r7, #24
 80068ee:	4619      	mov	r1, r3
 80068f0:	4842      	ldr	r0, [pc, #264]	@ (80069fc <MX_GPIO_Init+0x1d0>)
 80068f2:	f001 fb39 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80068f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80068fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8006904:	f107 0318 	add.w	r3, r7, #24
 8006908:	4619      	mov	r1, r3
 800690a:	483d      	ldr	r0, [pc, #244]	@ (8006a00 <MX_GPIO_Init+0x1d4>)
 800690c:	f001 fb2c 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006910:	2332      	movs	r3, #50	@ 0x32
 8006912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006914:	2302      	movs	r3, #2
 8006916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006918:	2300      	movs	r3, #0
 800691a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800691c:	2303      	movs	r3, #3
 800691e:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006920:	f107 0318 	add.w	r3, r7, #24
 8006924:	4619      	mov	r1, r3
 8006926:	4836      	ldr	r0, [pc, #216]	@ (8006a00 <MX_GPIO_Init+0x1d4>)
 8006928:	f001 fb1e 	bl	8007f68 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800692c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006932:	2302      	movs	r3, #2
 8006934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006936:	2300      	movs	r3, #0
 8006938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800693a:	2303      	movs	r3, #3
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800693e:	f107 0318 	add.w	r3, r7, #24
 8006942:	4619      	mov	r1, r3
 8006944:	482f      	ldr	r0, [pc, #188]	@ (8006a04 <MX_GPIO_Init+0x1d8>)
 8006946:	f001 fb0f 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800694a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800694e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006950:	2301      	movs	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006958:	2302      	movs	r3, #2
 800695a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800695c:	f107 0318 	add.w	r3, r7, #24
 8006960:	4619      	mov	r1, r3
 8006962:	4828      	ldr	r0, [pc, #160]	@ (8006a04 <MX_GPIO_Init+0x1d8>)
 8006964:	f001 fb00 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006968:	2340      	movs	r3, #64	@ 0x40
 800696a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800696c:	2301      	movs	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006970:	2300      	movs	r3, #0
 8006972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006974:	2302      	movs	r3, #2
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006978:	2380      	movs	r3, #128	@ 0x80
 800697a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006980:	2300      	movs	r3, #0
 8006982:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8006984:	2323      	movs	r3, #35	@ 0x23
 8006986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006988:	2301      	movs	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	2300      	movs	r3, #0
 800698e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006990:	2303      	movs	r3, #3
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006994:	f107 0318 	add.w	r3, r7, #24
 8006998:	4619      	mov	r1, r3
 800699a:	4819      	ldr	r0, [pc, #100]	@ (8006a00 <MX_GPIO_Init+0x1d4>)
 800699c:	f001 fae4 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80069a0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80069a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a6:	2302      	movs	r3, #2
 80069a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ae:	2303      	movs	r3, #3
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b2:	f107 0318 	add.w	r3, r7, #24
 80069b6:	4619      	mov	r1, r3
 80069b8:	4813      	ldr	r0, [pc, #76]	@ (8006a08 <MX_GPIO_Init+0x1dc>)
 80069ba:	f001 fad5 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80069be:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80069c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c4:	2302      	movs	r3, #2
 80069c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069cc:	2303      	movs	r3, #3
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80069d0:	2200      	movs	r2, #0
 80069d2:	2168      	movs	r1, #104	@ 0x68
 80069d4:	4809      	ldr	r0, [pc, #36]	@ (80069fc <MX_GPIO_Init+0x1d0>)
 80069d6:	f001 fc62 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80069da:	2200      	movs	r2, #0
 80069dc:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80069e0:	4808      	ldr	r0, [pc, #32]	@ (8006a04 <MX_GPIO_Init+0x1d8>)
 80069e2:	f001 fc5c 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80069e6:	2200      	movs	r2, #0
 80069e8:	2123      	movs	r1, #35	@ 0x23
 80069ea:	4805      	ldr	r0, [pc, #20]	@ (8006a00 <MX_GPIO_Init+0x1d4>)
 80069ec:	f001 fc57 	bl	800829e <HAL_GPIO_WritePin>

}
 80069f0:	bf00      	nop
 80069f2:	3728      	adds	r7, #40	@ 0x28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40021000 	.word	0x40021000
 80069fc:	40011800 	.word	0x40011800
 8006a00:	40011000 	.word	0x40011000
 8006a04:	40010c00 	.word	0x40010c00
 8006a08:	40010800 	.word	0x40010800

08006a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a10:	f000 fdf0 	bl	80075f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a14:	f000 f812 	bl	8006a3c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a18:	f000 fa0c 	bl	8006e34 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8006a1c:	f000 f8b6 	bl	8006b8c <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8006a20:	f000 f9da 	bl	8006dd8 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8006a24:	f000 f86a 	bl	8006afc <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 8006a28:	f000 f8ec 	bl	8006c04 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8006a2c:	f000 f978 	bl	8006d20 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
	IncializaSistema();
 8006a30:	f7ff fe36 	bl	80066a0 <_Z16IncializaSistemav>
	EjecutaSistema();
 8006a34:	f7ff fe78 	bl	8006728 <_Z14EjecutaSistemav>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <main+0x2c>

08006a3c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b094      	sub	sp, #80	@ 0x50
 8006a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a46:	2228      	movs	r2, #40	@ 0x28
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f004 fb27 	bl	800b09e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a70:	2301      	movs	r3, #1
 8006a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a74:	2310      	movs	r3, #16
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fc3d 	bl	8008300 <HAL_RCC_OscConfig>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8006a96:	f000 faa3 	bl	8006fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a9a:	230f      	movs	r3, #15
 8006a9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006aae:	f107 0314 	add.w	r3, r7, #20
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fea5 	bl	8008804 <HAL_RCC_ClockConfig>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8006aca:	f000 fa89 	bl	8006fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 f821 	bl	8008b20 <HAL_RCCEx_PeriphCLKConfig>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8006aee:	f000 fa77 	bl	8006fe0 <Error_Handler>
  }
}
 8006af2:	bf00      	nop
 8006af4:	3750      	adds	r7, #80	@ 0x50
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006b02:	1d3b      	adds	r3, r7, #4
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b88 <_ZL12MX_ADC1_Initv+0x8c>)
 8006b10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006b12:	4b1c      	ldr	r3, [pc, #112]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006b18:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006b1e:	4b19      	ldr	r3, [pc, #100]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b24:	4b17      	ldr	r3, [pc, #92]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b26:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8006b2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b2c:	4b15      	ldr	r3, [pc, #84]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8006b32:	4b14      	ldr	r3, [pc, #80]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006b38:	4812      	ldr	r0, [pc, #72]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b3a:	f000 fde1 	bl	8007700 <HAL_ADC_Init>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf14      	ite	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	2300      	moveq	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8006b4e:	f000 fa47 	bl	8006fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006b52:	2303      	movs	r3, #3
 8006b54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006b56:	2301      	movs	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4808      	ldr	r0, [pc, #32]	@ (8006b84 <_ZL12MX_ADC1_Initv+0x88>)
 8006b64:	f000 ff5e 	bl	8007a24 <HAL_ADC_ConfigChannel>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8006b78:	f000 fa32 	bl	8006fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20000258 	.word	0x20000258
 8006b88:	40012400 	.word	0x40012400

08006b8c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006b90:	4b1a      	ldr	r3, [pc, #104]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006b92:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <_ZL12MX_SPI1_Initv+0x74>)
 8006b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006b96:	4b19      	ldr	r3, [pc, #100]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006b98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006b9e:	4b17      	ldr	r3, [pc, #92]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ba4:	4b15      	ldr	r3, [pc, #84]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006baa:	4b14      	ldr	r3, [pc, #80]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006bb0:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006bb6:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006bca:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006bd6:	4b09      	ldr	r3, [pc, #36]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bd8:	220a      	movs	r2, #10
 8006bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006bdc:	4807      	ldr	r0, [pc, #28]	@ (8006bfc <_ZL12MX_SPI1_Initv+0x70>)
 8006bde:	f002 f855 	bl	8008c8c <HAL_SPI_Init>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8006bf2:	f000 f9f5 	bl	8006fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000288 	.word	0x20000288
 8006c00:	40013000 	.word	0x40013000

08006c04 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08e      	sub	sp, #56	@ 0x38
 8006c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	609a      	str	r2, [r3, #8]
 8006c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c18:	f107 0320 	add.w	r3, r7, #32
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]
 8006c30:	615a      	str	r2, [r3, #20]
 8006c32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006c34:	4b39      	ldr	r3, [pc, #228]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006c3c:	4b37      	ldr	r3, [pc, #220]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c42:	4b36      	ldr	r3, [pc, #216]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006c48:	4b34      	ldr	r3, [pc, #208]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c50:	4b32      	ldr	r3, [pc, #200]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006c56:	4b31      	ldr	r3, [pc, #196]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c58:	2280      	movs	r2, #128	@ 0x80
 8006c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006c5c:	482f      	ldr	r0, [pc, #188]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c5e:	f002 fa83 	bl	8009168 <HAL_TIM_Base_Init>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8006c72:	f000 f9b5 	bl	8006fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006c7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c80:	4619      	mov	r1, r3
 8006c82:	4826      	ldr	r0, [pc, #152]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c84:	f002 fdd6 	bl	8009834 <HAL_TIM_ConfigClockSource>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8006c98:	f000 f9a2 	bl	8006fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006c9c:	481f      	ldr	r0, [pc, #124]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006c9e:	f002 fb05 	bl	80092ac <HAL_TIM_PWM_Init>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8006cb2:	f000 f995 	bl	8006fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006cbe:	f107 0320 	add.w	r3, r7, #32
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4815      	ldr	r0, [pc, #84]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006cc6:	f003 f945 	bl	8009f54 <HAL_TIMEx_MasterConfigSynchronization>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8006cda:	f000 f981 	bl	8006fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cde:	2360      	movs	r3, #96	@ 0x60
 8006ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cee:	1d3b      	adds	r3, r7, #4
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4809      	ldr	r0, [pc, #36]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006cf6:	f002 fcdb 	bl	80096b0 <HAL_TIM_PWM_ConfigChannel>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8006d0a:	f000 f969 	bl	8006fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006d0e:	4803      	ldr	r0, [pc, #12]	@ (8006d1c <_ZL12MX_TIM2_Initv+0x118>)
 8006d10:	f000 fa8e 	bl	8007230 <HAL_TIM_MspPostInit>

}
 8006d14:	bf00      	nop
 8006d16:	3738      	adds	r7, #56	@ 0x38
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	200002e0 	.word	0x200002e0

08006d20 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d34:	463b      	mov	r3, r7
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006d3c:	4b24      	ldr	r3, [pc, #144]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d3e:	4a25      	ldr	r2, [pc, #148]	@ (8006dd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8006d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006d42:	4b23      	ldr	r3, [pc, #140]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d48:	4b21      	ldr	r3, [pc, #132]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8006d4e:	4b20      	ldr	r3, [pc, #128]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d50:	2264      	movs	r2, #100	@ 0x64
 8006d52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d54:	4b1e      	ldr	r3, [pc, #120]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006d60:	481b      	ldr	r0, [pc, #108]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d62:	f002 fa01 	bl	8009168 <HAL_TIM_Base_Init>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <_ZL12MX_TIM3_Initv+0x5a>
  {
    Error_Handler();
 8006d76:	f000 f933 	bl	8006fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	4619      	mov	r1, r3
 8006d86:	4812      	ldr	r0, [pc, #72]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006d88:	f002 fd54 	bl	8009834 <HAL_TIM_ConfigClockSource>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf14      	ite	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	2300      	moveq	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <_ZL12MX_TIM3_Initv+0x80>
  {
    Error_Handler();
 8006d9c:	f000 f920 	bl	8006fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006da0:	2300      	movs	r3, #0
 8006da2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006da8:	463b      	mov	r3, r7
 8006daa:	4619      	mov	r1, r3
 8006dac:	4808      	ldr	r0, [pc, #32]	@ (8006dd0 <_ZL12MX_TIM3_Initv+0xb0>)
 8006dae:	f003 f8d1 	bl	8009f54 <HAL_TIMEx_MasterConfigSynchronization>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf14      	ite	ne
 8006db8:	2301      	movne	r3, #1
 8006dba:	2300      	moveq	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <_ZL12MX_TIM3_Initv+0xa6>
  {
    Error_Handler();
 8006dc2:	f000 f90d 	bl	8006fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000328 	.word	0x20000328
 8006dd4:	40000400 	.word	0x40000400

08006dd8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006dde:	4a14      	ldr	r2, [pc, #80]	@ (8006e30 <_ZL19MX_USART1_UART_Initv+0x58>)
 8006de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006de2:	4b12      	ldr	r3, [pc, #72]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006dea:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006df0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006df6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006dfe:	220c      	movs	r2, #12
 8006e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e02:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e08:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006e0e:	4807      	ldr	r0, [pc, #28]	@ (8006e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e10:	f003 f910 	bl	800a034 <HAL_UART_Init>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bf14      	ite	ne
 8006e1a:	2301      	movne	r3, #1
 8006e1c:	2300      	moveq	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006e24:	f000 f8dc 	bl	8006fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006e28:	bf00      	nop
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000370 	.word	0x20000370
 8006e30:	40013800 	.word	0x40013800

08006e34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e3a:	f107 0310 	add.w	r3, r7, #16
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	609a      	str	r2, [r3, #8]
 8006e46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e48:	4b60      	ldr	r3, [pc, #384]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	4a5f      	ldr	r2, [pc, #380]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e4e:	f043 0310 	orr.w	r3, r3, #16
 8006e52:	6193      	str	r3, [r2, #24]
 8006e54:	4b5d      	ldr	r3, [pc, #372]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e60:	4b5a      	ldr	r3, [pc, #360]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	4a59      	ldr	r2, [pc, #356]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e66:	f043 0304 	orr.w	r3, r3, #4
 8006e6a:	6193      	str	r3, [r2, #24]
 8006e6c:	4b57      	ldr	r3, [pc, #348]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	60bb      	str	r3, [r7, #8]
 8006e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e78:	4b54      	ldr	r3, [pc, #336]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	4a53      	ldr	r2, [pc, #332]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e7e:	f043 0308 	orr.w	r3, r3, #8
 8006e82:	6193      	str	r3, [r2, #24]
 8006e84:	4b51      	ldr	r3, [pc, #324]	@ (8006fcc <_ZL12MX_GPIO_Initv+0x198>)
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	607b      	str	r3, [r7, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006e96:	484e      	ldr	r0, [pc, #312]	@ (8006fd0 <_ZL12MX_GPIO_Initv+0x19c>)
 8006e98:	f001 fa01 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2106      	movs	r1, #6
 8006ea0:	484c      	ldr	r0, [pc, #304]	@ (8006fd4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8006ea2:	f001 f9fc 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2163      	movs	r1, #99	@ 0x63
 8006eaa:	484b      	ldr	r0, [pc, #300]	@ (8006fd8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8006eac:	f001 f9f7 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2108      	movs	r1, #8
 8006eb4:	4848      	ldr	r0, [pc, #288]	@ (8006fd8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8006eb6:	f001 f9f2 	bl	800829e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ecc:	f107 0310 	add.w	r3, r7, #16
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	483f      	ldr	r0, [pc, #252]	@ (8006fd0 <_ZL12MX_GPIO_Initv+0x19c>)
 8006ed4:	f001 f848 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8006ed8:	f240 1301 	movw	r3, #257	@ 0x101
 8006edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ee6:	f107 0310 	add.w	r3, r7, #16
 8006eea:	4619      	mov	r1, r3
 8006eec:	4839      	ldr	r0, [pc, #228]	@ (8006fd4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8006eee:	f001 f83b 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8006ef2:	2306      	movs	r3, #6
 8006ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006efe:	2302      	movs	r3, #2
 8006f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f02:	f107 0310 	add.w	r3, r7, #16
 8006f06:	4619      	mov	r1, r3
 8006f08:	4832      	ldr	r0, [pc, #200]	@ (8006fd4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8006f0a:	f001 f82d 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8006f0e:	2350      	movs	r3, #80	@ 0x50
 8006f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006f12:	4b32      	ldr	r3, [pc, #200]	@ (8006fdc <_ZL12MX_GPIO_Initv+0x1a8>)
 8006f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f1a:	f107 0310 	add.w	r3, r7, #16
 8006f1e:	4619      	mov	r1, r3
 8006f20:	482c      	ldr	r0, [pc, #176]	@ (8006fd4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8006f22:	f001 f821 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5|GPIO_PIN_6;
 8006f26:	2363      	movs	r3, #99	@ 0x63
 8006f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f32:	2302      	movs	r3, #2
 8006f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f36:	f107 0310 	add.w	r3, r7, #16
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4826      	ldr	r0, [pc, #152]	@ (8006fd8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8006f3e:	f001 f813 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_8;
 8006f42:	f44f 430d 	mov.w	r3, #36096	@ 0x8d00
 8006f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006f48:	4b24      	ldr	r3, [pc, #144]	@ (8006fdc <_ZL12MX_GPIO_Initv+0x1a8>)
 8006f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f50:	f107 0310 	add.w	r3, r7, #16
 8006f54:	4619      	mov	r1, r3
 8006f56:	4820      	ldr	r0, [pc, #128]	@ (8006fd8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8006f58:	f001 f806 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006f5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f6a:	f107 0310 	add.w	r3, r7, #16
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4819      	ldr	r0, [pc, #100]	@ (8006fd8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8006f72:	f000 fff9 	bl	8007f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006f76:	2308      	movs	r3, #8
 8006f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f82:	2302      	movs	r3, #2
 8006f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f86:	f107 0310 	add.w	r3, r7, #16
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4812      	ldr	r0, [pc, #72]	@ (8006fd8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8006f8e:	f000 ffeb 	bl	8007f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006f92:	2200      	movs	r2, #0
 8006f94:	2100      	movs	r1, #0
 8006f96:	200a      	movs	r0, #10
 8006f98:	f000 ffaf 	bl	8007efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006f9c:	200a      	movs	r0, #10
 8006f9e:	f000 ffc8 	bl	8007f32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	2017      	movs	r0, #23
 8006fa8:	f000 ffa7 	bl	8007efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006fac:	2017      	movs	r0, #23
 8006fae:	f000 ffc0 	bl	8007f32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	2028      	movs	r0, #40	@ 0x28
 8006fb8:	f000 ff9f 	bl	8007efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fbc:	2028      	movs	r0, #40	@ 0x28
 8006fbe:	f000 ffb8 	bl	8007f32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006fc2:	bf00      	nop
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	40011000 	.word	0x40011000
 8006fd4:	40010800 	.word	0x40010800
 8006fd8:	40010c00 	.word	0x40010c00
 8006fdc:	10310000 	.word	0x10310000

08006fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006fe4:	b672      	cpsid	i
}
 8006fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006fe8:	bf00      	nop
 8006fea:	e7fd      	b.n	8006fe8 <Error_Handler+0x8>

08006fec <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 8006ff0:	4b17      	ldr	r3, [pc, #92]	@ (8007050 <SPI1_Init+0x64>)
 8006ff2:	4a18      	ldr	r2, [pc, #96]	@ (8007054 <SPI1_Init+0x68>)
 8006ff4:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8006ff6:	4b16      	ldr	r3, [pc, #88]	@ (8007050 <SPI1_Init+0x64>)
 8006ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006ffc:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8006ffe:	4b14      	ldr	r3, [pc, #80]	@ (8007050 <SPI1_Init+0x64>)
 8007000:	2200      	movs	r2, #0
 8007002:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007004:	4b12      	ldr	r3, [pc, #72]	@ (8007050 <SPI1_Init+0x64>)
 8007006:	2200      	movs	r2, #0
 8007008:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800700a:	4b11      	ldr	r3, [pc, #68]	@ (8007050 <SPI1_Init+0x64>)
 800700c:	2200      	movs	r2, #0
 800700e:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007010:	4b0f      	ldr	r3, [pc, #60]	@ (8007050 <SPI1_Init+0x64>)
 8007012:	2200      	movs	r2, #0
 8007014:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 8007016:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <SPI1_Init+0x64>)
 8007018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800701c:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800701e:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <SPI1_Init+0x64>)
 8007020:	2200      	movs	r2, #0
 8007022:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007024:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <SPI1_Init+0x64>)
 8007026:	2200      	movs	r2, #0
 8007028:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800702a:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <SPI1_Init+0x64>)
 800702c:	2200      	movs	r2, #0
 800702e:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007030:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <SPI1_Init+0x64>)
 8007032:	2200      	movs	r2, #0
 8007034:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 8007036:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <SPI1_Init+0x64>)
 8007038:	2207      	movs	r2, #7
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 800703c:	4804      	ldr	r0, [pc, #16]	@ (8007050 <SPI1_Init+0x64>)
 800703e:	f001 fe25 	bl	8008c8c <HAL_SPI_Init>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <SPI1_Init+0x60>
  {
    Error_Handler();
 8007048:	f7ff ffca 	bl	8006fe0 <Error_Handler>
  }

}
 800704c:	bf00      	nop
 800704e:	bd80      	pop	{r7, pc}
 8007050:	200003b8 	.word	0x200003b8
 8007054:	40013000 	.word	0x40013000

08007058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800705e:	4b15      	ldr	r3, [pc, #84]	@ (80070b4 <HAL_MspInit+0x5c>)
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	4a14      	ldr	r2, [pc, #80]	@ (80070b4 <HAL_MspInit+0x5c>)
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	6193      	str	r3, [r2, #24]
 800706a:	4b12      	ldr	r3, [pc, #72]	@ (80070b4 <HAL_MspInit+0x5c>)
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	60bb      	str	r3, [r7, #8]
 8007074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007076:	4b0f      	ldr	r3, [pc, #60]	@ (80070b4 <HAL_MspInit+0x5c>)
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	4a0e      	ldr	r2, [pc, #56]	@ (80070b4 <HAL_MspInit+0x5c>)
 800707c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007080:	61d3      	str	r3, [r2, #28]
 8007082:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <HAL_MspInit+0x5c>)
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800708e:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <HAL_MspInit+0x60>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	4a04      	ldr	r2, [pc, #16]	@ (80070b8 <HAL_MspInit+0x60>)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40010000 	.word	0x40010000

080070bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c4:	f107 0310 	add.w	r3, r7, #16
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	609a      	str	r2, [r3, #8]
 80070d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a14      	ldr	r2, [pc, #80]	@ (8007128 <HAL_ADC_MspInit+0x6c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d121      	bne.n	8007120 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80070dc:	4b13      	ldr	r3, [pc, #76]	@ (800712c <HAL_ADC_MspInit+0x70>)
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	4a12      	ldr	r2, [pc, #72]	@ (800712c <HAL_ADC_MspInit+0x70>)
 80070e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070e6:	6193      	str	r3, [r2, #24]
 80070e8:	4b10      	ldr	r3, [pc, #64]	@ (800712c <HAL_ADC_MspInit+0x70>)
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f4:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <HAL_ADC_MspInit+0x70>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	4a0c      	ldr	r2, [pc, #48]	@ (800712c <HAL_ADC_MspInit+0x70>)
 80070fa:	f043 0304 	orr.w	r3, r3, #4
 80070fe:	6193      	str	r3, [r2, #24]
 8007100:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <HAL_ADC_MspInit+0x70>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800710c:	2308      	movs	r3, #8
 800710e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007110:	2303      	movs	r3, #3
 8007112:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	4619      	mov	r1, r3
 800711a:	4805      	ldr	r0, [pc, #20]	@ (8007130 <HAL_ADC_MspInit+0x74>)
 800711c:	f000 ff24 	bl	8007f68 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007120:	bf00      	nop
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40012400 	.word	0x40012400
 800712c:	40021000 	.word	0x40021000
 8007130:	40010800 	.word	0x40010800

08007134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800713c:	f107 0310 	add.w	r3, r7, #16
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	609a      	str	r2, [r3, #8]
 8007148:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a15      	ldr	r2, [pc, #84]	@ (80071a4 <HAL_SPI_MspInit+0x70>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d123      	bne.n	800719c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007154:	4b14      	ldr	r3, [pc, #80]	@ (80071a8 <HAL_SPI_MspInit+0x74>)
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4a13      	ldr	r2, [pc, #76]	@ (80071a8 <HAL_SPI_MspInit+0x74>)
 800715a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800715e:	6193      	str	r3, [r2, #24]
 8007160:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <HAL_SPI_MspInit+0x74>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800716c:	4b0e      	ldr	r3, [pc, #56]	@ (80071a8 <HAL_SPI_MspInit+0x74>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	4a0d      	ldr	r2, [pc, #52]	@ (80071a8 <HAL_SPI_MspInit+0x74>)
 8007172:	f043 0304 	orr.w	r3, r3, #4
 8007176:	6193      	str	r3, [r2, #24]
 8007178:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <HAL_SPI_MspInit+0x74>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007184:	23a0      	movs	r3, #160	@ 0xa0
 8007186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007188:	2302      	movs	r3, #2
 800718a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800718c:	2303      	movs	r3, #3
 800718e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007190:	f107 0310 	add.w	r3, r7, #16
 8007194:	4619      	mov	r1, r3
 8007196:	4805      	ldr	r0, [pc, #20]	@ (80071ac <HAL_SPI_MspInit+0x78>)
 8007198:	f000 fee6 	bl	8007f68 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800719c:	bf00      	nop
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40013000 	.word	0x40013000
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40010800 	.word	0x40010800

080071b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c0:	d114      	bne.n	80071ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80071c2:	4b19      	ldr	r3, [pc, #100]	@ (8007228 <HAL_TIM_Base_MspInit+0x78>)
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <HAL_TIM_Base_MspInit+0x78>)
 80071c8:	f043 0301 	orr.w	r3, r3, #1
 80071cc:	61d3      	str	r3, [r2, #28]
 80071ce:	4b16      	ldr	r3, [pc, #88]	@ (8007228 <HAL_TIM_Base_MspInit+0x78>)
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80071da:	2200      	movs	r2, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	201c      	movs	r0, #28
 80071e0:	f000 fe8b 	bl	8007efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80071e4:	201c      	movs	r0, #28
 80071e6:	f000 fea4 	bl	8007f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80071ea:	e018      	b.n	800721e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0e      	ldr	r2, [pc, #56]	@ (800722c <HAL_TIM_Base_MspInit+0x7c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d113      	bne.n	800721e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80071f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <HAL_TIM_Base_MspInit+0x78>)
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007228 <HAL_TIM_Base_MspInit+0x78>)
 80071fc:	f043 0302 	orr.w	r3, r3, #2
 8007200:	61d3      	str	r3, [r2, #28]
 8007202:	4b09      	ldr	r3, [pc, #36]	@ (8007228 <HAL_TIM_Base_MspInit+0x78>)
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	201d      	movs	r0, #29
 8007214:	f000 fe71 	bl	8007efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007218:	201d      	movs	r0, #29
 800721a:	f000 fe8a 	bl	8007f32 <HAL_NVIC_EnableIRQ>
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40021000 	.word	0x40021000
 800722c:	40000400 	.word	0x40000400

08007230 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800724e:	d12a      	bne.n	80072a6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007250:	4b17      	ldr	r3, [pc, #92]	@ (80072b0 <HAL_TIM_MspPostInit+0x80>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	4a16      	ldr	r2, [pc, #88]	@ (80072b0 <HAL_TIM_MspPostInit+0x80>)
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	6193      	str	r3, [r2, #24]
 800725c:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <HAL_TIM_MspPostInit+0x80>)
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800726e:	2302      	movs	r3, #2
 8007270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007272:	2302      	movs	r3, #2
 8007274:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007276:	f107 030c 	add.w	r3, r7, #12
 800727a:	4619      	mov	r1, r3
 800727c:	480d      	ldr	r0, [pc, #52]	@ (80072b4 <HAL_TIM_MspPostInit+0x84>)
 800727e:	f000 fe73 	bl	8007f68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8007282:	4b0d      	ldr	r3, [pc, #52]	@ (80072b8 <HAL_TIM_MspPostInit+0x88>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	4a05      	ldr	r2, [pc, #20]	@ (80072b8 <HAL_TIM_MspPostInit+0x88>)
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80072a6:	bf00      	nop
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40021000 	.word	0x40021000
 80072b4:	40010800 	.word	0x40010800
 80072b8:	40010000 	.word	0x40010000

080072bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072c4:	f107 0310 	add.w	r3, r7, #16
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	609a      	str	r2, [r3, #8]
 80072d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <HAL_UART_MspInit+0x8c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d131      	bne.n	8007340 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80072dc:	4b1b      	ldr	r3, [pc, #108]	@ (800734c <HAL_UART_MspInit+0x90>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	4a1a      	ldr	r2, [pc, #104]	@ (800734c <HAL_UART_MspInit+0x90>)
 80072e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072e6:	6193      	str	r3, [r2, #24]
 80072e8:	4b18      	ldr	r3, [pc, #96]	@ (800734c <HAL_UART_MspInit+0x90>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072f4:	4b15      	ldr	r3, [pc, #84]	@ (800734c <HAL_UART_MspInit+0x90>)
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	4a14      	ldr	r2, [pc, #80]	@ (800734c <HAL_UART_MspInit+0x90>)
 80072fa:	f043 0304 	orr.w	r3, r3, #4
 80072fe:	6193      	str	r3, [r2, #24]
 8007300:	4b12      	ldr	r3, [pc, #72]	@ (800734c <HAL_UART_MspInit+0x90>)
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800730c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007310:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007312:	2302      	movs	r3, #2
 8007314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007316:	2303      	movs	r3, #3
 8007318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	4619      	mov	r1, r3
 8007320:	480b      	ldr	r0, [pc, #44]	@ (8007350 <HAL_UART_MspInit+0x94>)
 8007322:	f000 fe21 	bl	8007f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800732a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	4619      	mov	r1, r3
 800733a:	4805      	ldr	r0, [pc, #20]	@ (8007350 <HAL_UART_MspInit+0x94>)
 800733c:	f000 fe14 	bl	8007f68 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007340:	bf00      	nop
 8007342:	3720      	adds	r7, #32
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40013800 	.word	0x40013800
 800734c:	40021000 	.word	0x40021000
 8007350:	40010800 	.word	0x40010800

08007354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007358:	bf00      	nop
 800735a:	e7fd      	b.n	8007358 <NMI_Handler+0x4>

0800735c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <HardFault_Handler+0x4>

08007364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007368:	bf00      	nop
 800736a:	e7fd      	b.n	8007368 <MemManage_Handler+0x4>

0800736c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007370:	bf00      	nop
 8007372:	e7fd      	b.n	8007370 <BusFault_Handler+0x4>

08007374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <UsageFault_Handler+0x4>

0800737c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr

080073a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073a4:	f000 f96c 	bl	8007680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073a8:	bf00      	nop
 80073aa:	bd80      	pop	{r7, pc}

080073ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80073b0:	2010      	movs	r0, #16
 80073b2:	f000 ff8d 	bl	80082d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}

080073ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80073be:	2040      	movs	r0, #64	@ 0x40
 80073c0:	f000 ff86 	bl	80082d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80073c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80073c8:	f000 ff82 	bl	80082d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80073cc:	bf00      	nop
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80073d4:	4802      	ldr	r0, [pc, #8]	@ (80073e0 <TIM2_IRQHandler+0x10>)
 80073d6:	f002 f863 	bl	80094a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80073da:	bf00      	nop
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200002e0 	.word	0x200002e0

080073e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80073e8:	4802      	ldr	r0, [pc, #8]	@ (80073f4 <TIM3_IRQHandler+0x10>)
 80073ea:	f002 f859 	bl	80094a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80073ee:	bf00      	nop
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20000328 	.word	0x20000328

080073f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80073fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007400:	f000 ff66 	bl	80082d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007404:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007408:	f000 ff62 	bl	80082d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800740c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007410:	f000 ff5e 	bl	80082d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007414:	bf00      	nop
 8007416:	bd80      	pop	{r7, pc}

08007418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return 1;
 800741c:	2301      	movs	r3, #1
}
 800741e:	4618      	mov	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr

08007426 <_kill>:

int _kill(int pid, int sig)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007430:	f003 fedc 	bl	800b1ec <__errno>
 8007434:	4603      	mov	r3, r0
 8007436:	2216      	movs	r2, #22
 8007438:	601a      	str	r2, [r3, #0]
  return -1;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <_exit>:

void _exit (int status)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800744e:	f04f 31ff 	mov.w	r1, #4294967295
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff ffe7 	bl	8007426 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <_exit+0x12>

0800745c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e00a      	b.n	8007484 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800746e:	f3af 8000 	nop.w
 8007472:	4601      	mov	r1, r0
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	60ba      	str	r2, [r7, #8]
 800747a:	b2ca      	uxtb	r2, r1
 800747c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	3301      	adds	r3, #1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	dbf0      	blt.n	800746e <_read+0x12>
  }

  return len;
 800748c:	687b      	ldr	r3, [r7, #4]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b086      	sub	sp, #24
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	e009      	b.n	80074bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	60ba      	str	r2, [r7, #8]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	3301      	adds	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	dbf1      	blt.n	80074a8 <_write+0x12>
  }
  return len;
 80074c4:	687b      	ldr	r3, [r7, #4]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <_close>:

int _close(int file)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80074f4:	605a      	str	r2, [r3, #4]
  return 0;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <_isatty>:

int _isatty(int file)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800750a:	2301      	movs	r3, #1
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr

08007516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
	...

08007530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007538:	4a14      	ldr	r2, [pc, #80]	@ (800758c <_sbrk+0x5c>)
 800753a:	4b15      	ldr	r3, [pc, #84]	@ (8007590 <_sbrk+0x60>)
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007544:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <_sbrk+0x64>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800754c:	4b11      	ldr	r3, [pc, #68]	@ (8007594 <_sbrk+0x64>)
 800754e:	4a12      	ldr	r2, [pc, #72]	@ (8007598 <_sbrk+0x68>)
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007552:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <_sbrk+0x64>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	429a      	cmp	r2, r3
 800755e:	d207      	bcs.n	8007570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007560:	f003 fe44 	bl	800b1ec <__errno>
 8007564:	4603      	mov	r3, r0
 8007566:	220c      	movs	r2, #12
 8007568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800756a:	f04f 33ff 	mov.w	r3, #4294967295
 800756e:	e009      	b.n	8007584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007570:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <_sbrk+0x64>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007576:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <_sbrk+0x64>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	4a05      	ldr	r2, [pc, #20]	@ (8007594 <_sbrk+0x64>)
 8007580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20005000 	.word	0x20005000
 8007590:	00000400 	.word	0x00000400
 8007594:	20000410 	.word	0x20000410
 8007598:	20000568 	.word	0x20000568

0800759c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80075a0:	bf00      	nop
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80075a8:	f7ff fff8 	bl	800759c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075ac:	480b      	ldr	r0, [pc, #44]	@ (80075dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80075ae:	490c      	ldr	r1, [pc, #48]	@ (80075e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80075b0:	4a0c      	ldr	r2, [pc, #48]	@ (80075e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80075b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075b4:	e002      	b.n	80075bc <LoopCopyDataInit>

080075b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075ba:	3304      	adds	r3, #4

080075bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075c0:	d3f9      	bcc.n	80075b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075c2:	4a09      	ldr	r2, [pc, #36]	@ (80075e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80075c4:	4c09      	ldr	r4, [pc, #36]	@ (80075ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80075c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075c8:	e001      	b.n	80075ce <LoopFillZerobss>

080075ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075cc:	3204      	adds	r2, #4

080075ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075d0:	d3fb      	bcc.n	80075ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075d2:	f003 fe11 	bl	800b1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80075d6:	f7ff fa19 	bl	8006a0c <main>
  bx lr
 80075da:	4770      	bx	lr
  ldr r0, =_sdata
 80075dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80075e4:	0800df90 	.word	0x0800df90
  ldr r2, =_sbss
 80075e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80075ec:	20000568 	.word	0x20000568

080075f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80075f0:	e7fe      	b.n	80075f0 <ADC1_2_IRQHandler>
	...

080075f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075f8:	4b08      	ldr	r3, [pc, #32]	@ (800761c <HAL_Init+0x28>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a07      	ldr	r2, [pc, #28]	@ (800761c <HAL_Init+0x28>)
 80075fe:	f043 0310 	orr.w	r3, r3, #16
 8007602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007604:	2003      	movs	r0, #3
 8007606:	f000 fc6d 	bl	8007ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800760a:	200f      	movs	r0, #15
 800760c:	f000 f808 	bl	8007620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007610:	f7ff fd22 	bl	8007058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40022000 	.word	0x40022000

08007620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007628:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <HAL_InitTick+0x54>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	4b12      	ldr	r3, [pc, #72]	@ (8007678 <HAL_InitTick+0x58>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007636:	fbb3 f3f1 	udiv	r3, r3, r1
 800763a:	fbb2 f3f3 	udiv	r3, r2, r3
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fc85 	bl	8007f4e <HAL_SYSTICK_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e00e      	b.n	800766c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	d80a      	bhi.n	800766a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007654:	2200      	movs	r2, #0
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	f000 fc4d 	bl	8007efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007660:	4a06      	ldr	r2, [pc, #24]	@ (800767c <HAL_InitTick+0x5c>)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	e000      	b.n	800766c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000004 	.word	0x20000004
 8007678:	2000000c 	.word	0x2000000c
 800767c:	20000008 	.word	0x20000008

08007680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007684:	4b05      	ldr	r3, [pc, #20]	@ (800769c <HAL_IncTick+0x1c>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	4b05      	ldr	r3, [pc, #20]	@ (80076a0 <HAL_IncTick+0x20>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4413      	add	r3, r2
 8007690:	4a03      	ldr	r2, [pc, #12]	@ (80076a0 <HAL_IncTick+0x20>)
 8007692:	6013      	str	r3, [r2, #0]
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	20000414 	.word	0x20000414

080076a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  return uwTick;
 80076a8:	4b02      	ldr	r3, [pc, #8]	@ (80076b4 <HAL_GetTick+0x10>)
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr
 80076b4:	20000414 	.word	0x20000414

080076b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076c0:	f7ff fff0 	bl	80076a4 <HAL_GetTick>
 80076c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d005      	beq.n	80076de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <HAL_Delay+0x44>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4413      	add	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076de:	bf00      	nop
 80076e0:	f7ff ffe0 	bl	80076a4 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d8f7      	bhi.n	80076e0 <HAL_Delay+0x28>
  {
  }
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	2000000c 	.word	0x2000000c

08007700 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e0be      	b.n	80078a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fcbc 	bl	80070bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fabf 	bl	8007cc8 <ADC_ConversionStop_Disable>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	f040 8099 	bne.w	800788e <HAL_ADC_Init+0x18e>
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 8095 	bne.w	800788e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800776c:	f023 0302 	bic.w	r3, r3, #2
 8007770:	f043 0202 	orr.w	r2, r3, #2
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007780:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7b1b      	ldrb	r3, [r3, #12]
 8007786:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007788:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4313      	orrs	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007798:	d003      	beq.n	80077a2 <HAL_ADC_Init+0xa2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d102      	bne.n	80077a8 <HAL_ADC_Init+0xa8>
 80077a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077a6:	e000      	b.n	80077aa <HAL_ADC_Init+0xaa>
 80077a8:	2300      	movs	r3, #0
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7d1b      	ldrb	r3, [r3, #20]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d119      	bne.n	80077ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7b1b      	ldrb	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	035a      	lsls	r2, r3, #13
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	e00b      	b.n	80077ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	f043 0201 	orr.w	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	4b28      	ldr	r3, [pc, #160]	@ (80078a8 <HAL_ADC_Init+0x1a8>)
 8007808:	4013      	ands	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	430b      	orrs	r3, r1
 8007812:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781c:	d003      	beq.n	8007826 <HAL_ADC_Init+0x126>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d104      	bne.n	8007830 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	3b01      	subs	r3, #1
 800782c:	051b      	lsls	r3, r3, #20
 800782e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	430a      	orrs	r2, r1
 8007842:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	4b18      	ldr	r3, [pc, #96]	@ (80078ac <HAL_ADC_Init+0x1ac>)
 800784c:	4013      	ands	r3, r2
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	d10b      	bne.n	800786c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	f043 0201 	orr.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800786a:	e018      	b.n	800789e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	f023 0312 	bic.w	r3, r3, #18
 8007874:	f043 0210 	orr.w	r2, r3, #16
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f043 0201 	orr.w	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800788c:	e007      	b.n	800789e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007892:	f043 0210 	orr.w	r2, r3, #16
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	ffe1f7fd 	.word	0xffe1f7fd
 80078ac:	ff1f0efe 	.word	0xff1f0efe

080078b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_ADC_Start+0x1a>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e098      	b.n	80079fc <HAL_ADC_Start+0x14c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f99e 	bl	8007c14 <ADC_Enable>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 8087 	bne.w	80079f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a41      	ldr	r2, [pc, #260]	@ (8007a04 <HAL_ADC_Start+0x154>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d105      	bne.n	800790e <HAL_ADC_Start+0x5e>
 8007902:	4b41      	ldr	r3, [pc, #260]	@ (8007a08 <HAL_ADC_Start+0x158>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d115      	bne.n	800793a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007924:	2b00      	cmp	r3, #0
 8007926:	d026      	beq.n	8007976 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007930:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007938:	e01d      	b.n	8007976 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a08 <HAL_ADC_Start+0x158>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_ADC_Start+0xaa>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a2b      	ldr	r2, [pc, #172]	@ (8007a04 <HAL_ADC_Start+0x154>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d10d      	bne.n	8007976 <HAL_ADC_Start+0xc6>
 800795a:	4b2b      	ldr	r3, [pc, #172]	@ (8007a08 <HAL_ADC_Start+0x158>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800796e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d006      	beq.n	8007990 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007986:	f023 0206 	bic.w	r2, r3, #6
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800798e:	e002      	b.n	8007996 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0202 	mvn.w	r2, #2
 80079a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80079b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80079b6:	d113      	bne.n	80079e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80079bc:	4a11      	ldr	r2, [pc, #68]	@ (8007a04 <HAL_ADC_Start+0x154>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d105      	bne.n	80079ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80079c2:	4b11      	ldr	r3, [pc, #68]	@ (8007a08 <HAL_ADC_Start+0x158>)
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d108      	bne.n	80079e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80079dc:	609a      	str	r2, [r3, #8]
 80079de:	e00c      	b.n	80079fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	e003      	b.n	80079fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	40012800 	.word	0x40012800
 8007a08:	40012400 	.word	0x40012400

08007a0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr

08007a24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x20>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e0dc      	b.n	8007bfe <HAL_ADC_ConfigChannel+0x1da>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2b06      	cmp	r3, #6
 8007a52:	d81c      	bhi.n	8007a8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	3b05      	subs	r3, #5
 8007a66:	221f      	movs	r2, #31
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	4019      	ands	r1, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3b05      	subs	r3, #5
 8007a80:	fa00 f203 	lsl.w	r2, r0, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a8c:	e03c      	b.n	8007b08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b0c      	cmp	r3, #12
 8007a94:	d81c      	bhi.n	8007ad0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3b23      	subs	r3, #35	@ 0x23
 8007aa8:	221f      	movs	r2, #31
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	4019      	ands	r1, r3
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	3b23      	subs	r3, #35	@ 0x23
 8007ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ace:	e01b      	b.n	8007b08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	3b41      	subs	r3, #65	@ 0x41
 8007ae2:	221f      	movs	r2, #31
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	4019      	ands	r1, r3
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	3b41      	subs	r3, #65	@ 0x41
 8007afc:	fa00 f203 	lsl.w	r2, r0, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b09      	cmp	r3, #9
 8007b0e:	d91c      	bls.n	8007b4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68d9      	ldr	r1, [r3, #12]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	4413      	add	r3, r2
 8007b20:	3b1e      	subs	r3, #30
 8007b22:	2207      	movs	r2, #7
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	4019      	ands	r1, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	6898      	ldr	r0, [r3, #8]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	4413      	add	r3, r2
 8007b3a:	3b1e      	subs	r3, #30
 8007b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	60da      	str	r2, [r3, #12]
 8007b48:	e019      	b.n	8007b7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6919      	ldr	r1, [r3, #16]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	2207      	movs	r2, #7
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	43db      	mvns	r3, r3
 8007b62:	4019      	ands	r1, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	6898      	ldr	r0, [r3, #8]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	4413      	add	r3, r2
 8007b72:	fa00 f203 	lsl.w	r2, r0, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b10      	cmp	r3, #16
 8007b84:	d003      	beq.n	8007b8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007b8a:	2b11      	cmp	r3, #17
 8007b8c:	d132      	bne.n	8007bf4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1d      	ldr	r2, [pc, #116]	@ (8007c08 <HAL_ADC_ConfigChannel+0x1e4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d125      	bne.n	8007be4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d126      	bne.n	8007bf4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007bb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d11a      	bne.n	8007bf4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007bbe:	4b13      	ldr	r3, [pc, #76]	@ (8007c0c <HAL_ADC_ConfigChannel+0x1e8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a13      	ldr	r2, [pc, #76]	@ (8007c10 <HAL_ADC_ConfigChannel+0x1ec>)
 8007bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc8:	0c9a      	lsrs	r2, r3, #18
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007bd4:	e002      	b.n	8007bdc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f9      	bne.n	8007bd6 <HAL_ADC_ConfigChannel+0x1b2>
 8007be2:	e007      	b.n	8007bf4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	f043 0220 	orr.w	r2, r3, #32
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr
 8007c08:	40012400 	.word	0x40012400
 8007c0c:	20000004 	.word	0x20000004
 8007c10:	431bde83 	.word	0x431bde83

08007c14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d040      	beq.n	8007cb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007c42:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc0 <ADC_Enable+0xac>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <ADC_Enable+0xb0>)
 8007c48:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4c:	0c9b      	lsrs	r3, r3, #18
 8007c4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007c50:	e002      	b.n	8007c58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f9      	bne.n	8007c52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007c5e:	f7ff fd21 	bl	80076a4 <HAL_GetTick>
 8007c62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007c64:	e01f      	b.n	8007ca6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007c66:	f7ff fd1d 	bl	80076a4 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d918      	bls.n	8007ca6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d011      	beq.n	8007ca6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c86:	f043 0210 	orr.w	r2, r3, #16
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	f043 0201 	orr.w	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e007      	b.n	8007cb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d1d8      	bne.n	8007c66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000004 	.word	0x20000004
 8007cc4:	431bde83 	.word	0x431bde83

08007cc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d12e      	bne.n	8007d40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007cf2:	f7ff fcd7 	bl	80076a4 <HAL_GetTick>
 8007cf6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007cf8:	e01b      	b.n	8007d32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007cfa:	f7ff fcd3 	bl	80076a4 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d914      	bls.n	8007d32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d10d      	bne.n	8007d32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1a:	f043 0210 	orr.w	r2, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	f043 0201 	orr.w	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e007      	b.n	8007d42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d0dc      	beq.n	8007cfa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d90 <__NVIC_SetPriorityGrouping+0x44>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d7e:	4a04      	ldr	r2, [pc, #16]	@ (8007d90 <__NVIC_SetPriorityGrouping+0x44>)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	60d3      	str	r3, [r2, #12]
}
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d98:	4b04      	ldr	r3, [pc, #16]	@ (8007dac <__NVIC_GetPriorityGrouping+0x18>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	0a1b      	lsrs	r3, r3, #8
 8007d9e:	f003 0307 	and.w	r3, r3, #7
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	e000ed00 	.word	0xe000ed00

08007db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	db0b      	blt.n	8007dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	f003 021f 	and.w	r2, r3, #31
 8007dc8:	4906      	ldr	r1, [pc, #24]	@ (8007de4 <__NVIC_EnableIRQ+0x34>)
 8007dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dce:	095b      	lsrs	r3, r3, #5
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8007dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	e000e100 	.word	0xe000e100

08007de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db0a      	blt.n	8007e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	490c      	ldr	r1, [pc, #48]	@ (8007e34 <__NVIC_SetPriority+0x4c>)
 8007e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e06:	0112      	lsls	r2, r2, #4
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e10:	e00a      	b.n	8007e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	4908      	ldr	r1, [pc, #32]	@ (8007e38 <__NVIC_SetPriority+0x50>)
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	3b04      	subs	r3, #4
 8007e20:	0112      	lsls	r2, r2, #4
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	440b      	add	r3, r1
 8007e26:	761a      	strb	r2, [r3, #24]
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	e000e100 	.word	0xe000e100
 8007e38:	e000ed00 	.word	0xe000ed00

08007e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b089      	sub	sp, #36	@ 0x24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f1c3 0307 	rsb	r3, r3, #7
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	bf28      	it	cs
 8007e5a:	2304      	movcs	r3, #4
 8007e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3304      	adds	r3, #4
 8007e62:	2b06      	cmp	r3, #6
 8007e64:	d902      	bls.n	8007e6c <NVIC_EncodePriority+0x30>
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	3b03      	subs	r3, #3
 8007e6a:	e000      	b.n	8007e6e <NVIC_EncodePriority+0x32>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e70:	f04f 32ff 	mov.w	r2, #4294967295
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	43da      	mvns	r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	401a      	ands	r2, r3
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e84:	f04f 31ff 	mov.w	r1, #4294967295
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8e:	43d9      	mvns	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e94:	4313      	orrs	r3, r2
         );
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3724      	adds	r7, #36	@ 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr

08007ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eb0:	d301      	bcc.n	8007eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e00f      	b.n	8007ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee0 <SysTick_Config+0x40>)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ebe:	210f      	movs	r1, #15
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	f7ff ff90 	bl	8007de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ec8:	4b05      	ldr	r3, [pc, #20]	@ (8007ee0 <SysTick_Config+0x40>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ece:	4b04      	ldr	r3, [pc, #16]	@ (8007ee0 <SysTick_Config+0x40>)
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	e000e010 	.word	0xe000e010

08007ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff ff2d 	bl	8007d4c <__NVIC_SetPriorityGrouping>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b086      	sub	sp, #24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	4603      	mov	r3, r0
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f0c:	f7ff ff42 	bl	8007d94 <__NVIC_GetPriorityGrouping>
 8007f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	6978      	ldr	r0, [r7, #20]
 8007f18:	f7ff ff90 	bl	8007e3c <NVIC_EncodePriority>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f22:	4611      	mov	r1, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff ff5f 	bl	8007de8 <__NVIC_SetPriority>
}
 8007f2a:	bf00      	nop
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	4603      	mov	r3, r0
 8007f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff ff35 	bl	8007db0 <__NVIC_EnableIRQ>
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff ffa2 	bl	8007ea0 <SysTick_Config>
 8007f5c:	4603      	mov	r3, r0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b08b      	sub	sp, #44	@ 0x2c
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007f76:	2300      	movs	r3, #0
 8007f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f7a:	e169      	b.n	8008250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	f040 8158 	bne.w	800824a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4a9a      	ldr	r2, [pc, #616]	@ (8008208 <HAL_GPIO_Init+0x2a0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d05e      	beq.n	8008062 <HAL_GPIO_Init+0xfa>
 8007fa4:	4a98      	ldr	r2, [pc, #608]	@ (8008208 <HAL_GPIO_Init+0x2a0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d875      	bhi.n	8008096 <HAL_GPIO_Init+0x12e>
 8007faa:	4a98      	ldr	r2, [pc, #608]	@ (800820c <HAL_GPIO_Init+0x2a4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d058      	beq.n	8008062 <HAL_GPIO_Init+0xfa>
 8007fb0:	4a96      	ldr	r2, [pc, #600]	@ (800820c <HAL_GPIO_Init+0x2a4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d86f      	bhi.n	8008096 <HAL_GPIO_Init+0x12e>
 8007fb6:	4a96      	ldr	r2, [pc, #600]	@ (8008210 <HAL_GPIO_Init+0x2a8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d052      	beq.n	8008062 <HAL_GPIO_Init+0xfa>
 8007fbc:	4a94      	ldr	r2, [pc, #592]	@ (8008210 <HAL_GPIO_Init+0x2a8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d869      	bhi.n	8008096 <HAL_GPIO_Init+0x12e>
 8007fc2:	4a94      	ldr	r2, [pc, #592]	@ (8008214 <HAL_GPIO_Init+0x2ac>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d04c      	beq.n	8008062 <HAL_GPIO_Init+0xfa>
 8007fc8:	4a92      	ldr	r2, [pc, #584]	@ (8008214 <HAL_GPIO_Init+0x2ac>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d863      	bhi.n	8008096 <HAL_GPIO_Init+0x12e>
 8007fce:	4a92      	ldr	r2, [pc, #584]	@ (8008218 <HAL_GPIO_Init+0x2b0>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d046      	beq.n	8008062 <HAL_GPIO_Init+0xfa>
 8007fd4:	4a90      	ldr	r2, [pc, #576]	@ (8008218 <HAL_GPIO_Init+0x2b0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d85d      	bhi.n	8008096 <HAL_GPIO_Init+0x12e>
 8007fda:	2b12      	cmp	r3, #18
 8007fdc:	d82a      	bhi.n	8008034 <HAL_GPIO_Init+0xcc>
 8007fde:	2b12      	cmp	r3, #18
 8007fe0:	d859      	bhi.n	8008096 <HAL_GPIO_Init+0x12e>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <HAL_GPIO_Init+0x80>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008063 	.word	0x08008063
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	0800804f 	.word	0x0800804f
 8007ff4:	08008091 	.word	0x08008091
 8007ff8:	08008097 	.word	0x08008097
 8007ffc:	08008097 	.word	0x08008097
 8008000:	08008097 	.word	0x08008097
 8008004:	08008097 	.word	0x08008097
 8008008:	08008097 	.word	0x08008097
 800800c:	08008097 	.word	0x08008097
 8008010:	08008097 	.word	0x08008097
 8008014:	08008097 	.word	0x08008097
 8008018:	08008097 	.word	0x08008097
 800801c:	08008097 	.word	0x08008097
 8008020:	08008097 	.word	0x08008097
 8008024:	08008097 	.word	0x08008097
 8008028:	08008097 	.word	0x08008097
 800802c:	08008045 	.word	0x08008045
 8008030:	08008059 	.word	0x08008059
 8008034:	4a79      	ldr	r2, [pc, #484]	@ (800821c <HAL_GPIO_Init+0x2b4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800803a:	e02c      	b.n	8008096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	623b      	str	r3, [r7, #32]
          break;
 8008042:	e029      	b.n	8008098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	3304      	adds	r3, #4
 800804a:	623b      	str	r3, [r7, #32]
          break;
 800804c:	e024      	b.n	8008098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	3308      	adds	r3, #8
 8008054:	623b      	str	r3, [r7, #32]
          break;
 8008056:	e01f      	b.n	8008098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	330c      	adds	r3, #12
 800805e:	623b      	str	r3, [r7, #32]
          break;
 8008060:	e01a      	b.n	8008098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d102      	bne.n	8008070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800806a:	2304      	movs	r3, #4
 800806c:	623b      	str	r3, [r7, #32]
          break;
 800806e:	e013      	b.n	8008098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d105      	bne.n	8008084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008078:	2308      	movs	r3, #8
 800807a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	611a      	str	r2, [r3, #16]
          break;
 8008082:	e009      	b.n	8008098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008084:	2308      	movs	r3, #8
 8008086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	615a      	str	r2, [r3, #20]
          break;
 800808e:	e003      	b.n	8008098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008090:	2300      	movs	r3, #0
 8008092:	623b      	str	r3, [r7, #32]
          break;
 8008094:	e000      	b.n	8008098 <HAL_GPIO_Init+0x130>
          break;
 8008096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2bff      	cmp	r3, #255	@ 0xff
 800809c:	d801      	bhi.n	80080a2 <HAL_GPIO_Init+0x13a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	e001      	b.n	80080a6 <HAL_GPIO_Init+0x13e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3304      	adds	r3, #4
 80080a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2bff      	cmp	r3, #255	@ 0xff
 80080ac:	d802      	bhi.n	80080b4 <HAL_GPIO_Init+0x14c>
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	e002      	b.n	80080ba <HAL_GPIO_Init+0x152>
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	3b08      	subs	r3, #8
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	210f      	movs	r1, #15
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	fa01 f303 	lsl.w	r3, r1, r3
 80080c8:	43db      	mvns	r3, r3
 80080ca:	401a      	ands	r2, r3
 80080cc:	6a39      	ldr	r1, [r7, #32]
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	fa01 f303 	lsl.w	r3, r1, r3
 80080d4:	431a      	orrs	r2, r3
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80b1 	beq.w	800824a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80080e8:	4b4d      	ldr	r3, [pc, #308]	@ (8008220 <HAL_GPIO_Init+0x2b8>)
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	4a4c      	ldr	r2, [pc, #304]	@ (8008220 <HAL_GPIO_Init+0x2b8>)
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	6193      	str	r3, [r2, #24]
 80080f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008220 <HAL_GPIO_Init+0x2b8>)
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008100:	4a48      	ldr	r2, [pc, #288]	@ (8008224 <HAL_GPIO_Init+0x2bc>)
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	089b      	lsrs	r3, r3, #2
 8008106:	3302      	adds	r3, #2
 8008108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	220f      	movs	r2, #15
 8008118:	fa02 f303 	lsl.w	r3, r2, r3
 800811c:	43db      	mvns	r3, r3
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4013      	ands	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a40      	ldr	r2, [pc, #256]	@ (8008228 <HAL_GPIO_Init+0x2c0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d013      	beq.n	8008154 <HAL_GPIO_Init+0x1ec>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a3f      	ldr	r2, [pc, #252]	@ (800822c <HAL_GPIO_Init+0x2c4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00d      	beq.n	8008150 <HAL_GPIO_Init+0x1e8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a3e      	ldr	r2, [pc, #248]	@ (8008230 <HAL_GPIO_Init+0x2c8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d007      	beq.n	800814c <HAL_GPIO_Init+0x1e4>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a3d      	ldr	r2, [pc, #244]	@ (8008234 <HAL_GPIO_Init+0x2cc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d101      	bne.n	8008148 <HAL_GPIO_Init+0x1e0>
 8008144:	2303      	movs	r3, #3
 8008146:	e006      	b.n	8008156 <HAL_GPIO_Init+0x1ee>
 8008148:	2304      	movs	r3, #4
 800814a:	e004      	b.n	8008156 <HAL_GPIO_Init+0x1ee>
 800814c:	2302      	movs	r3, #2
 800814e:	e002      	b.n	8008156 <HAL_GPIO_Init+0x1ee>
 8008150:	2301      	movs	r3, #1
 8008152:	e000      	b.n	8008156 <HAL_GPIO_Init+0x1ee>
 8008154:	2300      	movs	r3, #0
 8008156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008158:	f002 0203 	and.w	r2, r2, #3
 800815c:	0092      	lsls	r2, r2, #2
 800815e:	4093      	lsls	r3, r2
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008166:	492f      	ldr	r1, [pc, #188]	@ (8008224 <HAL_GPIO_Init+0x2bc>)
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	089b      	lsrs	r3, r3, #2
 800816c:	3302      	adds	r3, #2
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008180:	4b2d      	ldr	r3, [pc, #180]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	492c      	ldr	r1, [pc, #176]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	4313      	orrs	r3, r2
 800818a:	608b      	str	r3, [r1, #8]
 800818c:	e006      	b.n	800819c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800818e:	4b2a      	ldr	r3, [pc, #168]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	43db      	mvns	r3, r3
 8008196:	4928      	ldr	r1, [pc, #160]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 8008198:	4013      	ands	r3, r2
 800819a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d006      	beq.n	80081b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80081a8:	4b23      	ldr	r3, [pc, #140]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	4922      	ldr	r1, [pc, #136]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60cb      	str	r3, [r1, #12]
 80081b4:	e006      	b.n	80081c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80081b6:	4b20      	ldr	r3, [pc, #128]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	43db      	mvns	r3, r3
 80081be:	491e      	ldr	r1, [pc, #120]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80081d0:	4b19      	ldr	r3, [pc, #100]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	4918      	ldr	r1, [pc, #96]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	4313      	orrs	r3, r2
 80081da:	604b      	str	r3, [r1, #4]
 80081dc:	e006      	b.n	80081ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80081de:	4b16      	ldr	r3, [pc, #88]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	43db      	mvns	r3, r3
 80081e6:	4914      	ldr	r1, [pc, #80]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d021      	beq.n	800823c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80081f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	490e      	ldr	r1, [pc, #56]	@ (8008238 <HAL_GPIO_Init+0x2d0>)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	4313      	orrs	r3, r2
 8008202:	600b      	str	r3, [r1, #0]
 8008204:	e021      	b.n	800824a <HAL_GPIO_Init+0x2e2>
 8008206:	bf00      	nop
 8008208:	10320000 	.word	0x10320000
 800820c:	10310000 	.word	0x10310000
 8008210:	10220000 	.word	0x10220000
 8008214:	10210000 	.word	0x10210000
 8008218:	10120000 	.word	0x10120000
 800821c:	10110000 	.word	0x10110000
 8008220:	40021000 	.word	0x40021000
 8008224:	40010000 	.word	0x40010000
 8008228:	40010800 	.word	0x40010800
 800822c:	40010c00 	.word	0x40010c00
 8008230:	40011000 	.word	0x40011000
 8008234:	40011400 	.word	0x40011400
 8008238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800823c:	4b0b      	ldr	r3, [pc, #44]	@ (800826c <HAL_GPIO_Init+0x304>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	43db      	mvns	r3, r3
 8008244:	4909      	ldr	r1, [pc, #36]	@ (800826c <HAL_GPIO_Init+0x304>)
 8008246:	4013      	ands	r3, r2
 8008248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	3301      	adds	r3, #1
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	fa22 f303 	lsr.w	r3, r2, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f ae8e 	bne.w	8007f7c <HAL_GPIO_Init+0x14>
  }
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	372c      	adds	r7, #44	@ 0x2c
 8008266:	46bd      	mov	sp, r7
 8008268:	bc80      	pop	{r7}
 800826a:	4770      	bx	lr
 800826c:	40010400 	.word	0x40010400

08008270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	887b      	ldrh	r3, [r7, #2]
 8008282:	4013      	ands	r3, r2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
 800828c:	e001      	b.n	8008292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	807b      	strh	r3, [r7, #2]
 80082aa:	4613      	mov	r3, r2
 80082ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082ae:	787b      	ldrb	r3, [r7, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082b4:	887a      	ldrh	r2, [r7, #2]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80082ba:	e003      	b.n	80082c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80082bc:	887b      	ldrh	r3, [r7, #2]
 80082be:	041a      	lsls	r2, r3, #16
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	611a      	str	r2, [r3, #16]
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr
	...

080082d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80082da:	4b08      	ldr	r3, [pc, #32]	@ (80082fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082e6:	4a05      	ldr	r2, [pc, #20]	@ (80082fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fa3a 	bl	8006768 <HAL_GPIO_EXTI_Callback>
  }
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40010400 	.word	0x40010400

08008300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e272      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8087 	beq.w	800842e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008320:	4b92      	ldr	r3, [pc, #584]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f003 030c 	and.w	r3, r3, #12
 8008328:	2b04      	cmp	r3, #4
 800832a:	d00c      	beq.n	8008346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800832c:	4b8f      	ldr	r3, [pc, #572]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f003 030c 	and.w	r3, r3, #12
 8008334:	2b08      	cmp	r3, #8
 8008336:	d112      	bne.n	800835e <HAL_RCC_OscConfig+0x5e>
 8008338:	4b8c      	ldr	r3, [pc, #560]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008344:	d10b      	bne.n	800835e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008346:	4b89      	ldr	r3, [pc, #548]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d06c      	beq.n	800842c <HAL_RCC_OscConfig+0x12c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d168      	bne.n	800842c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e24c      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008366:	d106      	bne.n	8008376 <HAL_RCC_OscConfig+0x76>
 8008368:	4b80      	ldr	r3, [pc, #512]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a7f      	ldr	r2, [pc, #508]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 800836e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	e02e      	b.n	80083d4 <HAL_RCC_OscConfig+0xd4>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10c      	bne.n	8008398 <HAL_RCC_OscConfig+0x98>
 800837e:	4b7b      	ldr	r3, [pc, #492]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a7a      	ldr	r2, [pc, #488]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	4b78      	ldr	r3, [pc, #480]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a77      	ldr	r2, [pc, #476]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e01d      	b.n	80083d4 <HAL_RCC_OscConfig+0xd4>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0xbc>
 80083a2:	4b72      	ldr	r3, [pc, #456]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a71      	ldr	r2, [pc, #452]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b6f      	ldr	r3, [pc, #444]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a6e      	ldr	r2, [pc, #440]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0xd4>
 80083bc:	4b6b      	ldr	r3, [pc, #428]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6a      	ldr	r2, [pc, #424]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	4b68      	ldr	r3, [pc, #416]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a67      	ldr	r2, [pc, #412]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d013      	beq.n	8008404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083dc:	f7ff f962 	bl	80076a4 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083e4:	f7ff f95e 	bl	80076a4 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b64      	cmp	r3, #100	@ 0x64
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e200      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083f6:	4b5d      	ldr	r3, [pc, #372]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0f0      	beq.n	80083e4 <HAL_RCC_OscConfig+0xe4>
 8008402:	e014      	b.n	800842e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008404:	f7ff f94e 	bl	80076a4 <HAL_GetTick>
 8008408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800840c:	f7ff f94a 	bl	80076a4 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b64      	cmp	r3, #100	@ 0x64
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e1ec      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800841e:	4b53      	ldr	r3, [pc, #332]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0x10c>
 800842a:	e000      	b.n	800842e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800842c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d063      	beq.n	8008502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800843a:	4b4c      	ldr	r3, [pc, #304]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f003 030c 	and.w	r3, r3, #12
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008446:	4b49      	ldr	r3, [pc, #292]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f003 030c 	and.w	r3, r3, #12
 800844e:	2b08      	cmp	r3, #8
 8008450:	d11c      	bne.n	800848c <HAL_RCC_OscConfig+0x18c>
 8008452:	4b46      	ldr	r3, [pc, #280]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d116      	bne.n	800848c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800845e:	4b43      	ldr	r3, [pc, #268]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_RCC_OscConfig+0x176>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d001      	beq.n	8008476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e1c0      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008476:	4b3d      	ldr	r3, [pc, #244]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4939      	ldr	r1, [pc, #228]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008486:	4313      	orrs	r3, r2
 8008488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800848a:	e03a      	b.n	8008502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d020      	beq.n	80084d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008494:	4b36      	ldr	r3, [pc, #216]	@ (8008570 <HAL_RCC_OscConfig+0x270>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800849a:	f7ff f903 	bl	80076a4 <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a2:	f7ff f8ff 	bl	80076a4 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e1a1      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b4:	4b2d      	ldr	r3, [pc, #180]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0f0      	beq.n	80084a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c0:	4b2a      	ldr	r3, [pc, #168]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	4927      	ldr	r1, [pc, #156]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	600b      	str	r3, [r1, #0]
 80084d4:	e015      	b.n	8008502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084d6:	4b26      	ldr	r3, [pc, #152]	@ (8008570 <HAL_RCC_OscConfig+0x270>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084dc:	f7ff f8e2 	bl	80076a4 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e4:	f7ff f8de 	bl	80076a4 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e180      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084f6:	4b1d      	ldr	r3, [pc, #116]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d03a      	beq.n	8008584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d019      	beq.n	800854a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008516:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <HAL_RCC_OscConfig+0x274>)
 8008518:	2201      	movs	r2, #1
 800851a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800851c:	f7ff f8c2 	bl	80076a4 <HAL_GetTick>
 8008520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008524:	f7ff f8be 	bl	80076a4 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e160      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008536:	4b0d      	ldr	r3, [pc, #52]	@ (800856c <HAL_RCC_OscConfig+0x26c>)
 8008538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008542:	2001      	movs	r0, #1
 8008544:	f000 face 	bl	8008ae4 <RCC_Delay>
 8008548:	e01c      	b.n	8008584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800854a:	4b0a      	ldr	r3, [pc, #40]	@ (8008574 <HAL_RCC_OscConfig+0x274>)
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008550:	f7ff f8a8 	bl	80076a4 <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008556:	e00f      	b.n	8008578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008558:	f7ff f8a4 	bl	80076a4 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d908      	bls.n	8008578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e146      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
 800856a:	bf00      	nop
 800856c:	40021000 	.word	0x40021000
 8008570:	42420000 	.word	0x42420000
 8008574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008578:	4b92      	ldr	r3, [pc, #584]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800857a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e9      	bne.n	8008558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 80a6 	beq.w	80086de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008596:	4b8b      	ldr	r3, [pc, #556]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10d      	bne.n	80085be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085a2:	4b88      	ldr	r3, [pc, #544]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	4a87      	ldr	r2, [pc, #540]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80085a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085ac:	61d3      	str	r3, [r2, #28]
 80085ae:	4b85      	ldr	r3, [pc, #532]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b6:	60bb      	str	r3, [r7, #8]
 80085b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085be:	4b82      	ldr	r3, [pc, #520]	@ (80087c8 <HAL_RCC_OscConfig+0x4c8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d118      	bne.n	80085fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085ca:	4b7f      	ldr	r3, [pc, #508]	@ (80087c8 <HAL_RCC_OscConfig+0x4c8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7e      	ldr	r2, [pc, #504]	@ (80087c8 <HAL_RCC_OscConfig+0x4c8>)
 80085d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085d6:	f7ff f865 	bl	80076a4 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085de:	f7ff f861 	bl	80076a4 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b64      	cmp	r3, #100	@ 0x64
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e103      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085f0:	4b75      	ldr	r3, [pc, #468]	@ (80087c8 <HAL_RCC_OscConfig+0x4c8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0f0      	beq.n	80085de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d106      	bne.n	8008612 <HAL_RCC_OscConfig+0x312>
 8008604:	4b6f      	ldr	r3, [pc, #444]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	4a6e      	ldr	r2, [pc, #440]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	6213      	str	r3, [r2, #32]
 8008610:	e02d      	b.n	800866e <HAL_RCC_OscConfig+0x36e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10c      	bne.n	8008634 <HAL_RCC_OscConfig+0x334>
 800861a:	4b6a      	ldr	r3, [pc, #424]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	4a69      	ldr	r2, [pc, #420]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	6213      	str	r3, [r2, #32]
 8008626:	4b67      	ldr	r3, [pc, #412]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	4a66      	ldr	r2, [pc, #408]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800862c:	f023 0304 	bic.w	r3, r3, #4
 8008630:	6213      	str	r3, [r2, #32]
 8008632:	e01c      	b.n	800866e <HAL_RCC_OscConfig+0x36e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	2b05      	cmp	r3, #5
 800863a:	d10c      	bne.n	8008656 <HAL_RCC_OscConfig+0x356>
 800863c:	4b61      	ldr	r3, [pc, #388]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	4a60      	ldr	r2, [pc, #384]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008642:	f043 0304 	orr.w	r3, r3, #4
 8008646:	6213      	str	r3, [r2, #32]
 8008648:	4b5e      	ldr	r3, [pc, #376]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	4a5d      	ldr	r2, [pc, #372]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	6213      	str	r3, [r2, #32]
 8008654:	e00b      	b.n	800866e <HAL_RCC_OscConfig+0x36e>
 8008656:	4b5b      	ldr	r3, [pc, #364]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	4a5a      	ldr	r2, [pc, #360]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800865c:	f023 0301 	bic.w	r3, r3, #1
 8008660:	6213      	str	r3, [r2, #32]
 8008662:	4b58      	ldr	r3, [pc, #352]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	4a57      	ldr	r2, [pc, #348]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008668:	f023 0304 	bic.w	r3, r3, #4
 800866c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d015      	beq.n	80086a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008676:	f7ff f815 	bl	80076a4 <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800867c:	e00a      	b.n	8008694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800867e:	f7ff f811 	bl	80076a4 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e0b1      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008694:	4b4b      	ldr	r3, [pc, #300]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0ee      	beq.n	800867e <HAL_RCC_OscConfig+0x37e>
 80086a0:	e014      	b.n	80086cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086a2:	f7fe ffff 	bl	80076a4 <HAL_GetTick>
 80086a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086a8:	e00a      	b.n	80086c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086aa:	f7fe fffb 	bl	80076a4 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d901      	bls.n	80086c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e09b      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086c0:	4b40      	ldr	r3, [pc, #256]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1ee      	bne.n	80086aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d105      	bne.n	80086de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086d2:	4b3c      	ldr	r3, [pc, #240]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	4a3b      	ldr	r2, [pc, #236]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80086d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 8087 	beq.w	80087f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086e8:	4b36      	ldr	r3, [pc, #216]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f003 030c 	and.w	r3, r3, #12
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d061      	beq.n	80087b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d146      	bne.n	800878a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086fc:	4b33      	ldr	r3, [pc, #204]	@ (80087cc <HAL_RCC_OscConfig+0x4cc>)
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008702:	f7fe ffcf 	bl	80076a4 <HAL_GetTick>
 8008706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008708:	e008      	b.n	800871c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800870a:	f7fe ffcb 	bl	80076a4 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e06d      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800871c:	4b29      	ldr	r3, [pc, #164]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1f0      	bne.n	800870a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008730:	d108      	bne.n	8008744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008732:	4b24      	ldr	r3, [pc, #144]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	4921      	ldr	r1, [pc, #132]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008740:	4313      	orrs	r3, r2
 8008742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008744:	4b1f      	ldr	r3, [pc, #124]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a19      	ldr	r1, [r3, #32]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008754:	430b      	orrs	r3, r1
 8008756:	491b      	ldr	r1, [pc, #108]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 8008758:	4313      	orrs	r3, r2
 800875a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800875c:	4b1b      	ldr	r3, [pc, #108]	@ (80087cc <HAL_RCC_OscConfig+0x4cc>)
 800875e:	2201      	movs	r2, #1
 8008760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008762:	f7fe ff9f 	bl	80076a4 <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800876a:	f7fe ff9b 	bl	80076a4 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e03d      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800877c:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0f0      	beq.n	800876a <HAL_RCC_OscConfig+0x46a>
 8008788:	e035      	b.n	80087f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800878a:	4b10      	ldr	r3, [pc, #64]	@ (80087cc <HAL_RCC_OscConfig+0x4cc>)
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008790:	f7fe ff88 	bl	80076a4 <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008798:	f7fe ff84 	bl	80076a4 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e026      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087aa:	4b06      	ldr	r3, [pc, #24]	@ (80087c4 <HAL_RCC_OscConfig+0x4c4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x498>
 80087b6:	e01e      	b.n	80087f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d107      	bne.n	80087d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e019      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
 80087c4:	40021000 	.word	0x40021000
 80087c8:	40007000 	.word	0x40007000
 80087cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80087d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <HAL_RCC_OscConfig+0x500>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d106      	bne.n	80087f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d001      	beq.n	80087f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40021000 	.word	0x40021000

08008804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e0d0      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008818:	4b6a      	ldr	r3, [pc, #424]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d910      	bls.n	8008848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008826:	4b67      	ldr	r3, [pc, #412]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f023 0207 	bic.w	r2, r3, #7
 800882e:	4965      	ldr	r1, [pc, #404]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	4313      	orrs	r3, r2
 8008834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008836:	4b63      	ldr	r3, [pc, #396]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d001      	beq.n	8008848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0b8      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008860:	4b59      	ldr	r3, [pc, #356]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a58      	ldr	r2, [pc, #352]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800886a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008878:	4b53      	ldr	r3, [pc, #332]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a52      	ldr	r2, [pc, #328]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 800887e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008884:	4b50      	ldr	r3, [pc, #320]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	494d      	ldr	r1, [pc, #308]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008892:	4313      	orrs	r3, r2
 8008894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d040      	beq.n	8008924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d107      	bne.n	80088ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088aa:	4b47      	ldr	r3, [pc, #284]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d115      	bne.n	80088e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e07f      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d107      	bne.n	80088d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c2:	4b41      	ldr	r3, [pc, #260]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e073      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088d2:	4b3d      	ldr	r3, [pc, #244]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e06b      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088e2:	4b39      	ldr	r3, [pc, #228]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f023 0203 	bic.w	r2, r3, #3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	4936      	ldr	r1, [pc, #216]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088f4:	f7fe fed6 	bl	80076a4 <HAL_GetTick>
 80088f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088fa:	e00a      	b.n	8008912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088fc:	f7fe fed2 	bl	80076a4 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800890a:	4293      	cmp	r3, r2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e053      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008912:	4b2d      	ldr	r3, [pc, #180]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f003 020c 	and.w	r2, r3, #12
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	429a      	cmp	r2, r3
 8008922:	d1eb      	bne.n	80088fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008924:	4b27      	ldr	r3, [pc, #156]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d210      	bcs.n	8008954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008932:	4b24      	ldr	r3, [pc, #144]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f023 0207 	bic.w	r2, r3, #7
 800893a:	4922      	ldr	r1, [pc, #136]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	4313      	orrs	r3, r2
 8008940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008942:	4b20      	ldr	r3, [pc, #128]	@ (80089c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d001      	beq.n	8008954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e032      	b.n	80089ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008960:	4b19      	ldr	r3, [pc, #100]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	4916      	ldr	r1, [pc, #88]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 800896e:	4313      	orrs	r3, r2
 8008970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d009      	beq.n	8008992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800897e:	4b12      	ldr	r3, [pc, #72]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	490e      	ldr	r1, [pc, #56]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 800898e:	4313      	orrs	r3, r2
 8008990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008992:	f000 f821 	bl	80089d8 <HAL_RCC_GetSysClockFreq>
 8008996:	4602      	mov	r2, r0
 8008998:	4b0b      	ldr	r3, [pc, #44]	@ (80089c8 <HAL_RCC_ClockConfig+0x1c4>)
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	490a      	ldr	r1, [pc, #40]	@ (80089cc <HAL_RCC_ClockConfig+0x1c8>)
 80089a4:	5ccb      	ldrb	r3, [r1, r3]
 80089a6:	fa22 f303 	lsr.w	r3, r2, r3
 80089aa:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <HAL_RCC_ClockConfig+0x1cc>)
 80089ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80089ae:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <HAL_RCC_ClockConfig+0x1d0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fe34 	bl	8007620 <HAL_InitTick>

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40022000 	.word	0x40022000
 80089c8:	40021000 	.word	0x40021000
 80089cc:	0800dbdc 	.word	0x0800dbdc
 80089d0:	20000004 	.word	0x20000004
 80089d4:	20000008 	.word	0x20000008

080089d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
 80089e6:	2300      	movs	r3, #0
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	2300      	movs	r3, #0
 80089ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80089f2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a6c <HAL_RCC_GetSysClockFreq+0x94>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 030c 	and.w	r3, r3, #12
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d002      	beq.n	8008a08 <HAL_RCC_GetSysClockFreq+0x30>
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	d003      	beq.n	8008a0e <HAL_RCC_GetSysClockFreq+0x36>
 8008a06:	e027      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a08:	4b19      	ldr	r3, [pc, #100]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a0a:	613b      	str	r3, [r7, #16]
      break;
 8008a0c:	e027      	b.n	8008a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	0c9b      	lsrs	r3, r3, #18
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	4a17      	ldr	r2, [pc, #92]	@ (8008a74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a18:	5cd3      	ldrb	r3, [r2, r3]
 8008a1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d010      	beq.n	8008a48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a26:	4b11      	ldr	r3, [pc, #68]	@ (8008a6c <HAL_RCC_GetSysClockFreq+0x94>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	0c5b      	lsrs	r3, r3, #17
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	4a11      	ldr	r2, [pc, #68]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a32:	5cd3      	ldrb	r3, [r2, r3]
 8008a34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a0d      	ldr	r2, [pc, #52]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a3a:	fb03 f202 	mul.w	r2, r3, r2
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e004      	b.n	8008a52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	613b      	str	r3, [r7, #16]
      break;
 8008a56:	e002      	b.n	8008a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008a58:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a5a:	613b      	str	r3, [r7, #16]
      break;
 8008a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a5e:	693b      	ldr	r3, [r7, #16]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40021000 	.word	0x40021000
 8008a70:	007a1200 	.word	0x007a1200
 8008a74:	0800dbf4 	.word	0x0800dbf4
 8008a78:	0800dc04 	.word	0x0800dc04
 8008a7c:	003d0900 	.word	0x003d0900

08008a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a84:	4b02      	ldr	r3, [pc, #8]	@ (8008a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8008a86:	681b      	ldr	r3, [r3, #0]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr
 8008a90:	20000004 	.word	0x20000004

08008a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a98:	f7ff fff2 	bl	8008a80 <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4903      	ldr	r1, [pc, #12]	@ (8008ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	0800dbec 	.word	0x0800dbec

08008abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ac0:	f7ff ffde 	bl	8008a80 <HAL_RCC_GetHCLKFreq>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	0adb      	lsrs	r3, r3, #11
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	4903      	ldr	r1, [pc, #12]	@ (8008ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ad2:	5ccb      	ldrb	r3, [r1, r3]
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	0800dbec 	.word	0x0800dbec

08008ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008aec:	4b0a      	ldr	r3, [pc, #40]	@ (8008b18 <RCC_Delay+0x34>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a0a      	ldr	r2, [pc, #40]	@ (8008b1c <RCC_Delay+0x38>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	0a5b      	lsrs	r3, r3, #9
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	fb02 f303 	mul.w	r3, r2, r3
 8008afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008b00:	bf00      	nop
  }
  while (Delay --);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1e5a      	subs	r2, r3, #1
 8008b06:	60fa      	str	r2, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f9      	bne.n	8008b00 <RCC_Delay+0x1c>
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr
 8008b18:	20000004 	.word	0x20000004
 8008b1c:	10624dd3 	.word	0x10624dd3

08008b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d07d      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b40:	4b4f      	ldr	r3, [pc, #316]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10d      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	4a4b      	ldr	r2, [pc, #300]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b56:	61d3      	str	r3, [r2, #28]
 8008b58:	4b49      	ldr	r3, [pc, #292]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b60:	60bb      	str	r3, [r7, #8]
 8008b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b64:	2301      	movs	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b68:	4b46      	ldr	r3, [pc, #280]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d118      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b74:	4b43      	ldr	r3, [pc, #268]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a42      	ldr	r2, [pc, #264]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b80:	f7fe fd90 	bl	80076a4 <HAL_GetTick>
 8008b84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b86:	e008      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b88:	f7fe fd8c 	bl	80076a4 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b64      	cmp	r3, #100	@ 0x64
 8008b94:	d901      	bls.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e06d      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ba6:	4b36      	ldr	r3, [pc, #216]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02e      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d027      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bce:	4b2e      	ldr	r3, [pc, #184]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008bda:	4a29      	ldr	r2, [pc, #164]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d014      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bea:	f7fe fd5b 	bl	80076a4 <HAL_GetTick>
 8008bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bf0:	e00a      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf2:	f7fe fd57 	bl	80076a4 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e036      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c08:	4b1d      	ldr	r3, [pc, #116]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0ee      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c14:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4917      	ldr	r1, [pc, #92]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d105      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c2c:	4b14      	ldr	r3, [pc, #80]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	4a13      	ldr	r2, [pc, #76]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d008      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c44:	4b0e      	ldr	r3, [pc, #56]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	490b      	ldr	r1, [pc, #44]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0310 	and.w	r3, r3, #16
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c62:	4b07      	ldr	r3, [pc, #28]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	4904      	ldr	r1, [pc, #16]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	40021000 	.word	0x40021000
 8008c84:	40007000 	.word	0x40007000
 8008c88:	42420440 	.word	0x42420440

08008c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e076      	b.n	8008d8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d108      	bne.n	8008cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cae:	d009      	beq.n	8008cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	61da      	str	r2, [r3, #28]
 8008cb6:	e005      	b.n	8008cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d106      	bne.n	8008ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fe fa28 	bl	8007134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d48:	ea42 0103 	orr.w	r1, r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	0c1a      	lsrs	r2, r3, #16
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f002 0204 	and.w	r2, r2, #4
 8008d6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	69da      	ldr	r2, [r3, #28]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <HAL_SPI_Transmit+0x22>
 8008db2:	2302      	movs	r3, #2
 8008db4:	e12d      	b.n	8009012 <HAL_SPI_Transmit+0x27e>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dbe:	f7fe fc71 	bl	80076a4 <HAL_GetTick>
 8008dc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008dc4:	88fb      	ldrh	r3, [r7, #6]
 8008dc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d002      	beq.n	8008dda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008dd8:	e116      	b.n	8009008 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <HAL_SPI_Transmit+0x52>
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008dea:	e10d      	b.n	8009008 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2203      	movs	r2, #3
 8008df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	88fa      	ldrh	r2, [r7, #6]
 8008e04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	88fa      	ldrh	r2, [r7, #6]
 8008e0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e32:	d10f      	bne.n	8008e54 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e5e:	2b40      	cmp	r3, #64	@ 0x40
 8008e60:	d007      	beq.n	8008e72 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e7a:	d14f      	bne.n	8008f1c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <HAL_SPI_Transmit+0xf6>
 8008e84:	8afb      	ldrh	r3, [r7, #22]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d142      	bne.n	8008f10 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	881a      	ldrh	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9a:	1c9a      	adds	r2, r3, #2
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008eae:	e02f      	b.n	8008f10 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d112      	bne.n	8008ee4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec2:	881a      	ldrh	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ece:	1c9a      	adds	r2, r3, #2
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008ee2:	e015      	b.n	8008f10 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ee4:	f7fe fbde 	bl	80076a4 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d803      	bhi.n	8008efc <HAL_SPI_Transmit+0x168>
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d102      	bne.n	8008f02 <HAL_SPI_Transmit+0x16e>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008f0e:	e07b      	b.n	8009008 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1ca      	bne.n	8008eb0 <HAL_SPI_Transmit+0x11c>
 8008f1a:	e050      	b.n	8008fbe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_SPI_Transmit+0x196>
 8008f24:	8afb      	ldrh	r3, [r7, #22]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d144      	bne.n	8008fb4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008f50:	e030      	b.n	8008fb4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d113      	bne.n	8008f88 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	330c      	adds	r3, #12
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008f86:	e015      	b.n	8008fb4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f88:	f7fe fb8c 	bl	80076a4 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d803      	bhi.n	8008fa0 <HAL_SPI_Transmit+0x20c>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d102      	bne.n	8008fa6 <HAL_SPI_Transmit+0x212>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008fb2:	e029      	b.n	8009008 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1c9      	bne.n	8008f52 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 f8b2 	bl	800912c <SPI_EndRxTxTransaction>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	77fb      	strb	r3, [r7, #31]
 8008ffe:	e003      	b.n	8009008 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009010:	7ffb      	ldrb	r3, [r7, #31]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800902c:	f7fe fb3a 	bl	80076a4 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	4413      	add	r3, r2
 800903a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800903c:	f7fe fb32 	bl	80076a4 <HAL_GetTick>
 8009040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009042:	4b39      	ldr	r3, [pc, #228]	@ (8009128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	015b      	lsls	r3, r3, #5
 8009048:	0d1b      	lsrs	r3, r3, #20
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	fb02 f303 	mul.w	r3, r2, r3
 8009050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009052:	e054      	b.n	80090fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905a:	d050      	beq.n	80090fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800905c:	f7fe fb22 	bl	80076a4 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	429a      	cmp	r2, r3
 800906a:	d902      	bls.n	8009072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d13d      	bne.n	80090ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800908a:	d111      	bne.n	80090b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009094:	d004      	beq.n	80090a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800909e:	d107      	bne.n	80090b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090b8:	d10f      	bne.n	80090da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e017      	b.n	800911e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4013      	ands	r3, r2
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	429a      	cmp	r2, r3
 800910c:	bf0c      	ite	eq
 800910e:	2301      	moveq	r3, #1
 8009110:	2300      	movne	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	429a      	cmp	r2, r3
 800911a:	d19b      	bne.n	8009054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000004 	.word	0x20000004

0800912c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af02      	add	r7, sp, #8
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2200      	movs	r2, #0
 8009140:	2180      	movs	r1, #128	@ 0x80
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7ff ff6a 	bl	800901c <SPI_WaitFlagStateUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009152:	f043 0220 	orr.w	r2, r3, #32
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e000      	b.n	8009160 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e041      	b.n	80091fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fe f80e 	bl	80071b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f000 fc30 	bl	8009a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d001      	beq.n	8009220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e03a      	b.n	8009296 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a18      	ldr	r2, [pc, #96]	@ (80092a0 <HAL_TIM_Base_Start_IT+0x98>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x58>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800924a:	d009      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x58>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a14      	ldr	r2, [pc, #80]	@ (80092a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x58>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a13      	ldr	r2, [pc, #76]	@ (80092a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d111      	bne.n	8009284 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b06      	cmp	r3, #6
 8009270:	d010      	beq.n	8009294 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f042 0201 	orr.w	r2, r2, #1
 8009280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009282:	e007      	b.n	8009294 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0201 	orr.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr
 80092a0:	40012c00 	.word	0x40012c00
 80092a4:	40000400 	.word	0x40000400
 80092a8:	40000800 	.word	0x40000800

080092ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e041      	b.n	8009342 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f839 	bl	800934a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f000 fb8e 	bl	8009a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009352:	bf00      	nop
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d109      	bne.n	8009380 <HAL_TIM_PWM_Start+0x24>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	e022      	b.n	80093c6 <HAL_TIM_PWM_Start+0x6a>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b04      	cmp	r3, #4
 8009384:	d109      	bne.n	800939a <HAL_TIM_PWM_Start+0x3e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b01      	cmp	r3, #1
 8009390:	bf14      	ite	ne
 8009392:	2301      	movne	r3, #1
 8009394:	2300      	moveq	r3, #0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	e015      	b.n	80093c6 <HAL_TIM_PWM_Start+0x6a>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b08      	cmp	r3, #8
 800939e:	d109      	bne.n	80093b4 <HAL_TIM_PWM_Start+0x58>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	bf14      	ite	ne
 80093ac:	2301      	movne	r3, #1
 80093ae:	2300      	moveq	r3, #0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	e008      	b.n	80093c6 <HAL_TIM_PWM_Start+0x6a>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e05e      	b.n	800948c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <HAL_TIM_PWM_Start+0x82>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093dc:	e013      	b.n	8009406 <HAL_TIM_PWM_Start+0xaa>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d104      	bne.n	80093ee <HAL_TIM_PWM_Start+0x92>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093ec:	e00b      	b.n	8009406 <HAL_TIM_PWM_Start+0xaa>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d104      	bne.n	80093fe <HAL_TIM_PWM_Start+0xa2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093fc:	e003      	b.n	8009406 <HAL_TIM_PWM_Start+0xaa>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2202      	movs	r2, #2
 8009402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2201      	movs	r2, #1
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fd7c 	bl	8009f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a1e      	ldr	r2, [pc, #120]	@ (8009494 <HAL_TIM_PWM_Start+0x138>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d107      	bne.n	800942e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800942c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a18      	ldr	r2, [pc, #96]	@ (8009494 <HAL_TIM_PWM_Start+0x138>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00e      	beq.n	8009456 <HAL_TIM_PWM_Start+0xfa>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009440:	d009      	beq.n	8009456 <HAL_TIM_PWM_Start+0xfa>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a14      	ldr	r2, [pc, #80]	@ (8009498 <HAL_TIM_PWM_Start+0x13c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d004      	beq.n	8009456 <HAL_TIM_PWM_Start+0xfa>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a12      	ldr	r2, [pc, #72]	@ (800949c <HAL_TIM_PWM_Start+0x140>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d111      	bne.n	800947a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 0307 	and.w	r3, r3, #7
 8009460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b06      	cmp	r3, #6
 8009466:	d010      	beq.n	800948a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009478:	e007      	b.n	800948a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0201 	orr.w	r2, r2, #1
 8009488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	40012c00 	.word	0x40012c00
 8009498:	40000400 	.word	0x40000400
 800949c:	40000800 	.word	0x40000800

080094a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d122      	bne.n	80094fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d11b      	bne.n	80094fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f06f 0202 	mvn.w	r2, #2
 80094cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fa76 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 80094e8:	e005      	b.n	80094f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa69 	bl	80099c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa78 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f003 0304 	and.w	r3, r3, #4
 8009506:	2b04      	cmp	r3, #4
 8009508:	d122      	bne.n	8009550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b04      	cmp	r3, #4
 8009516:	d11b      	bne.n	8009550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f06f 0204 	mvn.w	r2, #4
 8009520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2202      	movs	r2, #2
 8009526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa4c 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 800953c:	e005      	b.n	800954a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa3f 	bl	80099c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa4e 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b08      	cmp	r3, #8
 800955c:	d122      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f003 0308 	and.w	r3, r3, #8
 8009568:	2b08      	cmp	r3, #8
 800956a:	d11b      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f06f 0208 	mvn.w	r2, #8
 8009574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2204      	movs	r2, #4
 800957a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa22 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 8009590:	e005      	b.n	800959e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa15 	bl	80099c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fa24 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d122      	bne.n	80095f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0310 	and.w	r3, r3, #16
 80095bc:	2b10      	cmp	r3, #16
 80095be:	d11b      	bne.n	80095f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0210 	mvn.w	r2, #16
 80095c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2208      	movs	r2, #8
 80095ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9f8 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 80095e4:	e005      	b.n	80095f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9eb 	bl	80099c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f9fa 	bl	80099e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b01      	cmp	r3, #1
 8009604:	d10e      	bne.n	8009624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b01      	cmp	r3, #1
 8009612:	d107      	bne.n	8009624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f06f 0201 	mvn.w	r2, #1
 800961c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7fd f8b8 	bl	8006794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962e:	2b80      	cmp	r3, #128	@ 0x80
 8009630:	d10e      	bne.n	8009650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800963c:	2b80      	cmp	r3, #128	@ 0x80
 800963e:	d107      	bne.n	8009650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fce9 	bl	800a022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965a:	2b40      	cmp	r3, #64	@ 0x40
 800965c:	d10e      	bne.n	800967c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009668:	2b40      	cmp	r3, #64	@ 0x40
 800966a:	d107      	bne.n	800967c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9be 	bl	80099f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b20      	cmp	r3, #32
 8009688:	d10e      	bne.n	80096a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b20      	cmp	r3, #32
 8009696:	d107      	bne.n	80096a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f06f 0220 	mvn.w	r2, #32
 80096a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fcb4 	bl	800a010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e0ae      	b.n	800982c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b0c      	cmp	r3, #12
 80096da:	f200 809f 	bhi.w	800981c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	08009719 	.word	0x08009719
 80096e8:	0800981d 	.word	0x0800981d
 80096ec:	0800981d 	.word	0x0800981d
 80096f0:	0800981d 	.word	0x0800981d
 80096f4:	08009759 	.word	0x08009759
 80096f8:	0800981d 	.word	0x0800981d
 80096fc:	0800981d 	.word	0x0800981d
 8009700:	0800981d 	.word	0x0800981d
 8009704:	0800979b 	.word	0x0800979b
 8009708:	0800981d 	.word	0x0800981d
 800970c:	0800981d 	.word	0x0800981d
 8009710:	0800981d 	.word	0x0800981d
 8009714:	080097db 	.word	0x080097db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 f9d6 	bl	8009ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0208 	orr.w	r2, r2, #8
 8009732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6999      	ldr	r1, [r3, #24]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	619a      	str	r2, [r3, #24]
      break;
 8009756:	e064      	b.n	8009822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fa1c 	bl	8009b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	699a      	ldr	r2, [r3, #24]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699a      	ldr	r2, [r3, #24]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6999      	ldr	r1, [r3, #24]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	619a      	str	r2, [r3, #24]
      break;
 8009798:	e043      	b.n	8009822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fa65 	bl	8009c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0208 	orr.w	r2, r2, #8
 80097b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0204 	bic.w	r2, r2, #4
 80097c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69d9      	ldr	r1, [r3, #28]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	61da      	str	r2, [r3, #28]
      break;
 80097d8:	e023      	b.n	8009822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 faaf 	bl	8009d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69da      	ldr	r2, [r3, #28]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69da      	ldr	r2, [r3, #28]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69d9      	ldr	r1, [r3, #28]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	021a      	lsls	r2, r3, #8
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	61da      	str	r2, [r3, #28]
      break;
 800981a:	e002      	b.n	8009822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]
      break;
 8009820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <HAL_TIM_ConfigClockSource+0x1c>
 800984c:	2302      	movs	r3, #2
 800984e:	e0b4      	b.n	80099ba <HAL_TIM_ConfigClockSource+0x186>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800986e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009888:	d03e      	beq.n	8009908 <HAL_TIM_ConfigClockSource+0xd4>
 800988a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800988e:	f200 8087 	bhi.w	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 8009892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009896:	f000 8086 	beq.w	80099a6 <HAL_TIM_ConfigClockSource+0x172>
 800989a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800989e:	d87f      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098a0:	2b70      	cmp	r3, #112	@ 0x70
 80098a2:	d01a      	beq.n	80098da <HAL_TIM_ConfigClockSource+0xa6>
 80098a4:	2b70      	cmp	r3, #112	@ 0x70
 80098a6:	d87b      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098a8:	2b60      	cmp	r3, #96	@ 0x60
 80098aa:	d050      	beq.n	800994e <HAL_TIM_ConfigClockSource+0x11a>
 80098ac:	2b60      	cmp	r3, #96	@ 0x60
 80098ae:	d877      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098b0:	2b50      	cmp	r3, #80	@ 0x50
 80098b2:	d03c      	beq.n	800992e <HAL_TIM_ConfigClockSource+0xfa>
 80098b4:	2b50      	cmp	r3, #80	@ 0x50
 80098b6:	d873      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098b8:	2b40      	cmp	r3, #64	@ 0x40
 80098ba:	d058      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x13a>
 80098bc:	2b40      	cmp	r3, #64	@ 0x40
 80098be:	d86f      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098c0:	2b30      	cmp	r3, #48	@ 0x30
 80098c2:	d064      	beq.n	800998e <HAL_TIM_ConfigClockSource+0x15a>
 80098c4:	2b30      	cmp	r3, #48	@ 0x30
 80098c6:	d86b      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d060      	beq.n	800998e <HAL_TIM_ConfigClockSource+0x15a>
 80098cc:	2b20      	cmp	r3, #32
 80098ce:	d867      	bhi.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d05c      	beq.n	800998e <HAL_TIM_ConfigClockSource+0x15a>
 80098d4:	2b10      	cmp	r3, #16
 80098d6:	d05a      	beq.n	800998e <HAL_TIM_ConfigClockSource+0x15a>
 80098d8:	e062      	b.n	80099a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098ea:	f000 faf0 	bl	8009ece <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	609a      	str	r2, [r3, #8]
      break;
 8009906:	e04f      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009918:	f000 fad9 	bl	8009ece <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800992a:	609a      	str	r2, [r3, #8]
      break;
 800992c:	e03c      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800993a:	461a      	mov	r2, r3
 800993c:	f000 fa50 	bl	8009de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2150      	movs	r1, #80	@ 0x50
 8009946:	4618      	mov	r0, r3
 8009948:	f000 faa7 	bl	8009e9a <TIM_ITRx_SetConfig>
      break;
 800994c:	e02c      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800995a:	461a      	mov	r2, r3
 800995c:	f000 fa6e 	bl	8009e3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2160      	movs	r1, #96	@ 0x60
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fa97 	bl	8009e9a <TIM_ITRx_SetConfig>
      break;
 800996c:	e01c      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800997a:	461a      	mov	r2, r3
 800997c:	f000 fa30 	bl	8009de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2140      	movs	r1, #64	@ 0x40
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fa87 	bl	8009e9a <TIM_ITRx_SetConfig>
      break;
 800998c:	e00c      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f000 fa7e 	bl	8009e9a <TIM_ITRx_SetConfig>
      break;
 800999e:	e003      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	73fb      	strb	r3, [r7, #15]
      break;
 80099a4:	e000      	b.n	80099a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80099a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr

080099d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr

080099e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bc80      	pop	{r7}
 8009a08:	4770      	bx	lr
	...

08009a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a29      	ldr	r2, [pc, #164]	@ (8009ac4 <TIM_Base_SetConfig+0xb8>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d00b      	beq.n	8009a3c <TIM_Base_SetConfig+0x30>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a2a:	d007      	beq.n	8009a3c <TIM_Base_SetConfig+0x30>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a26      	ldr	r2, [pc, #152]	@ (8009ac8 <TIM_Base_SetConfig+0xbc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d003      	beq.n	8009a3c <TIM_Base_SetConfig+0x30>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a25      	ldr	r2, [pc, #148]	@ (8009acc <TIM_Base_SetConfig+0xc0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d108      	bne.n	8009a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac4 <TIM_Base_SetConfig+0xb8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00b      	beq.n	8009a6e <TIM_Base_SetConfig+0x62>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5c:	d007      	beq.n	8009a6e <TIM_Base_SetConfig+0x62>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a19      	ldr	r2, [pc, #100]	@ (8009ac8 <TIM_Base_SetConfig+0xbc>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d003      	beq.n	8009a6e <TIM_Base_SetConfig+0x62>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a18      	ldr	r2, [pc, #96]	@ (8009acc <TIM_Base_SetConfig+0xc0>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d108      	bne.n	8009a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a07      	ldr	r2, [pc, #28]	@ (8009ac4 <TIM_Base_SetConfig+0xb8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d103      	bne.n	8009ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	691a      	ldr	r2, [r3, #16]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	615a      	str	r2, [r3, #20]
}
 8009aba:	bf00      	nop
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bc80      	pop	{r7}
 8009ac2:	4770      	bx	lr
 8009ac4:	40012c00 	.word	0x40012c00
 8009ac8:	40000400 	.word	0x40000400
 8009acc:	40000800 	.word	0x40000800

08009ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	f023 0201 	bic.w	r2, r3, #1
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 0303 	bic.w	r3, r3, #3
 8009b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f023 0302 	bic.w	r3, r3, #2
 8009b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a1c      	ldr	r2, [pc, #112]	@ (8009b98 <TIM_OC1_SetConfig+0xc8>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d10c      	bne.n	8009b46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f023 0308 	bic.w	r3, r3, #8
 8009b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f023 0304 	bic.w	r3, r3, #4
 8009b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a13      	ldr	r2, [pc, #76]	@ (8009b98 <TIM_OC1_SetConfig+0xc8>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d111      	bne.n	8009b72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	621a      	str	r2, [r3, #32]
}
 8009b8c:	bf00      	nop
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bc80      	pop	{r7}
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	40012c00 	.word	0x40012c00

08009b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	f023 0210 	bic.w	r2, r3, #16
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	021b      	lsls	r3, r3, #8
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0320 	bic.w	r3, r3, #32
 8009be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c6c <TIM_OC2_SetConfig+0xd0>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d10d      	bne.n	8009c18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a14      	ldr	r2, [pc, #80]	@ (8009c6c <TIM_OC2_SetConfig+0xd0>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d113      	bne.n	8009c48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00

08009c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d40 <TIM_OC3_SetConfig+0xd0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d10d      	bne.n	8009cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	021b      	lsls	r3, r3, #8
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a14      	ldr	r2, [pc, #80]	@ (8009d40 <TIM_OC3_SetConfig+0xd0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d113      	bne.n	8009d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	621a      	str	r2, [r3, #32]
}
 8009d34:	bf00      	nop
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	40012c00 	.word	0x40012c00

08009d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	031b      	lsls	r3, r3, #12
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009ddc <TIM_OC4_SetConfig+0x98>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d109      	bne.n	8009db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	019b      	lsls	r3, r3, #6
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr
 8009ddc:	40012c00 	.word	0x40012c00

08009de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f023 0201 	bic.w	r2, r3, #1
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 030a 	bic.w	r3, r3, #10
 8009e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	621a      	str	r2, [r3, #32]
}
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f023 0210 	bic.w	r2, r3, #16
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	031b      	lsls	r3, r3, #12
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	621a      	str	r2, [r3, #32]
}
 8009e90:	bf00      	nop
 8009e92:	371c      	adds	r7, #28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc80      	pop	{r7}
 8009e98:	4770      	bx	lr

08009e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f043 0307 	orr.w	r3, r3, #7
 8009ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	609a      	str	r2, [r3, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr

08009ece <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b087      	sub	sp, #28
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]
 8009eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	021a      	lsls	r2, r3, #8
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	431a      	orrs	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	609a      	str	r2, [r3, #8]
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bc80      	pop	{r7}
 8009f0a:	4770      	bx	lr

08009f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f003 031f 	and.w	r3, r3, #31
 8009f1e:	2201      	movs	r2, #1
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6a1a      	ldr	r2, [r3, #32]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	401a      	ands	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a1a      	ldr	r2, [r3, #32]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	fa01 f303 	lsl.w	r3, r1, r3
 8009f44:	431a      	orrs	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	621a      	str	r2, [r3, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bc80      	pop	{r7}
 8009f52:	4770      	bx	lr

08009f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d101      	bne.n	8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e046      	b.n	8009ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a16      	ldr	r2, [pc, #88]	@ (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d00e      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fb8:	d009      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a12      	ldr	r2, [pc, #72]	@ (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d004      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a10      	ldr	r2, [pc, #64]	@ (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d10c      	bne.n	8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bc80      	pop	{r7}
 800a002:	4770      	bx	lr
 800a004:	40012c00 	.word	0x40012c00
 800a008:	40000400 	.word	0x40000400
 800a00c:	40000800 	.word	0x40000800

0800a010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bc80      	pop	{r7}
 800a020:	4770      	bx	lr

0800a022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	bc80      	pop	{r7}
 800a032:	4770      	bx	lr

0800a034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e042      	b.n	800a0cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fd f92e 	bl	80072bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2224      	movs	r2, #36	@ 0x24
 800a064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f91d 	bl	800a2b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a08c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	695a      	ldr	r2, [r3, #20]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a09c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a0ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08a      	sub	sp, #40	@ 0x28
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	603b      	str	r3, [r7, #0]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b20      	cmp	r3, #32
 800a0f2:	d16d      	bne.n	800a1d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <HAL_UART_Transmit+0x2c>
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e066      	b.n	800a1d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2221      	movs	r2, #33	@ 0x21
 800a10e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a112:	f7fd fac7 	bl	80076a4 <HAL_GetTick>
 800a116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	88fa      	ldrh	r2, [r7, #6]
 800a11c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	88fa      	ldrh	r2, [r7, #6]
 800a122:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a12c:	d108      	bne.n	800a140 <HAL_UART_Transmit+0x6c>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d104      	bne.n	800a140 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	e003      	b.n	800a148 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a144:	2300      	movs	r3, #0
 800a146:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a148:	e02a      	b.n	800a1a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2200      	movs	r2, #0
 800a152:	2180      	movs	r1, #128	@ 0x80
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f840 	bl	800a1da <UART_WaitOnFlagUntilTimeout>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e036      	b.n	800a1d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	3302      	adds	r3, #2
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	e007      	b.n	800a192 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	781a      	ldrb	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	3301      	adds	r3, #1
 800a190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a196:	b29b      	uxth	r3, r3
 800a198:	3b01      	subs	r3, #1
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1cf      	bne.n	800a14a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2140      	movs	r1, #64	@ 0x40
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 f810 	bl	800a1da <UART_WaitOnFlagUntilTimeout>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e006      	b.n	800a1d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e000      	b.n	800a1d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a1d0:	2302      	movs	r3, #2
  }
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b090      	sub	sp, #64	@ 0x40
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	603b      	str	r3, [r7, #0]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ea:	e050      	b.n	800a28e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d04c      	beq.n	800a28e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d007      	beq.n	800a20a <UART_WaitOnFlagUntilTimeout+0x30>
 800a1fa:	f7fd fa53 	bl	80076a4 <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a206:	429a      	cmp	r2, r3
 800a208:	d241      	bcs.n	800a28e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	330c      	adds	r3, #12
 800a210:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	330c      	adds	r3, #12
 800a228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a22a:	637a      	str	r2, [r7, #52]	@ 0x34
 800a22c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e5      	bne.n	800a20a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3314      	adds	r3, #20
 800a244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	613b      	str	r3, [r7, #16]
   return(result);
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f023 0301 	bic.w	r3, r3, #1
 800a254:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3314      	adds	r3, #20
 800a25c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a25e:	623a      	str	r2, [r7, #32]
 800a260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	69f9      	ldr	r1, [r7, #28]
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e5      	bne.n	800a23e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e00f      	b.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	4013      	ands	r3, r2
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	bf0c      	ite	eq
 800a29e:	2301      	moveq	r3, #1
 800a2a0:	2300      	movne	r3, #0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d09f      	beq.n	800a1ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3740      	adds	r7, #64	@ 0x40
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a2f2:	f023 030c 	bic.w	r3, r3, #12
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699a      	ldr	r2, [r3, #24]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a2c      	ldr	r2, [pc, #176]	@ (800a3cc <UART_SetConfig+0x114>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d103      	bne.n	800a328 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a320:	f7fe fbcc 	bl	8008abc <HAL_RCC_GetPCLK2Freq>
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	e002      	b.n	800a32e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a328:	f7fe fbb4 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800a32c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	009a      	lsls	r2, r3, #2
 800a338:	441a      	add	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	fbb2 f3f3 	udiv	r3, r2, r3
 800a344:	4a22      	ldr	r2, [pc, #136]	@ (800a3d0 <UART_SetConfig+0x118>)
 800a346:	fba2 2303 	umull	r2, r3, r2, r3
 800a34a:	095b      	lsrs	r3, r3, #5
 800a34c:	0119      	lsls	r1, r3, #4
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009a      	lsls	r2, r3, #2
 800a358:	441a      	add	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	fbb2 f2f3 	udiv	r2, r2, r3
 800a364:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d0 <UART_SetConfig+0x118>)
 800a366:	fba3 0302 	umull	r0, r3, r3, r2
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	2064      	movs	r0, #100	@ 0x64
 800a36e:	fb00 f303 	mul.w	r3, r0, r3
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	3332      	adds	r3, #50	@ 0x32
 800a378:	4a15      	ldr	r2, [pc, #84]	@ (800a3d0 <UART_SetConfig+0x118>)
 800a37a:	fba2 2303 	umull	r2, r3, r2, r3
 800a37e:	095b      	lsrs	r3, r3, #5
 800a380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a384:	4419      	add	r1, r3
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4613      	mov	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	009a      	lsls	r2, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	fbb2 f2f3 	udiv	r2, r2, r3
 800a39c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d0 <UART_SetConfig+0x118>)
 800a39e:	fba3 0302 	umull	r0, r3, r3, r2
 800a3a2:	095b      	lsrs	r3, r3, #5
 800a3a4:	2064      	movs	r0, #100	@ 0x64
 800a3a6:	fb00 f303 	mul.w	r3, r0, r3
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	3332      	adds	r3, #50	@ 0x32
 800a3b0:	4a07      	ldr	r2, [pc, #28]	@ (800a3d0 <UART_SetConfig+0x118>)
 800a3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b6:	095b      	lsrs	r3, r3, #5
 800a3b8:	f003 020f 	and.w	r2, r3, #15
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	40013800 	.word	0x40013800
 800a3d0:	51eb851f 	.word	0x51eb851f

0800a3d4 <_ZdlPvj>:
 800a3d4:	f000 b811 	b.w	800a3fa <_ZdlPv>

0800a3d8 <_Znwj>:
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	bf38      	it	cc
 800a3dc:	2001      	movcc	r0, #1
 800a3de:	b510      	push	{r4, lr}
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 f81c 	bl	800a420 <malloc>
 800a3e8:	b100      	cbz	r0, 800a3ec <_Znwj+0x14>
 800a3ea:	bd10      	pop	{r4, pc}
 800a3ec:	f000 f808 	bl	800a400 <_ZSt15get_new_handlerv>
 800a3f0:	b908      	cbnz	r0, 800a3f6 <_Znwj+0x1e>
 800a3f2:	f000 f80d 	bl	800a410 <abort>
 800a3f6:	4780      	blx	r0
 800a3f8:	e7f3      	b.n	800a3e2 <_Znwj+0xa>

0800a3fa <_ZdlPv>:
 800a3fa:	f000 b819 	b.w	800a430 <free>
	...

0800a400 <_ZSt15get_new_handlerv>:
 800a400:	4b02      	ldr	r3, [pc, #8]	@ (800a40c <_ZSt15get_new_handlerv+0xc>)
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	f3bf 8f5b 	dmb	ish
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000418 	.word	0x20000418

0800a410 <abort>:
 800a410:	2006      	movs	r0, #6
 800a412:	b508      	push	{r3, lr}
 800a414:	f000 fe74 	bl	800b100 <raise>
 800a418:	2001      	movs	r0, #1
 800a41a:	f7fd f814 	bl	8007446 <_exit>
	...

0800a420 <malloc>:
 800a420:	4b02      	ldr	r3, [pc, #8]	@ (800a42c <malloc+0xc>)
 800a422:	4601      	mov	r1, r0
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	f000 b82d 	b.w	800a484 <_malloc_r>
 800a42a:	bf00      	nop
 800a42c:	2000001c 	.word	0x2000001c

0800a430 <free>:
 800a430:	4b02      	ldr	r3, [pc, #8]	@ (800a43c <free+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f001 bd6f 	b.w	800bf18 <_free_r>
 800a43a:	bf00      	nop
 800a43c:	2000001c 	.word	0x2000001c

0800a440 <sbrk_aligned>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	4e0f      	ldr	r6, [pc, #60]	@ (800a480 <sbrk_aligned+0x40>)
 800a444:	460c      	mov	r4, r1
 800a446:	6831      	ldr	r1, [r6, #0]
 800a448:	4605      	mov	r5, r0
 800a44a:	b911      	cbnz	r1, 800a452 <sbrk_aligned+0x12>
 800a44c:	f000 feac 	bl	800b1a8 <_sbrk_r>
 800a450:	6030      	str	r0, [r6, #0]
 800a452:	4621      	mov	r1, r4
 800a454:	4628      	mov	r0, r5
 800a456:	f000 fea7 	bl	800b1a8 <_sbrk_r>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d103      	bne.n	800a466 <sbrk_aligned+0x26>
 800a45e:	f04f 34ff 	mov.w	r4, #4294967295
 800a462:	4620      	mov	r0, r4
 800a464:	bd70      	pop	{r4, r5, r6, pc}
 800a466:	1cc4      	adds	r4, r0, #3
 800a468:	f024 0403 	bic.w	r4, r4, #3
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d0f8      	beq.n	800a462 <sbrk_aligned+0x22>
 800a470:	1a21      	subs	r1, r4, r0
 800a472:	4628      	mov	r0, r5
 800a474:	f000 fe98 	bl	800b1a8 <_sbrk_r>
 800a478:	3001      	adds	r0, #1
 800a47a:	d1f2      	bne.n	800a462 <sbrk_aligned+0x22>
 800a47c:	e7ef      	b.n	800a45e <sbrk_aligned+0x1e>
 800a47e:	bf00      	nop
 800a480:	2000041c 	.word	0x2000041c

0800a484 <_malloc_r>:
 800a484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a488:	1ccd      	adds	r5, r1, #3
 800a48a:	f025 0503 	bic.w	r5, r5, #3
 800a48e:	3508      	adds	r5, #8
 800a490:	2d0c      	cmp	r5, #12
 800a492:	bf38      	it	cc
 800a494:	250c      	movcc	r5, #12
 800a496:	2d00      	cmp	r5, #0
 800a498:	4606      	mov	r6, r0
 800a49a:	db01      	blt.n	800a4a0 <_malloc_r+0x1c>
 800a49c:	42a9      	cmp	r1, r5
 800a49e:	d904      	bls.n	800a4aa <_malloc_r+0x26>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a580 <_malloc_r+0xfc>
 800a4ae:	f000 f869 	bl	800a584 <__malloc_lock>
 800a4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	bb44      	cbnz	r4, 800a50c <_malloc_r+0x88>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7ff ffbf 	bl	800a440 <sbrk_aligned>
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	d158      	bne.n	800a57a <_malloc_r+0xf6>
 800a4c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a4cc:	4627      	mov	r7, r4
 800a4ce:	2f00      	cmp	r7, #0
 800a4d0:	d143      	bne.n	800a55a <_malloc_r+0xd6>
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	d04b      	beq.n	800a56e <_malloc_r+0xea>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	4639      	mov	r1, r7
 800a4da:	4630      	mov	r0, r6
 800a4dc:	eb04 0903 	add.w	r9, r4, r3
 800a4e0:	f000 fe62 	bl	800b1a8 <_sbrk_r>
 800a4e4:	4581      	cmp	r9, r0
 800a4e6:	d142      	bne.n	800a56e <_malloc_r+0xea>
 800a4e8:	6821      	ldr	r1, [r4, #0]
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	1a6d      	subs	r5, r5, r1
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7ff ffa6 	bl	800a440 <sbrk_aligned>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d03a      	beq.n	800a56e <_malloc_r+0xea>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	442b      	add	r3, r5
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	bb62      	cbnz	r2, 800a560 <_malloc_r+0xdc>
 800a506:	f8c8 7000 	str.w	r7, [r8]
 800a50a:	e00f      	b.n	800a52c <_malloc_r+0xa8>
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	1b52      	subs	r2, r2, r5
 800a510:	d420      	bmi.n	800a554 <_malloc_r+0xd0>
 800a512:	2a0b      	cmp	r2, #11
 800a514:	d917      	bls.n	800a546 <_malloc_r+0xc2>
 800a516:	1961      	adds	r1, r4, r5
 800a518:	42a3      	cmp	r3, r4
 800a51a:	6025      	str	r5, [r4, #0]
 800a51c:	bf18      	it	ne
 800a51e:	6059      	strne	r1, [r3, #4]
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	bf08      	it	eq
 800a524:	f8c8 1000 	streq.w	r1, [r8]
 800a528:	5162      	str	r2, [r4, r5]
 800a52a:	604b      	str	r3, [r1, #4]
 800a52c:	4630      	mov	r0, r6
 800a52e:	f000 f82f 	bl	800a590 <__malloc_unlock>
 800a532:	f104 000b 	add.w	r0, r4, #11
 800a536:	1d23      	adds	r3, r4, #4
 800a538:	f020 0007 	bic.w	r0, r0, #7
 800a53c:	1ac2      	subs	r2, r0, r3
 800a53e:	bf1c      	itt	ne
 800a540:	1a1b      	subne	r3, r3, r0
 800a542:	50a3      	strne	r3, [r4, r2]
 800a544:	e7af      	b.n	800a4a6 <_malloc_r+0x22>
 800a546:	6862      	ldr	r2, [r4, #4]
 800a548:	42a3      	cmp	r3, r4
 800a54a:	bf0c      	ite	eq
 800a54c:	f8c8 2000 	streq.w	r2, [r8]
 800a550:	605a      	strne	r2, [r3, #4]
 800a552:	e7eb      	b.n	800a52c <_malloc_r+0xa8>
 800a554:	4623      	mov	r3, r4
 800a556:	6864      	ldr	r4, [r4, #4]
 800a558:	e7ae      	b.n	800a4b8 <_malloc_r+0x34>
 800a55a:	463c      	mov	r4, r7
 800a55c:	687f      	ldr	r7, [r7, #4]
 800a55e:	e7b6      	b.n	800a4ce <_malloc_r+0x4a>
 800a560:	461a      	mov	r2, r3
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	42a3      	cmp	r3, r4
 800a566:	d1fb      	bne.n	800a560 <_malloc_r+0xdc>
 800a568:	2300      	movs	r3, #0
 800a56a:	6053      	str	r3, [r2, #4]
 800a56c:	e7de      	b.n	800a52c <_malloc_r+0xa8>
 800a56e:	230c      	movs	r3, #12
 800a570:	4630      	mov	r0, r6
 800a572:	6033      	str	r3, [r6, #0]
 800a574:	f000 f80c 	bl	800a590 <__malloc_unlock>
 800a578:	e794      	b.n	800a4a4 <_malloc_r+0x20>
 800a57a:	6005      	str	r5, [r0, #0]
 800a57c:	e7d6      	b.n	800a52c <_malloc_r+0xa8>
 800a57e:	bf00      	nop
 800a580:	20000420 	.word	0x20000420

0800a584 <__malloc_lock>:
 800a584:	4801      	ldr	r0, [pc, #4]	@ (800a58c <__malloc_lock+0x8>)
 800a586:	f000 be5c 	b.w	800b242 <__retarget_lock_acquire_recursive>
 800a58a:	bf00      	nop
 800a58c:	20000564 	.word	0x20000564

0800a590 <__malloc_unlock>:
 800a590:	4801      	ldr	r0, [pc, #4]	@ (800a598 <__malloc_unlock+0x8>)
 800a592:	f000 be57 	b.w	800b244 <__retarget_lock_release_recursive>
 800a596:	bf00      	nop
 800a598:	20000564 	.word	0x20000564

0800a59c <__cvt>:
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a2:	461d      	mov	r5, r3
 800a5a4:	bfbb      	ittet	lt
 800a5a6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a5aa:	461d      	movlt	r5, r3
 800a5ac:	2300      	movge	r3, #0
 800a5ae:	232d      	movlt	r3, #45	@ 0x2d
 800a5b0:	b088      	sub	sp, #32
 800a5b2:	4614      	mov	r4, r2
 800a5b4:	bfb8      	it	lt
 800a5b6:	4614      	movlt	r4, r2
 800a5b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a5ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a5bc:	7013      	strb	r3, [r2, #0]
 800a5be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a5c4:	f023 0820 	bic.w	r8, r3, #32
 800a5c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5cc:	d005      	beq.n	800a5da <__cvt+0x3e>
 800a5ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5d2:	d100      	bne.n	800a5d6 <__cvt+0x3a>
 800a5d4:	3601      	adds	r6, #1
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e000      	b.n	800a5dc <__cvt+0x40>
 800a5da:	2303      	movs	r3, #3
 800a5dc:	aa07      	add	r2, sp, #28
 800a5de:	9204      	str	r2, [sp, #16]
 800a5e0:	aa06      	add	r2, sp, #24
 800a5e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a5e6:	e9cd 3600 	strd	r3, r6, [sp]
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	f000 fecb 	bl	800b388 <_dtoa_r>
 800a5f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	d119      	bne.n	800a62e <__cvt+0x92>
 800a5fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5fc:	07db      	lsls	r3, r3, #31
 800a5fe:	d50e      	bpl.n	800a61e <__cvt+0x82>
 800a600:	eb00 0906 	add.w	r9, r0, r6
 800a604:	2200      	movs	r2, #0
 800a606:	2300      	movs	r3, #0
 800a608:	4620      	mov	r0, r4
 800a60a:	4629      	mov	r1, r5
 800a60c:	f7f6 f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 800a610:	b108      	cbz	r0, 800a616 <__cvt+0x7a>
 800a612:	f8cd 901c 	str.w	r9, [sp, #28]
 800a616:	2230      	movs	r2, #48	@ 0x30
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	454b      	cmp	r3, r9
 800a61c:	d31e      	bcc.n	800a65c <__cvt+0xc0>
 800a61e:	4638      	mov	r0, r7
 800a620:	9b07      	ldr	r3, [sp, #28]
 800a622:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a624:	1bdb      	subs	r3, r3, r7
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	b008      	add	sp, #32
 800a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a632:	eb00 0906 	add.w	r9, r0, r6
 800a636:	d1e5      	bne.n	800a604 <__cvt+0x68>
 800a638:	7803      	ldrb	r3, [r0, #0]
 800a63a:	2b30      	cmp	r3, #48	@ 0x30
 800a63c:	d10a      	bne.n	800a654 <__cvt+0xb8>
 800a63e:	2200      	movs	r2, #0
 800a640:	2300      	movs	r3, #0
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f6 f9af 	bl	80009a8 <__aeabi_dcmpeq>
 800a64a:	b918      	cbnz	r0, 800a654 <__cvt+0xb8>
 800a64c:	f1c6 0601 	rsb	r6, r6, #1
 800a650:	f8ca 6000 	str.w	r6, [sl]
 800a654:	f8da 3000 	ldr.w	r3, [sl]
 800a658:	4499      	add	r9, r3
 800a65a:	e7d3      	b.n	800a604 <__cvt+0x68>
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	9107      	str	r1, [sp, #28]
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e7d9      	b.n	800a618 <__cvt+0x7c>

0800a664 <__exponent>:
 800a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a666:	2900      	cmp	r1, #0
 800a668:	bfb6      	itet	lt
 800a66a:	232d      	movlt	r3, #45	@ 0x2d
 800a66c:	232b      	movge	r3, #43	@ 0x2b
 800a66e:	4249      	neglt	r1, r1
 800a670:	2909      	cmp	r1, #9
 800a672:	7002      	strb	r2, [r0, #0]
 800a674:	7043      	strb	r3, [r0, #1]
 800a676:	dd29      	ble.n	800a6cc <__exponent+0x68>
 800a678:	f10d 0307 	add.w	r3, sp, #7
 800a67c:	461d      	mov	r5, r3
 800a67e:	270a      	movs	r7, #10
 800a680:	fbb1 f6f7 	udiv	r6, r1, r7
 800a684:	461a      	mov	r2, r3
 800a686:	fb07 1416 	mls	r4, r7, r6, r1
 800a68a:	3430      	adds	r4, #48	@ 0x30
 800a68c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a690:	460c      	mov	r4, r1
 800a692:	2c63      	cmp	r4, #99	@ 0x63
 800a694:	4631      	mov	r1, r6
 800a696:	f103 33ff 	add.w	r3, r3, #4294967295
 800a69a:	dcf1      	bgt.n	800a680 <__exponent+0x1c>
 800a69c:	3130      	adds	r1, #48	@ 0x30
 800a69e:	1e94      	subs	r4, r2, #2
 800a6a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6a4:	4623      	mov	r3, r4
 800a6a6:	1c41      	adds	r1, r0, #1
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	d30a      	bcc.n	800a6c2 <__exponent+0x5e>
 800a6ac:	f10d 0309 	add.w	r3, sp, #9
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	42ac      	cmp	r4, r5
 800a6b4:	bf88      	it	hi
 800a6b6:	2300      	movhi	r3, #0
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	4403      	add	r3, r0
 800a6bc:	1a18      	subs	r0, r3, r0
 800a6be:	b003      	add	sp, #12
 800a6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6ca:	e7ed      	b.n	800a6a8 <__exponent+0x44>
 800a6cc:	2330      	movs	r3, #48	@ 0x30
 800a6ce:	3130      	adds	r1, #48	@ 0x30
 800a6d0:	7083      	strb	r3, [r0, #2]
 800a6d2:	70c1      	strb	r1, [r0, #3]
 800a6d4:	1d03      	adds	r3, r0, #4
 800a6d6:	e7f1      	b.n	800a6bc <__exponent+0x58>

0800a6d8 <_printf_float>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	b091      	sub	sp, #68	@ 0x44
 800a6de:	460c      	mov	r4, r1
 800a6e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a6e4:	4616      	mov	r6, r2
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	f000 fd11 	bl	800b110 <_localeconv_r>
 800a6ee:	6803      	ldr	r3, [r0, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	9308      	str	r3, [sp, #32]
 800a6f4:	f7f5 fd2c 	bl	8000150 <strlen>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a700:	9009      	str	r0, [sp, #36]	@ 0x24
 800a702:	3307      	adds	r3, #7
 800a704:	f023 0307 	bic.w	r3, r3, #7
 800a708:	f103 0208 	add.w	r2, r3, #8
 800a70c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a710:	f8d4 b000 	ldr.w	fp, [r4]
 800a714:	f8c8 2000 	str.w	r2, [r8]
 800a718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a71c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a720:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a722:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a726:	f04f 32ff 	mov.w	r2, #4294967295
 800a72a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a72e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a732:	4b9c      	ldr	r3, [pc, #624]	@ (800a9a4 <_printf_float+0x2cc>)
 800a734:	f7f6 f96a 	bl	8000a0c <__aeabi_dcmpun>
 800a738:	bb70      	cbnz	r0, 800a798 <_printf_float+0xc0>
 800a73a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a73e:	f04f 32ff 	mov.w	r2, #4294967295
 800a742:	4b98      	ldr	r3, [pc, #608]	@ (800a9a4 <_printf_float+0x2cc>)
 800a744:	f7f6 f944 	bl	80009d0 <__aeabi_dcmple>
 800a748:	bb30      	cbnz	r0, 800a798 <_printf_float+0xc0>
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	4640      	mov	r0, r8
 800a750:	4649      	mov	r1, r9
 800a752:	f7f6 f933 	bl	80009bc <__aeabi_dcmplt>
 800a756:	b110      	cbz	r0, 800a75e <_printf_float+0x86>
 800a758:	232d      	movs	r3, #45	@ 0x2d
 800a75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a75e:	4a92      	ldr	r2, [pc, #584]	@ (800a9a8 <_printf_float+0x2d0>)
 800a760:	4b92      	ldr	r3, [pc, #584]	@ (800a9ac <_printf_float+0x2d4>)
 800a762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a766:	bf94      	ite	ls
 800a768:	4690      	movls	r8, r2
 800a76a:	4698      	movhi	r8, r3
 800a76c:	2303      	movs	r3, #3
 800a76e:	f04f 0900 	mov.w	r9, #0
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	f02b 0304 	bic.w	r3, fp, #4
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	4633      	mov	r3, r6
 800a77c:	4621      	mov	r1, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	9700      	str	r7, [sp, #0]
 800a782:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a784:	f000 f9d4 	bl	800ab30 <_printf_common>
 800a788:	3001      	adds	r0, #1
 800a78a:	f040 8090 	bne.w	800a8ae <_printf_float+0x1d6>
 800a78e:	f04f 30ff 	mov.w	r0, #4294967295
 800a792:	b011      	add	sp, #68	@ 0x44
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	4640      	mov	r0, r8
 800a79e:	4649      	mov	r1, r9
 800a7a0:	f7f6 f934 	bl	8000a0c <__aeabi_dcmpun>
 800a7a4:	b148      	cbz	r0, 800a7ba <_printf_float+0xe2>
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bfb8      	it	lt
 800a7ac:	232d      	movlt	r3, #45	@ 0x2d
 800a7ae:	4a80      	ldr	r2, [pc, #512]	@ (800a9b0 <_printf_float+0x2d8>)
 800a7b0:	bfb8      	it	lt
 800a7b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800a9b4 <_printf_float+0x2dc>)
 800a7b8:	e7d3      	b.n	800a762 <_printf_float+0x8a>
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	d13f      	bne.n	800a844 <_printf_float+0x16c>
 800a7c4:	2306      	movs	r3, #6
 800a7c6:	6063      	str	r3, [r4, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	9206      	str	r2, [sp, #24]
 800a7d2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a7d4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a7d8:	aa0d      	add	r2, sp, #52	@ 0x34
 800a7da:	9203      	str	r2, [sp, #12]
 800a7dc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a7e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	4642      	mov	r2, r8
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	910a      	str	r1, [sp, #40]	@ 0x28
 800a7f0:	f7ff fed4 	bl	800a59c <__cvt>
 800a7f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	2947      	cmp	r1, #71	@ 0x47
 800a7fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a7fc:	d128      	bne.n	800a850 <_printf_float+0x178>
 800a7fe:	1cc8      	adds	r0, r1, #3
 800a800:	db02      	blt.n	800a808 <_printf_float+0x130>
 800a802:	6863      	ldr	r3, [r4, #4]
 800a804:	4299      	cmp	r1, r3
 800a806:	dd40      	ble.n	800a88a <_printf_float+0x1b2>
 800a808:	f1aa 0a02 	sub.w	sl, sl, #2
 800a80c:	fa5f fa8a 	uxtb.w	sl, sl
 800a810:	4652      	mov	r2, sl
 800a812:	3901      	subs	r1, #1
 800a814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a818:	910d      	str	r1, [sp, #52]	@ 0x34
 800a81a:	f7ff ff23 	bl	800a664 <__exponent>
 800a81e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a820:	4681      	mov	r9, r0
 800a822:	1813      	adds	r3, r2, r0
 800a824:	2a01      	cmp	r2, #1
 800a826:	6123      	str	r3, [r4, #16]
 800a828:	dc02      	bgt.n	800a830 <_printf_float+0x158>
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	07d2      	lsls	r2, r2, #31
 800a82e:	d501      	bpl.n	800a834 <_printf_float+0x15c>
 800a830:	3301      	adds	r3, #1
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d09e      	beq.n	800a77a <_printf_float+0xa2>
 800a83c:	232d      	movs	r3, #45	@ 0x2d
 800a83e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a842:	e79a      	b.n	800a77a <_printf_float+0xa2>
 800a844:	2947      	cmp	r1, #71	@ 0x47
 800a846:	d1bf      	bne.n	800a7c8 <_printf_float+0xf0>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1bd      	bne.n	800a7c8 <_printf_float+0xf0>
 800a84c:	2301      	movs	r3, #1
 800a84e:	e7ba      	b.n	800a7c6 <_printf_float+0xee>
 800a850:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a854:	d9dc      	bls.n	800a810 <_printf_float+0x138>
 800a856:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a85a:	d118      	bne.n	800a88e <_printf_float+0x1b6>
 800a85c:	2900      	cmp	r1, #0
 800a85e:	6863      	ldr	r3, [r4, #4]
 800a860:	dd0b      	ble.n	800a87a <_printf_float+0x1a2>
 800a862:	6121      	str	r1, [r4, #16]
 800a864:	b913      	cbnz	r3, 800a86c <_printf_float+0x194>
 800a866:	6822      	ldr	r2, [r4, #0]
 800a868:	07d0      	lsls	r0, r2, #31
 800a86a:	d502      	bpl.n	800a872 <_printf_float+0x19a>
 800a86c:	3301      	adds	r3, #1
 800a86e:	440b      	add	r3, r1
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	f04f 0900 	mov.w	r9, #0
 800a876:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a878:	e7dc      	b.n	800a834 <_printf_float+0x15c>
 800a87a:	b913      	cbnz	r3, 800a882 <_printf_float+0x1aa>
 800a87c:	6822      	ldr	r2, [r4, #0]
 800a87e:	07d2      	lsls	r2, r2, #31
 800a880:	d501      	bpl.n	800a886 <_printf_float+0x1ae>
 800a882:	3302      	adds	r3, #2
 800a884:	e7f4      	b.n	800a870 <_printf_float+0x198>
 800a886:	2301      	movs	r3, #1
 800a888:	e7f2      	b.n	800a870 <_printf_float+0x198>
 800a88a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a890:	4299      	cmp	r1, r3
 800a892:	db05      	blt.n	800a8a0 <_printf_float+0x1c8>
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	6121      	str	r1, [r4, #16]
 800a898:	07d8      	lsls	r0, r3, #31
 800a89a:	d5ea      	bpl.n	800a872 <_printf_float+0x19a>
 800a89c:	1c4b      	adds	r3, r1, #1
 800a89e:	e7e7      	b.n	800a870 <_printf_float+0x198>
 800a8a0:	2900      	cmp	r1, #0
 800a8a2:	bfcc      	ite	gt
 800a8a4:	2201      	movgt	r2, #1
 800a8a6:	f1c1 0202 	rsble	r2, r1, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	e7e0      	b.n	800a870 <_printf_float+0x198>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	055a      	lsls	r2, r3, #21
 800a8b2:	d407      	bmi.n	800a8c4 <_printf_float+0x1ec>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	4642      	mov	r2, r8
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	47b8      	blx	r7
 800a8be:	3001      	adds	r0, #1
 800a8c0:	d12b      	bne.n	800a91a <_printf_float+0x242>
 800a8c2:	e764      	b.n	800a78e <_printf_float+0xb6>
 800a8c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8c8:	f240 80dc 	bls.w	800aa84 <_printf_float+0x3ac>
 800a8cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f7f6 f868 	bl	80009a8 <__aeabi_dcmpeq>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d033      	beq.n	800a944 <_printf_float+0x26c>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	4a35      	ldr	r2, [pc, #212]	@ (800a9b8 <_printf_float+0x2e0>)
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f af51 	beq.w	800a78e <_printf_float+0xb6>
 800a8ec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a8f0:	4543      	cmp	r3, r8
 800a8f2:	db02      	blt.n	800a8fa <_printf_float+0x222>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	07d8      	lsls	r0, r3, #31
 800a8f8:	d50f      	bpl.n	800a91a <_printf_float+0x242>
 800a8fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8fe:	4631      	mov	r1, r6
 800a900:	4628      	mov	r0, r5
 800a902:	47b8      	blx	r7
 800a904:	3001      	adds	r0, #1
 800a906:	f43f af42 	beq.w	800a78e <_printf_float+0xb6>
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a912:	f104 0a1a 	add.w	sl, r4, #26
 800a916:	45c8      	cmp	r8, r9
 800a918:	dc09      	bgt.n	800a92e <_printf_float+0x256>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	079b      	lsls	r3, r3, #30
 800a91e:	f100 8102 	bmi.w	800ab26 <_printf_float+0x44e>
 800a922:	68e0      	ldr	r0, [r4, #12]
 800a924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a926:	4298      	cmp	r0, r3
 800a928:	bfb8      	it	lt
 800a92a:	4618      	movlt	r0, r3
 800a92c:	e731      	b.n	800a792 <_printf_float+0xba>
 800a92e:	2301      	movs	r3, #1
 800a930:	4652      	mov	r2, sl
 800a932:	4631      	mov	r1, r6
 800a934:	4628      	mov	r0, r5
 800a936:	47b8      	blx	r7
 800a938:	3001      	adds	r0, #1
 800a93a:	f43f af28 	beq.w	800a78e <_printf_float+0xb6>
 800a93e:	f109 0901 	add.w	r9, r9, #1
 800a942:	e7e8      	b.n	800a916 <_printf_float+0x23e>
 800a944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a946:	2b00      	cmp	r3, #0
 800a948:	dc38      	bgt.n	800a9bc <_printf_float+0x2e4>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4631      	mov	r1, r6
 800a94e:	4628      	mov	r0, r5
 800a950:	4a19      	ldr	r2, [pc, #100]	@ (800a9b8 <_printf_float+0x2e0>)
 800a952:	47b8      	blx	r7
 800a954:	3001      	adds	r0, #1
 800a956:	f43f af1a 	beq.w	800a78e <_printf_float+0xb6>
 800a95a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a95e:	ea59 0303 	orrs.w	r3, r9, r3
 800a962:	d102      	bne.n	800a96a <_printf_float+0x292>
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	07d9      	lsls	r1, r3, #31
 800a968:	d5d7      	bpl.n	800a91a <_printf_float+0x242>
 800a96a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	f43f af0a 	beq.w	800a78e <_printf_float+0xb6>
 800a97a:	f04f 0a00 	mov.w	sl, #0
 800a97e:	f104 0b1a 	add.w	fp, r4, #26
 800a982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a984:	425b      	negs	r3, r3
 800a986:	4553      	cmp	r3, sl
 800a988:	dc01      	bgt.n	800a98e <_printf_float+0x2b6>
 800a98a:	464b      	mov	r3, r9
 800a98c:	e793      	b.n	800a8b6 <_printf_float+0x1de>
 800a98e:	2301      	movs	r3, #1
 800a990:	465a      	mov	r2, fp
 800a992:	4631      	mov	r1, r6
 800a994:	4628      	mov	r0, r5
 800a996:	47b8      	blx	r7
 800a998:	3001      	adds	r0, #1
 800a99a:	f43f aef8 	beq.w	800a78e <_printf_float+0xb6>
 800a99e:	f10a 0a01 	add.w	sl, sl, #1
 800a9a2:	e7ee      	b.n	800a982 <_printf_float+0x2aa>
 800a9a4:	7fefffff 	.word	0x7fefffff
 800a9a8:	0800dc06 	.word	0x0800dc06
 800a9ac:	0800dc0a 	.word	0x0800dc0a
 800a9b0:	0800dc0e 	.word	0x0800dc0e
 800a9b4:	0800dc12 	.word	0x0800dc12
 800a9b8:	0800dc16 	.word	0x0800dc16
 800a9bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a9c2:	4553      	cmp	r3, sl
 800a9c4:	bfa8      	it	ge
 800a9c6:	4653      	movge	r3, sl
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	4699      	mov	r9, r3
 800a9cc:	dc36      	bgt.n	800aa3c <_printf_float+0x364>
 800a9ce:	f04f 0b00 	mov.w	fp, #0
 800a9d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9d6:	f104 021a 	add.w	r2, r4, #26
 800a9da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9de:	eba3 0309 	sub.w	r3, r3, r9
 800a9e2:	455b      	cmp	r3, fp
 800a9e4:	dc31      	bgt.n	800aa4a <_printf_float+0x372>
 800a9e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9e8:	459a      	cmp	sl, r3
 800a9ea:	dc3a      	bgt.n	800aa62 <_printf_float+0x38a>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07da      	lsls	r2, r3, #31
 800a9f0:	d437      	bmi.n	800aa62 <_printf_float+0x38a>
 800a9f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9f4:	ebaa 0903 	sub.w	r9, sl, r3
 800a9f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9fa:	ebaa 0303 	sub.w	r3, sl, r3
 800a9fe:	4599      	cmp	r9, r3
 800aa00:	bfa8      	it	ge
 800aa02:	4699      	movge	r9, r3
 800aa04:	f1b9 0f00 	cmp.w	r9, #0
 800aa08:	dc33      	bgt.n	800aa72 <_printf_float+0x39a>
 800aa0a:	f04f 0800 	mov.w	r8, #0
 800aa0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa12:	f104 0b1a 	add.w	fp, r4, #26
 800aa16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa18:	ebaa 0303 	sub.w	r3, sl, r3
 800aa1c:	eba3 0309 	sub.w	r3, r3, r9
 800aa20:	4543      	cmp	r3, r8
 800aa22:	f77f af7a 	ble.w	800a91a <_printf_float+0x242>
 800aa26:	2301      	movs	r3, #1
 800aa28:	465a      	mov	r2, fp
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	47b8      	blx	r7
 800aa30:	3001      	adds	r0, #1
 800aa32:	f43f aeac 	beq.w	800a78e <_printf_float+0xb6>
 800aa36:	f108 0801 	add.w	r8, r8, #1
 800aa3a:	e7ec      	b.n	800aa16 <_printf_float+0x33e>
 800aa3c:	4642      	mov	r2, r8
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b8      	blx	r7
 800aa44:	3001      	adds	r0, #1
 800aa46:	d1c2      	bne.n	800a9ce <_printf_float+0x2f6>
 800aa48:	e6a1      	b.n	800a78e <_printf_float+0xb6>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4628      	mov	r0, r5
 800aa50:	920a      	str	r2, [sp, #40]	@ 0x28
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	f43f ae9a 	beq.w	800a78e <_printf_float+0xb6>
 800aa5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa5c:	f10b 0b01 	add.w	fp, fp, #1
 800aa60:	e7bb      	b.n	800a9da <_printf_float+0x302>
 800aa62:	4631      	mov	r1, r6
 800aa64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d1c0      	bne.n	800a9f2 <_printf_float+0x31a>
 800aa70:	e68d      	b.n	800a78e <_printf_float+0xb6>
 800aa72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa74:	464b      	mov	r3, r9
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	4442      	add	r2, r8
 800aa7c:	47b8      	blx	r7
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d1c3      	bne.n	800aa0a <_printf_float+0x332>
 800aa82:	e684      	b.n	800a78e <_printf_float+0xb6>
 800aa84:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800aa88:	f1ba 0f01 	cmp.w	sl, #1
 800aa8c:	dc01      	bgt.n	800aa92 <_printf_float+0x3ba>
 800aa8e:	07db      	lsls	r3, r3, #31
 800aa90:	d536      	bpl.n	800ab00 <_printf_float+0x428>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4642      	mov	r2, r8
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b8      	blx	r7
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	f43f ae76 	beq.w	800a78e <_printf_float+0xb6>
 800aaa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	47b8      	blx	r7
 800aaac:	3001      	adds	r0, #1
 800aaae:	f43f ae6e 	beq.w	800a78e <_printf_float+0xb6>
 800aab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aab6:	2200      	movs	r2, #0
 800aab8:	2300      	movs	r3, #0
 800aaba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aabe:	f7f5 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 800aac2:	b9c0      	cbnz	r0, 800aaf6 <_printf_float+0x41e>
 800aac4:	4653      	mov	r3, sl
 800aac6:	f108 0201 	add.w	r2, r8, #1
 800aaca:	4631      	mov	r1, r6
 800aacc:	4628      	mov	r0, r5
 800aace:	47b8      	blx	r7
 800aad0:	3001      	adds	r0, #1
 800aad2:	d10c      	bne.n	800aaee <_printf_float+0x416>
 800aad4:	e65b      	b.n	800a78e <_printf_float+0xb6>
 800aad6:	2301      	movs	r3, #1
 800aad8:	465a      	mov	r2, fp
 800aada:	4631      	mov	r1, r6
 800aadc:	4628      	mov	r0, r5
 800aade:	47b8      	blx	r7
 800aae0:	3001      	adds	r0, #1
 800aae2:	f43f ae54 	beq.w	800a78e <_printf_float+0xb6>
 800aae6:	f108 0801 	add.w	r8, r8, #1
 800aaea:	45d0      	cmp	r8, sl
 800aaec:	dbf3      	blt.n	800aad6 <_printf_float+0x3fe>
 800aaee:	464b      	mov	r3, r9
 800aaf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aaf4:	e6e0      	b.n	800a8b8 <_printf_float+0x1e0>
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	f104 0b1a 	add.w	fp, r4, #26
 800aafe:	e7f4      	b.n	800aaea <_printf_float+0x412>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4642      	mov	r2, r8
 800ab04:	e7e1      	b.n	800aaca <_printf_float+0x3f2>
 800ab06:	2301      	movs	r3, #1
 800ab08:	464a      	mov	r2, r9
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	f43f ae3c 	beq.w	800a78e <_printf_float+0xb6>
 800ab16:	f108 0801 	add.w	r8, r8, #1
 800ab1a:	68e3      	ldr	r3, [r4, #12]
 800ab1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ab1e:	1a5b      	subs	r3, r3, r1
 800ab20:	4543      	cmp	r3, r8
 800ab22:	dcf0      	bgt.n	800ab06 <_printf_float+0x42e>
 800ab24:	e6fd      	b.n	800a922 <_printf_float+0x24a>
 800ab26:	f04f 0800 	mov.w	r8, #0
 800ab2a:	f104 0919 	add.w	r9, r4, #25
 800ab2e:	e7f4      	b.n	800ab1a <_printf_float+0x442>

0800ab30 <_printf_common>:
 800ab30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab34:	4616      	mov	r6, r2
 800ab36:	4698      	mov	r8, r3
 800ab38:	688a      	ldr	r2, [r1, #8]
 800ab3a:	690b      	ldr	r3, [r1, #16]
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	bfb8      	it	lt
 800ab42:	4613      	movlt	r3, r2
 800ab44:	6033      	str	r3, [r6, #0]
 800ab46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab50:	b10a      	cbz	r2, 800ab56 <_printf_common+0x26>
 800ab52:	3301      	adds	r3, #1
 800ab54:	6033      	str	r3, [r6, #0]
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	0699      	lsls	r1, r3, #26
 800ab5a:	bf42      	ittt	mi
 800ab5c:	6833      	ldrmi	r3, [r6, #0]
 800ab5e:	3302      	addmi	r3, #2
 800ab60:	6033      	strmi	r3, [r6, #0]
 800ab62:	6825      	ldr	r5, [r4, #0]
 800ab64:	f015 0506 	ands.w	r5, r5, #6
 800ab68:	d106      	bne.n	800ab78 <_printf_common+0x48>
 800ab6a:	f104 0a19 	add.w	sl, r4, #25
 800ab6e:	68e3      	ldr	r3, [r4, #12]
 800ab70:	6832      	ldr	r2, [r6, #0]
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	42ab      	cmp	r3, r5
 800ab76:	dc2b      	bgt.n	800abd0 <_printf_common+0xa0>
 800ab78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	3b00      	subs	r3, #0
 800ab80:	bf18      	it	ne
 800ab82:	2301      	movne	r3, #1
 800ab84:	0692      	lsls	r2, r2, #26
 800ab86:	d430      	bmi.n	800abea <_printf_common+0xba>
 800ab88:	4641      	mov	r1, r8
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab90:	47c8      	blx	r9
 800ab92:	3001      	adds	r0, #1
 800ab94:	d023      	beq.n	800abde <_printf_common+0xae>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	6922      	ldr	r2, [r4, #16]
 800ab9a:	f003 0306 	and.w	r3, r3, #6
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	bf14      	ite	ne
 800aba2:	2500      	movne	r5, #0
 800aba4:	6833      	ldreq	r3, [r6, #0]
 800aba6:	f04f 0600 	mov.w	r6, #0
 800abaa:	bf08      	it	eq
 800abac:	68e5      	ldreq	r5, [r4, #12]
 800abae:	f104 041a 	add.w	r4, r4, #26
 800abb2:	bf08      	it	eq
 800abb4:	1aed      	subeq	r5, r5, r3
 800abb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800abba:	bf08      	it	eq
 800abbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abc0:	4293      	cmp	r3, r2
 800abc2:	bfc4      	itt	gt
 800abc4:	1a9b      	subgt	r3, r3, r2
 800abc6:	18ed      	addgt	r5, r5, r3
 800abc8:	42b5      	cmp	r5, r6
 800abca:	d11a      	bne.n	800ac02 <_printf_common+0xd2>
 800abcc:	2000      	movs	r0, #0
 800abce:	e008      	b.n	800abe2 <_printf_common+0xb2>
 800abd0:	2301      	movs	r3, #1
 800abd2:	4652      	mov	r2, sl
 800abd4:	4641      	mov	r1, r8
 800abd6:	4638      	mov	r0, r7
 800abd8:	47c8      	blx	r9
 800abda:	3001      	adds	r0, #1
 800abdc:	d103      	bne.n	800abe6 <_printf_common+0xb6>
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe6:	3501      	adds	r5, #1
 800abe8:	e7c1      	b.n	800ab6e <_printf_common+0x3e>
 800abea:	2030      	movs	r0, #48	@ 0x30
 800abec:	18e1      	adds	r1, r4, r3
 800abee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abf8:	4422      	add	r2, r4
 800abfa:	3302      	adds	r3, #2
 800abfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac00:	e7c2      	b.n	800ab88 <_printf_common+0x58>
 800ac02:	2301      	movs	r3, #1
 800ac04:	4622      	mov	r2, r4
 800ac06:	4641      	mov	r1, r8
 800ac08:	4638      	mov	r0, r7
 800ac0a:	47c8      	blx	r9
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d0e6      	beq.n	800abde <_printf_common+0xae>
 800ac10:	3601      	adds	r6, #1
 800ac12:	e7d9      	b.n	800abc8 <_printf_common+0x98>

0800ac14 <_printf_i>:
 800ac14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac18:	7e0f      	ldrb	r7, [r1, #24]
 800ac1a:	4691      	mov	r9, r2
 800ac1c:	2f78      	cmp	r7, #120	@ 0x78
 800ac1e:	4680      	mov	r8, r0
 800ac20:	460c      	mov	r4, r1
 800ac22:	469a      	mov	sl, r3
 800ac24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac2a:	d807      	bhi.n	800ac3c <_printf_i+0x28>
 800ac2c:	2f62      	cmp	r7, #98	@ 0x62
 800ac2e:	d80a      	bhi.n	800ac46 <_printf_i+0x32>
 800ac30:	2f00      	cmp	r7, #0
 800ac32:	f000 80d3 	beq.w	800addc <_printf_i+0x1c8>
 800ac36:	2f58      	cmp	r7, #88	@ 0x58
 800ac38:	f000 80ba 	beq.w	800adb0 <_printf_i+0x19c>
 800ac3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac44:	e03a      	b.n	800acbc <_printf_i+0xa8>
 800ac46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac4a:	2b15      	cmp	r3, #21
 800ac4c:	d8f6      	bhi.n	800ac3c <_printf_i+0x28>
 800ac4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ac54 <_printf_i+0x40>)
 800ac50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac54:	0800acad 	.word	0x0800acad
 800ac58:	0800acc1 	.word	0x0800acc1
 800ac5c:	0800ac3d 	.word	0x0800ac3d
 800ac60:	0800ac3d 	.word	0x0800ac3d
 800ac64:	0800ac3d 	.word	0x0800ac3d
 800ac68:	0800ac3d 	.word	0x0800ac3d
 800ac6c:	0800acc1 	.word	0x0800acc1
 800ac70:	0800ac3d 	.word	0x0800ac3d
 800ac74:	0800ac3d 	.word	0x0800ac3d
 800ac78:	0800ac3d 	.word	0x0800ac3d
 800ac7c:	0800ac3d 	.word	0x0800ac3d
 800ac80:	0800adc3 	.word	0x0800adc3
 800ac84:	0800aceb 	.word	0x0800aceb
 800ac88:	0800ad7d 	.word	0x0800ad7d
 800ac8c:	0800ac3d 	.word	0x0800ac3d
 800ac90:	0800ac3d 	.word	0x0800ac3d
 800ac94:	0800ade5 	.word	0x0800ade5
 800ac98:	0800ac3d 	.word	0x0800ac3d
 800ac9c:	0800aceb 	.word	0x0800aceb
 800aca0:	0800ac3d 	.word	0x0800ac3d
 800aca4:	0800ac3d 	.word	0x0800ac3d
 800aca8:	0800ad85 	.word	0x0800ad85
 800acac:	6833      	ldr	r3, [r6, #0]
 800acae:	1d1a      	adds	r2, r3, #4
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6032      	str	r2, [r6, #0]
 800acb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acbc:	2301      	movs	r3, #1
 800acbe:	e09e      	b.n	800adfe <_printf_i+0x1ea>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	6820      	ldr	r0, [r4, #0]
 800acc4:	1d19      	adds	r1, r3, #4
 800acc6:	6031      	str	r1, [r6, #0]
 800acc8:	0606      	lsls	r6, r0, #24
 800acca:	d501      	bpl.n	800acd0 <_printf_i+0xbc>
 800accc:	681d      	ldr	r5, [r3, #0]
 800acce:	e003      	b.n	800acd8 <_printf_i+0xc4>
 800acd0:	0645      	lsls	r5, r0, #25
 800acd2:	d5fb      	bpl.n	800accc <_printf_i+0xb8>
 800acd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acd8:	2d00      	cmp	r5, #0
 800acda:	da03      	bge.n	800ace4 <_printf_i+0xd0>
 800acdc:	232d      	movs	r3, #45	@ 0x2d
 800acde:	426d      	negs	r5, r5
 800ace0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace4:	230a      	movs	r3, #10
 800ace6:	4859      	ldr	r0, [pc, #356]	@ (800ae4c <_printf_i+0x238>)
 800ace8:	e011      	b.n	800ad0e <_printf_i+0xfa>
 800acea:	6821      	ldr	r1, [r4, #0]
 800acec:	6833      	ldr	r3, [r6, #0]
 800acee:	0608      	lsls	r0, r1, #24
 800acf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800acf4:	d402      	bmi.n	800acfc <_printf_i+0xe8>
 800acf6:	0649      	lsls	r1, r1, #25
 800acf8:	bf48      	it	mi
 800acfa:	b2ad      	uxthmi	r5, r5
 800acfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800acfe:	6033      	str	r3, [r6, #0]
 800ad00:	bf14      	ite	ne
 800ad02:	230a      	movne	r3, #10
 800ad04:	2308      	moveq	r3, #8
 800ad06:	4851      	ldr	r0, [pc, #324]	@ (800ae4c <_printf_i+0x238>)
 800ad08:	2100      	movs	r1, #0
 800ad0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad0e:	6866      	ldr	r6, [r4, #4]
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	bfa8      	it	ge
 800ad14:	6821      	ldrge	r1, [r4, #0]
 800ad16:	60a6      	str	r6, [r4, #8]
 800ad18:	bfa4      	itt	ge
 800ad1a:	f021 0104 	bicge.w	r1, r1, #4
 800ad1e:	6021      	strge	r1, [r4, #0]
 800ad20:	b90d      	cbnz	r5, 800ad26 <_printf_i+0x112>
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	d04b      	beq.n	800adbe <_printf_i+0x1aa>
 800ad26:	4616      	mov	r6, r2
 800ad28:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad2c:	fb03 5711 	mls	r7, r3, r1, r5
 800ad30:	5dc7      	ldrb	r7, [r0, r7]
 800ad32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad36:	462f      	mov	r7, r5
 800ad38:	42bb      	cmp	r3, r7
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	d9f4      	bls.n	800ad28 <_printf_i+0x114>
 800ad3e:	2b08      	cmp	r3, #8
 800ad40:	d10b      	bne.n	800ad5a <_printf_i+0x146>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	07df      	lsls	r7, r3, #31
 800ad46:	d508      	bpl.n	800ad5a <_printf_i+0x146>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	6861      	ldr	r1, [r4, #4]
 800ad4c:	4299      	cmp	r1, r3
 800ad4e:	bfde      	ittt	le
 800ad50:	2330      	movle	r3, #48	@ 0x30
 800ad52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad5a:	1b92      	subs	r2, r2, r6
 800ad5c:	6122      	str	r2, [r4, #16]
 800ad5e:	464b      	mov	r3, r9
 800ad60:	4621      	mov	r1, r4
 800ad62:	4640      	mov	r0, r8
 800ad64:	f8cd a000 	str.w	sl, [sp]
 800ad68:	aa03      	add	r2, sp, #12
 800ad6a:	f7ff fee1 	bl	800ab30 <_printf_common>
 800ad6e:	3001      	adds	r0, #1
 800ad70:	d14a      	bne.n	800ae08 <_printf_i+0x1f4>
 800ad72:	f04f 30ff 	mov.w	r0, #4294967295
 800ad76:	b004      	add	sp, #16
 800ad78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	f043 0320 	orr.w	r3, r3, #32
 800ad82:	6023      	str	r3, [r4, #0]
 800ad84:	2778      	movs	r7, #120	@ 0x78
 800ad86:	4832      	ldr	r0, [pc, #200]	@ (800ae50 <_printf_i+0x23c>)
 800ad88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	6831      	ldr	r1, [r6, #0]
 800ad90:	061f      	lsls	r7, r3, #24
 800ad92:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad96:	d402      	bmi.n	800ad9e <_printf_i+0x18a>
 800ad98:	065f      	lsls	r7, r3, #25
 800ad9a:	bf48      	it	mi
 800ad9c:	b2ad      	uxthmi	r5, r5
 800ad9e:	6031      	str	r1, [r6, #0]
 800ada0:	07d9      	lsls	r1, r3, #31
 800ada2:	bf44      	itt	mi
 800ada4:	f043 0320 	orrmi.w	r3, r3, #32
 800ada8:	6023      	strmi	r3, [r4, #0]
 800adaa:	b11d      	cbz	r5, 800adb4 <_printf_i+0x1a0>
 800adac:	2310      	movs	r3, #16
 800adae:	e7ab      	b.n	800ad08 <_printf_i+0xf4>
 800adb0:	4826      	ldr	r0, [pc, #152]	@ (800ae4c <_printf_i+0x238>)
 800adb2:	e7e9      	b.n	800ad88 <_printf_i+0x174>
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	f023 0320 	bic.w	r3, r3, #32
 800adba:	6023      	str	r3, [r4, #0]
 800adbc:	e7f6      	b.n	800adac <_printf_i+0x198>
 800adbe:	4616      	mov	r6, r2
 800adc0:	e7bd      	b.n	800ad3e <_printf_i+0x12a>
 800adc2:	6833      	ldr	r3, [r6, #0]
 800adc4:	6825      	ldr	r5, [r4, #0]
 800adc6:	1d18      	adds	r0, r3, #4
 800adc8:	6961      	ldr	r1, [r4, #20]
 800adca:	6030      	str	r0, [r6, #0]
 800adcc:	062e      	lsls	r6, r5, #24
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	d501      	bpl.n	800add6 <_printf_i+0x1c2>
 800add2:	6019      	str	r1, [r3, #0]
 800add4:	e002      	b.n	800addc <_printf_i+0x1c8>
 800add6:	0668      	lsls	r0, r5, #25
 800add8:	d5fb      	bpl.n	800add2 <_printf_i+0x1be>
 800adda:	8019      	strh	r1, [r3, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	4616      	mov	r6, r2
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	e7bc      	b.n	800ad5e <_printf_i+0x14a>
 800ade4:	6833      	ldr	r3, [r6, #0]
 800ade6:	2100      	movs	r1, #0
 800ade8:	1d1a      	adds	r2, r3, #4
 800adea:	6032      	str	r2, [r6, #0]
 800adec:	681e      	ldr	r6, [r3, #0]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	4630      	mov	r0, r6
 800adf2:	f000 fa30 	bl	800b256 <memchr>
 800adf6:	b108      	cbz	r0, 800adfc <_printf_i+0x1e8>
 800adf8:	1b80      	subs	r0, r0, r6
 800adfa:	6060      	str	r0, [r4, #4]
 800adfc:	6863      	ldr	r3, [r4, #4]
 800adfe:	6123      	str	r3, [r4, #16]
 800ae00:	2300      	movs	r3, #0
 800ae02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae06:	e7aa      	b.n	800ad5e <_printf_i+0x14a>
 800ae08:	4632      	mov	r2, r6
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	47d0      	blx	sl
 800ae12:	3001      	adds	r0, #1
 800ae14:	d0ad      	beq.n	800ad72 <_printf_i+0x15e>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	079b      	lsls	r3, r3, #30
 800ae1a:	d413      	bmi.n	800ae44 <_printf_i+0x230>
 800ae1c:	68e0      	ldr	r0, [r4, #12]
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	4298      	cmp	r0, r3
 800ae22:	bfb8      	it	lt
 800ae24:	4618      	movlt	r0, r3
 800ae26:	e7a6      	b.n	800ad76 <_printf_i+0x162>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4632      	mov	r2, r6
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4640      	mov	r0, r8
 800ae30:	47d0      	blx	sl
 800ae32:	3001      	adds	r0, #1
 800ae34:	d09d      	beq.n	800ad72 <_printf_i+0x15e>
 800ae36:	3501      	adds	r5, #1
 800ae38:	68e3      	ldr	r3, [r4, #12]
 800ae3a:	9903      	ldr	r1, [sp, #12]
 800ae3c:	1a5b      	subs	r3, r3, r1
 800ae3e:	42ab      	cmp	r3, r5
 800ae40:	dcf2      	bgt.n	800ae28 <_printf_i+0x214>
 800ae42:	e7eb      	b.n	800ae1c <_printf_i+0x208>
 800ae44:	2500      	movs	r5, #0
 800ae46:	f104 0619 	add.w	r6, r4, #25
 800ae4a:	e7f5      	b.n	800ae38 <_printf_i+0x224>
 800ae4c:	0800dc18 	.word	0x0800dc18
 800ae50:	0800dc29 	.word	0x0800dc29

0800ae54 <std>:
 800ae54:	2300      	movs	r3, #0
 800ae56:	b510      	push	{r4, lr}
 800ae58:	4604      	mov	r4, r0
 800ae5a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae62:	6083      	str	r3, [r0, #8]
 800ae64:	8181      	strh	r1, [r0, #12]
 800ae66:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae68:	81c2      	strh	r2, [r0, #14]
 800ae6a:	6183      	str	r3, [r0, #24]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	2208      	movs	r2, #8
 800ae70:	305c      	adds	r0, #92	@ 0x5c
 800ae72:	f000 f914 	bl	800b09e <memset>
 800ae76:	4b0d      	ldr	r3, [pc, #52]	@ (800aeac <std+0x58>)
 800ae78:	6224      	str	r4, [r4, #32]
 800ae7a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb0 <std+0x5c>)
 800ae7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae80:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb4 <std+0x60>)
 800ae82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae84:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb8 <std+0x64>)
 800ae86:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae88:	4b0c      	ldr	r3, [pc, #48]	@ (800aebc <std+0x68>)
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	d006      	beq.n	800ae9c <std+0x48>
 800ae8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae92:	4294      	cmp	r4, r2
 800ae94:	d002      	beq.n	800ae9c <std+0x48>
 800ae96:	33d0      	adds	r3, #208	@ 0xd0
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	d105      	bne.n	800aea8 <std+0x54>
 800ae9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea4:	f000 b9cc 	b.w	800b240 <__retarget_lock_init_recursive>
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800b019 	.word	0x0800b019
 800aeb0:	0800b03b 	.word	0x0800b03b
 800aeb4:	0800b073 	.word	0x0800b073
 800aeb8:	0800b097 	.word	0x0800b097
 800aebc:	20000424 	.word	0x20000424

0800aec0 <stdio_exit_handler>:
 800aec0:	4a02      	ldr	r2, [pc, #8]	@ (800aecc <stdio_exit_handler+0xc>)
 800aec2:	4903      	ldr	r1, [pc, #12]	@ (800aed0 <stdio_exit_handler+0x10>)
 800aec4:	4803      	ldr	r0, [pc, #12]	@ (800aed4 <stdio_exit_handler+0x14>)
 800aec6:	f000 b869 	b.w	800af9c <_fwalk_sglue>
 800aeca:	bf00      	nop
 800aecc:	20000010 	.word	0x20000010
 800aed0:	0800ca59 	.word	0x0800ca59
 800aed4:	20000020 	.word	0x20000020

0800aed8 <cleanup_stdio>:
 800aed8:	6841      	ldr	r1, [r0, #4]
 800aeda:	4b0c      	ldr	r3, [pc, #48]	@ (800af0c <cleanup_stdio+0x34>)
 800aedc:	b510      	push	{r4, lr}
 800aede:	4299      	cmp	r1, r3
 800aee0:	4604      	mov	r4, r0
 800aee2:	d001      	beq.n	800aee8 <cleanup_stdio+0x10>
 800aee4:	f001 fdb8 	bl	800ca58 <_fflush_r>
 800aee8:	68a1      	ldr	r1, [r4, #8]
 800aeea:	4b09      	ldr	r3, [pc, #36]	@ (800af10 <cleanup_stdio+0x38>)
 800aeec:	4299      	cmp	r1, r3
 800aeee:	d002      	beq.n	800aef6 <cleanup_stdio+0x1e>
 800aef0:	4620      	mov	r0, r4
 800aef2:	f001 fdb1 	bl	800ca58 <_fflush_r>
 800aef6:	68e1      	ldr	r1, [r4, #12]
 800aef8:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <cleanup_stdio+0x3c>)
 800aefa:	4299      	cmp	r1, r3
 800aefc:	d004      	beq.n	800af08 <cleanup_stdio+0x30>
 800aefe:	4620      	mov	r0, r4
 800af00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af04:	f001 bda8 	b.w	800ca58 <_fflush_r>
 800af08:	bd10      	pop	{r4, pc}
 800af0a:	bf00      	nop
 800af0c:	20000424 	.word	0x20000424
 800af10:	2000048c 	.word	0x2000048c
 800af14:	200004f4 	.word	0x200004f4

0800af18 <global_stdio_init.part.0>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	4b0b      	ldr	r3, [pc, #44]	@ (800af48 <global_stdio_init.part.0+0x30>)
 800af1c:	4c0b      	ldr	r4, [pc, #44]	@ (800af4c <global_stdio_init.part.0+0x34>)
 800af1e:	4a0c      	ldr	r2, [pc, #48]	@ (800af50 <global_stdio_init.part.0+0x38>)
 800af20:	4620      	mov	r0, r4
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	2104      	movs	r1, #4
 800af26:	2200      	movs	r2, #0
 800af28:	f7ff ff94 	bl	800ae54 <std>
 800af2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af30:	2201      	movs	r2, #1
 800af32:	2109      	movs	r1, #9
 800af34:	f7ff ff8e 	bl	800ae54 <std>
 800af38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af3c:	2202      	movs	r2, #2
 800af3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af42:	2112      	movs	r1, #18
 800af44:	f7ff bf86 	b.w	800ae54 <std>
 800af48:	2000055c 	.word	0x2000055c
 800af4c:	20000424 	.word	0x20000424
 800af50:	0800aec1 	.word	0x0800aec1

0800af54 <__sfp_lock_acquire>:
 800af54:	4801      	ldr	r0, [pc, #4]	@ (800af5c <__sfp_lock_acquire+0x8>)
 800af56:	f000 b974 	b.w	800b242 <__retarget_lock_acquire_recursive>
 800af5a:	bf00      	nop
 800af5c:	20000565 	.word	0x20000565

0800af60 <__sfp_lock_release>:
 800af60:	4801      	ldr	r0, [pc, #4]	@ (800af68 <__sfp_lock_release+0x8>)
 800af62:	f000 b96f 	b.w	800b244 <__retarget_lock_release_recursive>
 800af66:	bf00      	nop
 800af68:	20000565 	.word	0x20000565

0800af6c <__sinit>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4604      	mov	r4, r0
 800af70:	f7ff fff0 	bl	800af54 <__sfp_lock_acquire>
 800af74:	6a23      	ldr	r3, [r4, #32]
 800af76:	b11b      	cbz	r3, 800af80 <__sinit+0x14>
 800af78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af7c:	f7ff bff0 	b.w	800af60 <__sfp_lock_release>
 800af80:	4b04      	ldr	r3, [pc, #16]	@ (800af94 <__sinit+0x28>)
 800af82:	6223      	str	r3, [r4, #32]
 800af84:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <__sinit+0x2c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1f5      	bne.n	800af78 <__sinit+0xc>
 800af8c:	f7ff ffc4 	bl	800af18 <global_stdio_init.part.0>
 800af90:	e7f2      	b.n	800af78 <__sinit+0xc>
 800af92:	bf00      	nop
 800af94:	0800aed9 	.word	0x0800aed9
 800af98:	2000055c 	.word	0x2000055c

0800af9c <_fwalk_sglue>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4607      	mov	r7, r0
 800afa2:	4688      	mov	r8, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	2600      	movs	r6, #0
 800afa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afac:	f1b9 0901 	subs.w	r9, r9, #1
 800afb0:	d505      	bpl.n	800afbe <_fwalk_sglue+0x22>
 800afb2:	6824      	ldr	r4, [r4, #0]
 800afb4:	2c00      	cmp	r4, #0
 800afb6:	d1f7      	bne.n	800afa8 <_fwalk_sglue+0xc>
 800afb8:	4630      	mov	r0, r6
 800afba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d907      	bls.n	800afd4 <_fwalk_sglue+0x38>
 800afc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afc8:	3301      	adds	r3, #1
 800afca:	d003      	beq.n	800afd4 <_fwalk_sglue+0x38>
 800afcc:	4629      	mov	r1, r5
 800afce:	4638      	mov	r0, r7
 800afd0:	47c0      	blx	r8
 800afd2:	4306      	orrs	r6, r0
 800afd4:	3568      	adds	r5, #104	@ 0x68
 800afd6:	e7e9      	b.n	800afac <_fwalk_sglue+0x10>

0800afd8 <siprintf>:
 800afd8:	b40e      	push	{r1, r2, r3}
 800afda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afde:	b500      	push	{lr}
 800afe0:	b09c      	sub	sp, #112	@ 0x70
 800afe2:	ab1d      	add	r3, sp, #116	@ 0x74
 800afe4:	9002      	str	r0, [sp, #8]
 800afe6:	9006      	str	r0, [sp, #24]
 800afe8:	9107      	str	r1, [sp, #28]
 800afea:	9104      	str	r1, [sp, #16]
 800afec:	4808      	ldr	r0, [pc, #32]	@ (800b010 <siprintf+0x38>)
 800afee:	4909      	ldr	r1, [pc, #36]	@ (800b014 <siprintf+0x3c>)
 800aff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff4:	9105      	str	r1, [sp, #20]
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	a902      	add	r1, sp, #8
 800affa:	9301      	str	r3, [sp, #4]
 800affc:	f001 fbb0 	bl	800c760 <_svfiprintf_r>
 800b000:	2200      	movs	r2, #0
 800b002:	9b02      	ldr	r3, [sp, #8]
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	b01c      	add	sp, #112	@ 0x70
 800b008:	f85d eb04 	ldr.w	lr, [sp], #4
 800b00c:	b003      	add	sp, #12
 800b00e:	4770      	bx	lr
 800b010:	2000001c 	.word	0x2000001c
 800b014:	ffff0208 	.word	0xffff0208

0800b018 <__sread>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b020:	f000 f89c 	bl	800b15c <_read_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	bfab      	itete	ge
 800b028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b02a:	89a3      	ldrhlt	r3, [r4, #12]
 800b02c:	181b      	addge	r3, r3, r0
 800b02e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b032:	bfac      	ite	ge
 800b034:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b036:	81a3      	strhlt	r3, [r4, #12]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__swrite>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	461f      	mov	r7, r3
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	4605      	mov	r5, r0
 800b044:	05db      	lsls	r3, r3, #23
 800b046:	460c      	mov	r4, r1
 800b048:	4616      	mov	r6, r2
 800b04a:	d505      	bpl.n	800b058 <__swrite+0x1e>
 800b04c:	2302      	movs	r3, #2
 800b04e:	2200      	movs	r2, #0
 800b050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b054:	f000 f870 	bl	800b138 <_lseek_r>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	4632      	mov	r2, r6
 800b05c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	4628      	mov	r0, r5
 800b064:	463b      	mov	r3, r7
 800b066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	f000 b8ab 	b.w	800b1c8 <_write_r>

0800b072 <__sseek>:
 800b072:	b510      	push	{r4, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07a:	f000 f85d 	bl	800b138 <_lseek_r>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	bf15      	itete	ne
 800b084:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b08a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b08e:	81a3      	strheq	r3, [r4, #12]
 800b090:	bf18      	it	ne
 800b092:	81a3      	strhne	r3, [r4, #12]
 800b094:	bd10      	pop	{r4, pc}

0800b096 <__sclose>:
 800b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09a:	f000 b83d 	b.w	800b118 <_close_r>

0800b09e <memset>:
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4402      	add	r2, r0
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d100      	bne.n	800b0a8 <memset+0xa>
 800b0a6:	4770      	bx	lr
 800b0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ac:	e7f9      	b.n	800b0a2 <memset+0x4>

0800b0ae <_raise_r>:
 800b0ae:	291f      	cmp	r1, #31
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	d904      	bls.n	800b0c2 <_raise_r+0x14>
 800b0b8:	2316      	movs	r3, #22
 800b0ba:	6003      	str	r3, [r0, #0]
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	bd38      	pop	{r3, r4, r5, pc}
 800b0c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0c4:	b112      	cbz	r2, 800b0cc <_raise_r+0x1e>
 800b0c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ca:	b94b      	cbnz	r3, 800b0e0 <_raise_r+0x32>
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 f869 	bl	800b1a4 <_getpid_r>
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0dc:	f000 b850 	b.w	800b180 <_kill_r>
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d00a      	beq.n	800b0fa <_raise_r+0x4c>
 800b0e4:	1c59      	adds	r1, r3, #1
 800b0e6:	d103      	bne.n	800b0f0 <_raise_r+0x42>
 800b0e8:	2316      	movs	r3, #22
 800b0ea:	6003      	str	r3, [r0, #0]
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	e7e7      	b.n	800b0c0 <_raise_r+0x12>
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0f8:	4798      	blx	r3
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	e7e0      	b.n	800b0c0 <_raise_r+0x12>
	...

0800b100 <raise>:
 800b100:	4b02      	ldr	r3, [pc, #8]	@ (800b10c <raise+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f7ff bfd2 	b.w	800b0ae <_raise_r>
 800b10a:	bf00      	nop
 800b10c:	2000001c 	.word	0x2000001c

0800b110 <_localeconv_r>:
 800b110:	4800      	ldr	r0, [pc, #0]	@ (800b114 <_localeconv_r+0x4>)
 800b112:	4770      	bx	lr
 800b114:	2000015c 	.word	0x2000015c

0800b118 <_close_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	2300      	movs	r3, #0
 800b11c:	4d05      	ldr	r5, [pc, #20]	@ (800b134 <_close_r+0x1c>)
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	f7fc f9d3 	bl	80074ce <_close>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_close_r+0x1a>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_close_r+0x1a>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	20000560 	.word	0x20000560

0800b138 <_lseek_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	2200      	movs	r2, #0
 800b142:	4d05      	ldr	r5, [pc, #20]	@ (800b158 <_lseek_r+0x20>)
 800b144:	602a      	str	r2, [r5, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	f7fc f9e5 	bl	8007516 <_lseek>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_lseek_r+0x1e>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_lseek_r+0x1e>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	20000560 	.word	0x20000560

0800b15c <_read_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	4611      	mov	r1, r2
 800b164:	2200      	movs	r2, #0
 800b166:	4d05      	ldr	r5, [pc, #20]	@ (800b17c <_read_r+0x20>)
 800b168:	602a      	str	r2, [r5, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f7fc f976 	bl	800745c <_read>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_read_r+0x1e>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_read_r+0x1e>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	20000560 	.word	0x20000560

0800b180 <_kill_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	2300      	movs	r3, #0
 800b184:	4d06      	ldr	r5, [pc, #24]	@ (800b1a0 <_kill_r+0x20>)
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	f7fc f94a 	bl	8007426 <_kill>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	d102      	bne.n	800b19c <_kill_r+0x1c>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	b103      	cbz	r3, 800b19c <_kill_r+0x1c>
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000560 	.word	0x20000560

0800b1a4 <_getpid_r>:
 800b1a4:	f7fc b938 	b.w	8007418 <_getpid>

0800b1a8 <_sbrk_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4d05      	ldr	r5, [pc, #20]	@ (800b1c4 <_sbrk_r+0x1c>)
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	f7fc f9bc 	bl	8007530 <_sbrk>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_sbrk_r+0x1a>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_sbrk_r+0x1a>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	20000560 	.word	0x20000560

0800b1c8 <_write_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	4d05      	ldr	r5, [pc, #20]	@ (800b1e8 <_write_r+0x20>)
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7fc f95d 	bl	8007496 <_write>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_write_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_write_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	20000560 	.word	0x20000560

0800b1ec <__errno>:
 800b1ec:	4b01      	ldr	r3, [pc, #4]	@ (800b1f4 <__errno+0x8>)
 800b1ee:	6818      	ldr	r0, [r3, #0]
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	2000001c 	.word	0x2000001c

0800b1f8 <__libc_init_array>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	4d0c      	ldr	r5, [pc, #48]	@ (800b230 <__libc_init_array+0x38>)
 800b1fe:	4c0d      	ldr	r4, [pc, #52]	@ (800b234 <__libc_init_array+0x3c>)
 800b200:	1b64      	subs	r4, r4, r5
 800b202:	10a4      	asrs	r4, r4, #2
 800b204:	42a6      	cmp	r6, r4
 800b206:	d109      	bne.n	800b21c <__libc_init_array+0x24>
 800b208:	f001 ff68 	bl	800d0dc <_init>
 800b20c:	2600      	movs	r6, #0
 800b20e:	4d0a      	ldr	r5, [pc, #40]	@ (800b238 <__libc_init_array+0x40>)
 800b210:	4c0a      	ldr	r4, [pc, #40]	@ (800b23c <__libc_init_array+0x44>)
 800b212:	1b64      	subs	r4, r4, r5
 800b214:	10a4      	asrs	r4, r4, #2
 800b216:	42a6      	cmp	r6, r4
 800b218:	d105      	bne.n	800b226 <__libc_init_array+0x2e>
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b220:	4798      	blx	r3
 800b222:	3601      	adds	r6, #1
 800b224:	e7ee      	b.n	800b204 <__libc_init_array+0xc>
 800b226:	f855 3b04 	ldr.w	r3, [r5], #4
 800b22a:	4798      	blx	r3
 800b22c:	3601      	adds	r6, #1
 800b22e:	e7f2      	b.n	800b216 <__libc_init_array+0x1e>
 800b230:	0800df80 	.word	0x0800df80
 800b234:	0800df80 	.word	0x0800df80
 800b238:	0800df80 	.word	0x0800df80
 800b23c:	0800df88 	.word	0x0800df88

0800b240 <__retarget_lock_init_recursive>:
 800b240:	4770      	bx	lr

0800b242 <__retarget_lock_acquire_recursive>:
 800b242:	4770      	bx	lr

0800b244 <__retarget_lock_release_recursive>:
 800b244:	4770      	bx	lr

0800b246 <strcpy>:
 800b246:	4603      	mov	r3, r0
 800b248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b24c:	f803 2b01 	strb.w	r2, [r3], #1
 800b250:	2a00      	cmp	r2, #0
 800b252:	d1f9      	bne.n	800b248 <strcpy+0x2>
 800b254:	4770      	bx	lr

0800b256 <memchr>:
 800b256:	4603      	mov	r3, r0
 800b258:	b510      	push	{r4, lr}
 800b25a:	b2c9      	uxtb	r1, r1
 800b25c:	4402      	add	r2, r0
 800b25e:	4293      	cmp	r3, r2
 800b260:	4618      	mov	r0, r3
 800b262:	d101      	bne.n	800b268 <memchr+0x12>
 800b264:	2000      	movs	r0, #0
 800b266:	e003      	b.n	800b270 <memchr+0x1a>
 800b268:	7804      	ldrb	r4, [r0, #0]
 800b26a:	3301      	adds	r3, #1
 800b26c:	428c      	cmp	r4, r1
 800b26e:	d1f6      	bne.n	800b25e <memchr+0x8>
 800b270:	bd10      	pop	{r4, pc}

0800b272 <quorem>:
 800b272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b276:	6903      	ldr	r3, [r0, #16]
 800b278:	690c      	ldr	r4, [r1, #16]
 800b27a:	4607      	mov	r7, r0
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	db7e      	blt.n	800b37e <quorem+0x10c>
 800b280:	3c01      	subs	r4, #1
 800b282:	00a3      	lsls	r3, r4, #2
 800b284:	f100 0514 	add.w	r5, r0, #20
 800b288:	f101 0814 	add.w	r8, r1, #20
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b29c:	3301      	adds	r3, #1
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2a8:	d32e      	bcc.n	800b308 <quorem+0x96>
 800b2aa:	f04f 0a00 	mov.w	sl, #0
 800b2ae:	46c4      	mov	ip, r8
 800b2b0:	46ae      	mov	lr, r5
 800b2b2:	46d3      	mov	fp, sl
 800b2b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2b8:	b298      	uxth	r0, r3
 800b2ba:	fb06 a000 	mla	r0, r6, r0, sl
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	0c02      	lsrs	r2, r0, #16
 800b2c2:	fb06 2303 	mla	r3, r6, r3, r2
 800b2c6:	f8de 2000 	ldr.w	r2, [lr]
 800b2ca:	b280      	uxth	r0, r0
 800b2cc:	b292      	uxth	r2, r2
 800b2ce:	1a12      	subs	r2, r2, r0
 800b2d0:	445a      	add	r2, fp
 800b2d2:	f8de 0000 	ldr.w	r0, [lr]
 800b2d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b2e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b2e4:	b292      	uxth	r2, r2
 800b2e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b2ea:	45e1      	cmp	r9, ip
 800b2ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b2f0:	f84e 2b04 	str.w	r2, [lr], #4
 800b2f4:	d2de      	bcs.n	800b2b4 <quorem+0x42>
 800b2f6:	9b00      	ldr	r3, [sp, #0]
 800b2f8:	58eb      	ldr	r3, [r5, r3]
 800b2fa:	b92b      	cbnz	r3, 800b308 <quorem+0x96>
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	3b04      	subs	r3, #4
 800b300:	429d      	cmp	r5, r3
 800b302:	461a      	mov	r2, r3
 800b304:	d32f      	bcc.n	800b366 <quorem+0xf4>
 800b306:	613c      	str	r4, [r7, #16]
 800b308:	4638      	mov	r0, r7
 800b30a:	f001 f8c5 	bl	800c498 <__mcmp>
 800b30e:	2800      	cmp	r0, #0
 800b310:	db25      	blt.n	800b35e <quorem+0xec>
 800b312:	4629      	mov	r1, r5
 800b314:	2000      	movs	r0, #0
 800b316:	f858 2b04 	ldr.w	r2, [r8], #4
 800b31a:	f8d1 c000 	ldr.w	ip, [r1]
 800b31e:	fa1f fe82 	uxth.w	lr, r2
 800b322:	fa1f f38c 	uxth.w	r3, ip
 800b326:	eba3 030e 	sub.w	r3, r3, lr
 800b32a:	4403      	add	r3, r0
 800b32c:	0c12      	lsrs	r2, r2, #16
 800b32e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b332:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b336:	b29b      	uxth	r3, r3
 800b338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b33c:	45c1      	cmp	r9, r8
 800b33e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b342:	f841 3b04 	str.w	r3, [r1], #4
 800b346:	d2e6      	bcs.n	800b316 <quorem+0xa4>
 800b348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b34c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b350:	b922      	cbnz	r2, 800b35c <quorem+0xea>
 800b352:	3b04      	subs	r3, #4
 800b354:	429d      	cmp	r5, r3
 800b356:	461a      	mov	r2, r3
 800b358:	d30b      	bcc.n	800b372 <quorem+0x100>
 800b35a:	613c      	str	r4, [r7, #16]
 800b35c:	3601      	adds	r6, #1
 800b35e:	4630      	mov	r0, r6
 800b360:	b003      	add	sp, #12
 800b362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	3b04      	subs	r3, #4
 800b36a:	2a00      	cmp	r2, #0
 800b36c:	d1cb      	bne.n	800b306 <quorem+0x94>
 800b36e:	3c01      	subs	r4, #1
 800b370:	e7c6      	b.n	800b300 <quorem+0x8e>
 800b372:	6812      	ldr	r2, [r2, #0]
 800b374:	3b04      	subs	r3, #4
 800b376:	2a00      	cmp	r2, #0
 800b378:	d1ef      	bne.n	800b35a <quorem+0xe8>
 800b37a:	3c01      	subs	r4, #1
 800b37c:	e7ea      	b.n	800b354 <quorem+0xe2>
 800b37e:	2000      	movs	r0, #0
 800b380:	e7ee      	b.n	800b360 <quorem+0xee>
 800b382:	0000      	movs	r0, r0
 800b384:	0000      	movs	r0, r0
	...

0800b388 <_dtoa_r>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	4614      	mov	r4, r2
 800b38e:	461d      	mov	r5, r3
 800b390:	69c7      	ldr	r7, [r0, #28]
 800b392:	b097      	sub	sp, #92	@ 0x5c
 800b394:	4683      	mov	fp, r0
 800b396:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b39a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b39c:	b97f      	cbnz	r7, 800b3be <_dtoa_r+0x36>
 800b39e:	2010      	movs	r0, #16
 800b3a0:	f7ff f83e 	bl	800a420 <malloc>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	f8cb 001c 	str.w	r0, [fp, #28]
 800b3aa:	b920      	cbnz	r0, 800b3b6 <_dtoa_r+0x2e>
 800b3ac:	21ef      	movs	r1, #239	@ 0xef
 800b3ae:	4ba8      	ldr	r3, [pc, #672]	@ (800b650 <_dtoa_r+0x2c8>)
 800b3b0:	48a8      	ldr	r0, [pc, #672]	@ (800b654 <_dtoa_r+0x2cc>)
 800b3b2:	f001 fba1 	bl	800caf8 <__assert_func>
 800b3b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b3ba:	6007      	str	r7, [r0, #0]
 800b3bc:	60c7      	str	r7, [r0, #12]
 800b3be:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	b159      	cbz	r1, 800b3de <_dtoa_r+0x56>
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	4093      	lsls	r3, r2
 800b3cc:	604a      	str	r2, [r1, #4]
 800b3ce:	608b      	str	r3, [r1, #8]
 800b3d0:	4658      	mov	r0, fp
 800b3d2:	f000 fe29 	bl	800c028 <_Bfree>
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	1e2b      	subs	r3, r5, #0
 800b3e0:	bfaf      	iteee	ge
 800b3e2:	2300      	movge	r3, #0
 800b3e4:	2201      	movlt	r2, #1
 800b3e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b3ea:	9303      	strlt	r3, [sp, #12]
 800b3ec:	bfa8      	it	ge
 800b3ee:	6033      	strge	r3, [r6, #0]
 800b3f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b3f4:	4b98      	ldr	r3, [pc, #608]	@ (800b658 <_dtoa_r+0x2d0>)
 800b3f6:	bfb8      	it	lt
 800b3f8:	6032      	strlt	r2, [r6, #0]
 800b3fa:	ea33 0308 	bics.w	r3, r3, r8
 800b3fe:	d112      	bne.n	800b426 <_dtoa_r+0x9e>
 800b400:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b404:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b40c:	4323      	orrs	r3, r4
 800b40e:	f000 8550 	beq.w	800beb2 <_dtoa_r+0xb2a>
 800b412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b414:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b65c <_dtoa_r+0x2d4>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 8552 	beq.w	800bec2 <_dtoa_r+0xb3a>
 800b41e:	f10a 0303 	add.w	r3, sl, #3
 800b422:	f000 bd4c 	b.w	800bebe <_dtoa_r+0xb36>
 800b426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b42a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b42e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b432:	2200      	movs	r2, #0
 800b434:	2300      	movs	r3, #0
 800b436:	f7f5 fab7 	bl	80009a8 <__aeabi_dcmpeq>
 800b43a:	4607      	mov	r7, r0
 800b43c:	b158      	cbz	r0, 800b456 <_dtoa_r+0xce>
 800b43e:	2301      	movs	r3, #1
 800b440:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b446:	b113      	cbz	r3, 800b44e <_dtoa_r+0xc6>
 800b448:	4b85      	ldr	r3, [pc, #532]	@ (800b660 <_dtoa_r+0x2d8>)
 800b44a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b664 <_dtoa_r+0x2dc>
 800b452:	f000 bd36 	b.w	800bec2 <_dtoa_r+0xb3a>
 800b456:	ab14      	add	r3, sp, #80	@ 0x50
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	ab15      	add	r3, sp, #84	@ 0x54
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	4658      	mov	r0, fp
 800b460:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b464:	f001 f8c8 	bl	800c5f8 <__d2b>
 800b468:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b46c:	4681      	mov	r9, r0
 800b46e:	2e00      	cmp	r6, #0
 800b470:	d077      	beq.n	800b562 <_dtoa_r+0x1da>
 800b472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b478:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b47c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b480:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b484:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b488:	9712      	str	r7, [sp, #72]	@ 0x48
 800b48a:	4619      	mov	r1, r3
 800b48c:	2200      	movs	r2, #0
 800b48e:	4b76      	ldr	r3, [pc, #472]	@ (800b668 <_dtoa_r+0x2e0>)
 800b490:	f7f4 fe6a 	bl	8000168 <__aeabi_dsub>
 800b494:	a368      	add	r3, pc, #416	@ (adr r3, 800b638 <_dtoa_r+0x2b0>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f5 f81d 	bl	80004d8 <__aeabi_dmul>
 800b49e:	a368      	add	r3, pc, #416	@ (adr r3, 800b640 <_dtoa_r+0x2b8>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 fe62 	bl	800016c <__adddf3>
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	f7f4 ffa9 	bl	8000404 <__aeabi_i2d>
 800b4b2:	a365      	add	r3, pc, #404	@ (adr r3, 800b648 <_dtoa_r+0x2c0>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f7f5 f80e 	bl	80004d8 <__aeabi_dmul>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f4 fe52 	bl	800016c <__adddf3>
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	f7f5 fab4 	bl	8000a38 <__aeabi_d2iz>
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4607      	mov	r7, r0
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	4629      	mov	r1, r5
 800b4da:	f7f5 fa6f 	bl	80009bc <__aeabi_dcmplt>
 800b4de:	b140      	cbz	r0, 800b4f2 <_dtoa_r+0x16a>
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f7f4 ff8f 	bl	8000404 <__aeabi_i2d>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 fa5d 	bl	80009a8 <__aeabi_dcmpeq>
 800b4ee:	b900      	cbnz	r0, 800b4f2 <_dtoa_r+0x16a>
 800b4f0:	3f01      	subs	r7, #1
 800b4f2:	2f16      	cmp	r7, #22
 800b4f4:	d853      	bhi.n	800b59e <_dtoa_r+0x216>
 800b4f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4fa:	4b5c      	ldr	r3, [pc, #368]	@ (800b66c <_dtoa_r+0x2e4>)
 800b4fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f7f5 fa5a 	bl	80009bc <__aeabi_dcmplt>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d04a      	beq.n	800b5a2 <_dtoa_r+0x21a>
 800b50c:	2300      	movs	r3, #0
 800b50e:	3f01      	subs	r7, #1
 800b510:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b514:	1b9b      	subs	r3, r3, r6
 800b516:	1e5a      	subs	r2, r3, #1
 800b518:	bf46      	itte	mi
 800b51a:	f1c3 0801 	rsbmi	r8, r3, #1
 800b51e:	2300      	movmi	r3, #0
 800b520:	f04f 0800 	movpl.w	r8, #0
 800b524:	9209      	str	r2, [sp, #36]	@ 0x24
 800b526:	bf48      	it	mi
 800b528:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b52a:	2f00      	cmp	r7, #0
 800b52c:	db3b      	blt.n	800b5a6 <_dtoa_r+0x21e>
 800b52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b530:	970e      	str	r7, [sp, #56]	@ 0x38
 800b532:	443b      	add	r3, r7
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	2300      	movs	r3, #0
 800b538:	930a      	str	r3, [sp, #40]	@ 0x28
 800b53a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	d866      	bhi.n	800b60e <_dtoa_r+0x286>
 800b540:	2b05      	cmp	r3, #5
 800b542:	bfc4      	itt	gt
 800b544:	3b04      	subgt	r3, #4
 800b546:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b548:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b54a:	bfc8      	it	gt
 800b54c:	2400      	movgt	r4, #0
 800b54e:	f1a3 0302 	sub.w	r3, r3, #2
 800b552:	bfd8      	it	le
 800b554:	2401      	movle	r4, #1
 800b556:	2b03      	cmp	r3, #3
 800b558:	d864      	bhi.n	800b624 <_dtoa_r+0x29c>
 800b55a:	e8df f003 	tbb	[pc, r3]
 800b55e:	382b      	.short	0x382b
 800b560:	5636      	.short	0x5636
 800b562:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b566:	441e      	add	r6, r3
 800b568:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	bfc1      	itttt	gt
 800b570:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b574:	fa08 f803 	lslgt.w	r8, r8, r3
 800b578:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b57c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b580:	bfd6      	itet	le
 800b582:	f1c3 0320 	rsble	r3, r3, #32
 800b586:	ea48 0003 	orrgt.w	r0, r8, r3
 800b58a:	fa04 f003 	lslle.w	r0, r4, r3
 800b58e:	f7f4 ff29 	bl	80003e4 <__aeabi_ui2d>
 800b592:	2201      	movs	r2, #1
 800b594:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b598:	3e01      	subs	r6, #1
 800b59a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b59c:	e775      	b.n	800b48a <_dtoa_r+0x102>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e7b6      	b.n	800b510 <_dtoa_r+0x188>
 800b5a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b5a4:	e7b5      	b.n	800b512 <_dtoa_r+0x18a>
 800b5a6:	427b      	negs	r3, r7
 800b5a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	eba8 0807 	sub.w	r8, r8, r7
 800b5b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5b2:	e7c2      	b.n	800b53a <_dtoa_r+0x1b2>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dc35      	bgt.n	800b62a <_dtoa_r+0x2a2>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b5c6:	9221      	str	r2, [sp, #132]	@ 0x84
 800b5c8:	e00b      	b.n	800b5e2 <_dtoa_r+0x25a>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e7f3      	b.n	800b5b6 <_dtoa_r+0x22e>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	9308      	str	r3, [sp, #32]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	9307      	str	r3, [sp, #28]
 800b5de:	bfb8      	it	lt
 800b5e0:	2301      	movlt	r3, #1
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b5ea:	f102 0514 	add.w	r5, r2, #20
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	d91f      	bls.n	800b632 <_dtoa_r+0x2aa>
 800b5f2:	6041      	str	r1, [r0, #4]
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	f000 fcd7 	bl	800bfa8 <_Balloc>
 800b5fa:	4682      	mov	sl, r0
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d139      	bne.n	800b674 <_dtoa_r+0x2ec>
 800b600:	4602      	mov	r2, r0
 800b602:	f240 11af 	movw	r1, #431	@ 0x1af
 800b606:	4b1a      	ldr	r3, [pc, #104]	@ (800b670 <_dtoa_r+0x2e8>)
 800b608:	e6d2      	b.n	800b3b0 <_dtoa_r+0x28>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e7e0      	b.n	800b5d0 <_dtoa_r+0x248>
 800b60e:	2401      	movs	r4, #1
 800b610:	2300      	movs	r3, #0
 800b612:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b614:	9320      	str	r3, [sp, #128]	@ 0x80
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	2200      	movs	r2, #0
 800b61c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b620:	2312      	movs	r3, #18
 800b622:	e7d0      	b.n	800b5c6 <_dtoa_r+0x23e>
 800b624:	2301      	movs	r3, #1
 800b626:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b628:	e7f5      	b.n	800b616 <_dtoa_r+0x28e>
 800b62a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b62c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b630:	e7d7      	b.n	800b5e2 <_dtoa_r+0x25a>
 800b632:	3101      	adds	r1, #1
 800b634:	0052      	lsls	r2, r2, #1
 800b636:	e7d8      	b.n	800b5ea <_dtoa_r+0x262>
 800b638:	636f4361 	.word	0x636f4361
 800b63c:	3fd287a7 	.word	0x3fd287a7
 800b640:	8b60c8b3 	.word	0x8b60c8b3
 800b644:	3fc68a28 	.word	0x3fc68a28
 800b648:	509f79fb 	.word	0x509f79fb
 800b64c:	3fd34413 	.word	0x3fd34413
 800b650:	0800dc47 	.word	0x0800dc47
 800b654:	0800dc5e 	.word	0x0800dc5e
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	0800dc43 	.word	0x0800dc43
 800b660:	0800dc17 	.word	0x0800dc17
 800b664:	0800dc16 	.word	0x0800dc16
 800b668:	3ff80000 	.word	0x3ff80000
 800b66c:	0800dd58 	.word	0x0800dd58
 800b670:	0800dcb6 	.word	0x0800dcb6
 800b674:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b678:	6018      	str	r0, [r3, #0]
 800b67a:	9b07      	ldr	r3, [sp, #28]
 800b67c:	2b0e      	cmp	r3, #14
 800b67e:	f200 80a4 	bhi.w	800b7ca <_dtoa_r+0x442>
 800b682:	2c00      	cmp	r4, #0
 800b684:	f000 80a1 	beq.w	800b7ca <_dtoa_r+0x442>
 800b688:	2f00      	cmp	r7, #0
 800b68a:	dd33      	ble.n	800b6f4 <_dtoa_r+0x36c>
 800b68c:	4b86      	ldr	r3, [pc, #536]	@ (800b8a8 <_dtoa_r+0x520>)
 800b68e:	f007 020f 	and.w	r2, r7, #15
 800b692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b696:	05f8      	lsls	r0, r7, #23
 800b698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b69c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b6a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b6a4:	d516      	bpl.n	800b6d4 <_dtoa_r+0x34c>
 800b6a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6aa:	4b80      	ldr	r3, [pc, #512]	@ (800b8ac <_dtoa_r+0x524>)
 800b6ac:	2603      	movs	r6, #3
 800b6ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6b2:	f7f5 f83b 	bl	800072c <__aeabi_ddiv>
 800b6b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ba:	f004 040f 	and.w	r4, r4, #15
 800b6be:	4d7b      	ldr	r5, [pc, #492]	@ (800b8ac <_dtoa_r+0x524>)
 800b6c0:	b954      	cbnz	r4, 800b6d8 <_dtoa_r+0x350>
 800b6c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ca:	f7f5 f82f 	bl	800072c <__aeabi_ddiv>
 800b6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d2:	e028      	b.n	800b726 <_dtoa_r+0x39e>
 800b6d4:	2602      	movs	r6, #2
 800b6d6:	e7f2      	b.n	800b6be <_dtoa_r+0x336>
 800b6d8:	07e1      	lsls	r1, r4, #31
 800b6da:	d508      	bpl.n	800b6ee <_dtoa_r+0x366>
 800b6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6e4:	f7f4 fef8 	bl	80004d8 <__aeabi_dmul>
 800b6e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	1064      	asrs	r4, r4, #1
 800b6f0:	3508      	adds	r5, #8
 800b6f2:	e7e5      	b.n	800b6c0 <_dtoa_r+0x338>
 800b6f4:	f000 80d2 	beq.w	800b89c <_dtoa_r+0x514>
 800b6f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6fc:	427c      	negs	r4, r7
 800b6fe:	4b6a      	ldr	r3, [pc, #424]	@ (800b8a8 <_dtoa_r+0x520>)
 800b700:	f004 020f 	and.w	r2, r4, #15
 800b704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fee4 	bl	80004d8 <__aeabi_dmul>
 800b710:	2602      	movs	r6, #2
 800b712:	2300      	movs	r3, #0
 800b714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b718:	4d64      	ldr	r5, [pc, #400]	@ (800b8ac <_dtoa_r+0x524>)
 800b71a:	1124      	asrs	r4, r4, #4
 800b71c:	2c00      	cmp	r4, #0
 800b71e:	f040 80b2 	bne.w	800b886 <_dtoa_r+0x4fe>
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1d3      	bne.n	800b6ce <_dtoa_r+0x346>
 800b726:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b72a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 80b7 	beq.w	800b8a0 <_dtoa_r+0x518>
 800b732:	2200      	movs	r2, #0
 800b734:	4620      	mov	r0, r4
 800b736:	4629      	mov	r1, r5
 800b738:	4b5d      	ldr	r3, [pc, #372]	@ (800b8b0 <_dtoa_r+0x528>)
 800b73a:	f7f5 f93f 	bl	80009bc <__aeabi_dcmplt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f000 80ae 	beq.w	800b8a0 <_dtoa_r+0x518>
 800b744:	9b07      	ldr	r3, [sp, #28]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80aa 	beq.w	800b8a0 <_dtoa_r+0x518>
 800b74c:	9b08      	ldr	r3, [sp, #32]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	dd37      	ble.n	800b7c2 <_dtoa_r+0x43a>
 800b752:	1e7b      	subs	r3, r7, #1
 800b754:	4620      	mov	r0, r4
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	2200      	movs	r2, #0
 800b75a:	4629      	mov	r1, r5
 800b75c:	4b55      	ldr	r3, [pc, #340]	@ (800b8b4 <_dtoa_r+0x52c>)
 800b75e:	f7f4 febb 	bl	80004d8 <__aeabi_dmul>
 800b762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b766:	9c08      	ldr	r4, [sp, #32]
 800b768:	3601      	adds	r6, #1
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7f4 fe4a 	bl	8000404 <__aeabi_i2d>
 800b770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b774:	f7f4 feb0 	bl	80004d8 <__aeabi_dmul>
 800b778:	2200      	movs	r2, #0
 800b77a:	4b4f      	ldr	r3, [pc, #316]	@ (800b8b8 <_dtoa_r+0x530>)
 800b77c:	f7f4 fcf6 	bl	800016c <__adddf3>
 800b780:	4605      	mov	r5, r0
 800b782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b786:	2c00      	cmp	r4, #0
 800b788:	f040 809a 	bne.w	800b8c0 <_dtoa_r+0x538>
 800b78c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b790:	2200      	movs	r2, #0
 800b792:	4b4a      	ldr	r3, [pc, #296]	@ (800b8bc <_dtoa_r+0x534>)
 800b794:	f7f4 fce8 	bl	8000168 <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	4633      	mov	r3, r6
 800b7a4:	f7f5 f928 	bl	80009f8 <__aeabi_dcmpgt>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	f040 828e 	bne.w	800bcca <_dtoa_r+0x942>
 800b7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7b8:	f7f5 f900 	bl	80009bc <__aeabi_dcmplt>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f040 8127 	bne.w	800ba10 <_dtoa_r+0x688>
 800b7c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b7c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b7ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f2c0 8163 	blt.w	800ba98 <_dtoa_r+0x710>
 800b7d2:	2f0e      	cmp	r7, #14
 800b7d4:	f300 8160 	bgt.w	800ba98 <_dtoa_r+0x710>
 800b7d8:	4b33      	ldr	r3, [pc, #204]	@ (800b8a8 <_dtoa_r+0x520>)
 800b7da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b7e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	da03      	bge.n	800b7f4 <_dtoa_r+0x46c>
 800b7ec:	9b07      	ldr	r3, [sp, #28]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f340 8100 	ble.w	800b9f4 <_dtoa_r+0x66c>
 800b7f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7f8:	4656      	mov	r6, sl
 800b7fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f4 ff93 	bl	800072c <__aeabi_ddiv>
 800b806:	f7f5 f917 	bl	8000a38 <__aeabi_d2iz>
 800b80a:	4680      	mov	r8, r0
 800b80c:	f7f4 fdfa 	bl	8000404 <__aeabi_i2d>
 800b810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b814:	f7f4 fe60 	bl	80004d8 <__aeabi_dmul>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4620      	mov	r0, r4
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f4 fca2 	bl	8000168 <__aeabi_dsub>
 800b824:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b828:	9d07      	ldr	r5, [sp, #28]
 800b82a:	f806 4b01 	strb.w	r4, [r6], #1
 800b82e:	eba6 040a 	sub.w	r4, r6, sl
 800b832:	42a5      	cmp	r5, r4
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	f040 8116 	bne.w	800ba68 <_dtoa_r+0x6e0>
 800b83c:	f7f4 fc96 	bl	800016c <__adddf3>
 800b840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	f7f5 f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 80f8 	bne.w	800ba42 <_dtoa_r+0x6ba>
 800b852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f5 f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800b85e:	b118      	cbz	r0, 800b868 <_dtoa_r+0x4e0>
 800b860:	f018 0f01 	tst.w	r8, #1
 800b864:	f040 80ed 	bne.w	800ba42 <_dtoa_r+0x6ba>
 800b868:	4649      	mov	r1, r9
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fbdc 	bl	800c028 <_Bfree>
 800b870:	2300      	movs	r3, #0
 800b872:	7033      	strb	r3, [r6, #0]
 800b874:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b876:	3701      	adds	r7, #1
 800b878:	601f      	str	r7, [r3, #0]
 800b87a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 8320 	beq.w	800bec2 <_dtoa_r+0xb3a>
 800b882:	601e      	str	r6, [r3, #0]
 800b884:	e31d      	b.n	800bec2 <_dtoa_r+0xb3a>
 800b886:	07e2      	lsls	r2, r4, #31
 800b888:	d505      	bpl.n	800b896 <_dtoa_r+0x50e>
 800b88a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b88e:	f7f4 fe23 	bl	80004d8 <__aeabi_dmul>
 800b892:	2301      	movs	r3, #1
 800b894:	3601      	adds	r6, #1
 800b896:	1064      	asrs	r4, r4, #1
 800b898:	3508      	adds	r5, #8
 800b89a:	e73f      	b.n	800b71c <_dtoa_r+0x394>
 800b89c:	2602      	movs	r6, #2
 800b89e:	e742      	b.n	800b726 <_dtoa_r+0x39e>
 800b8a0:	9c07      	ldr	r4, [sp, #28]
 800b8a2:	9704      	str	r7, [sp, #16]
 800b8a4:	e761      	b.n	800b76a <_dtoa_r+0x3e2>
 800b8a6:	bf00      	nop
 800b8a8:	0800dd58 	.word	0x0800dd58
 800b8ac:	0800dd30 	.word	0x0800dd30
 800b8b0:	3ff00000 	.word	0x3ff00000
 800b8b4:	40240000 	.word	0x40240000
 800b8b8:	401c0000 	.word	0x401c0000
 800b8bc:	40140000 	.word	0x40140000
 800b8c0:	4b70      	ldr	r3, [pc, #448]	@ (800ba84 <_dtoa_r+0x6fc>)
 800b8c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8cc:	4454      	add	r4, sl
 800b8ce:	2900      	cmp	r1, #0
 800b8d0:	d045      	beq.n	800b95e <_dtoa_r+0x5d6>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	496c      	ldr	r1, [pc, #432]	@ (800ba88 <_dtoa_r+0x700>)
 800b8d6:	f7f4 ff29 	bl	800072c <__aeabi_ddiv>
 800b8da:	4633      	mov	r3, r6
 800b8dc:	462a      	mov	r2, r5
 800b8de:	f7f4 fc43 	bl	8000168 <__aeabi_dsub>
 800b8e2:	4656      	mov	r6, sl
 800b8e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ec:	f7f5 f8a4 	bl	8000a38 <__aeabi_d2iz>
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	f7f4 fd87 	bl	8000404 <__aeabi_i2d>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8fe:	f7f4 fc33 	bl	8000168 <__aeabi_dsub>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	3530      	adds	r5, #48	@ 0x30
 800b908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b90c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b910:	f806 5b01 	strb.w	r5, [r6], #1
 800b914:	f7f5 f852 	bl	80009bc <__aeabi_dcmplt>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d163      	bne.n	800b9e4 <_dtoa_r+0x65c>
 800b91c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b920:	2000      	movs	r0, #0
 800b922:	495a      	ldr	r1, [pc, #360]	@ (800ba8c <_dtoa_r+0x704>)
 800b924:	f7f4 fc20 	bl	8000168 <__aeabi_dsub>
 800b928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b92c:	f7f5 f846 	bl	80009bc <__aeabi_dcmplt>
 800b930:	2800      	cmp	r0, #0
 800b932:	f040 8087 	bne.w	800ba44 <_dtoa_r+0x6bc>
 800b936:	42a6      	cmp	r6, r4
 800b938:	f43f af43 	beq.w	800b7c2 <_dtoa_r+0x43a>
 800b93c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b940:	2200      	movs	r2, #0
 800b942:	4b53      	ldr	r3, [pc, #332]	@ (800ba90 <_dtoa_r+0x708>)
 800b944:	f7f4 fdc8 	bl	80004d8 <__aeabi_dmul>
 800b948:	2200      	movs	r2, #0
 800b94a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b952:	4b4f      	ldr	r3, [pc, #316]	@ (800ba90 <_dtoa_r+0x708>)
 800b954:	f7f4 fdc0 	bl	80004d8 <__aeabi_dmul>
 800b958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b95c:	e7c4      	b.n	800b8e8 <_dtoa_r+0x560>
 800b95e:	4631      	mov	r1, r6
 800b960:	4628      	mov	r0, r5
 800b962:	f7f4 fdb9 	bl	80004d8 <__aeabi_dmul>
 800b966:	4656      	mov	r6, sl
 800b968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b96c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b972:	f7f5 f861 	bl	8000a38 <__aeabi_d2iz>
 800b976:	4605      	mov	r5, r0
 800b978:	f7f4 fd44 	bl	8000404 <__aeabi_i2d>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b984:	f7f4 fbf0 	bl	8000168 <__aeabi_dsub>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	3530      	adds	r5, #48	@ 0x30
 800b98e:	f806 5b01 	strb.w	r5, [r6], #1
 800b992:	42a6      	cmp	r6, r4
 800b994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b998:	f04f 0200 	mov.w	r2, #0
 800b99c:	d124      	bne.n	800b9e8 <_dtoa_r+0x660>
 800b99e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9a2:	4b39      	ldr	r3, [pc, #228]	@ (800ba88 <_dtoa_r+0x700>)
 800b9a4:	f7f4 fbe2 	bl	800016c <__adddf3>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b0:	f7f5 f822 	bl	80009f8 <__aeabi_dcmpgt>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d145      	bne.n	800ba44 <_dtoa_r+0x6bc>
 800b9b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9bc:	2000      	movs	r0, #0
 800b9be:	4932      	ldr	r1, [pc, #200]	@ (800ba88 <_dtoa_r+0x700>)
 800b9c0:	f7f4 fbd2 	bl	8000168 <__aeabi_dsub>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9cc:	f7f4 fff6 	bl	80009bc <__aeabi_dcmplt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f43f aef6 	beq.w	800b7c2 <_dtoa_r+0x43a>
 800b9d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b9d8:	1e73      	subs	r3, r6, #1
 800b9da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9e0:	2b30      	cmp	r3, #48	@ 0x30
 800b9e2:	d0f8      	beq.n	800b9d6 <_dtoa_r+0x64e>
 800b9e4:	9f04      	ldr	r7, [sp, #16]
 800b9e6:	e73f      	b.n	800b868 <_dtoa_r+0x4e0>
 800b9e8:	4b29      	ldr	r3, [pc, #164]	@ (800ba90 <_dtoa_r+0x708>)
 800b9ea:	f7f4 fd75 	bl	80004d8 <__aeabi_dmul>
 800b9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f2:	e7bc      	b.n	800b96e <_dtoa_r+0x5e6>
 800b9f4:	d10c      	bne.n	800ba10 <_dtoa_r+0x688>
 800b9f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4b25      	ldr	r3, [pc, #148]	@ (800ba94 <_dtoa_r+0x70c>)
 800b9fe:	f7f4 fd6b 	bl	80004d8 <__aeabi_dmul>
 800ba02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba06:	f7f4 ffed 	bl	80009e4 <__aeabi_dcmpge>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	f000 815b 	beq.w	800bcc6 <_dtoa_r+0x93e>
 800ba10:	2400      	movs	r4, #0
 800ba12:	4625      	mov	r5, r4
 800ba14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba16:	4656      	mov	r6, sl
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	2700      	movs	r7, #0
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4658      	mov	r0, fp
 800ba22:	f000 fb01 	bl	800c028 <_Bfree>
 800ba26:	2d00      	cmp	r5, #0
 800ba28:	d0dc      	beq.n	800b9e4 <_dtoa_r+0x65c>
 800ba2a:	b12f      	cbz	r7, 800ba38 <_dtoa_r+0x6b0>
 800ba2c:	42af      	cmp	r7, r5
 800ba2e:	d003      	beq.n	800ba38 <_dtoa_r+0x6b0>
 800ba30:	4639      	mov	r1, r7
 800ba32:	4658      	mov	r0, fp
 800ba34:	f000 faf8 	bl	800c028 <_Bfree>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4658      	mov	r0, fp
 800ba3c:	f000 faf4 	bl	800c028 <_Bfree>
 800ba40:	e7d0      	b.n	800b9e4 <_dtoa_r+0x65c>
 800ba42:	9704      	str	r7, [sp, #16]
 800ba44:	4633      	mov	r3, r6
 800ba46:	461e      	mov	r6, r3
 800ba48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba4c:	2a39      	cmp	r2, #57	@ 0x39
 800ba4e:	d107      	bne.n	800ba60 <_dtoa_r+0x6d8>
 800ba50:	459a      	cmp	sl, r3
 800ba52:	d1f8      	bne.n	800ba46 <_dtoa_r+0x6be>
 800ba54:	9a04      	ldr	r2, [sp, #16]
 800ba56:	3201      	adds	r2, #1
 800ba58:	9204      	str	r2, [sp, #16]
 800ba5a:	2230      	movs	r2, #48	@ 0x30
 800ba5c:	f88a 2000 	strb.w	r2, [sl]
 800ba60:	781a      	ldrb	r2, [r3, #0]
 800ba62:	3201      	adds	r2, #1
 800ba64:	701a      	strb	r2, [r3, #0]
 800ba66:	e7bd      	b.n	800b9e4 <_dtoa_r+0x65c>
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4b09      	ldr	r3, [pc, #36]	@ (800ba90 <_dtoa_r+0x708>)
 800ba6c:	f7f4 fd34 	bl	80004d8 <__aeabi_dmul>
 800ba70:	2200      	movs	r2, #0
 800ba72:	2300      	movs	r3, #0
 800ba74:	4604      	mov	r4, r0
 800ba76:	460d      	mov	r5, r1
 800ba78:	f7f4 ff96 	bl	80009a8 <__aeabi_dcmpeq>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f43f aebc 	beq.w	800b7fa <_dtoa_r+0x472>
 800ba82:	e6f1      	b.n	800b868 <_dtoa_r+0x4e0>
 800ba84:	0800dd58 	.word	0x0800dd58
 800ba88:	3fe00000 	.word	0x3fe00000
 800ba8c:	3ff00000 	.word	0x3ff00000
 800ba90:	40240000 	.word	0x40240000
 800ba94:	40140000 	.word	0x40140000
 800ba98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	f000 80db 	beq.w	800bc56 <_dtoa_r+0x8ce>
 800baa0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800baa2:	2a01      	cmp	r2, #1
 800baa4:	f300 80bf 	bgt.w	800bc26 <_dtoa_r+0x89e>
 800baa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800baaa:	2a00      	cmp	r2, #0
 800baac:	f000 80b7 	beq.w	800bc1e <_dtoa_r+0x896>
 800bab0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bab4:	4646      	mov	r6, r8
 800bab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baba:	2101      	movs	r1, #1
 800babc:	441a      	add	r2, r3
 800babe:	4658      	mov	r0, fp
 800bac0:	4498      	add	r8, r3
 800bac2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bac4:	f000 fb64 	bl	800c190 <__i2b>
 800bac8:	4605      	mov	r5, r0
 800baca:	b15e      	cbz	r6, 800bae4 <_dtoa_r+0x75c>
 800bacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	dd08      	ble.n	800bae4 <_dtoa_r+0x75c>
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	bfa8      	it	ge
 800bad6:	4633      	movge	r3, r6
 800bad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bada:	eba8 0803 	sub.w	r8, r8, r3
 800bade:	1af6      	subs	r6, r6, r3
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bae6:	b1f3      	cbz	r3, 800bb26 <_dtoa_r+0x79e>
 800bae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 80b7 	beq.w	800bc5e <_dtoa_r+0x8d6>
 800baf0:	b18c      	cbz	r4, 800bb16 <_dtoa_r+0x78e>
 800baf2:	4629      	mov	r1, r5
 800baf4:	4622      	mov	r2, r4
 800baf6:	4658      	mov	r0, fp
 800baf8:	f000 fc08 	bl	800c30c <__pow5mult>
 800bafc:	464a      	mov	r2, r9
 800bafe:	4601      	mov	r1, r0
 800bb00:	4605      	mov	r5, r0
 800bb02:	4658      	mov	r0, fp
 800bb04:	f000 fb5a 	bl	800c1bc <__multiply>
 800bb08:	4649      	mov	r1, r9
 800bb0a:	9004      	str	r0, [sp, #16]
 800bb0c:	4658      	mov	r0, fp
 800bb0e:	f000 fa8b 	bl	800c028 <_Bfree>
 800bb12:	9b04      	ldr	r3, [sp, #16]
 800bb14:	4699      	mov	r9, r3
 800bb16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb18:	1b1a      	subs	r2, r3, r4
 800bb1a:	d004      	beq.n	800bb26 <_dtoa_r+0x79e>
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 fbf4 	bl	800c30c <__pow5mult>
 800bb24:	4681      	mov	r9, r0
 800bb26:	2101      	movs	r1, #1
 800bb28:	4658      	mov	r0, fp
 800bb2a:	f000 fb31 	bl	800c190 <__i2b>
 800bb2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb30:	4604      	mov	r4, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 81c9 	beq.w	800beca <_dtoa_r+0xb42>
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	f000 fbe5 	bl	800c30c <__pow5mult>
 800bb42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb44:	4604      	mov	r4, r0
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	f300 808f 	bgt.w	800bc6a <_dtoa_r+0x8e2>
 800bb4c:	9b02      	ldr	r3, [sp, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f040 8087 	bne.w	800bc62 <_dtoa_r+0x8da>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f040 8083 	bne.w	800bc66 <_dtoa_r+0x8de>
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb66:	0d1b      	lsrs	r3, r3, #20
 800bb68:	051b      	lsls	r3, r3, #20
 800bb6a:	b12b      	cbz	r3, 800bb78 <_dtoa_r+0x7f0>
 800bb6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb6e:	f108 0801 	add.w	r8, r8, #1
 800bb72:	3301      	adds	r3, #1
 800bb74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb76:	2301      	movs	r3, #1
 800bb78:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 81aa 	beq.w	800bed6 <_dtoa_r+0xb4e>
 800bb82:	6923      	ldr	r3, [r4, #16]
 800bb84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb88:	6918      	ldr	r0, [r3, #16]
 800bb8a:	f000 fab5 	bl	800c0f8 <__hi0bits>
 800bb8e:	f1c0 0020 	rsb	r0, r0, #32
 800bb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb94:	4418      	add	r0, r3
 800bb96:	f010 001f 	ands.w	r0, r0, #31
 800bb9a:	d071      	beq.n	800bc80 <_dtoa_r+0x8f8>
 800bb9c:	f1c0 0320 	rsb	r3, r0, #32
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	dd65      	ble.n	800bc70 <_dtoa_r+0x8e8>
 800bba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba6:	f1c0 001c 	rsb	r0, r0, #28
 800bbaa:	4403      	add	r3, r0
 800bbac:	4480      	add	r8, r0
 800bbae:	4406      	add	r6, r0
 800bbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb2:	f1b8 0f00 	cmp.w	r8, #0
 800bbb6:	dd05      	ble.n	800bbc4 <_dtoa_r+0x83c>
 800bbb8:	4649      	mov	r1, r9
 800bbba:	4642      	mov	r2, r8
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	f000 fbff 	bl	800c3c0 <__lshift>
 800bbc2:	4681      	mov	r9, r0
 800bbc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	dd05      	ble.n	800bbd6 <_dtoa_r+0x84e>
 800bbca:	4621      	mov	r1, r4
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4658      	mov	r0, fp
 800bbd0:	f000 fbf6 	bl	800c3c0 <__lshift>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d053      	beq.n	800bc84 <_dtoa_r+0x8fc>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4648      	mov	r0, r9
 800bbe0:	f000 fc5a 	bl	800c498 <__mcmp>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	da4d      	bge.n	800bc84 <_dtoa_r+0x8fc>
 800bbe8:	1e7b      	subs	r3, r7, #1
 800bbea:	4649      	mov	r1, r9
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	220a      	movs	r2, #10
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4658      	mov	r0, fp
 800bbf4:	f000 fa3a 	bl	800c06c <__multadd>
 800bbf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbfa:	4681      	mov	r9, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 816c 	beq.w	800beda <_dtoa_r+0xb52>
 800bc02:	2300      	movs	r3, #0
 800bc04:	4629      	mov	r1, r5
 800bc06:	220a      	movs	r2, #10
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f000 fa2f 	bl	800c06c <__multadd>
 800bc0e:	9b08      	ldr	r3, [sp, #32]
 800bc10:	4605      	mov	r5, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dc61      	bgt.n	800bcda <_dtoa_r+0x952>
 800bc16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	dc3b      	bgt.n	800bc94 <_dtoa_r+0x90c>
 800bc1c:	e05d      	b.n	800bcda <_dtoa_r+0x952>
 800bc1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc24:	e746      	b.n	800bab4 <_dtoa_r+0x72c>
 800bc26:	9b07      	ldr	r3, [sp, #28]
 800bc28:	1e5c      	subs	r4, r3, #1
 800bc2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	bfbf      	itttt	lt
 800bc30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800bc34:	1ae3      	sublt	r3, r4, r3
 800bc36:	18d2      	addlt	r2, r2, r3
 800bc38:	bfa8      	it	ge
 800bc3a:	1b1c      	subge	r4, r3, r4
 800bc3c:	9b07      	ldr	r3, [sp, #28]
 800bc3e:	bfbe      	ittt	lt
 800bc40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bc44:	2400      	movlt	r4, #0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	bfb5      	itete	lt
 800bc4a:	eba8 0603 	sublt.w	r6, r8, r3
 800bc4e:	4646      	movge	r6, r8
 800bc50:	2300      	movlt	r3, #0
 800bc52:	9b07      	ldrge	r3, [sp, #28]
 800bc54:	e730      	b.n	800bab8 <_dtoa_r+0x730>
 800bc56:	4646      	mov	r6, r8
 800bc58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc5c:	e735      	b.n	800baca <_dtoa_r+0x742>
 800bc5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc60:	e75c      	b.n	800bb1c <_dtoa_r+0x794>
 800bc62:	2300      	movs	r3, #0
 800bc64:	e788      	b.n	800bb78 <_dtoa_r+0x7f0>
 800bc66:	9b02      	ldr	r3, [sp, #8]
 800bc68:	e786      	b.n	800bb78 <_dtoa_r+0x7f0>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc6e:	e788      	b.n	800bb82 <_dtoa_r+0x7fa>
 800bc70:	d09f      	beq.n	800bbb2 <_dtoa_r+0x82a>
 800bc72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc74:	331c      	adds	r3, #28
 800bc76:	441a      	add	r2, r3
 800bc78:	4498      	add	r8, r3
 800bc7a:	441e      	add	r6, r3
 800bc7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc7e:	e798      	b.n	800bbb2 <_dtoa_r+0x82a>
 800bc80:	4603      	mov	r3, r0
 800bc82:	e7f6      	b.n	800bc72 <_dtoa_r+0x8ea>
 800bc84:	9b07      	ldr	r3, [sp, #28]
 800bc86:	9704      	str	r7, [sp, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	dc20      	bgt.n	800bcce <_dtoa_r+0x946>
 800bc8c:	9308      	str	r3, [sp, #32]
 800bc8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	dd1e      	ble.n	800bcd2 <_dtoa_r+0x94a>
 800bc94:	9b08      	ldr	r3, [sp, #32]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f47f aebc 	bne.w	800ba14 <_dtoa_r+0x68c>
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	2205      	movs	r2, #5
 800bca0:	4658      	mov	r0, fp
 800bca2:	f000 f9e3 	bl	800c06c <__multadd>
 800bca6:	4601      	mov	r1, r0
 800bca8:	4604      	mov	r4, r0
 800bcaa:	4648      	mov	r0, r9
 800bcac:	f000 fbf4 	bl	800c498 <__mcmp>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	f77f aeaf 	ble.w	800ba14 <_dtoa_r+0x68c>
 800bcb6:	2331      	movs	r3, #49	@ 0x31
 800bcb8:	4656      	mov	r6, sl
 800bcba:	f806 3b01 	strb.w	r3, [r6], #1
 800bcbe:	9b04      	ldr	r3, [sp, #16]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	e6aa      	b.n	800ba1c <_dtoa_r+0x694>
 800bcc6:	9c07      	ldr	r4, [sp, #28]
 800bcc8:	9704      	str	r7, [sp, #16]
 800bcca:	4625      	mov	r5, r4
 800bccc:	e7f3      	b.n	800bcb6 <_dtoa_r+0x92e>
 800bcce:	9b07      	ldr	r3, [sp, #28]
 800bcd0:	9308      	str	r3, [sp, #32]
 800bcd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8104 	beq.w	800bee2 <_dtoa_r+0xb5a>
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	dd05      	ble.n	800bcea <_dtoa_r+0x962>
 800bcde:	4629      	mov	r1, r5
 800bce0:	4632      	mov	r2, r6
 800bce2:	4658      	mov	r0, fp
 800bce4:	f000 fb6c 	bl	800c3c0 <__lshift>
 800bce8:	4605      	mov	r5, r0
 800bcea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d05a      	beq.n	800bda6 <_dtoa_r+0xa1e>
 800bcf0:	4658      	mov	r0, fp
 800bcf2:	6869      	ldr	r1, [r5, #4]
 800bcf4:	f000 f958 	bl	800bfa8 <_Balloc>
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	b928      	cbnz	r0, 800bd08 <_dtoa_r+0x980>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd02:	4b83      	ldr	r3, [pc, #524]	@ (800bf10 <_dtoa_r+0xb88>)
 800bd04:	f7ff bb54 	b.w	800b3b0 <_dtoa_r+0x28>
 800bd08:	692a      	ldr	r2, [r5, #16]
 800bd0a:	f105 010c 	add.w	r1, r5, #12
 800bd0e:	3202      	adds	r2, #2
 800bd10:	0092      	lsls	r2, r2, #2
 800bd12:	300c      	adds	r0, #12
 800bd14:	f000 fee2 	bl	800cadc <memcpy>
 800bd18:	2201      	movs	r2, #1
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4658      	mov	r0, fp
 800bd1e:	f000 fb4f 	bl	800c3c0 <__lshift>
 800bd22:	462f      	mov	r7, r5
 800bd24:	4605      	mov	r5, r0
 800bd26:	f10a 0301 	add.w	r3, sl, #1
 800bd2a:	9307      	str	r3, [sp, #28]
 800bd2c:	9b08      	ldr	r3, [sp, #32]
 800bd2e:	4453      	add	r3, sl
 800bd30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd32:	9b02      	ldr	r3, [sp, #8]
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd3a:	9b07      	ldr	r3, [sp, #28]
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	4648      	mov	r0, r9
 800bd42:	9302      	str	r3, [sp, #8]
 800bd44:	f7ff fa95 	bl	800b272 <quorem>
 800bd48:	4639      	mov	r1, r7
 800bd4a:	9008      	str	r0, [sp, #32]
 800bd4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd50:	4648      	mov	r0, r9
 800bd52:	f000 fba1 	bl	800c498 <__mcmp>
 800bd56:	462a      	mov	r2, r5
 800bd58:	9009      	str	r0, [sp, #36]	@ 0x24
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4658      	mov	r0, fp
 800bd5e:	f000 fbb7 	bl	800c4d0 <__mdiff>
 800bd62:	68c2      	ldr	r2, [r0, #12]
 800bd64:	4606      	mov	r6, r0
 800bd66:	bb02      	cbnz	r2, 800bdaa <_dtoa_r+0xa22>
 800bd68:	4601      	mov	r1, r0
 800bd6a:	4648      	mov	r0, r9
 800bd6c:	f000 fb94 	bl	800c498 <__mcmp>
 800bd70:	4602      	mov	r2, r0
 800bd72:	4631      	mov	r1, r6
 800bd74:	4658      	mov	r0, fp
 800bd76:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd78:	f000 f956 	bl	800c028 <_Bfree>
 800bd7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd80:	9e07      	ldr	r6, [sp, #28]
 800bd82:	ea43 0102 	orr.w	r1, r3, r2
 800bd86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd88:	4319      	orrs	r1, r3
 800bd8a:	d110      	bne.n	800bdae <_dtoa_r+0xa26>
 800bd8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd90:	d029      	beq.n	800bde6 <_dtoa_r+0xa5e>
 800bd92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dd02      	ble.n	800bd9e <_dtoa_r+0xa16>
 800bd98:	9b08      	ldr	r3, [sp, #32]
 800bd9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd9e:	9b02      	ldr	r3, [sp, #8]
 800bda0:	f883 8000 	strb.w	r8, [r3]
 800bda4:	e63b      	b.n	800ba1e <_dtoa_r+0x696>
 800bda6:	4628      	mov	r0, r5
 800bda8:	e7bb      	b.n	800bd22 <_dtoa_r+0x99a>
 800bdaa:	2201      	movs	r2, #1
 800bdac:	e7e1      	b.n	800bd72 <_dtoa_r+0x9ea>
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	db04      	blt.n	800bdbe <_dtoa_r+0xa36>
 800bdb4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bdb6:	430b      	orrs	r3, r1
 800bdb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	d120      	bne.n	800be00 <_dtoa_r+0xa78>
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	dded      	ble.n	800bd9e <_dtoa_r+0xa16>
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	f000 fafa 	bl	800c3c0 <__lshift>
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4681      	mov	r9, r0
 800bdd0:	f000 fb62 	bl	800c498 <__mcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	dc03      	bgt.n	800bde0 <_dtoa_r+0xa58>
 800bdd8:	d1e1      	bne.n	800bd9e <_dtoa_r+0xa16>
 800bdda:	f018 0f01 	tst.w	r8, #1
 800bdde:	d0de      	beq.n	800bd9e <_dtoa_r+0xa16>
 800bde0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bde4:	d1d8      	bne.n	800bd98 <_dtoa_r+0xa10>
 800bde6:	2339      	movs	r3, #57	@ 0x39
 800bde8:	9a02      	ldr	r2, [sp, #8]
 800bdea:	7013      	strb	r3, [r2, #0]
 800bdec:	4633      	mov	r3, r6
 800bdee:	461e      	mov	r6, r3
 800bdf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	2a39      	cmp	r2, #57	@ 0x39
 800bdf8:	d052      	beq.n	800bea0 <_dtoa_r+0xb18>
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	e60e      	b.n	800ba1e <_dtoa_r+0x696>
 800be00:	2a00      	cmp	r2, #0
 800be02:	dd07      	ble.n	800be14 <_dtoa_r+0xa8c>
 800be04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be08:	d0ed      	beq.n	800bde6 <_dtoa_r+0xa5e>
 800be0a:	9a02      	ldr	r2, [sp, #8]
 800be0c:	f108 0301 	add.w	r3, r8, #1
 800be10:	7013      	strb	r3, [r2, #0]
 800be12:	e604      	b.n	800ba1e <_dtoa_r+0x696>
 800be14:	9b07      	ldr	r3, [sp, #28]
 800be16:	9a07      	ldr	r2, [sp, #28]
 800be18:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be1e:	4293      	cmp	r3, r2
 800be20:	d028      	beq.n	800be74 <_dtoa_r+0xaec>
 800be22:	4649      	mov	r1, r9
 800be24:	2300      	movs	r3, #0
 800be26:	220a      	movs	r2, #10
 800be28:	4658      	mov	r0, fp
 800be2a:	f000 f91f 	bl	800c06c <__multadd>
 800be2e:	42af      	cmp	r7, r5
 800be30:	4681      	mov	r9, r0
 800be32:	f04f 0300 	mov.w	r3, #0
 800be36:	f04f 020a 	mov.w	r2, #10
 800be3a:	4639      	mov	r1, r7
 800be3c:	4658      	mov	r0, fp
 800be3e:	d107      	bne.n	800be50 <_dtoa_r+0xac8>
 800be40:	f000 f914 	bl	800c06c <__multadd>
 800be44:	4607      	mov	r7, r0
 800be46:	4605      	mov	r5, r0
 800be48:	9b07      	ldr	r3, [sp, #28]
 800be4a:	3301      	adds	r3, #1
 800be4c:	9307      	str	r3, [sp, #28]
 800be4e:	e774      	b.n	800bd3a <_dtoa_r+0x9b2>
 800be50:	f000 f90c 	bl	800c06c <__multadd>
 800be54:	4629      	mov	r1, r5
 800be56:	4607      	mov	r7, r0
 800be58:	2300      	movs	r3, #0
 800be5a:	220a      	movs	r2, #10
 800be5c:	4658      	mov	r0, fp
 800be5e:	f000 f905 	bl	800c06c <__multadd>
 800be62:	4605      	mov	r5, r0
 800be64:	e7f0      	b.n	800be48 <_dtoa_r+0xac0>
 800be66:	9b08      	ldr	r3, [sp, #32]
 800be68:	2700      	movs	r7, #0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bfcc      	ite	gt
 800be6e:	461e      	movgt	r6, r3
 800be70:	2601      	movle	r6, #1
 800be72:	4456      	add	r6, sl
 800be74:	4649      	mov	r1, r9
 800be76:	2201      	movs	r2, #1
 800be78:	4658      	mov	r0, fp
 800be7a:	f000 faa1 	bl	800c3c0 <__lshift>
 800be7e:	4621      	mov	r1, r4
 800be80:	4681      	mov	r9, r0
 800be82:	f000 fb09 	bl	800c498 <__mcmp>
 800be86:	2800      	cmp	r0, #0
 800be88:	dcb0      	bgt.n	800bdec <_dtoa_r+0xa64>
 800be8a:	d102      	bne.n	800be92 <_dtoa_r+0xb0a>
 800be8c:	f018 0f01 	tst.w	r8, #1
 800be90:	d1ac      	bne.n	800bdec <_dtoa_r+0xa64>
 800be92:	4633      	mov	r3, r6
 800be94:	461e      	mov	r6, r3
 800be96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be9a:	2a30      	cmp	r2, #48	@ 0x30
 800be9c:	d0fa      	beq.n	800be94 <_dtoa_r+0xb0c>
 800be9e:	e5be      	b.n	800ba1e <_dtoa_r+0x696>
 800bea0:	459a      	cmp	sl, r3
 800bea2:	d1a4      	bne.n	800bdee <_dtoa_r+0xa66>
 800bea4:	9b04      	ldr	r3, [sp, #16]
 800bea6:	3301      	adds	r3, #1
 800bea8:	9304      	str	r3, [sp, #16]
 800beaa:	2331      	movs	r3, #49	@ 0x31
 800beac:	f88a 3000 	strb.w	r3, [sl]
 800beb0:	e5b5      	b.n	800ba1e <_dtoa_r+0x696>
 800beb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800beb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf14 <_dtoa_r+0xb8c>
 800beb8:	b11b      	cbz	r3, 800bec2 <_dtoa_r+0xb3a>
 800beba:	f10a 0308 	add.w	r3, sl, #8
 800bebe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bec0:	6013      	str	r3, [r2, #0]
 800bec2:	4650      	mov	r0, sl
 800bec4:	b017      	add	sp, #92	@ 0x5c
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800becc:	2b01      	cmp	r3, #1
 800bece:	f77f ae3d 	ble.w	800bb4c <_dtoa_r+0x7c4>
 800bed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bed4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bed6:	2001      	movs	r0, #1
 800bed8:	e65b      	b.n	800bb92 <_dtoa_r+0x80a>
 800beda:	9b08      	ldr	r3, [sp, #32]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f77f aed6 	ble.w	800bc8e <_dtoa_r+0x906>
 800bee2:	4656      	mov	r6, sl
 800bee4:	4621      	mov	r1, r4
 800bee6:	4648      	mov	r0, r9
 800bee8:	f7ff f9c3 	bl	800b272 <quorem>
 800beec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bef0:	9b08      	ldr	r3, [sp, #32]
 800bef2:	f806 8b01 	strb.w	r8, [r6], #1
 800bef6:	eba6 020a 	sub.w	r2, r6, sl
 800befa:	4293      	cmp	r3, r2
 800befc:	ddb3      	ble.n	800be66 <_dtoa_r+0xade>
 800befe:	4649      	mov	r1, r9
 800bf00:	2300      	movs	r3, #0
 800bf02:	220a      	movs	r2, #10
 800bf04:	4658      	mov	r0, fp
 800bf06:	f000 f8b1 	bl	800c06c <__multadd>
 800bf0a:	4681      	mov	r9, r0
 800bf0c:	e7ea      	b.n	800bee4 <_dtoa_r+0xb5c>
 800bf0e:	bf00      	nop
 800bf10:	0800dcb6 	.word	0x0800dcb6
 800bf14:	0800dc3a 	.word	0x0800dc3a

0800bf18 <_free_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	d040      	beq.n	800bfa2 <_free_r+0x8a>
 800bf20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf24:	1f0c      	subs	r4, r1, #4
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	bfb8      	it	lt
 800bf2a:	18e4      	addlt	r4, r4, r3
 800bf2c:	f7fe fb2a 	bl	800a584 <__malloc_lock>
 800bf30:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa4 <_free_r+0x8c>)
 800bf32:	6813      	ldr	r3, [r2, #0]
 800bf34:	b933      	cbnz	r3, 800bf44 <_free_r+0x2c>
 800bf36:	6063      	str	r3, [r4, #4]
 800bf38:	6014      	str	r4, [r2, #0]
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf40:	f7fe bb26 	b.w	800a590 <__malloc_unlock>
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d908      	bls.n	800bf5a <_free_r+0x42>
 800bf48:	6820      	ldr	r0, [r4, #0]
 800bf4a:	1821      	adds	r1, r4, r0
 800bf4c:	428b      	cmp	r3, r1
 800bf4e:	bf01      	itttt	eq
 800bf50:	6819      	ldreq	r1, [r3, #0]
 800bf52:	685b      	ldreq	r3, [r3, #4]
 800bf54:	1809      	addeq	r1, r1, r0
 800bf56:	6021      	streq	r1, [r4, #0]
 800bf58:	e7ed      	b.n	800bf36 <_free_r+0x1e>
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	b10b      	cbz	r3, 800bf64 <_free_r+0x4c>
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	d9fa      	bls.n	800bf5a <_free_r+0x42>
 800bf64:	6811      	ldr	r1, [r2, #0]
 800bf66:	1850      	adds	r0, r2, r1
 800bf68:	42a0      	cmp	r0, r4
 800bf6a:	d10b      	bne.n	800bf84 <_free_r+0x6c>
 800bf6c:	6820      	ldr	r0, [r4, #0]
 800bf6e:	4401      	add	r1, r0
 800bf70:	1850      	adds	r0, r2, r1
 800bf72:	4283      	cmp	r3, r0
 800bf74:	6011      	str	r1, [r2, #0]
 800bf76:	d1e0      	bne.n	800bf3a <_free_r+0x22>
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	4408      	add	r0, r1
 800bf7e:	6010      	str	r0, [r2, #0]
 800bf80:	6053      	str	r3, [r2, #4]
 800bf82:	e7da      	b.n	800bf3a <_free_r+0x22>
 800bf84:	d902      	bls.n	800bf8c <_free_r+0x74>
 800bf86:	230c      	movs	r3, #12
 800bf88:	602b      	str	r3, [r5, #0]
 800bf8a:	e7d6      	b.n	800bf3a <_free_r+0x22>
 800bf8c:	6820      	ldr	r0, [r4, #0]
 800bf8e:	1821      	adds	r1, r4, r0
 800bf90:	428b      	cmp	r3, r1
 800bf92:	bf01      	itttt	eq
 800bf94:	6819      	ldreq	r1, [r3, #0]
 800bf96:	685b      	ldreq	r3, [r3, #4]
 800bf98:	1809      	addeq	r1, r1, r0
 800bf9a:	6021      	streq	r1, [r4, #0]
 800bf9c:	6063      	str	r3, [r4, #4]
 800bf9e:	6054      	str	r4, [r2, #4]
 800bfa0:	e7cb      	b.n	800bf3a <_free_r+0x22>
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	20000420 	.word	0x20000420

0800bfa8 <_Balloc>:
 800bfa8:	b570      	push	{r4, r5, r6, lr}
 800bfaa:	69c6      	ldr	r6, [r0, #28]
 800bfac:	4604      	mov	r4, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	b976      	cbnz	r6, 800bfd0 <_Balloc+0x28>
 800bfb2:	2010      	movs	r0, #16
 800bfb4:	f7fe fa34 	bl	800a420 <malloc>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	61e0      	str	r0, [r4, #28]
 800bfbc:	b920      	cbnz	r0, 800bfc8 <_Balloc+0x20>
 800bfbe:	216b      	movs	r1, #107	@ 0x6b
 800bfc0:	4b17      	ldr	r3, [pc, #92]	@ (800c020 <_Balloc+0x78>)
 800bfc2:	4818      	ldr	r0, [pc, #96]	@ (800c024 <_Balloc+0x7c>)
 800bfc4:	f000 fd98 	bl	800caf8 <__assert_func>
 800bfc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfcc:	6006      	str	r6, [r0, #0]
 800bfce:	60c6      	str	r6, [r0, #12]
 800bfd0:	69e6      	ldr	r6, [r4, #28]
 800bfd2:	68f3      	ldr	r3, [r6, #12]
 800bfd4:	b183      	cbz	r3, 800bff8 <_Balloc+0x50>
 800bfd6:	69e3      	ldr	r3, [r4, #28]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfde:	b9b8      	cbnz	r0, 800c010 <_Balloc+0x68>
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	fa01 f605 	lsl.w	r6, r1, r5
 800bfe6:	1d72      	adds	r2, r6, #5
 800bfe8:	4620      	mov	r0, r4
 800bfea:	0092      	lsls	r2, r2, #2
 800bfec:	f000 fda2 	bl	800cb34 <_calloc_r>
 800bff0:	b160      	cbz	r0, 800c00c <_Balloc+0x64>
 800bff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bff6:	e00e      	b.n	800c016 <_Balloc+0x6e>
 800bff8:	2221      	movs	r2, #33	@ 0x21
 800bffa:	2104      	movs	r1, #4
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 fd99 	bl	800cb34 <_calloc_r>
 800c002:	69e3      	ldr	r3, [r4, #28]
 800c004:	60f0      	str	r0, [r6, #12]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e4      	bne.n	800bfd6 <_Balloc+0x2e>
 800c00c:	2000      	movs	r0, #0
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
 800c010:	6802      	ldr	r2, [r0, #0]
 800c012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c016:	2300      	movs	r3, #0
 800c018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c01c:	e7f7      	b.n	800c00e <_Balloc+0x66>
 800c01e:	bf00      	nop
 800c020:	0800dc47 	.word	0x0800dc47
 800c024:	0800dcc7 	.word	0x0800dcc7

0800c028 <_Bfree>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	69c6      	ldr	r6, [r0, #28]
 800c02c:	4605      	mov	r5, r0
 800c02e:	460c      	mov	r4, r1
 800c030:	b976      	cbnz	r6, 800c050 <_Bfree+0x28>
 800c032:	2010      	movs	r0, #16
 800c034:	f7fe f9f4 	bl	800a420 <malloc>
 800c038:	4602      	mov	r2, r0
 800c03a:	61e8      	str	r0, [r5, #28]
 800c03c:	b920      	cbnz	r0, 800c048 <_Bfree+0x20>
 800c03e:	218f      	movs	r1, #143	@ 0x8f
 800c040:	4b08      	ldr	r3, [pc, #32]	@ (800c064 <_Bfree+0x3c>)
 800c042:	4809      	ldr	r0, [pc, #36]	@ (800c068 <_Bfree+0x40>)
 800c044:	f000 fd58 	bl	800caf8 <__assert_func>
 800c048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c04c:	6006      	str	r6, [r0, #0]
 800c04e:	60c6      	str	r6, [r0, #12]
 800c050:	b13c      	cbz	r4, 800c062 <_Bfree+0x3a>
 800c052:	69eb      	ldr	r3, [r5, #28]
 800c054:	6862      	ldr	r2, [r4, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c05c:	6021      	str	r1, [r4, #0]
 800c05e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	0800dc47 	.word	0x0800dc47
 800c068:	0800dcc7 	.word	0x0800dcc7

0800c06c <__multadd>:
 800c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c070:	4607      	mov	r7, r0
 800c072:	460c      	mov	r4, r1
 800c074:	461e      	mov	r6, r3
 800c076:	2000      	movs	r0, #0
 800c078:	690d      	ldr	r5, [r1, #16]
 800c07a:	f101 0c14 	add.w	ip, r1, #20
 800c07e:	f8dc 3000 	ldr.w	r3, [ip]
 800c082:	3001      	adds	r0, #1
 800c084:	b299      	uxth	r1, r3
 800c086:	fb02 6101 	mla	r1, r2, r1, r6
 800c08a:	0c1e      	lsrs	r6, r3, #16
 800c08c:	0c0b      	lsrs	r3, r1, #16
 800c08e:	fb02 3306 	mla	r3, r2, r6, r3
 800c092:	b289      	uxth	r1, r1
 800c094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c098:	4285      	cmp	r5, r0
 800c09a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c09e:	f84c 1b04 	str.w	r1, [ip], #4
 800c0a2:	dcec      	bgt.n	800c07e <__multadd+0x12>
 800c0a4:	b30e      	cbz	r6, 800c0ea <__multadd+0x7e>
 800c0a6:	68a3      	ldr	r3, [r4, #8]
 800c0a8:	42ab      	cmp	r3, r5
 800c0aa:	dc19      	bgt.n	800c0e0 <__multadd+0x74>
 800c0ac:	6861      	ldr	r1, [r4, #4]
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	3101      	adds	r1, #1
 800c0b2:	f7ff ff79 	bl	800bfa8 <_Balloc>
 800c0b6:	4680      	mov	r8, r0
 800c0b8:	b928      	cbnz	r0, 800c0c6 <__multadd+0x5a>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	21ba      	movs	r1, #186	@ 0xba
 800c0be:	4b0c      	ldr	r3, [pc, #48]	@ (800c0f0 <__multadd+0x84>)
 800c0c0:	480c      	ldr	r0, [pc, #48]	@ (800c0f4 <__multadd+0x88>)
 800c0c2:	f000 fd19 	bl	800caf8 <__assert_func>
 800c0c6:	6922      	ldr	r2, [r4, #16]
 800c0c8:	f104 010c 	add.w	r1, r4, #12
 800c0cc:	3202      	adds	r2, #2
 800c0ce:	0092      	lsls	r2, r2, #2
 800c0d0:	300c      	adds	r0, #12
 800c0d2:	f000 fd03 	bl	800cadc <memcpy>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff ffa5 	bl	800c028 <_Bfree>
 800c0de:	4644      	mov	r4, r8
 800c0e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	615e      	str	r6, [r3, #20]
 800c0e8:	6125      	str	r5, [r4, #16]
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f0:	0800dcb6 	.word	0x0800dcb6
 800c0f4:	0800dcc7 	.word	0x0800dcc7

0800c0f8 <__hi0bits>:
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0fe:	bf3a      	itte	cc
 800c100:	0403      	lslcc	r3, r0, #16
 800c102:	2010      	movcc	r0, #16
 800c104:	2000      	movcs	r0, #0
 800c106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c10a:	bf3c      	itt	cc
 800c10c:	021b      	lslcc	r3, r3, #8
 800c10e:	3008      	addcc	r0, #8
 800c110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c114:	bf3c      	itt	cc
 800c116:	011b      	lslcc	r3, r3, #4
 800c118:	3004      	addcc	r0, #4
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c11e:	bf3c      	itt	cc
 800c120:	009b      	lslcc	r3, r3, #2
 800c122:	3002      	addcc	r0, #2
 800c124:	2b00      	cmp	r3, #0
 800c126:	db05      	blt.n	800c134 <__hi0bits+0x3c>
 800c128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c12c:	f100 0001 	add.w	r0, r0, #1
 800c130:	bf08      	it	eq
 800c132:	2020      	moveq	r0, #32
 800c134:	4770      	bx	lr

0800c136 <__lo0bits>:
 800c136:	6803      	ldr	r3, [r0, #0]
 800c138:	4602      	mov	r2, r0
 800c13a:	f013 0007 	ands.w	r0, r3, #7
 800c13e:	d00b      	beq.n	800c158 <__lo0bits+0x22>
 800c140:	07d9      	lsls	r1, r3, #31
 800c142:	d421      	bmi.n	800c188 <__lo0bits+0x52>
 800c144:	0798      	lsls	r0, r3, #30
 800c146:	bf49      	itett	mi
 800c148:	085b      	lsrmi	r3, r3, #1
 800c14a:	089b      	lsrpl	r3, r3, #2
 800c14c:	2001      	movmi	r0, #1
 800c14e:	6013      	strmi	r3, [r2, #0]
 800c150:	bf5c      	itt	pl
 800c152:	2002      	movpl	r0, #2
 800c154:	6013      	strpl	r3, [r2, #0]
 800c156:	4770      	bx	lr
 800c158:	b299      	uxth	r1, r3
 800c15a:	b909      	cbnz	r1, 800c160 <__lo0bits+0x2a>
 800c15c:	2010      	movs	r0, #16
 800c15e:	0c1b      	lsrs	r3, r3, #16
 800c160:	b2d9      	uxtb	r1, r3
 800c162:	b909      	cbnz	r1, 800c168 <__lo0bits+0x32>
 800c164:	3008      	adds	r0, #8
 800c166:	0a1b      	lsrs	r3, r3, #8
 800c168:	0719      	lsls	r1, r3, #28
 800c16a:	bf04      	itt	eq
 800c16c:	091b      	lsreq	r3, r3, #4
 800c16e:	3004      	addeq	r0, #4
 800c170:	0799      	lsls	r1, r3, #30
 800c172:	bf04      	itt	eq
 800c174:	089b      	lsreq	r3, r3, #2
 800c176:	3002      	addeq	r0, #2
 800c178:	07d9      	lsls	r1, r3, #31
 800c17a:	d403      	bmi.n	800c184 <__lo0bits+0x4e>
 800c17c:	085b      	lsrs	r3, r3, #1
 800c17e:	f100 0001 	add.w	r0, r0, #1
 800c182:	d003      	beq.n	800c18c <__lo0bits+0x56>
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	4770      	bx	lr
 800c188:	2000      	movs	r0, #0
 800c18a:	4770      	bx	lr
 800c18c:	2020      	movs	r0, #32
 800c18e:	4770      	bx	lr

0800c190 <__i2b>:
 800c190:	b510      	push	{r4, lr}
 800c192:	460c      	mov	r4, r1
 800c194:	2101      	movs	r1, #1
 800c196:	f7ff ff07 	bl	800bfa8 <_Balloc>
 800c19a:	4602      	mov	r2, r0
 800c19c:	b928      	cbnz	r0, 800c1aa <__i2b+0x1a>
 800c19e:	f240 1145 	movw	r1, #325	@ 0x145
 800c1a2:	4b04      	ldr	r3, [pc, #16]	@ (800c1b4 <__i2b+0x24>)
 800c1a4:	4804      	ldr	r0, [pc, #16]	@ (800c1b8 <__i2b+0x28>)
 800c1a6:	f000 fca7 	bl	800caf8 <__assert_func>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	6144      	str	r4, [r0, #20]
 800c1ae:	6103      	str	r3, [r0, #16]
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	bf00      	nop
 800c1b4:	0800dcb6 	.word	0x0800dcb6
 800c1b8:	0800dcc7 	.word	0x0800dcc7

0800c1bc <__multiply>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	4614      	mov	r4, r2
 800c1c2:	690a      	ldr	r2, [r1, #16]
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	460f      	mov	r7, r1
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	bfa2      	ittt	ge
 800c1cc:	4623      	movge	r3, r4
 800c1ce:	460c      	movge	r4, r1
 800c1d0:	461f      	movge	r7, r3
 800c1d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c1d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	6861      	ldr	r1, [r4, #4]
 800c1de:	eb0a 0609 	add.w	r6, sl, r9
 800c1e2:	42b3      	cmp	r3, r6
 800c1e4:	b085      	sub	sp, #20
 800c1e6:	bfb8      	it	lt
 800c1e8:	3101      	addlt	r1, #1
 800c1ea:	f7ff fedd 	bl	800bfa8 <_Balloc>
 800c1ee:	b930      	cbnz	r0, 800c1fe <__multiply+0x42>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1f6:	4b43      	ldr	r3, [pc, #268]	@ (800c304 <__multiply+0x148>)
 800c1f8:	4843      	ldr	r0, [pc, #268]	@ (800c308 <__multiply+0x14c>)
 800c1fa:	f000 fc7d 	bl	800caf8 <__assert_func>
 800c1fe:	f100 0514 	add.w	r5, r0, #20
 800c202:	462b      	mov	r3, r5
 800c204:	2200      	movs	r2, #0
 800c206:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c20a:	4543      	cmp	r3, r8
 800c20c:	d321      	bcc.n	800c252 <__multiply+0x96>
 800c20e:	f107 0114 	add.w	r1, r7, #20
 800c212:	f104 0214 	add.w	r2, r4, #20
 800c216:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c21a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c21e:	9302      	str	r3, [sp, #8]
 800c220:	1b13      	subs	r3, r2, r4
 800c222:	3b15      	subs	r3, #21
 800c224:	f023 0303 	bic.w	r3, r3, #3
 800c228:	3304      	adds	r3, #4
 800c22a:	f104 0715 	add.w	r7, r4, #21
 800c22e:	42ba      	cmp	r2, r7
 800c230:	bf38      	it	cc
 800c232:	2304      	movcc	r3, #4
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	9b02      	ldr	r3, [sp, #8]
 800c238:	9103      	str	r1, [sp, #12]
 800c23a:	428b      	cmp	r3, r1
 800c23c:	d80c      	bhi.n	800c258 <__multiply+0x9c>
 800c23e:	2e00      	cmp	r6, #0
 800c240:	dd03      	ble.n	800c24a <__multiply+0x8e>
 800c242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c246:	2b00      	cmp	r3, #0
 800c248:	d05a      	beq.n	800c300 <__multiply+0x144>
 800c24a:	6106      	str	r6, [r0, #16]
 800c24c:	b005      	add	sp, #20
 800c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c252:	f843 2b04 	str.w	r2, [r3], #4
 800c256:	e7d8      	b.n	800c20a <__multiply+0x4e>
 800c258:	f8b1 a000 	ldrh.w	sl, [r1]
 800c25c:	f1ba 0f00 	cmp.w	sl, #0
 800c260:	d023      	beq.n	800c2aa <__multiply+0xee>
 800c262:	46a9      	mov	r9, r5
 800c264:	f04f 0c00 	mov.w	ip, #0
 800c268:	f104 0e14 	add.w	lr, r4, #20
 800c26c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c270:	f8d9 3000 	ldr.w	r3, [r9]
 800c274:	fa1f fb87 	uxth.w	fp, r7
 800c278:	b29b      	uxth	r3, r3
 800c27a:	fb0a 330b 	mla	r3, sl, fp, r3
 800c27e:	4463      	add	r3, ip
 800c280:	f8d9 c000 	ldr.w	ip, [r9]
 800c284:	0c3f      	lsrs	r7, r7, #16
 800c286:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c28a:	fb0a c707 	mla	r7, sl, r7, ip
 800c28e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c292:	b29b      	uxth	r3, r3
 800c294:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c298:	4572      	cmp	r2, lr
 800c29a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c29e:	f849 3b04 	str.w	r3, [r9], #4
 800c2a2:	d8e3      	bhi.n	800c26c <__multiply+0xb0>
 800c2a4:	9b01      	ldr	r3, [sp, #4]
 800c2a6:	f845 c003 	str.w	ip, [r5, r3]
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	3104      	adds	r1, #4
 800c2ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c2b2:	f1b9 0f00 	cmp.w	r9, #0
 800c2b6:	d021      	beq.n	800c2fc <__multiply+0x140>
 800c2b8:	46ae      	mov	lr, r5
 800c2ba:	f04f 0a00 	mov.w	sl, #0
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	f104 0c14 	add.w	ip, r4, #20
 800c2c4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	fb09 770b 	mla	r7, r9, fp, r7
 800c2d2:	4457      	add	r7, sl
 800c2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2d8:	f84e 3b04 	str.w	r3, [lr], #4
 800c2dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2e4:	f8be 3000 	ldrh.w	r3, [lr]
 800c2e8:	4562      	cmp	r2, ip
 800c2ea:	fb09 330a 	mla	r3, r9, sl, r3
 800c2ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2f6:	d8e5      	bhi.n	800c2c4 <__multiply+0x108>
 800c2f8:	9f01      	ldr	r7, [sp, #4]
 800c2fa:	51eb      	str	r3, [r5, r7]
 800c2fc:	3504      	adds	r5, #4
 800c2fe:	e79a      	b.n	800c236 <__multiply+0x7a>
 800c300:	3e01      	subs	r6, #1
 800c302:	e79c      	b.n	800c23e <__multiply+0x82>
 800c304:	0800dcb6 	.word	0x0800dcb6
 800c308:	0800dcc7 	.word	0x0800dcc7

0800c30c <__pow5mult>:
 800c30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c310:	4615      	mov	r5, r2
 800c312:	f012 0203 	ands.w	r2, r2, #3
 800c316:	4607      	mov	r7, r0
 800c318:	460e      	mov	r6, r1
 800c31a:	d007      	beq.n	800c32c <__pow5mult+0x20>
 800c31c:	4c25      	ldr	r4, [pc, #148]	@ (800c3b4 <__pow5mult+0xa8>)
 800c31e:	3a01      	subs	r2, #1
 800c320:	2300      	movs	r3, #0
 800c322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c326:	f7ff fea1 	bl	800c06c <__multadd>
 800c32a:	4606      	mov	r6, r0
 800c32c:	10ad      	asrs	r5, r5, #2
 800c32e:	d03d      	beq.n	800c3ac <__pow5mult+0xa0>
 800c330:	69fc      	ldr	r4, [r7, #28]
 800c332:	b97c      	cbnz	r4, 800c354 <__pow5mult+0x48>
 800c334:	2010      	movs	r0, #16
 800c336:	f7fe f873 	bl	800a420 <malloc>
 800c33a:	4602      	mov	r2, r0
 800c33c:	61f8      	str	r0, [r7, #28]
 800c33e:	b928      	cbnz	r0, 800c34c <__pow5mult+0x40>
 800c340:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c344:	4b1c      	ldr	r3, [pc, #112]	@ (800c3b8 <__pow5mult+0xac>)
 800c346:	481d      	ldr	r0, [pc, #116]	@ (800c3bc <__pow5mult+0xb0>)
 800c348:	f000 fbd6 	bl	800caf8 <__assert_func>
 800c34c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c350:	6004      	str	r4, [r0, #0]
 800c352:	60c4      	str	r4, [r0, #12]
 800c354:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c35c:	b94c      	cbnz	r4, 800c372 <__pow5mult+0x66>
 800c35e:	f240 2171 	movw	r1, #625	@ 0x271
 800c362:	4638      	mov	r0, r7
 800c364:	f7ff ff14 	bl	800c190 <__i2b>
 800c368:	2300      	movs	r3, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c370:	6003      	str	r3, [r0, #0]
 800c372:	f04f 0900 	mov.w	r9, #0
 800c376:	07eb      	lsls	r3, r5, #31
 800c378:	d50a      	bpl.n	800c390 <__pow5mult+0x84>
 800c37a:	4631      	mov	r1, r6
 800c37c:	4622      	mov	r2, r4
 800c37e:	4638      	mov	r0, r7
 800c380:	f7ff ff1c 	bl	800c1bc <__multiply>
 800c384:	4680      	mov	r8, r0
 800c386:	4631      	mov	r1, r6
 800c388:	4638      	mov	r0, r7
 800c38a:	f7ff fe4d 	bl	800c028 <_Bfree>
 800c38e:	4646      	mov	r6, r8
 800c390:	106d      	asrs	r5, r5, #1
 800c392:	d00b      	beq.n	800c3ac <__pow5mult+0xa0>
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	b938      	cbnz	r0, 800c3a8 <__pow5mult+0x9c>
 800c398:	4622      	mov	r2, r4
 800c39a:	4621      	mov	r1, r4
 800c39c:	4638      	mov	r0, r7
 800c39e:	f7ff ff0d 	bl	800c1bc <__multiply>
 800c3a2:	6020      	str	r0, [r4, #0]
 800c3a4:	f8c0 9000 	str.w	r9, [r0]
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	e7e4      	b.n	800c376 <__pow5mult+0x6a>
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800dd20 	.word	0x0800dd20
 800c3b8:	0800dc47 	.word	0x0800dc47
 800c3bc:	0800dcc7 	.word	0x0800dcc7

0800c3c0 <__lshift>:
 800c3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	4691      	mov	r9, r2
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	6849      	ldr	r1, [r1, #4]
 800c3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3d2:	68a3      	ldr	r3, [r4, #8]
 800c3d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3d8:	f108 0601 	add.w	r6, r8, #1
 800c3dc:	42b3      	cmp	r3, r6
 800c3de:	db0b      	blt.n	800c3f8 <__lshift+0x38>
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7ff fde1 	bl	800bfa8 <_Balloc>
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	b948      	cbnz	r0, 800c3fe <__lshift+0x3e>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3f0:	4b27      	ldr	r3, [pc, #156]	@ (800c490 <__lshift+0xd0>)
 800c3f2:	4828      	ldr	r0, [pc, #160]	@ (800c494 <__lshift+0xd4>)
 800c3f4:	f000 fb80 	bl	800caf8 <__assert_func>
 800c3f8:	3101      	adds	r1, #1
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	e7ee      	b.n	800c3dc <__lshift+0x1c>
 800c3fe:	2300      	movs	r3, #0
 800c400:	f100 0114 	add.w	r1, r0, #20
 800c404:	f100 0210 	add.w	r2, r0, #16
 800c408:	4618      	mov	r0, r3
 800c40a:	4553      	cmp	r3, sl
 800c40c:	db33      	blt.n	800c476 <__lshift+0xb6>
 800c40e:	6920      	ldr	r0, [r4, #16]
 800c410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c414:	f104 0314 	add.w	r3, r4, #20
 800c418:	f019 091f 	ands.w	r9, r9, #31
 800c41c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c420:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c424:	d02b      	beq.n	800c47e <__lshift+0xbe>
 800c426:	468a      	mov	sl, r1
 800c428:	2200      	movs	r2, #0
 800c42a:	f1c9 0e20 	rsb	lr, r9, #32
 800c42e:	6818      	ldr	r0, [r3, #0]
 800c430:	fa00 f009 	lsl.w	r0, r0, r9
 800c434:	4310      	orrs	r0, r2
 800c436:	f84a 0b04 	str.w	r0, [sl], #4
 800c43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c43e:	459c      	cmp	ip, r3
 800c440:	fa22 f20e 	lsr.w	r2, r2, lr
 800c444:	d8f3      	bhi.n	800c42e <__lshift+0x6e>
 800c446:	ebac 0304 	sub.w	r3, ip, r4
 800c44a:	3b15      	subs	r3, #21
 800c44c:	f023 0303 	bic.w	r3, r3, #3
 800c450:	3304      	adds	r3, #4
 800c452:	f104 0015 	add.w	r0, r4, #21
 800c456:	4584      	cmp	ip, r0
 800c458:	bf38      	it	cc
 800c45a:	2304      	movcc	r3, #4
 800c45c:	50ca      	str	r2, [r1, r3]
 800c45e:	b10a      	cbz	r2, 800c464 <__lshift+0xa4>
 800c460:	f108 0602 	add.w	r6, r8, #2
 800c464:	3e01      	subs	r6, #1
 800c466:	4638      	mov	r0, r7
 800c468:	4621      	mov	r1, r4
 800c46a:	612e      	str	r6, [r5, #16]
 800c46c:	f7ff fddc 	bl	800c028 <_Bfree>
 800c470:	4628      	mov	r0, r5
 800c472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c476:	f842 0f04 	str.w	r0, [r2, #4]!
 800c47a:	3301      	adds	r3, #1
 800c47c:	e7c5      	b.n	800c40a <__lshift+0x4a>
 800c47e:	3904      	subs	r1, #4
 800c480:	f853 2b04 	ldr.w	r2, [r3], #4
 800c484:	459c      	cmp	ip, r3
 800c486:	f841 2f04 	str.w	r2, [r1, #4]!
 800c48a:	d8f9      	bhi.n	800c480 <__lshift+0xc0>
 800c48c:	e7ea      	b.n	800c464 <__lshift+0xa4>
 800c48e:	bf00      	nop
 800c490:	0800dcb6 	.word	0x0800dcb6
 800c494:	0800dcc7 	.word	0x0800dcc7

0800c498 <__mcmp>:
 800c498:	4603      	mov	r3, r0
 800c49a:	690a      	ldr	r2, [r1, #16]
 800c49c:	6900      	ldr	r0, [r0, #16]
 800c49e:	b530      	push	{r4, r5, lr}
 800c4a0:	1a80      	subs	r0, r0, r2
 800c4a2:	d10e      	bne.n	800c4c2 <__mcmp+0x2a>
 800c4a4:	3314      	adds	r3, #20
 800c4a6:	3114      	adds	r1, #20
 800c4a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4b8:	4295      	cmp	r5, r2
 800c4ba:	d003      	beq.n	800c4c4 <__mcmp+0x2c>
 800c4bc:	d205      	bcs.n	800c4ca <__mcmp+0x32>
 800c4be:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c2:	bd30      	pop	{r4, r5, pc}
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	d3f3      	bcc.n	800c4b0 <__mcmp+0x18>
 800c4c8:	e7fb      	b.n	800c4c2 <__mcmp+0x2a>
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	e7f9      	b.n	800c4c2 <__mcmp+0x2a>
	...

0800c4d0 <__mdiff>:
 800c4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	4689      	mov	r9, r1
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	4611      	mov	r1, r2
 800c4da:	4648      	mov	r0, r9
 800c4dc:	4614      	mov	r4, r2
 800c4de:	f7ff ffdb 	bl	800c498 <__mcmp>
 800c4e2:	1e05      	subs	r5, r0, #0
 800c4e4:	d112      	bne.n	800c50c <__mdiff+0x3c>
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f7ff fd5d 	bl	800bfa8 <_Balloc>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	b928      	cbnz	r0, 800c4fe <__mdiff+0x2e>
 800c4f2:	f240 2137 	movw	r1, #567	@ 0x237
 800c4f6:	4b3e      	ldr	r3, [pc, #248]	@ (800c5f0 <__mdiff+0x120>)
 800c4f8:	483e      	ldr	r0, [pc, #248]	@ (800c5f4 <__mdiff+0x124>)
 800c4fa:	f000 fafd 	bl	800caf8 <__assert_func>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c504:	4610      	mov	r0, r2
 800c506:	b003      	add	sp, #12
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	bfbc      	itt	lt
 800c50e:	464b      	movlt	r3, r9
 800c510:	46a1      	movlt	r9, r4
 800c512:	4630      	mov	r0, r6
 800c514:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c518:	bfba      	itte	lt
 800c51a:	461c      	movlt	r4, r3
 800c51c:	2501      	movlt	r5, #1
 800c51e:	2500      	movge	r5, #0
 800c520:	f7ff fd42 	bl	800bfa8 <_Balloc>
 800c524:	4602      	mov	r2, r0
 800c526:	b918      	cbnz	r0, 800c530 <__mdiff+0x60>
 800c528:	f240 2145 	movw	r1, #581	@ 0x245
 800c52c:	4b30      	ldr	r3, [pc, #192]	@ (800c5f0 <__mdiff+0x120>)
 800c52e:	e7e3      	b.n	800c4f8 <__mdiff+0x28>
 800c530:	f100 0b14 	add.w	fp, r0, #20
 800c534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c538:	f109 0310 	add.w	r3, r9, #16
 800c53c:	60c5      	str	r5, [r0, #12]
 800c53e:	f04f 0c00 	mov.w	ip, #0
 800c542:	f109 0514 	add.w	r5, r9, #20
 800c546:	46d9      	mov	r9, fp
 800c548:	6926      	ldr	r6, [r4, #16]
 800c54a:	f104 0e14 	add.w	lr, r4, #20
 800c54e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c552:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	9b01      	ldr	r3, [sp, #4]
 800c55a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c55e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c562:	b281      	uxth	r1, r0
 800c564:	9301      	str	r3, [sp, #4]
 800c566:	fa1f f38a 	uxth.w	r3, sl
 800c56a:	1a5b      	subs	r3, r3, r1
 800c56c:	0c00      	lsrs	r0, r0, #16
 800c56e:	4463      	add	r3, ip
 800c570:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c574:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c578:	b29b      	uxth	r3, r3
 800c57a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c57e:	4576      	cmp	r6, lr
 800c580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c584:	f849 3b04 	str.w	r3, [r9], #4
 800c588:	d8e6      	bhi.n	800c558 <__mdiff+0x88>
 800c58a:	1b33      	subs	r3, r6, r4
 800c58c:	3b15      	subs	r3, #21
 800c58e:	f023 0303 	bic.w	r3, r3, #3
 800c592:	3415      	adds	r4, #21
 800c594:	3304      	adds	r3, #4
 800c596:	42a6      	cmp	r6, r4
 800c598:	bf38      	it	cc
 800c59a:	2304      	movcc	r3, #4
 800c59c:	441d      	add	r5, r3
 800c59e:	445b      	add	r3, fp
 800c5a0:	461e      	mov	r6, r3
 800c5a2:	462c      	mov	r4, r5
 800c5a4:	4544      	cmp	r4, r8
 800c5a6:	d30e      	bcc.n	800c5c6 <__mdiff+0xf6>
 800c5a8:	f108 0103 	add.w	r1, r8, #3
 800c5ac:	1b49      	subs	r1, r1, r5
 800c5ae:	f021 0103 	bic.w	r1, r1, #3
 800c5b2:	3d03      	subs	r5, #3
 800c5b4:	45a8      	cmp	r8, r5
 800c5b6:	bf38      	it	cc
 800c5b8:	2100      	movcc	r1, #0
 800c5ba:	440b      	add	r3, r1
 800c5bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5c0:	b199      	cbz	r1, 800c5ea <__mdiff+0x11a>
 800c5c2:	6117      	str	r7, [r2, #16]
 800c5c4:	e79e      	b.n	800c504 <__mdiff+0x34>
 800c5c6:	46e6      	mov	lr, ip
 800c5c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5cc:	fa1f fc81 	uxth.w	ip, r1
 800c5d0:	44f4      	add	ip, lr
 800c5d2:	0c08      	lsrs	r0, r1, #16
 800c5d4:	4471      	add	r1, lr
 800c5d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5da:	b289      	uxth	r1, r1
 800c5dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5e4:	f846 1b04 	str.w	r1, [r6], #4
 800c5e8:	e7dc      	b.n	800c5a4 <__mdiff+0xd4>
 800c5ea:	3f01      	subs	r7, #1
 800c5ec:	e7e6      	b.n	800c5bc <__mdiff+0xec>
 800c5ee:	bf00      	nop
 800c5f0:	0800dcb6 	.word	0x0800dcb6
 800c5f4:	0800dcc7 	.word	0x0800dcc7

0800c5f8 <__d2b>:
 800c5f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	4690      	mov	r8, r2
 800c600:	4699      	mov	r9, r3
 800c602:	9e08      	ldr	r6, [sp, #32]
 800c604:	f7ff fcd0 	bl	800bfa8 <_Balloc>
 800c608:	4604      	mov	r4, r0
 800c60a:	b930      	cbnz	r0, 800c61a <__d2b+0x22>
 800c60c:	4602      	mov	r2, r0
 800c60e:	f240 310f 	movw	r1, #783	@ 0x30f
 800c612:	4b23      	ldr	r3, [pc, #140]	@ (800c6a0 <__d2b+0xa8>)
 800c614:	4823      	ldr	r0, [pc, #140]	@ (800c6a4 <__d2b+0xac>)
 800c616:	f000 fa6f 	bl	800caf8 <__assert_func>
 800c61a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c61e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c622:	b10d      	cbz	r5, 800c628 <__d2b+0x30>
 800c624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	f1b8 0300 	subs.w	r3, r8, #0
 800c62e:	d024      	beq.n	800c67a <__d2b+0x82>
 800c630:	4668      	mov	r0, sp
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	f7ff fd7f 	bl	800c136 <__lo0bits>
 800c638:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c63c:	b1d8      	cbz	r0, 800c676 <__d2b+0x7e>
 800c63e:	f1c0 0320 	rsb	r3, r0, #32
 800c642:	fa02 f303 	lsl.w	r3, r2, r3
 800c646:	430b      	orrs	r3, r1
 800c648:	40c2      	lsrs	r2, r0
 800c64a:	6163      	str	r3, [r4, #20]
 800c64c:	9201      	str	r2, [sp, #4]
 800c64e:	9b01      	ldr	r3, [sp, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	bf0c      	ite	eq
 800c654:	2201      	moveq	r2, #1
 800c656:	2202      	movne	r2, #2
 800c658:	61a3      	str	r3, [r4, #24]
 800c65a:	6122      	str	r2, [r4, #16]
 800c65c:	b1ad      	cbz	r5, 800c68a <__d2b+0x92>
 800c65e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c662:	4405      	add	r5, r0
 800c664:	6035      	str	r5, [r6, #0]
 800c666:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66c:	6018      	str	r0, [r3, #0]
 800c66e:	4620      	mov	r0, r4
 800c670:	b002      	add	sp, #8
 800c672:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c676:	6161      	str	r1, [r4, #20]
 800c678:	e7e9      	b.n	800c64e <__d2b+0x56>
 800c67a:	a801      	add	r0, sp, #4
 800c67c:	f7ff fd5b 	bl	800c136 <__lo0bits>
 800c680:	9b01      	ldr	r3, [sp, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	6163      	str	r3, [r4, #20]
 800c686:	3020      	adds	r0, #32
 800c688:	e7e7      	b.n	800c65a <__d2b+0x62>
 800c68a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c68e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c692:	6030      	str	r0, [r6, #0]
 800c694:	6918      	ldr	r0, [r3, #16]
 800c696:	f7ff fd2f 	bl	800c0f8 <__hi0bits>
 800c69a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c69e:	e7e4      	b.n	800c66a <__d2b+0x72>
 800c6a0:	0800dcb6 	.word	0x0800dcb6
 800c6a4:	0800dcc7 	.word	0x0800dcc7

0800c6a8 <__ssputs_r>:
 800c6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ac:	461f      	mov	r7, r3
 800c6ae:	688e      	ldr	r6, [r1, #8]
 800c6b0:	4682      	mov	sl, r0
 800c6b2:	42be      	cmp	r6, r7
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	4690      	mov	r8, r2
 800c6b8:	680b      	ldr	r3, [r1, #0]
 800c6ba:	d82d      	bhi.n	800c718 <__ssputs_r+0x70>
 800c6bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6c4:	d026      	beq.n	800c714 <__ssputs_r+0x6c>
 800c6c6:	6965      	ldr	r5, [r4, #20]
 800c6c8:	6909      	ldr	r1, [r1, #16]
 800c6ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6ce:	eba3 0901 	sub.w	r9, r3, r1
 800c6d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6d6:	1c7b      	adds	r3, r7, #1
 800c6d8:	444b      	add	r3, r9
 800c6da:	106d      	asrs	r5, r5, #1
 800c6dc:	429d      	cmp	r5, r3
 800c6de:	bf38      	it	cc
 800c6e0:	461d      	movcc	r5, r3
 800c6e2:	0553      	lsls	r3, r2, #21
 800c6e4:	d527      	bpl.n	800c736 <__ssputs_r+0x8e>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f7fd fecc 	bl	800a484 <_malloc_r>
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	b360      	cbz	r0, 800c74a <__ssputs_r+0xa2>
 800c6f0:	464a      	mov	r2, r9
 800c6f2:	6921      	ldr	r1, [r4, #16]
 800c6f4:	f000 f9f2 	bl	800cadc <memcpy>
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c702:	81a3      	strh	r3, [r4, #12]
 800c704:	6126      	str	r6, [r4, #16]
 800c706:	444e      	add	r6, r9
 800c708:	6026      	str	r6, [r4, #0]
 800c70a:	463e      	mov	r6, r7
 800c70c:	6165      	str	r5, [r4, #20]
 800c70e:	eba5 0509 	sub.w	r5, r5, r9
 800c712:	60a5      	str	r5, [r4, #8]
 800c714:	42be      	cmp	r6, r7
 800c716:	d900      	bls.n	800c71a <__ssputs_r+0x72>
 800c718:	463e      	mov	r6, r7
 800c71a:	4632      	mov	r2, r6
 800c71c:	4641      	mov	r1, r8
 800c71e:	6820      	ldr	r0, [r4, #0]
 800c720:	f000 f9c2 	bl	800caa8 <memmove>
 800c724:	2000      	movs	r0, #0
 800c726:	68a3      	ldr	r3, [r4, #8]
 800c728:	1b9b      	subs	r3, r3, r6
 800c72a:	60a3      	str	r3, [r4, #8]
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	4433      	add	r3, r6
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c736:	462a      	mov	r2, r5
 800c738:	f000 fa22 	bl	800cb80 <_realloc_r>
 800c73c:	4606      	mov	r6, r0
 800c73e:	2800      	cmp	r0, #0
 800c740:	d1e0      	bne.n	800c704 <__ssputs_r+0x5c>
 800c742:	4650      	mov	r0, sl
 800c744:	6921      	ldr	r1, [r4, #16]
 800c746:	f7ff fbe7 	bl	800bf18 <_free_r>
 800c74a:	230c      	movs	r3, #12
 800c74c:	f8ca 3000 	str.w	r3, [sl]
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f04f 30ff 	mov.w	r0, #4294967295
 800c756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c75a:	81a3      	strh	r3, [r4, #12]
 800c75c:	e7e9      	b.n	800c732 <__ssputs_r+0x8a>
	...

0800c760 <_svfiprintf_r>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	4698      	mov	r8, r3
 800c766:	898b      	ldrh	r3, [r1, #12]
 800c768:	4607      	mov	r7, r0
 800c76a:	061b      	lsls	r3, r3, #24
 800c76c:	460d      	mov	r5, r1
 800c76e:	4614      	mov	r4, r2
 800c770:	b09d      	sub	sp, #116	@ 0x74
 800c772:	d510      	bpl.n	800c796 <_svfiprintf_r+0x36>
 800c774:	690b      	ldr	r3, [r1, #16]
 800c776:	b973      	cbnz	r3, 800c796 <_svfiprintf_r+0x36>
 800c778:	2140      	movs	r1, #64	@ 0x40
 800c77a:	f7fd fe83 	bl	800a484 <_malloc_r>
 800c77e:	6028      	str	r0, [r5, #0]
 800c780:	6128      	str	r0, [r5, #16]
 800c782:	b930      	cbnz	r0, 800c792 <_svfiprintf_r+0x32>
 800c784:	230c      	movs	r3, #12
 800c786:	603b      	str	r3, [r7, #0]
 800c788:	f04f 30ff 	mov.w	r0, #4294967295
 800c78c:	b01d      	add	sp, #116	@ 0x74
 800c78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c792:	2340      	movs	r3, #64	@ 0x40
 800c794:	616b      	str	r3, [r5, #20]
 800c796:	2300      	movs	r3, #0
 800c798:	9309      	str	r3, [sp, #36]	@ 0x24
 800c79a:	2320      	movs	r3, #32
 800c79c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7a0:	2330      	movs	r3, #48	@ 0x30
 800c7a2:	f04f 0901 	mov.w	r9, #1
 800c7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c944 <_svfiprintf_r+0x1e4>
 800c7ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	469a      	mov	sl, r3
 800c7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ba:	b10a      	cbz	r2, 800c7c0 <_svfiprintf_r+0x60>
 800c7bc:	2a25      	cmp	r2, #37	@ 0x25
 800c7be:	d1f9      	bne.n	800c7b4 <_svfiprintf_r+0x54>
 800c7c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7c4:	d00b      	beq.n	800c7de <_svfiprintf_r+0x7e>
 800c7c6:	465b      	mov	r3, fp
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7ff ff6b 	bl	800c6a8 <__ssputs_r>
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f000 80a7 	beq.w	800c926 <_svfiprintf_r+0x1c6>
 800c7d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7da:	445a      	add	r2, fp
 800c7dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7de:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 809f 	beq.w	800c926 <_svfiprintf_r+0x1c6>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7f2:	f10a 0a01 	add.w	sl, sl, #1
 800c7f6:	9304      	str	r3, [sp, #16]
 800c7f8:	9307      	str	r3, [sp, #28]
 800c7fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800c800:	4654      	mov	r4, sl
 800c802:	2205      	movs	r2, #5
 800c804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c808:	484e      	ldr	r0, [pc, #312]	@ (800c944 <_svfiprintf_r+0x1e4>)
 800c80a:	f7fe fd24 	bl	800b256 <memchr>
 800c80e:	9a04      	ldr	r2, [sp, #16]
 800c810:	b9d8      	cbnz	r0, 800c84a <_svfiprintf_r+0xea>
 800c812:	06d0      	lsls	r0, r2, #27
 800c814:	bf44      	itt	mi
 800c816:	2320      	movmi	r3, #32
 800c818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c81c:	0711      	lsls	r1, r2, #28
 800c81e:	bf44      	itt	mi
 800c820:	232b      	movmi	r3, #43	@ 0x2b
 800c822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c826:	f89a 3000 	ldrb.w	r3, [sl]
 800c82a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c82c:	d015      	beq.n	800c85a <_svfiprintf_r+0xfa>
 800c82e:	4654      	mov	r4, sl
 800c830:	2000      	movs	r0, #0
 800c832:	f04f 0c0a 	mov.w	ip, #10
 800c836:	9a07      	ldr	r2, [sp, #28]
 800c838:	4621      	mov	r1, r4
 800c83a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c83e:	3b30      	subs	r3, #48	@ 0x30
 800c840:	2b09      	cmp	r3, #9
 800c842:	d94b      	bls.n	800c8dc <_svfiprintf_r+0x17c>
 800c844:	b1b0      	cbz	r0, 800c874 <_svfiprintf_r+0x114>
 800c846:	9207      	str	r2, [sp, #28]
 800c848:	e014      	b.n	800c874 <_svfiprintf_r+0x114>
 800c84a:	eba0 0308 	sub.w	r3, r0, r8
 800c84e:	fa09 f303 	lsl.w	r3, r9, r3
 800c852:	4313      	orrs	r3, r2
 800c854:	46a2      	mov	sl, r4
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	e7d2      	b.n	800c800 <_svfiprintf_r+0xa0>
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	1d19      	adds	r1, r3, #4
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	9103      	str	r1, [sp, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	bfbb      	ittet	lt
 800c866:	425b      	neglt	r3, r3
 800c868:	f042 0202 	orrlt.w	r2, r2, #2
 800c86c:	9307      	strge	r3, [sp, #28]
 800c86e:	9307      	strlt	r3, [sp, #28]
 800c870:	bfb8      	it	lt
 800c872:	9204      	strlt	r2, [sp, #16]
 800c874:	7823      	ldrb	r3, [r4, #0]
 800c876:	2b2e      	cmp	r3, #46	@ 0x2e
 800c878:	d10a      	bne.n	800c890 <_svfiprintf_r+0x130>
 800c87a:	7863      	ldrb	r3, [r4, #1]
 800c87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c87e:	d132      	bne.n	800c8e6 <_svfiprintf_r+0x186>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	3402      	adds	r4, #2
 800c884:	1d1a      	adds	r2, r3, #4
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	9203      	str	r2, [sp, #12]
 800c88a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c88e:	9305      	str	r3, [sp, #20]
 800c890:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c948 <_svfiprintf_r+0x1e8>
 800c894:	2203      	movs	r2, #3
 800c896:	4650      	mov	r0, sl
 800c898:	7821      	ldrb	r1, [r4, #0]
 800c89a:	f7fe fcdc 	bl	800b256 <memchr>
 800c89e:	b138      	cbz	r0, 800c8b0 <_svfiprintf_r+0x150>
 800c8a0:	2240      	movs	r2, #64	@ 0x40
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	eba0 000a 	sub.w	r0, r0, sl
 800c8a8:	4082      	lsls	r2, r0
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	3401      	adds	r4, #1
 800c8ae:	9304      	str	r3, [sp, #16]
 800c8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b4:	2206      	movs	r2, #6
 800c8b6:	4825      	ldr	r0, [pc, #148]	@ (800c94c <_svfiprintf_r+0x1ec>)
 800c8b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8bc:	f7fe fccb 	bl	800b256 <memchr>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d036      	beq.n	800c932 <_svfiprintf_r+0x1d2>
 800c8c4:	4b22      	ldr	r3, [pc, #136]	@ (800c950 <_svfiprintf_r+0x1f0>)
 800c8c6:	bb1b      	cbnz	r3, 800c910 <_svfiprintf_r+0x1b0>
 800c8c8:	9b03      	ldr	r3, [sp, #12]
 800c8ca:	3307      	adds	r3, #7
 800c8cc:	f023 0307 	bic.w	r3, r3, #7
 800c8d0:	3308      	adds	r3, #8
 800c8d2:	9303      	str	r3, [sp, #12]
 800c8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d6:	4433      	add	r3, r6
 800c8d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8da:	e76a      	b.n	800c7b2 <_svfiprintf_r+0x52>
 800c8dc:	460c      	mov	r4, r1
 800c8de:	2001      	movs	r0, #1
 800c8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e4:	e7a8      	b.n	800c838 <_svfiprintf_r+0xd8>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f04f 0c0a 	mov.w	ip, #10
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	3401      	adds	r4, #1
 800c8f0:	9305      	str	r3, [sp, #20]
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f8:	3a30      	subs	r2, #48	@ 0x30
 800c8fa:	2a09      	cmp	r2, #9
 800c8fc:	d903      	bls.n	800c906 <_svfiprintf_r+0x1a6>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d0c6      	beq.n	800c890 <_svfiprintf_r+0x130>
 800c902:	9105      	str	r1, [sp, #20]
 800c904:	e7c4      	b.n	800c890 <_svfiprintf_r+0x130>
 800c906:	4604      	mov	r4, r0
 800c908:	2301      	movs	r3, #1
 800c90a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c90e:	e7f0      	b.n	800c8f2 <_svfiprintf_r+0x192>
 800c910:	ab03      	add	r3, sp, #12
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	462a      	mov	r2, r5
 800c916:	4638      	mov	r0, r7
 800c918:	4b0e      	ldr	r3, [pc, #56]	@ (800c954 <_svfiprintf_r+0x1f4>)
 800c91a:	a904      	add	r1, sp, #16
 800c91c:	f7fd fedc 	bl	800a6d8 <_printf_float>
 800c920:	1c42      	adds	r2, r0, #1
 800c922:	4606      	mov	r6, r0
 800c924:	d1d6      	bne.n	800c8d4 <_svfiprintf_r+0x174>
 800c926:	89ab      	ldrh	r3, [r5, #12]
 800c928:	065b      	lsls	r3, r3, #25
 800c92a:	f53f af2d 	bmi.w	800c788 <_svfiprintf_r+0x28>
 800c92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c930:	e72c      	b.n	800c78c <_svfiprintf_r+0x2c>
 800c932:	ab03      	add	r3, sp, #12
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	462a      	mov	r2, r5
 800c938:	4638      	mov	r0, r7
 800c93a:	4b06      	ldr	r3, [pc, #24]	@ (800c954 <_svfiprintf_r+0x1f4>)
 800c93c:	a904      	add	r1, sp, #16
 800c93e:	f7fe f969 	bl	800ac14 <_printf_i>
 800c942:	e7ed      	b.n	800c920 <_svfiprintf_r+0x1c0>
 800c944:	0800de20 	.word	0x0800de20
 800c948:	0800de26 	.word	0x0800de26
 800c94c:	0800de2a 	.word	0x0800de2a
 800c950:	0800a6d9 	.word	0x0800a6d9
 800c954:	0800c6a9 	.word	0x0800c6a9

0800c958 <__sflush_r>:
 800c958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	0716      	lsls	r6, r2, #28
 800c960:	4605      	mov	r5, r0
 800c962:	460c      	mov	r4, r1
 800c964:	d454      	bmi.n	800ca10 <__sflush_r+0xb8>
 800c966:	684b      	ldr	r3, [r1, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	dc02      	bgt.n	800c972 <__sflush_r+0x1a>
 800c96c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	dd48      	ble.n	800ca04 <__sflush_r+0xac>
 800c972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c974:	2e00      	cmp	r6, #0
 800c976:	d045      	beq.n	800ca04 <__sflush_r+0xac>
 800c978:	2300      	movs	r3, #0
 800c97a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c97e:	682f      	ldr	r7, [r5, #0]
 800c980:	6a21      	ldr	r1, [r4, #32]
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	d030      	beq.n	800c9e8 <__sflush_r+0x90>
 800c986:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	0759      	lsls	r1, r3, #29
 800c98c:	d505      	bpl.n	800c99a <__sflush_r+0x42>
 800c98e:	6863      	ldr	r3, [r4, #4]
 800c990:	1ad2      	subs	r2, r2, r3
 800c992:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c994:	b10b      	cbz	r3, 800c99a <__sflush_r+0x42>
 800c996:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c998:	1ad2      	subs	r2, r2, r3
 800c99a:	2300      	movs	r3, #0
 800c99c:	4628      	mov	r0, r5
 800c99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9a0:	6a21      	ldr	r1, [r4, #32]
 800c9a2:	47b0      	blx	r6
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	89a3      	ldrh	r3, [r4, #12]
 800c9a8:	d106      	bne.n	800c9b8 <__sflush_r+0x60>
 800c9aa:	6829      	ldr	r1, [r5, #0]
 800c9ac:	291d      	cmp	r1, #29
 800c9ae:	d82b      	bhi.n	800ca08 <__sflush_r+0xb0>
 800c9b0:	4a28      	ldr	r2, [pc, #160]	@ (800ca54 <__sflush_r+0xfc>)
 800c9b2:	410a      	asrs	r2, r1
 800c9b4:	07d6      	lsls	r6, r2, #31
 800c9b6:	d427      	bmi.n	800ca08 <__sflush_r+0xb0>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	6062      	str	r2, [r4, #4]
 800c9bc:	6922      	ldr	r2, [r4, #16]
 800c9be:	04d9      	lsls	r1, r3, #19
 800c9c0:	6022      	str	r2, [r4, #0]
 800c9c2:	d504      	bpl.n	800c9ce <__sflush_r+0x76>
 800c9c4:	1c42      	adds	r2, r0, #1
 800c9c6:	d101      	bne.n	800c9cc <__sflush_r+0x74>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	b903      	cbnz	r3, 800c9ce <__sflush_r+0x76>
 800c9cc:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9d0:	602f      	str	r7, [r5, #0]
 800c9d2:	b1b9      	cbz	r1, 800ca04 <__sflush_r+0xac>
 800c9d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9d8:	4299      	cmp	r1, r3
 800c9da:	d002      	beq.n	800c9e2 <__sflush_r+0x8a>
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7ff fa9b 	bl	800bf18 <_free_r>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9e6:	e00d      	b.n	800ca04 <__sflush_r+0xac>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	47b0      	blx	r6
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	1c50      	adds	r0, r2, #1
 800c9f2:	d1c9      	bne.n	800c988 <__sflush_r+0x30>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0c6      	beq.n	800c988 <__sflush_r+0x30>
 800c9fa:	2b1d      	cmp	r3, #29
 800c9fc:	d001      	beq.n	800ca02 <__sflush_r+0xaa>
 800c9fe:	2b16      	cmp	r3, #22
 800ca00:	d11d      	bne.n	800ca3e <__sflush_r+0xe6>
 800ca02:	602f      	str	r7, [r5, #0]
 800ca04:	2000      	movs	r0, #0
 800ca06:	e021      	b.n	800ca4c <__sflush_r+0xf4>
 800ca08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca0c:	b21b      	sxth	r3, r3
 800ca0e:	e01a      	b.n	800ca46 <__sflush_r+0xee>
 800ca10:	690f      	ldr	r7, [r1, #16]
 800ca12:	2f00      	cmp	r7, #0
 800ca14:	d0f6      	beq.n	800ca04 <__sflush_r+0xac>
 800ca16:	0793      	lsls	r3, r2, #30
 800ca18:	bf18      	it	ne
 800ca1a:	2300      	movne	r3, #0
 800ca1c:	680e      	ldr	r6, [r1, #0]
 800ca1e:	bf08      	it	eq
 800ca20:	694b      	ldreq	r3, [r1, #20]
 800ca22:	1bf6      	subs	r6, r6, r7
 800ca24:	600f      	str	r7, [r1, #0]
 800ca26:	608b      	str	r3, [r1, #8]
 800ca28:	2e00      	cmp	r6, #0
 800ca2a:	ddeb      	ble.n	800ca04 <__sflush_r+0xac>
 800ca2c:	4633      	mov	r3, r6
 800ca2e:	463a      	mov	r2, r7
 800ca30:	4628      	mov	r0, r5
 800ca32:	6a21      	ldr	r1, [r4, #32]
 800ca34:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ca38:	47e0      	blx	ip
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	dc07      	bgt.n	800ca4e <__sflush_r+0xf6>
 800ca3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca46:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4e:	4407      	add	r7, r0
 800ca50:	1a36      	subs	r6, r6, r0
 800ca52:	e7e9      	b.n	800ca28 <__sflush_r+0xd0>
 800ca54:	dfbffffe 	.word	0xdfbffffe

0800ca58 <_fflush_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	690b      	ldr	r3, [r1, #16]
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	460c      	mov	r4, r1
 800ca60:	b913      	cbnz	r3, 800ca68 <_fflush_r+0x10>
 800ca62:	2500      	movs	r5, #0
 800ca64:	4628      	mov	r0, r5
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	b118      	cbz	r0, 800ca72 <_fflush_r+0x1a>
 800ca6a:	6a03      	ldr	r3, [r0, #32]
 800ca6c:	b90b      	cbnz	r3, 800ca72 <_fflush_r+0x1a>
 800ca6e:	f7fe fa7d 	bl	800af6c <__sinit>
 800ca72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0f3      	beq.n	800ca62 <_fflush_r+0xa>
 800ca7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca7c:	07d0      	lsls	r0, r2, #31
 800ca7e:	d404      	bmi.n	800ca8a <_fflush_r+0x32>
 800ca80:	0599      	lsls	r1, r3, #22
 800ca82:	d402      	bmi.n	800ca8a <_fflush_r+0x32>
 800ca84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca86:	f7fe fbdc 	bl	800b242 <__retarget_lock_acquire_recursive>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	f7ff ff63 	bl	800c958 <__sflush_r>
 800ca92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca94:	4605      	mov	r5, r0
 800ca96:	07da      	lsls	r2, r3, #31
 800ca98:	d4e4      	bmi.n	800ca64 <_fflush_r+0xc>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	059b      	lsls	r3, r3, #22
 800ca9e:	d4e1      	bmi.n	800ca64 <_fflush_r+0xc>
 800caa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caa2:	f7fe fbcf 	bl	800b244 <__retarget_lock_release_recursive>
 800caa6:	e7dd      	b.n	800ca64 <_fflush_r+0xc>

0800caa8 <memmove>:
 800caa8:	4288      	cmp	r0, r1
 800caaa:	b510      	push	{r4, lr}
 800caac:	eb01 0402 	add.w	r4, r1, r2
 800cab0:	d902      	bls.n	800cab8 <memmove+0x10>
 800cab2:	4284      	cmp	r4, r0
 800cab4:	4623      	mov	r3, r4
 800cab6:	d807      	bhi.n	800cac8 <memmove+0x20>
 800cab8:	1e43      	subs	r3, r0, #1
 800caba:	42a1      	cmp	r1, r4
 800cabc:	d008      	beq.n	800cad0 <memmove+0x28>
 800cabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cac6:	e7f8      	b.n	800caba <memmove+0x12>
 800cac8:	4601      	mov	r1, r0
 800caca:	4402      	add	r2, r0
 800cacc:	428a      	cmp	r2, r1
 800cace:	d100      	bne.n	800cad2 <memmove+0x2a>
 800cad0:	bd10      	pop	{r4, pc}
 800cad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cada:	e7f7      	b.n	800cacc <memmove+0x24>

0800cadc <memcpy>:
 800cadc:	440a      	add	r2, r1
 800cade:	4291      	cmp	r1, r2
 800cae0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae4:	d100      	bne.n	800cae8 <memcpy+0xc>
 800cae6:	4770      	bx	lr
 800cae8:	b510      	push	{r4, lr}
 800caea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caee:	4291      	cmp	r1, r2
 800caf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf4:	d1f9      	bne.n	800caea <memcpy+0xe>
 800caf6:	bd10      	pop	{r4, pc}

0800caf8 <__assert_func>:
 800caf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafa:	4614      	mov	r4, r2
 800cafc:	461a      	mov	r2, r3
 800cafe:	4b09      	ldr	r3, [pc, #36]	@ (800cb24 <__assert_func+0x2c>)
 800cb00:	4605      	mov	r5, r0
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68d8      	ldr	r0, [r3, #12]
 800cb06:	b954      	cbnz	r4, 800cb1e <__assert_func+0x26>
 800cb08:	4b07      	ldr	r3, [pc, #28]	@ (800cb28 <__assert_func+0x30>)
 800cb0a:	461c      	mov	r4, r3
 800cb0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb10:	9100      	str	r1, [sp, #0]
 800cb12:	462b      	mov	r3, r5
 800cb14:	4905      	ldr	r1, [pc, #20]	@ (800cb2c <__assert_func+0x34>)
 800cb16:	f000 f86f 	bl	800cbf8 <fiprintf>
 800cb1a:	f7fd fc79 	bl	800a410 <abort>
 800cb1e:	4b04      	ldr	r3, [pc, #16]	@ (800cb30 <__assert_func+0x38>)
 800cb20:	e7f4      	b.n	800cb0c <__assert_func+0x14>
 800cb22:	bf00      	nop
 800cb24:	2000001c 	.word	0x2000001c
 800cb28:	0800de76 	.word	0x0800de76
 800cb2c:	0800de48 	.word	0x0800de48
 800cb30:	0800de3b 	.word	0x0800de3b

0800cb34 <_calloc_r>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	fba1 5402 	umull	r5, r4, r1, r2
 800cb3a:	b93c      	cbnz	r4, 800cb4c <_calloc_r+0x18>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7fd fca1 	bl	800a484 <_malloc_r>
 800cb42:	4606      	mov	r6, r0
 800cb44:	b928      	cbnz	r0, 800cb52 <_calloc_r+0x1e>
 800cb46:	2600      	movs	r6, #0
 800cb48:	4630      	mov	r0, r6
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	220c      	movs	r2, #12
 800cb4e:	6002      	str	r2, [r0, #0]
 800cb50:	e7f9      	b.n	800cb46 <_calloc_r+0x12>
 800cb52:	462a      	mov	r2, r5
 800cb54:	4621      	mov	r1, r4
 800cb56:	f7fe faa2 	bl	800b09e <memset>
 800cb5a:	e7f5      	b.n	800cb48 <_calloc_r+0x14>

0800cb5c <__ascii_mbtowc>:
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	b901      	cbnz	r1, 800cb62 <__ascii_mbtowc+0x6>
 800cb60:	a901      	add	r1, sp, #4
 800cb62:	b142      	cbz	r2, 800cb76 <__ascii_mbtowc+0x1a>
 800cb64:	b14b      	cbz	r3, 800cb7a <__ascii_mbtowc+0x1e>
 800cb66:	7813      	ldrb	r3, [r2, #0]
 800cb68:	600b      	str	r3, [r1, #0]
 800cb6a:	7812      	ldrb	r2, [r2, #0]
 800cb6c:	1e10      	subs	r0, r2, #0
 800cb6e:	bf18      	it	ne
 800cb70:	2001      	movne	r0, #1
 800cb72:	b002      	add	sp, #8
 800cb74:	4770      	bx	lr
 800cb76:	4610      	mov	r0, r2
 800cb78:	e7fb      	b.n	800cb72 <__ascii_mbtowc+0x16>
 800cb7a:	f06f 0001 	mvn.w	r0, #1
 800cb7e:	e7f8      	b.n	800cb72 <__ascii_mbtowc+0x16>

0800cb80 <_realloc_r>:
 800cb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb84:	4680      	mov	r8, r0
 800cb86:	4615      	mov	r5, r2
 800cb88:	460c      	mov	r4, r1
 800cb8a:	b921      	cbnz	r1, 800cb96 <_realloc_r+0x16>
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb92:	f7fd bc77 	b.w	800a484 <_malloc_r>
 800cb96:	b92a      	cbnz	r2, 800cba4 <_realloc_r+0x24>
 800cb98:	f7ff f9be 	bl	800bf18 <_free_r>
 800cb9c:	2400      	movs	r4, #0
 800cb9e:	4620      	mov	r0, r4
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	f000 f83a 	bl	800cc1c <_malloc_usable_size_r>
 800cba8:	4285      	cmp	r5, r0
 800cbaa:	4606      	mov	r6, r0
 800cbac:	d802      	bhi.n	800cbb4 <_realloc_r+0x34>
 800cbae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbb2:	d8f4      	bhi.n	800cb9e <_realloc_r+0x1e>
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	f7fd fc64 	bl	800a484 <_malloc_r>
 800cbbc:	4607      	mov	r7, r0
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d0ec      	beq.n	800cb9c <_realloc_r+0x1c>
 800cbc2:	42b5      	cmp	r5, r6
 800cbc4:	462a      	mov	r2, r5
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	bf28      	it	cs
 800cbca:	4632      	movcs	r2, r6
 800cbcc:	f7ff ff86 	bl	800cadc <memcpy>
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	f7ff f9a0 	bl	800bf18 <_free_r>
 800cbd8:	463c      	mov	r4, r7
 800cbda:	e7e0      	b.n	800cb9e <_realloc_r+0x1e>

0800cbdc <__ascii_wctomb>:
 800cbdc:	4603      	mov	r3, r0
 800cbde:	4608      	mov	r0, r1
 800cbe0:	b141      	cbz	r1, 800cbf4 <__ascii_wctomb+0x18>
 800cbe2:	2aff      	cmp	r2, #255	@ 0xff
 800cbe4:	d904      	bls.n	800cbf0 <__ascii_wctomb+0x14>
 800cbe6:	228a      	movs	r2, #138	@ 0x8a
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	4770      	bx	lr
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	700a      	strb	r2, [r1, #0]
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <fiprintf>:
 800cbf8:	b40e      	push	{r1, r2, r3}
 800cbfa:	b503      	push	{r0, r1, lr}
 800cbfc:	4601      	mov	r1, r0
 800cbfe:	ab03      	add	r3, sp, #12
 800cc00:	4805      	ldr	r0, [pc, #20]	@ (800cc18 <fiprintf+0x20>)
 800cc02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc06:	6800      	ldr	r0, [r0, #0]
 800cc08:	9301      	str	r3, [sp, #4]
 800cc0a:	f000 f837 	bl	800cc7c <_vfiprintf_r>
 800cc0e:	b002      	add	sp, #8
 800cc10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc14:	b003      	add	sp, #12
 800cc16:	4770      	bx	lr
 800cc18:	2000001c 	.word	0x2000001c

0800cc1c <_malloc_usable_size_r>:
 800cc1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc20:	1f18      	subs	r0, r3, #4
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	bfbc      	itt	lt
 800cc26:	580b      	ldrlt	r3, [r1, r0]
 800cc28:	18c0      	addlt	r0, r0, r3
 800cc2a:	4770      	bx	lr

0800cc2c <__sfputc_r>:
 800cc2c:	6893      	ldr	r3, [r2, #8]
 800cc2e:	b410      	push	{r4}
 800cc30:	3b01      	subs	r3, #1
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	6093      	str	r3, [r2, #8]
 800cc36:	da07      	bge.n	800cc48 <__sfputc_r+0x1c>
 800cc38:	6994      	ldr	r4, [r2, #24]
 800cc3a:	42a3      	cmp	r3, r4
 800cc3c:	db01      	blt.n	800cc42 <__sfputc_r+0x16>
 800cc3e:	290a      	cmp	r1, #10
 800cc40:	d102      	bne.n	800cc48 <__sfputc_r+0x1c>
 800cc42:	bc10      	pop	{r4}
 800cc44:	f000 b932 	b.w	800ceac <__swbuf_r>
 800cc48:	6813      	ldr	r3, [r2, #0]
 800cc4a:	1c58      	adds	r0, r3, #1
 800cc4c:	6010      	str	r0, [r2, #0]
 800cc4e:	7019      	strb	r1, [r3, #0]
 800cc50:	4608      	mov	r0, r1
 800cc52:	bc10      	pop	{r4}
 800cc54:	4770      	bx	lr

0800cc56 <__sfputs_r>:
 800cc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc58:	4606      	mov	r6, r0
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	4614      	mov	r4, r2
 800cc5e:	18d5      	adds	r5, r2, r3
 800cc60:	42ac      	cmp	r4, r5
 800cc62:	d101      	bne.n	800cc68 <__sfputs_r+0x12>
 800cc64:	2000      	movs	r0, #0
 800cc66:	e007      	b.n	800cc78 <__sfputs_r+0x22>
 800cc68:	463a      	mov	r2, r7
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc70:	f7ff ffdc 	bl	800cc2c <__sfputc_r>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d1f3      	bne.n	800cc60 <__sfputs_r+0xa>
 800cc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc7c <_vfiprintf_r>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	460d      	mov	r5, r1
 800cc82:	4614      	mov	r4, r2
 800cc84:	4698      	mov	r8, r3
 800cc86:	4606      	mov	r6, r0
 800cc88:	b09d      	sub	sp, #116	@ 0x74
 800cc8a:	b118      	cbz	r0, 800cc94 <_vfiprintf_r+0x18>
 800cc8c:	6a03      	ldr	r3, [r0, #32]
 800cc8e:	b90b      	cbnz	r3, 800cc94 <_vfiprintf_r+0x18>
 800cc90:	f7fe f96c 	bl	800af6c <__sinit>
 800cc94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc96:	07d9      	lsls	r1, r3, #31
 800cc98:	d405      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cc9a:	89ab      	ldrh	r3, [r5, #12]
 800cc9c:	059a      	lsls	r2, r3, #22
 800cc9e:	d402      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cca2:	f7fe face 	bl	800b242 <__retarget_lock_acquire_recursive>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	071b      	lsls	r3, r3, #28
 800ccaa:	d501      	bpl.n	800ccb0 <_vfiprintf_r+0x34>
 800ccac:	692b      	ldr	r3, [r5, #16]
 800ccae:	b99b      	cbnz	r3, 800ccd8 <_vfiprintf_r+0x5c>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f000 f938 	bl	800cf28 <__swsetup_r>
 800ccb8:	b170      	cbz	r0, 800ccd8 <_vfiprintf_r+0x5c>
 800ccba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccbc:	07dc      	lsls	r4, r3, #31
 800ccbe:	d504      	bpl.n	800ccca <_vfiprintf_r+0x4e>
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	b01d      	add	sp, #116	@ 0x74
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	89ab      	ldrh	r3, [r5, #12]
 800cccc:	0598      	lsls	r0, r3, #22
 800ccce:	d4f7      	bmi.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccd2:	f7fe fab7 	bl	800b244 <__retarget_lock_release_recursive>
 800ccd6:	e7f3      	b.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cce2:	2330      	movs	r3, #48	@ 0x30
 800cce4:	f04f 0901 	mov.w	r9, #1
 800cce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ce98 <_vfiprintf_r+0x21c>
 800ccf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccf4:	4623      	mov	r3, r4
 800ccf6:	469a      	mov	sl, r3
 800ccf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfc:	b10a      	cbz	r2, 800cd02 <_vfiprintf_r+0x86>
 800ccfe:	2a25      	cmp	r2, #37	@ 0x25
 800cd00:	d1f9      	bne.n	800ccf6 <_vfiprintf_r+0x7a>
 800cd02:	ebba 0b04 	subs.w	fp, sl, r4
 800cd06:	d00b      	beq.n	800cd20 <_vfiprintf_r+0xa4>
 800cd08:	465b      	mov	r3, fp
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ffa1 	bl	800cc56 <__sfputs_r>
 800cd14:	3001      	adds	r0, #1
 800cd16:	f000 80a7 	beq.w	800ce68 <_vfiprintf_r+0x1ec>
 800cd1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd1c:	445a      	add	r2, fp
 800cd1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd20:	f89a 3000 	ldrb.w	r3, [sl]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 809f 	beq.w	800ce68 <_vfiprintf_r+0x1ec>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd34:	f10a 0a01 	add.w	sl, sl, #1
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	9307      	str	r3, [sp, #28]
 800cd3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd40:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd42:	4654      	mov	r4, sl
 800cd44:	2205      	movs	r2, #5
 800cd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4a:	4853      	ldr	r0, [pc, #332]	@ (800ce98 <_vfiprintf_r+0x21c>)
 800cd4c:	f7fe fa83 	bl	800b256 <memchr>
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	b9d8      	cbnz	r0, 800cd8c <_vfiprintf_r+0x110>
 800cd54:	06d1      	lsls	r1, r2, #27
 800cd56:	bf44      	itt	mi
 800cd58:	2320      	movmi	r3, #32
 800cd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd5e:	0713      	lsls	r3, r2, #28
 800cd60:	bf44      	itt	mi
 800cd62:	232b      	movmi	r3, #43	@ 0x2b
 800cd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd6e:	d015      	beq.n	800cd9c <_vfiprintf_r+0x120>
 800cd70:	4654      	mov	r4, sl
 800cd72:	2000      	movs	r0, #0
 800cd74:	f04f 0c0a 	mov.w	ip, #10
 800cd78:	9a07      	ldr	r2, [sp, #28]
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd80:	3b30      	subs	r3, #48	@ 0x30
 800cd82:	2b09      	cmp	r3, #9
 800cd84:	d94b      	bls.n	800ce1e <_vfiprintf_r+0x1a2>
 800cd86:	b1b0      	cbz	r0, 800cdb6 <_vfiprintf_r+0x13a>
 800cd88:	9207      	str	r2, [sp, #28]
 800cd8a:	e014      	b.n	800cdb6 <_vfiprintf_r+0x13a>
 800cd8c:	eba0 0308 	sub.w	r3, r0, r8
 800cd90:	fa09 f303 	lsl.w	r3, r9, r3
 800cd94:	4313      	orrs	r3, r2
 800cd96:	46a2      	mov	sl, r4
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	e7d2      	b.n	800cd42 <_vfiprintf_r+0xc6>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	1d19      	adds	r1, r3, #4
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	9103      	str	r1, [sp, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfbb      	ittet	lt
 800cda8:	425b      	neglt	r3, r3
 800cdaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdae:	9307      	strge	r3, [sp, #28]
 800cdb0:	9307      	strlt	r3, [sp, #28]
 800cdb2:	bfb8      	it	lt
 800cdb4:	9204      	strlt	r2, [sp, #16]
 800cdb6:	7823      	ldrb	r3, [r4, #0]
 800cdb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdba:	d10a      	bne.n	800cdd2 <_vfiprintf_r+0x156>
 800cdbc:	7863      	ldrb	r3, [r4, #1]
 800cdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdc0:	d132      	bne.n	800ce28 <_vfiprintf_r+0x1ac>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	3402      	adds	r4, #2
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	9203      	str	r2, [sp, #12]
 800cdcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ce9c <_vfiprintf_r+0x220>
 800cdd6:	2203      	movs	r2, #3
 800cdd8:	4650      	mov	r0, sl
 800cdda:	7821      	ldrb	r1, [r4, #0]
 800cddc:	f7fe fa3b 	bl	800b256 <memchr>
 800cde0:	b138      	cbz	r0, 800cdf2 <_vfiprintf_r+0x176>
 800cde2:	2240      	movs	r2, #64	@ 0x40
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	eba0 000a 	sub.w	r0, r0, sl
 800cdea:	4082      	lsls	r2, r0
 800cdec:	4313      	orrs	r3, r2
 800cdee:	3401      	adds	r4, #1
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf6:	2206      	movs	r2, #6
 800cdf8:	4829      	ldr	r0, [pc, #164]	@ (800cea0 <_vfiprintf_r+0x224>)
 800cdfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdfe:	f7fe fa2a 	bl	800b256 <memchr>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d03f      	beq.n	800ce86 <_vfiprintf_r+0x20a>
 800ce06:	4b27      	ldr	r3, [pc, #156]	@ (800cea4 <_vfiprintf_r+0x228>)
 800ce08:	bb1b      	cbnz	r3, 800ce52 <_vfiprintf_r+0x1d6>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	3307      	adds	r3, #7
 800ce0e:	f023 0307 	bic.w	r3, r3, #7
 800ce12:	3308      	adds	r3, #8
 800ce14:	9303      	str	r3, [sp, #12]
 800ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce18:	443b      	add	r3, r7
 800ce1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce1c:	e76a      	b.n	800ccf4 <_vfiprintf_r+0x78>
 800ce1e:	460c      	mov	r4, r1
 800ce20:	2001      	movs	r0, #1
 800ce22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce26:	e7a8      	b.n	800cd7a <_vfiprintf_r+0xfe>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f04f 0c0a 	mov.w	ip, #10
 800ce2e:	4619      	mov	r1, r3
 800ce30:	3401      	adds	r4, #1
 800ce32:	9305      	str	r3, [sp, #20]
 800ce34:	4620      	mov	r0, r4
 800ce36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce3a:	3a30      	subs	r2, #48	@ 0x30
 800ce3c:	2a09      	cmp	r2, #9
 800ce3e:	d903      	bls.n	800ce48 <_vfiprintf_r+0x1cc>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0c6      	beq.n	800cdd2 <_vfiprintf_r+0x156>
 800ce44:	9105      	str	r1, [sp, #20]
 800ce46:	e7c4      	b.n	800cdd2 <_vfiprintf_r+0x156>
 800ce48:	4604      	mov	r4, r0
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce50:	e7f0      	b.n	800ce34 <_vfiprintf_r+0x1b8>
 800ce52:	ab03      	add	r3, sp, #12
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	462a      	mov	r2, r5
 800ce58:	4630      	mov	r0, r6
 800ce5a:	4b13      	ldr	r3, [pc, #76]	@ (800cea8 <_vfiprintf_r+0x22c>)
 800ce5c:	a904      	add	r1, sp, #16
 800ce5e:	f7fd fc3b 	bl	800a6d8 <_printf_float>
 800ce62:	4607      	mov	r7, r0
 800ce64:	1c78      	adds	r0, r7, #1
 800ce66:	d1d6      	bne.n	800ce16 <_vfiprintf_r+0x19a>
 800ce68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce6a:	07d9      	lsls	r1, r3, #31
 800ce6c:	d405      	bmi.n	800ce7a <_vfiprintf_r+0x1fe>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	059a      	lsls	r2, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_vfiprintf_r+0x1fe>
 800ce74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce76:	f7fe f9e5 	bl	800b244 <__retarget_lock_release_recursive>
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	065b      	lsls	r3, r3, #25
 800ce7e:	f53f af1f 	bmi.w	800ccc0 <_vfiprintf_r+0x44>
 800ce82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce84:	e71e      	b.n	800ccc4 <_vfiprintf_r+0x48>
 800ce86:	ab03      	add	r3, sp, #12
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <_vfiprintf_r+0x22c>)
 800ce90:	a904      	add	r1, sp, #16
 800ce92:	f7fd febf 	bl	800ac14 <_printf_i>
 800ce96:	e7e4      	b.n	800ce62 <_vfiprintf_r+0x1e6>
 800ce98:	0800de20 	.word	0x0800de20
 800ce9c:	0800de26 	.word	0x0800de26
 800cea0:	0800de2a 	.word	0x0800de2a
 800cea4:	0800a6d9 	.word	0x0800a6d9
 800cea8:	0800cc57 	.word	0x0800cc57

0800ceac <__swbuf_r>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	460e      	mov	r6, r1
 800ceb0:	4614      	mov	r4, r2
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	b118      	cbz	r0, 800cebe <__swbuf_r+0x12>
 800ceb6:	6a03      	ldr	r3, [r0, #32]
 800ceb8:	b90b      	cbnz	r3, 800cebe <__swbuf_r+0x12>
 800ceba:	f7fe f857 	bl	800af6c <__sinit>
 800cebe:	69a3      	ldr	r3, [r4, #24]
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	071a      	lsls	r2, r3, #28
 800cec6:	d501      	bpl.n	800cecc <__swbuf_r+0x20>
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	b943      	cbnz	r3, 800cede <__swbuf_r+0x32>
 800cecc:	4621      	mov	r1, r4
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 f82a 	bl	800cf28 <__swsetup_r>
 800ced4:	b118      	cbz	r0, 800cede <__swbuf_r+0x32>
 800ced6:	f04f 37ff 	mov.w	r7, #4294967295
 800ceda:	4638      	mov	r0, r7
 800cedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	6922      	ldr	r2, [r4, #16]
 800cee2:	b2f6      	uxtb	r6, r6
 800cee4:	1a98      	subs	r0, r3, r2
 800cee6:	6963      	ldr	r3, [r4, #20]
 800cee8:	4637      	mov	r7, r6
 800ceea:	4283      	cmp	r3, r0
 800ceec:	dc05      	bgt.n	800cefa <__swbuf_r+0x4e>
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f7ff fdb1 	bl	800ca58 <_fflush_r>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d1ed      	bne.n	800ced6 <__swbuf_r+0x2a>
 800cefa:	68a3      	ldr	r3, [r4, #8]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	60a3      	str	r3, [r4, #8]
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	6022      	str	r2, [r4, #0]
 800cf06:	701e      	strb	r6, [r3, #0]
 800cf08:	6962      	ldr	r2, [r4, #20]
 800cf0a:	1c43      	adds	r3, r0, #1
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d004      	beq.n	800cf1a <__swbuf_r+0x6e>
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	07db      	lsls	r3, r3, #31
 800cf14:	d5e1      	bpl.n	800ceda <__swbuf_r+0x2e>
 800cf16:	2e0a      	cmp	r6, #10
 800cf18:	d1df      	bne.n	800ceda <__swbuf_r+0x2e>
 800cf1a:	4621      	mov	r1, r4
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f7ff fd9b 	bl	800ca58 <_fflush_r>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0d9      	beq.n	800ceda <__swbuf_r+0x2e>
 800cf26:	e7d6      	b.n	800ced6 <__swbuf_r+0x2a>

0800cf28 <__swsetup_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4b29      	ldr	r3, [pc, #164]	@ (800cfd0 <__swsetup_r+0xa8>)
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	460c      	mov	r4, r1
 800cf32:	b118      	cbz	r0, 800cf3c <__swsetup_r+0x14>
 800cf34:	6a03      	ldr	r3, [r0, #32]
 800cf36:	b90b      	cbnz	r3, 800cf3c <__swsetup_r+0x14>
 800cf38:	f7fe f818 	bl	800af6c <__sinit>
 800cf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf40:	0719      	lsls	r1, r3, #28
 800cf42:	d422      	bmi.n	800cf8a <__swsetup_r+0x62>
 800cf44:	06da      	lsls	r2, r3, #27
 800cf46:	d407      	bmi.n	800cf58 <__swsetup_r+0x30>
 800cf48:	2209      	movs	r2, #9
 800cf4a:	602a      	str	r2, [r5, #0]
 800cf4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	81a3      	strh	r3, [r4, #12]
 800cf56:	e033      	b.n	800cfc0 <__swsetup_r+0x98>
 800cf58:	0758      	lsls	r0, r3, #29
 800cf5a:	d512      	bpl.n	800cf82 <__swsetup_r+0x5a>
 800cf5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf5e:	b141      	cbz	r1, 800cf72 <__swsetup_r+0x4a>
 800cf60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf64:	4299      	cmp	r1, r3
 800cf66:	d002      	beq.n	800cf6e <__swsetup_r+0x46>
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f7fe ffd5 	bl	800bf18 <_free_r>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	6063      	str	r3, [r4, #4]
 800cf7e:	6923      	ldr	r3, [r4, #16]
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	f043 0308 	orr.w	r3, r3, #8
 800cf88:	81a3      	strh	r3, [r4, #12]
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	b94b      	cbnz	r3, 800cfa2 <__swsetup_r+0x7a>
 800cf8e:	89a3      	ldrh	r3, [r4, #12]
 800cf90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf98:	d003      	beq.n	800cfa2 <__swsetup_r+0x7a>
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 f83e 	bl	800d01e <__smakebuf_r>
 800cfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa6:	f013 0201 	ands.w	r2, r3, #1
 800cfaa:	d00a      	beq.n	800cfc2 <__swsetup_r+0x9a>
 800cfac:	2200      	movs	r2, #0
 800cfae:	60a2      	str	r2, [r4, #8]
 800cfb0:	6962      	ldr	r2, [r4, #20]
 800cfb2:	4252      	negs	r2, r2
 800cfb4:	61a2      	str	r2, [r4, #24]
 800cfb6:	6922      	ldr	r2, [r4, #16]
 800cfb8:	b942      	cbnz	r2, 800cfcc <__swsetup_r+0xa4>
 800cfba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfbe:	d1c5      	bne.n	800cf4c <__swsetup_r+0x24>
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	0799      	lsls	r1, r3, #30
 800cfc4:	bf58      	it	pl
 800cfc6:	6962      	ldrpl	r2, [r4, #20]
 800cfc8:	60a2      	str	r2, [r4, #8]
 800cfca:	e7f4      	b.n	800cfb6 <__swsetup_r+0x8e>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	e7f7      	b.n	800cfc0 <__swsetup_r+0x98>
 800cfd0:	2000001c 	.word	0x2000001c

0800cfd4 <__swhatbuf_r>:
 800cfd4:	b570      	push	{r4, r5, r6, lr}
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfdc:	4615      	mov	r5, r2
 800cfde:	2900      	cmp	r1, #0
 800cfe0:	461e      	mov	r6, r3
 800cfe2:	b096      	sub	sp, #88	@ 0x58
 800cfe4:	da0c      	bge.n	800d000 <__swhatbuf_r+0x2c>
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	2100      	movs	r1, #0
 800cfea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfee:	bf14      	ite	ne
 800cff0:	2340      	movne	r3, #64	@ 0x40
 800cff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cff6:	2000      	movs	r0, #0
 800cff8:	6031      	str	r1, [r6, #0]
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	b016      	add	sp, #88	@ 0x58
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	466a      	mov	r2, sp
 800d002:	f000 f849 	bl	800d098 <_fstat_r>
 800d006:	2800      	cmp	r0, #0
 800d008:	dbed      	blt.n	800cfe6 <__swhatbuf_r+0x12>
 800d00a:	9901      	ldr	r1, [sp, #4]
 800d00c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d014:	4259      	negs	r1, r3
 800d016:	4159      	adcs	r1, r3
 800d018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d01c:	e7eb      	b.n	800cff6 <__swhatbuf_r+0x22>

0800d01e <__smakebuf_r>:
 800d01e:	898b      	ldrh	r3, [r1, #12]
 800d020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d022:	079d      	lsls	r5, r3, #30
 800d024:	4606      	mov	r6, r0
 800d026:	460c      	mov	r4, r1
 800d028:	d507      	bpl.n	800d03a <__smakebuf_r+0x1c>
 800d02a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d02e:	6023      	str	r3, [r4, #0]
 800d030:	6123      	str	r3, [r4, #16]
 800d032:	2301      	movs	r3, #1
 800d034:	6163      	str	r3, [r4, #20]
 800d036:	b003      	add	sp, #12
 800d038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d03a:	466a      	mov	r2, sp
 800d03c:	ab01      	add	r3, sp, #4
 800d03e:	f7ff ffc9 	bl	800cfd4 <__swhatbuf_r>
 800d042:	9f00      	ldr	r7, [sp, #0]
 800d044:	4605      	mov	r5, r0
 800d046:	4639      	mov	r1, r7
 800d048:	4630      	mov	r0, r6
 800d04a:	f7fd fa1b 	bl	800a484 <_malloc_r>
 800d04e:	b948      	cbnz	r0, 800d064 <__smakebuf_r+0x46>
 800d050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d054:	059a      	lsls	r2, r3, #22
 800d056:	d4ee      	bmi.n	800d036 <__smakebuf_r+0x18>
 800d058:	f023 0303 	bic.w	r3, r3, #3
 800d05c:	f043 0302 	orr.w	r3, r3, #2
 800d060:	81a3      	strh	r3, [r4, #12]
 800d062:	e7e2      	b.n	800d02a <__smakebuf_r+0xc>
 800d064:	89a3      	ldrh	r3, [r4, #12]
 800d066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d06e:	81a3      	strh	r3, [r4, #12]
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	6020      	str	r0, [r4, #0]
 800d074:	b15b      	cbz	r3, 800d08e <__smakebuf_r+0x70>
 800d076:	4630      	mov	r0, r6
 800d078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d07c:	f000 f81e 	bl	800d0bc <_isatty_r>
 800d080:	b128      	cbz	r0, 800d08e <__smakebuf_r+0x70>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	f023 0303 	bic.w	r3, r3, #3
 800d088:	f043 0301 	orr.w	r3, r3, #1
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	431d      	orrs	r5, r3
 800d092:	81a5      	strh	r5, [r4, #12]
 800d094:	e7cf      	b.n	800d036 <__smakebuf_r+0x18>
	...

0800d098 <_fstat_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	2300      	movs	r3, #0
 800d09c:	4d06      	ldr	r5, [pc, #24]	@ (800d0b8 <_fstat_r+0x20>)
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	602b      	str	r3, [r5, #0]
 800d0a6:	f7fa fa1d 	bl	80074e4 <_fstat>
 800d0aa:	1c43      	adds	r3, r0, #1
 800d0ac:	d102      	bne.n	800d0b4 <_fstat_r+0x1c>
 800d0ae:	682b      	ldr	r3, [r5, #0]
 800d0b0:	b103      	cbz	r3, 800d0b4 <_fstat_r+0x1c>
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20000560 	.word	0x20000560

0800d0bc <_isatty_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	2300      	movs	r3, #0
 800d0c0:	4d05      	ldr	r5, [pc, #20]	@ (800d0d8 <_isatty_r+0x1c>)
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	f7fa fa1b 	bl	8007502 <_isatty>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_isatty_r+0x1a>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_isatty_r+0x1a>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	20000560 	.word	0x20000560

0800d0dc <_init>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	bf00      	nop
 800d0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e2:	bc08      	pop	{r3}
 800d0e4:	469e      	mov	lr, r3
 800d0e6:	4770      	bx	lr

0800d0e8 <_fini>:
 800d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ea:	bf00      	nop
 800d0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ee:	bc08      	pop	{r3}
 800d0f0:	469e      	mov	lr, r3
 800d0f2:	4770      	bx	lr
